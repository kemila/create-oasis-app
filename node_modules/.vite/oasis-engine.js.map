{
  "version": 3,
  "sources": ["../@oasis-engine/math/src/enums/ContainmentType.ts", "../@oasis-engine/math/src/enums/PlaneIntersectionType.ts", "../@oasis-engine/math/src/MathUtil.ts", "../@oasis-engine/math/src/Vector3.ts", "../@oasis-engine/math/src/BoundingSphere.ts", "../@oasis-engine/math/src/BoundingBox.ts", "../@oasis-engine/math/src/CollisionUtil.ts", "../@oasis-engine/math/src/Plane.ts", "../@oasis-engine/math/src/BoundingFrustum.ts", "../@oasis-engine/math/src/Matrix3x3.ts", "../@oasis-engine/math/src/Quaternion.ts", "../@oasis-engine/math/src/Matrix.ts", "../@oasis-engine/math/src/Ray.ts", "../@oasis-engine/math/src/Spherical.ts", "../@oasis-engine/math/src/Vector2.ts", "../@oasis-engine/math/src/Vector4.ts", "../@oasis-engine/math/src/Color.ts", "../@oasis-engine/core/src/asset/AssetPromise.ts", "../@oasis-engine/core/src/base/Util.ts", "../@oasis-engine/core/src/asset/ResourceManager.ts", "../@oasis-engine/core/src/base/Event.ts", "../@oasis-engine/core/src/clone/enums/CloneMode.ts", "../@oasis-engine/core/src/clone/CloneManager.ts", "../@oasis-engine/core/src/base/EngineObject.ts", "../@oasis-engine/core/src/base/EventDispatcher.ts", "../@oasis-engine/core/src/base/Logger.ts", "../@oasis-engine/core/src/base/Time.ts", "../@oasis-engine/core/src/base/Constant.ts", "../@oasis-engine/core/src/DisorderedArray.ts", "../@oasis-engine/core/src/shader/ShaderMacroCollection.ts", "../@oasis-engine/core/src/ComponentsManager.ts", "../@oasis-engine/core/src/clone/ComponentCloner.ts", "../@oasis-engine/core/src/ComponentsDependencies.ts", "../@oasis-engine/core/src/Layer.ts", "../@oasis-engine/core/src/Component.ts", "../@oasis-engine/core/src/UpdateFlag.ts", "../@oasis-engine/core/src/Transform.ts", "../@oasis-engine/core/src/Entity.ts", "../@oasis-engine/core/src/FeatureManager.ts", "../@oasis-engine/core/src/RenderPipeline/RenderElement.ts", "../@oasis-engine/core/src/SceneFeature.ts", "../@oasis-engine/core/src/shader/enums/BlendFactor.ts", "../@oasis-engine/core/src/shader/enums/BlendOperation.ts", "../@oasis-engine/core/src/shader/enums/ColorWriteMask.ts", "../@oasis-engine/core/src/shader/enums/CompareFunction.ts", "../@oasis-engine/core/src/shader/enums/CullMode.ts", "../@oasis-engine/core/src/shader/enums/StencilOperation.ts", "../@oasis-engine/core/src/material/enums/RenderQueueType.ts", "../@oasis-engine/core/src/RenderPipeline/RenderQueue.ts", "../@oasis-engine/core/src/shaderlib/pbr/index.ts", "../@oasis-engine/core/src/shaderlib/ShaderLib.ts", "../@oasis-engine/core/src/shaderlib/ShaderFactory.ts", "../@oasis-engine/core/src/shader/ShaderMacro.ts", "../@oasis-engine/core/src/shader/enums/ShaderDataGroup.ts", "../@oasis-engine/core/src/shader/ShaderUniform.ts", "../@oasis-engine/core/src/shader/ShaderUniformBlock.ts", "../@oasis-engine/core/src/shader/ShaderProgram.ts", "../@oasis-engine/core/src/shader/ShaderProperty.ts", "../@oasis-engine/core/src/shader/Shader.ts", "../@oasis-engine/core/src/lighting/Light.ts", "../@oasis-engine/core/src/lighting/AmbientLight.ts", "../@oasis-engine/core/src/lighting/DirectLight.ts", "../@oasis-engine/core/src/lighting/EnvironmentMapLight.ts", "../@oasis-engine/core/src/lighting/PointLight.ts", "../@oasis-engine/core/src/lighting/SpotLight.ts", "../@oasis-engine/core/src/lighting/LightFeature.ts", "../@oasis-engine/core/src/asset/RefObject.ts", "../@oasis-engine/core/src/material/type.ts", "../@oasis-engine/core/src/texture/enums/RenderBufferColorFormat.ts", "../@oasis-engine/core/src/texture/enums/RenderBufferDepthFormat.ts", "../@oasis-engine/core/src/texture/enums/TextureFilterMode.ts", "../@oasis-engine/core/src/texture/enums/TextureFormat.ts", "../@oasis-engine/core/src/texture/enums/TextureWrapMode.ts", "../@oasis-engine/core/src/texture/Texture.ts", "../@oasis-engine/core/src/shader/ShaderData.ts", "../@oasis-engine/core/src/Scene.ts", "../@oasis-engine/core/src/SceneManager.ts", "../@oasis-engine/core/src/shader/ShaderPool.ts", "../@oasis-engine/core/src/shader/ShaderProgramPool.ts", "../@oasis-engine/core/src/shader/state/RenderTargetBlendState.ts", "../@oasis-engine/core/src/shader/state/BlendState.ts", "../@oasis-engine/core/src/shader/state/DepthState.ts", "../@oasis-engine/core/src/shader/state/RasterState.ts", "../@oasis-engine/core/src/shader/state/StencilState.ts", "../@oasis-engine/core/src/shader/state/RenderState.ts", "../@oasis-engine/core/src/Engine.ts", "../@oasis-engine/core/src/SystemInfo.ts", "../@oasis-engine/core/src/EngineFeature.ts", "../@oasis-engine/core/src/Script.ts", "../@oasis-engine/core/src/Renderer.ts", "../@oasis-engine/core/src/material/enums/AlphaMode.ts", "../@oasis-engine/core/src/material/Material.ts", "../@oasis-engine/core/src/material/BlinnPhongMaterial.ts", "../@oasis-engine/core/src/material/PBRBaseMaterial.ts", "../@oasis-engine/core/src/material/PBRMaterial.ts", "../@oasis-engine/core/src/material/PBRSpecularMaterial.ts", "../@oasis-engine/core/src/material/UnlitMaterial.ts", "../@oasis-engine/core/src/RenderPipeline/RenderPass.ts", "../@oasis-engine/core/src/RenderPipeline/SeparateSpritePass.ts", "../@oasis-engine/core/src/RenderPipeline/BasicRenderPipeline.ts", "../@oasis-engine/core/src/RenderPipeline/RenderContext.ts", "../@oasis-engine/core/src/Camera.ts", "../@oasis-engine/core/src/asset/request.ts", "../@oasis-engine/core/src/asset/Loader.ts", "../@oasis-engine/core/src/asset/AssetType.ts", "../@oasis-engine/core/src/collider/ColliderFeature.ts", "../@oasis-engine/core/src/collider/Collider.ts", "../@oasis-engine/core/src/collider/ABoxCollider.ts", "../@oasis-engine/core/src/collider/ASphereCollider.ts", "../@oasis-engine/core/src/collider/PlaneCollider.ts", "../@oasis-engine/core/src/raycast/RaycastHit.ts", "../@oasis-engine/core/src/raycast/index.ts", "../@oasis-engine/core/src/mesh/Mesh.ts", "../@oasis-engine/core/src/mesh/Skin.ts", "../@oasis-engine/core/src/mesh/MeshRenderer.ts", "../@oasis-engine/core/src/texture/Texture2D.ts", "../@oasis-engine/core/src/mesh/SkinnedMeshRenderer.ts", "../@oasis-engine/core/src/mesh/LODGroup.ts", "../@oasis-engine/core/src/texture/enums/TextureCubeFace.ts", "../@oasis-engine/core/src/texture/TextureCubeMap.ts", "../@oasis-engine/core/src/texture/RenderDepthTexture.ts", "../@oasis-engine/core/src/texture/RenderTarget.ts", "../@oasis-engine/core/src/texture/RenderColorTexture.ts", "../@oasis-engine/core/src/graphic/enums/BufferUsage.ts", "../@oasis-engine/core/src/graphic/enums/VertexElementFormat.ts", "../@oasis-engine/core/src/graphic/enums/IndexFormat.ts", "../@oasis-engine/core/src/graphic/BufferUtil.ts", "../@oasis-engine/core/src/graphic/enums/BufferBindFlag.ts", "../@oasis-engine/core/src/graphic/enums/SetDataOptions.ts", "../@oasis-engine/core/src/graphic/Buffer.ts", "../@oasis-engine/core/src/graphic/enums/PrimitiveTopology.ts", "../@oasis-engine/core/src/graphic/IndexBufferBinding.ts", "../@oasis-engine/core/src/graphic/VertexBufferBinding.ts", "../@oasis-engine/core/src/graphic/Primitive.ts", "../@oasis-engine/core/src/graphic/VertexElement.ts", "../@oasis-engine/core/src/graphic/SubPrimitive.ts", "../@oasis-engine/core/src/2d/SpriteRenderer.ts", "../@oasis-engine/core/src/animation/AnimationConst.ts", "../@oasis-engine/core/src/animation/AnimationClip.ts", "../@oasis-engine/core/src/animation/AnimationLayer.ts", "../@oasis-engine/core/src/animation/Animation.ts", "../@oasis-engine/core/src/geometry/BufferGeometry.ts", "../@oasis-engine/core/src/geometry/GeometryRenderer.ts", "../@oasis-engine/core/src/geometry-shape/ShapeGeometry.ts", "../@oasis-engine/core/src/geometry-shape/CuboidGeometry.ts", "../@oasis-engine/core/src/geometry-shape/SphereGeometry.ts", "../@oasis-engine/core/src/geometry-shape/PlaneGeometry.ts", "../@oasis-engine/core/src/geometry-shape/CylinderGeometry.ts", "../@oasis-engine/core/src/geometry-shape/CircleGeometry.ts", "../@oasis-engine/core/src/geometry-shape/ScreenQuadGeometry.ts", "../@oasis-engine/core/src/geometry-shape/TorusGeometry.ts", "../@oasis-engine/core/src/geometry-shape/Model.ts", "../@oasis-engine/core/src/skybox/SkyBoxMaterial.ts", "../@oasis-engine/core/src/skybox/SkyBox.ts", "../@oasis-engine/core/src/particle/ParticleRenderer.ts", "../@oasis-engine/core/src/trail/TrailMaterial.ts", "../@oasis-engine/core/src/trail/TrailRenderer.ts", "../@oasis-engine/core/src/collider/BoxCollider.ts", "../@oasis-engine/core/src/collider/SphereCollider.ts", "../@oasis-engine/core/src/collider/index.ts", "../@oasis-engine/core/src/collision/intersect.ts", "../@oasis-engine/core/src/collision/CollisionDetection.ts", "../@oasis-engine/core/src/fog/Fog.ts", "../@oasis-engine/core/src/fog/EXP2Fog.ts", "../@oasis-engine/core/src/fog/LinearFog.ts", "../@oasis-engine/core/src/env-probe/Probe.ts", "../@oasis-engine/core/src/env-probe/CubeProbe.ts", "../@oasis-engine/core/src/shadow/LightShadow.ts", "../@oasis-engine/core/src/shadow/Extension.ts", "../@oasis-engine/core/src/shadow/ShadowMapMaterial.ts", "../@oasis-engine/core/src/shadow/ShadowMapPass.ts", "../@oasis-engine/core/src/shadow/ShadowMaterial.ts", "../@oasis-engine/core/src/shadow/ShadowPass.ts", "../@oasis-engine/core/src/shadow/ShadowFeature.ts", "../@oasis-engine/core/src/shadow/index.ts", "../@oasis-engine/core/src/index.ts", "../@oasis-engine/draco/src/DRACOWorker.ts", "../@oasis-engine/draco/src/decoder.ts", "../@oasis-engine/loader/src/BufferLoader.ts", "../@oasis-engine/loader/src/gltf/Util.ts", "../@oasis-engine/loader/src/gltf/glTFDracoMeshCompression.ts", "../@oasis-engine/loader/src/gltf/glTF.ts", "../@oasis-engine/loader/src/gltf/glb.ts", "../@oasis-engine/loader/src/GLTFLoader.ts", "../@oasis-engine/loader/src/JSONLoader.ts", "../@oasis-engine/loader/src/compressed-texture/KhronosTextureContainer.ts", "../@oasis-engine/loader/src/compressed-texture/index.ts", "../@oasis-engine/loader/src/KTXCubeLoader.ts", "../@oasis-engine/loader/src/KTXLoader.ts", "../@oasis-engine/loader/src/Texture2DLoader.ts", "../@oasis-engine/loader/src/TextureCubeLoader.ts", "../@oasis-engine/loader/src/GLTFModel.ts", "../@oasis-engine/loader/src/scene-loader/plugins/PluginManager.ts", "../@oasis-engine/loader/src/scene-loader/utils.ts", "../@oasis-engine/loader/src/scene-loader/resources/SchemaResource.ts", "../@oasis-engine/loader/src/scene-loader/resources/TextureResource.ts", "../@oasis-engine/loader/src/scene-loader/resources/BlinnPhongMaterialResource.ts", "../@oasis-engine/loader/src/scene-loader/resources/PBRMaterialResource.ts", "../@oasis-engine/loader/src/scene-loader/resources/PBRSpecularMaterialResource.ts", "../@oasis-engine/loader/src/scene-loader/resources/UnlitMaterialResource.ts", "../@oasis-engine/loader/src/scene-loader/resources/GLTFResource.ts", "../@oasis-engine/loader/src/scene-loader/resources/ScriptResource.ts", "../@oasis-engine/loader/src/scene-loader/resources/TextureCubeMapResource.ts", "../@oasis-engine/loader/src/scene-loader/resources/BaseResource.ts", "../@oasis-engine/loader/src/scene-loader/AbilityManager.ts", "../@oasis-engine/loader/src/scene-loader/NodeManager.ts", "../@oasis-engine/loader/src/scene-loader/ResourceManager.ts", "../@oasis-engine/loader/src/scene-loader/Oasis.ts", "../@oasis-engine/loader/src/scene-loader/temp.compatible.ts", "../@oasis-engine/loader/src/scene-loader/Parser.ts", "../@oasis-engine/rhi-webgl/src/WebCanvas.ts", "../@oasis-engine/rhi-webgl/src/GLCapability.ts", "../@oasis-engine/rhi-webgl/src/GLExtensions.ts", "../@oasis-engine/rhi-webgl/src/GLPrimitive.ts", "../@oasis-engine/rhi-webgl/src/GLRenderStates.ts", "../@oasis-engine/rhi-webgl/src/GLSprite.ts", "../@oasis-engine/rhi-webgl/src/GLSpriteMaterial.ts", "../@oasis-engine/rhi-webgl/src/GLSpriteBatcher.ts", "../@oasis-engine/rhi-webgl/src/WebGLRenderer.ts", "../@oasis-engine/rhi-webgl/src/WebGLEngine.ts", "../oasis-engine/src/index.ts"],
  "sourcesContent": ["/**\n * Defines how the bounding volumes intersects or contain one another.\n */\nexport enum ContainmentType {\n  /** Indicates that there is no overlap between two bounding volumes. */\n  Disjoint,\n  /** Indicates that one bounding volume completely contains another volume. */\n  Contains,\n  /** Indicates that bounding volumes partially overlap one another. */\n  Intersects\n}\n", "/**\n * Defines the intersection between a plane and a bounding volume.\n */\nexport enum PlaneIntersectionType {\n  /** There is no intersection, the bounding volume is in the back of the plane. */\n  Back,\n  /** There is no intersection, the bounding volume is in the front of the plane. */\n  Front,\n  /** The plane is intersected. */\n  Intersecting\n}\n", "/**\n * Common utility methods for math operations.\n */\nexport class MathUtil {\n  /** The value for which all absolute numbers smaller than are considered equal to zero. */\n  static readonly zeroTolerance: number = 1e-6;\n  /** The conversion factor that radian to degree. */\n  static readonly radToDegreeFactor: number = 180 / Math.PI;\n  /** The conversion factor that degree to radian. */\n  static readonly degreeToRadFactor: number = Math.PI / 180;\n\n  /**\n   * Clamps the specified value.\n   * @param v - The specified value\n   * @param min - The min value\n   * @param max - The max value\n   * @returns The result of clamping a value between min and max\n   */\n  static clamp(v: number, min: number, max: number): number {\n    return Math.max(min, Math.min(max, v));\n  }\n\n  /**\n   * Checks if a and b are almost equals.\n   * The absolute value of the difference between a and b is close to zero.\n   * @param a - The left value to compare\n   * @param b - The right value to compare\n   * @returns True if a almost equal to b, false otherwise\n   */\n  static equals(a: number, b: number): boolean {\n    return Math.abs(a - b) <= MathUtil.zeroTolerance;\n  }\n\n  /**\n   * Determines whether the specified v is pow2.\n   * @param v - The specified v\n   * @returns True if the specified v is pow2, false otherwise\n   */\n  static isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * Modify the specified r from radian to degree.\n   * @param r - The specified r\n   * @returns The degree value\n   */\n  static radianToDegree(r: number): number {\n    return r * MathUtil.radToDegreeFactor;\n  }\n\n  /**\n   * Modify the specified d from degree to radian.\n   * @param d - The specified d\n   * @returns The radian value\n   */\n  static degreeToRadian(d: number): number {\n    return d * MathUtil.degreeToRadFactor;\n  }\n}\n", "import { IClone } from \"@oasis-engine/design\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector4 } from \"./Vector4\";\n\n/**\n * Describes a 3D-vector.\n */\nexport class Vector3 implements IClone {\n  /** @internal zero.*/\n  static readonly _zero = new Vector3(0.0, 0.0, 0.0);\n  /** @internal one.*/\n  static readonly _one = new Vector3(1.0, 1.0, 1.0);\n  /** @internal */\n  static readonly _tempVector3 = new Vector3();\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n    out.z = left.z + right.z;\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x - right.x;\n    out.y = left.y - right.y;\n    out.z = left.z - right.z;\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x * right.x;\n    out.y = left.y * right.y;\n    out.z = left.z * right.z;\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x / right.x;\n    out.y = left.y / right.y;\n    out.z = left.z / right.z;\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector3, right: Vector3): number {\n    return left.x * right.x + left.y * right.y + left.z * right.z;\n  }\n\n  /**\n   * Determines the cross product of two vectors.\n   * @param left - The first vector to cross\n   * @param right - The second vector to cross\n   * @param out - The cross product of two vectors\n   */\n  static cross(left: Vector3, right: Vector3, out: Vector3): void {\n    const ax = left.x;\n    const ay = left.y;\n    const az = left.z;\n    const bx = right.x;\n    const by = right.y;\n    const bz = right.z;\n\n    out.x = ay * bz - az * by;\n    out.y = az * bx - ax * bz;\n    out.z = ax * by - ay * bx;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(a: Vector3, b: Vector3): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(a: Vector3, b: Vector3): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector3, right: Vector3): boolean {\n    return MathUtil.equals(left.x, right.x) && MathUtil.equals(left.y, right.y) && MathUtil.equals(left.z, right.z);\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param start - The first vector\n   * @param end - The second vector\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(start: Vector3, end: Vector3, t: number, out: Vector3): void {\n    const { x, y, z } = start;\n    out.x = x + (end.x - x) * t;\n    out.y = y + (end.y - y) * t;\n    out.z = z + (end.z - z) * t;\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = Math.max(left.x, right.x);\n    out.y = Math.max(left.y, right.y);\n    out.z = Math.max(left.z, right.z);\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = Math.min(left.x, right.x);\n    out.y = Math.min(left.y, right.y);\n    out.z = Math.min(left.z, right.z);\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param a - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(a: Vector3, out: Vector3): void {\n    out.x = -a.x;\n    out.y = -a.y;\n    out.z = -a.z;\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param a - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(a: Vector3, out: Vector3): void {\n    const { x, y, z } = a;\n    let len: number = Math.sqrt(x * x + y * y + z * z);\n    if (len > 0) {\n      // TODO\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n      out.z = z * len;\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param a - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(a: Vector3, s: number, out: Vector3): void {\n    out.x = a.x * s;\n    out.y = a.y * s;\n    out.z = a.z * s;\n  }\n\n  /**\n   * Performs a normal transformation using the given 4x4 matrix.\n   * @remarks\n   * A normal transform performs the transformation with the assumption that the w component\n   * is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The\n   * end result is a vector that is not translated, but all other transformation properties\n   * apply. This is often prefered for normal vectors as normals purely represent direction\n   * rather than location because normal vectors should not be translated.\n   * @param v - The normal vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed normal\n   */\n  static transformNormal(v: Vector3, m: Matrix, out: Vector3): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n    out.x = x * e[0] + y * e[4] + z * e[8];\n    out.y = x * e[1] + y * e[5] + z * e[9];\n    out.z = x * e[2] + y * e[6] + z * e[10];\n  }\n\n  /**\n   * Performs a transformation using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector3\n   */\n  static transformToVec3(v: Vector3, m: Matrix, out: Vector3): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n\n    out.x = x * e[0] + y * e[4] + z * e[8] + e[12];\n    out.y = x * e[1] + y * e[5] + z * e[9] + e[13];\n    out.z = x * e[2] + y * e[6] + z * e[10] + e[14];\n  }\n\n  /**\n   * Performs a transformation from vector3 to vector4 using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector4\n   */\n  static transformToVec4(v: Vector3, m: Matrix, out: Vector4): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n\n    out.x = x * e[0] + y * e[4] + z * e[8] + e[12];\n    out.y = x * e[1] + y * e[5] + z * e[9] + e[13];\n    out.z = x * e[2] + y * e[6] + z * e[10] + e[14];\n    out.w = x * e[3] + y * e[7] + z * e[11] + e[15];\n  }\n\n  /**\n   * Performs a coordinate transformation using the given 4x4 matrix.\n   *\n   * @remarks\n   * A coordinate transform performs the transformation with the assumption that the w component\n   * is one. The four dimensional vector obtained from the transformation operation has each\n   * component in the vector divided by the w component. This forces the wcomponent to be one and\n   * therefore makes the vector homogeneous. The homogeneous vector is often prefered when working\n   * with coordinates as the w component can safely be ignored.\n   * @param v - The coordinate vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed coordinates\n   */\n  static transformCoordinate(v: Vector3, m: Matrix, out: Vector3): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n    let w = x * e[3] + y * e[7] + z * e[11] + e[15];\n    w = 1.0 / w;\n\n    out.x = (x * e[0] + y * e[4] + z * e[8] + e[12]) * w;\n    out.y = (x * e[1] + y * e[5] + z * e[9] + e[13]) * w;\n    out.z = (x * e[2] + y * e[6] + z * e[10] + e[14]) * w;\n  }\n\n  /**\n   * Performs a transformation using the given quaternion.\n   * @param v - The vector to transform\n   * @param quaternion - The transform quaternion\n   * @param out - The transformed vector\n   */\n  static transformByQuat(v: Vector3, quaternion: Quaternion, out: Vector3): void {\n    const { x, y, z } = v;\n    const { x: qx, y: qy, z: qz, w: qw } = quaternion;\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out.x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out.y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out.z = iz * qw - iw * qz - ix * qy + iy * qx;\n  }\n\n  /** The x component of the vector.*/\n  x: number;\n  /** The y component of the vector.*/\n  y: number;\n  /** The z component of the vector.*/\n  z: number;\n\n  /**\n   * Constructor of Vector3.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @param z - The z component of the vector\n   * @returns This vector\n   */\n  setValue(x: number, y: number, z: number): Vector3 {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n\n  /**\n   * Set the value of this vector by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Vector3 {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector3): Vector3 {\n    this.x += right.x;\n    this.y += right.y;\n    this.z += right.z;\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector3): Vector3 {\n    this.x -= right.x;\n    this.y -= right.y;\n    this.z -= right.z;\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector3): Vector3 {\n    this.x *= right.x;\n    this.y *= right.y;\n    this.z *= right.z;\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  divide(right: Vector3): Vector3 {\n    this.x /= right.x;\n    this.y /= right.y;\n    this.z /= right.z;\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { x, y, z } = this;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { x, y, z } = this;\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector3 {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector3 {\n    Vector3.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector3 {\n    this.x *= s;\n    this.y *= s;\n    this.z *= s;\n    return this;\n  }\n\n  /**\n   * Clone the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n    out[outOffset + 2] = this.z;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector3 {\n    return new Vector3(this.x, this.y, this.z);\n  }\n\n  /**\n   * Clones this vector to the specified vector.\n   * @param out - The specified vector\n   * @returns The specified vector\n   */\n  cloneTo(out: Vector3): Vector3 {\n    out.x = this.x;\n    out.y = this.y;\n    out.z = this.z;\n    return out;\n  }\n\n  /**\n   * This vector performs a normal transformation using the given 4x4 matrix.\n   * @remarks\n   * A normal transform performs the transformation with the assumption that the w component\n   * is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The\n   * end result is a vector that is not translated, but all other transformation properties\n   * apply. This is often prefered for normal vectors as normals purely represent direction\n   * rather than location because normal vectors should not be translated.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformNormal(m: Matrix): Vector3 {\n    Vector3.transformNormal(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a transformation using the given 4x4 matrix.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformToVec3(m: Matrix): Vector3 {\n    Vector3.transformToVec3(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a coordinate transformation using the given 4x4 matrix.\n   * @remarks\n   * A coordinate transform performs the transformation with the assumption that the w component\n   * is one. The four dimensional vector obtained from the transformation operation has each\n   * component in the vector divided by the w component. This forces the wcomponent to be one and\n   * therefore makes the vector homogeneous. The homogeneous vector is often prefered when working\n   * with coordinates as the w component can safely be ignored.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformCoordinate(m: Matrix): Vector3 {\n    Vector3.transformCoordinate(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a transformation using the given quaternion.\n   * @param quaternion - The transform quaternion\n   * @param out - This vector\n   */\n  transformByQuat(quaternion: Quaternion): Vector3 {\n    Vector3.transformByQuat(this, quaternion, this);\n    return this;\n  }\n}\n", "import { IClone } from \"@oasis-engine/design\";\nimport { BoundingBox } from \"./BoundingBox\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * A bounding sphere.\n * */\nexport class BoundingSphere implements IClone {\n  private static _tempVec30: Vector3 = new Vector3();\n\n  /**\n   * Calculate a bounding sphere that fully contains the given points.\n   * @param points - The given points\n   * @param out - The calculated bounding sphere\n   */\n  static fromPoints(points: Vector3[], out: BoundingSphere): void {\n    if (!points || points.length === 0) {\n      throw new Error(\"points must be array and length must > 0\");\n    }\n\n    const len = points.length;\n    const center = BoundingSphere._tempVec30;\n    center.x = center.y = center.z = 0;\n\n    // Calculate the center of the sphere.\n    for (let i = 0; i < len; ++i) {\n      Vector3.add(points[i], center, center);\n    }\n\n    // The center of the sphere.\n    Vector3.scale(center, 1 / len, out.center);\n\n    // Calculate the radius of the sphere.\n    let radius = 0.0;\n    for (let i = 0; i < len; ++i) {\n      const distance = Vector3.distanceSquared(center, points[i]);\n      distance > radius && (radius = distance);\n    }\n    // The radius of the sphere.\n    out.radius = Math.sqrt(radius);\n  }\n\n  /**\n   * Calculate a bounding sphere from a given box.\n   * @param box - The given box\n   * @param out - The calculated bounding sphere\n   */\n  static fromBox(box: BoundingBox, out: BoundingSphere): void {\n    const { center } = out;\n    const { min, max } = box;\n\n    center.x = (min.x + max.x) * 0.5;\n    center.y = (min.y + max.y) * 0.5;\n    center.z = (min.z + max.z) * 0.5;\n    out.radius = Vector3.distance(center, max);\n  }\n\n  /** The center point of the sphere. */\n  public readonly center: Vector3 = new Vector3();\n  /** The radius of the sphere. */\n  public radius: number = 0;\n\n  /**\n   * Constructor of BoundingSphere.\n   * @param center - The center point of the sphere\n   * @param radius - The radius of the sphere\n   */\n  constructor(center: Vector3 = null, radius: number = 0) {\n    center && center.cloneTo(this.center);\n    this.radius = radius;\n  }\n\n  /**\n   * Creates a clone of this sphere.\n   * @returns A clone of this sphere\n   */\n  clone(): BoundingSphere {\n    return new BoundingSphere(this.center, this.radius);\n  }\n\n  /**\n   * Clones this sphere to the specified sphere.\n   * @param out - The specified sphere\n   * @returns The specified sphere\n   */\n  cloneTo(out: BoundingSphere): BoundingSphere {\n    this.center.cloneTo(out.center);\n    out.radius = this.radius;\n    return out;\n  }\n}\n", "import { IClone } from \"@oasis-engine/design\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { Matrix } from \"./Matrix\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Axis Aligned Bound Box (AABB).\n */\nexport class BoundingBox implements IClone {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n\n  /**\n   * Calculate a bounding box from the center point and the extent of the bounding box.\n   * @param center - The center point\n   * @param extent - The extent of the bounding box\n   * @param out - The calculated bounding box\n   */\n  static fromCenterAndExtent(center: Vector3, extent: Vector3, out: BoundingBox): void {\n    Vector3.subtract(center, extent, out.min);\n    Vector3.add(center, extent, out.max);\n  }\n\n  /**\n   * Calculate a bounding box that fully contains the given points.\n   * @param points - The given points\n   * @param out - The calculated bounding box\n   */\n  static fromPoints(points: Vector3[], out: BoundingBox): void {\n    if (!points || points.length === 0) {\n      throw new Error(\"points must be array and length must > 0\");\n    }\n\n    const { min, max } = out;\n    min.x = min.y = min.z = Number.MAX_VALUE;\n    max.x = max.y = max.z = -Number.MAX_VALUE;\n\n    for (let i = 0, l = points.length; i < l; ++i) {\n      const point = points[i];\n      Vector3.min(min, point, min);\n      Vector3.max(max, point, max);\n    }\n  }\n\n  /**\n   * Calculate a bounding box from a given sphere.\n   * @param shpere - The given sphere\n   * @param out - The calculated bounding box\n   */\n  static fromSphere(shpere: BoundingSphere, out: BoundingBox): void {\n    const { center, radius } = shpere;\n    const { min, max } = out;\n\n    min.x = center.x - radius;\n    min.y = center.y - radius;\n    min.z = center.z - radius;\n    max.x = center.x + radius;\n    max.y = center.y + radius;\n    max.z = center.z + radius;\n  }\n\n  /**\n   * Transfrom a bounding box.\n   * @param source - The original bounding box\n   * @param matrix - The transform to apply to the bounding box\n   * @param out - The transformed bounding box\n   */\n  static transform(source: BoundingBox, matrix: Matrix, out: BoundingBox): void {\n    // https://zeux.io/2010/10/17/aabb-from-obb-with-component-wise-abs/\n    const center = BoundingBox._tempVec30;\n    const extent = BoundingBox._tempVec31;\n    source.getCenter(center);\n    source.getExtent(extent);\n    Vector3.transformCoordinate(center, matrix, center);\n\n    const { x, y, z } = extent;\n    const e = matrix.elements;\n    extent.x = Math.abs(x * e[0]) + Math.abs(y * e[4]) + Math.abs(z * e[8]);\n    extent.y = Math.abs(x * e[1]) + Math.abs(y * e[5]) + Math.abs(z * e[9]);\n    extent.z = Math.abs(x * e[2]) + Math.abs(y * e[6]) + Math.abs(z * e[10]);\n\n    // set min\u3001max\n    Vector3.subtract(center, extent, out.min);\n    Vector3.add(center, extent, out.max);\n  }\n\n  /**\n   * Calculate a bounding box that is as large as the total combined area of the two specified boxes.\n   * @param box1 - The first box to merge\n   * @param box2 - The second box to merge\n   * @param out - The merged bounding box\n   * @returns The merged bounding box\n   */\n  static merge(box1: BoundingBox, box2: BoundingBox, out: BoundingBox): BoundingBox {\n    Vector3.min(box1.min, box2.min, out.min);\n    Vector3.max(box1.max, box2.max, out.max);\n    return out;\n  }\n\n  /** The minimum point of the box. */\n  public readonly min: Vector3 = new Vector3();\n  /** The maximum point of the box. */\n  public readonly max: Vector3 = new Vector3();\n\n  /**\n   * Constructor of BoundingBox.\n   * @param min - The minimum point of the box\n   * @param max - The maximum point of the box\n   */\n  constructor(min: Vector3 = null, max: Vector3 = null) {\n    min && min.cloneTo(this.min);\n    max && max.cloneTo(this.max);\n  }\n\n  /**\n   * Creates a clone of this box.\n   * @returns A clone of this box\n   */\n  clone(): BoundingBox {\n    return new BoundingBox(this.min, this.max);\n  }\n\n  /**\n   * Clones this box to the specified box.\n   * @param out - The specified box\n   * @returns The specified box\n   */\n  cloneTo(out: BoundingBox): BoundingBox {\n    this.min.cloneTo(out.min);\n    this.max.cloneTo(out.max);\n    return out;\n  }\n\n  /**\n   * Get the center point of this bounding box.\n   * @param out - The center point of this bounding box\n   * @returns The center point of this bounding box\n   */\n  getCenter(out: Vector3): Vector3 {\n    Vector3.add(this.min, this.max, out);\n    Vector3.scale(out, 0.5, out);\n    return out;\n  }\n\n  /**\n   * Get the extent of this bounding box.\n   * @param out - The extent of this bounding box\n   * @returns The extent of this bounding box\n   */\n  getExtent(out: Vector3): Vector3 {\n    Vector3.subtract(this.max, this.min, out);\n    Vector3.scale(out, 0.5, out);\n    return out;\n  }\n\n  /**\n   * Get the eight corners of this bounding box.\n   * @param out - An array of points representing the eight corners of this bounding box\n   * @returns An array of points representing the eight corners of this bounding box\n   */\n  getCorners(out: Vector3[] = []): Vector3[] {\n    const { min, max } = this;\n    const minX = min.x;\n    const minY = min.y;\n    const minZ = min.z;\n    const maxX = max.x;\n    const maxY = max.y;\n    const maxZ = max.z;\n    const len = out.length;\n\n    // The array length is less than 8 to make up\n    if (len < 8) {\n      for (let i = 0, l = 8 - len; i < l; ++i) {\n        out[len + i] = new Vector3();\n      }\n    }\n\n    out[0].setValue(minX, maxY, maxZ);\n    out[1].setValue(maxX, maxY, maxZ);\n    out[2].setValue(maxX, minY, maxZ);\n    out[3].setValue(minX, minY, maxZ);\n    out[4].setValue(minX, maxY, minZ);\n    out[5].setValue(maxX, maxY, minZ);\n    out[6].setValue(maxX, minY, minZ);\n    out[7].setValue(minX, minY, minZ);\n\n    return out;\n  }\n\n  /**\n   * Transfrom a bounding box.\n   * @param matrix - The transform to apply to the bounding box\n   * @returns The transformed bounding box\n   */\n  public transform(matrix: Matrix): BoundingBox {\n    BoundingBox.transform(this, matrix, this);\n    return this;\n  }\n}\n", "import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingFrustum } from \"./BoundingFrustum\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { ContainmentType } from \"./enums/ContainmentType\";\nimport { PlaneIntersectionType } from \"./enums/PlaneIntersectionType\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Plane } from \"./Plane\";\nimport { Ray } from \"./Ray\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Contains static methods to help in determining intersections, containment, etc.\n */\nexport class CollisionUtil {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n\n  /**\n   * Calculate the distance from a point to a plane.\n   * @param plane - The plane\n   * @param point - The point\n   * @returns The distance from a point to a plane\n   */\n  static distancePlaneAndPoint(plane: Plane, point: Vector3): number {\n    return Vector3.dot(plane.normal, point) + plane.distance;\n  }\n\n  /**\n   * Get the intersection type between a plane and a point.\n   * @param plane - The plane\n   * @param point - The point\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndPoint(plane: Plane, point: Vector3): PlaneIntersectionType {\n    const distance = CollisionUtil.distancePlaneAndPoint(plane, point);\n    if (distance > 0) {\n      return PlaneIntersectionType.Front;\n    }\n    if (distance < 0) {\n      return PlaneIntersectionType.Back;\n    }\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a plane and a box (AABB).\n   * @param plane - The plane\n   * @param box - The box\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndBox(plane: Plane, box: BoundingBox): PlaneIntersectionType {\n    const { min, max } = box;\n    const { normal } = plane;\n    const front = CollisionUtil._tempVec30;\n    const back = CollisionUtil._tempVec31;\n\n    if (normal.x >= 0) {\n      front.x = max.x;\n      back.x = min.x;\n    } else {\n      front.x = min.x;\n      back.x = max.x;\n    }\n    if (normal.y >= 0) {\n      front.y = max.y;\n      back.y = min.y;\n    } else {\n      front.y = min.y;\n      back.y = max.y;\n    }\n    if (normal.z >= 0) {\n      front.z = max.z;\n      back.z = min.z;\n    } else {\n      front.z = min.z;\n      back.z = max.z;\n    }\n\n    if (CollisionUtil.distancePlaneAndPoint(plane, front) < 0) {\n      return PlaneIntersectionType.Back;\n    }\n\n    if (CollisionUtil.distancePlaneAndPoint(plane, back) > 0) {\n      return PlaneIntersectionType.Front;\n    }\n\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a plane and a sphere.\n   * @param plane - The plane\n   * @param sphere - The sphere\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndSphere(plane: Plane, sphere: BoundingSphere): PlaneIntersectionType {\n    const { center, radius } = sphere;\n    const distance = CollisionUtil.distancePlaneAndPoint(plane, center);\n    if (distance > radius) {\n      return PlaneIntersectionType.Front;\n    }\n    if (distance < -radius) {\n      return PlaneIntersectionType.Back;\n    }\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a ray and a plane.\n   * @param ray - The ray\n   * @param plane - The plane\n   * @returns The distance from ray to plane if intersecting, -1 otherwise\n   */\n  static intersectsRayAndPlane(ray: Ray, plane: Plane): number {\n    const { normal } = plane;\n    const { zeroTolerance } = MathUtil;\n\n    const dir = Vector3.dot(normal, ray.direction);\n    // Parallel\n    if (Math.abs(dir) < zeroTolerance) {\n      return -1;\n    }\n\n    const position = Vector3.dot(normal, ray.origin);\n    let distance = (-plane.distance - position) / dir;\n\n    if (distance < 0) {\n      if (distance < -zeroTolerance) {\n        return -1;\n      }\n\n      distance = 0;\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get the intersection type between a ray and a box (AABB).\n   * @param ray - The ray\n   * @param box - The box\n   * @returns The distance from ray to box if intersecting, -1 otherwise\n   */\n  static intersectsRayAndBox(ray: Ray, box: BoundingBox): number {\n    const { zeroTolerance } = MathUtil;\n    const { origin, direction } = ray;\n    const { min, max } = box;\n    const dirX = direction.x;\n    const dirY = direction.y;\n    const dirZ = direction.z;\n    const oriX = origin.x;\n    const oriY = origin.y;\n    const oriZ = origin.z;\n    let distance = 0;\n    let tmax = Number.MAX_VALUE;\n\n    if (Math.abs(dirX) < zeroTolerance) {\n      if (oriX < min.x || oriX > max.x) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirX;\n      let t1 = (min.x - oriX) * inverse;\n      let t2 = (max.x - oriX) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    if (Math.abs(dirY) < zeroTolerance) {\n      if (oriY < min.y || oriY > max.y) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirY;\n      let t1 = (min.y - oriY) * inverse;\n      let t2 = (max.y - oriY) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    if (Math.abs(dirZ) < zeroTolerance) {\n      if (oriZ < min.z || oriZ > max.z) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirZ;\n      let t1 = (min.z - oriZ) * inverse;\n      let t2 = (max.z - oriZ) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get the intersection type between a ray and a sphere.\n   * @param ray - The ray\n   * @param sphere - The sphere\n   * @returns The distance from ray to sphere if intersecting, -1 otherwise\n   */\n  static intersectsRayAndSphere(ray: Ray, sphere: BoundingSphere): number {\n    const { origin, direction } = ray;\n    const { center, radius } = sphere;\n\n    const m = CollisionUtil._tempVec30;\n    Vector3.subtract(origin, center, m);\n    const b = Vector3.dot(m, direction);\n    const c = Vector3.dot(m, m) - radius * radius;\n\n    if (b > 0 && c > 0) {\n      return -1;\n    }\n\n    let discriminant = b * b - c;\n    if (discriminant < 0) {\n      return -1;\n    }\n\n    let distance = -b - Math.sqrt(discriminant);\n    if (distance < 0) {\n      distance = 0;\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get whether or not a specified bounding box intersects with this frustum (Contains or Intersects).\n   * @param frustum - The frustum\n   * @param box - The box\n   * @returns True if bounding box intersects with this frustum, false otherwise\n   */\n  static intersectsFrustumAndBox(frustum: BoundingFrustum, box: BoundingBox): boolean {\n    const { min, max } = box;\n    const back = CollisionUtil._tempVec30;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const normal = plane.normal;\n\n      back.x = normal.x >= 0 ? min.x : max.x;\n      back.y = normal.y >= 0 ? min.y : max.y;\n      back.z = normal.z >= 0 ? min.z : max.z;\n      if (Vector3.dot(plane.normal, back) > -plane.distance) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Get the containment type between a frustum and a box (AABB).\n   * @param frustum - The frustum\n   * @param box - The box\n   * @returns The containment type\n   */\n  static frustumContainsBox(frustum: BoundingFrustum, box: BoundingBox): ContainmentType {\n    const { min, max } = box;\n    const front = CollisionUtil._tempVec30;\n    const back = CollisionUtil._tempVec31;\n    let result = ContainmentType.Contains;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const normal = plane.normal;\n\n      if (normal.x >= 0) {\n        front.x = max.x;\n        back.x = min.x;\n      } else {\n        front.x = min.x;\n        back.x = max.x;\n      }\n      if (normal.y >= 0) {\n        front.y = max.y;\n        back.y = min.y;\n      } else {\n        front.y = min.y;\n        back.y = max.y;\n      }\n      if (normal.z >= 0) {\n        front.z = max.z;\n        back.z = min.z;\n      } else {\n        front.z = min.z;\n        back.z = max.z;\n      }\n\n      if (CollisionUtil.intersectsPlaneAndPoint(plane, back) === PlaneIntersectionType.Front) {\n        return ContainmentType.Disjoint;\n      }\n\n      if (CollisionUtil.intersectsPlaneAndPoint(plane, front) === PlaneIntersectionType.Front) {\n        result = ContainmentType.Intersects;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the containment type between a frustum and a sphere.\n   * @param frustum - The frustum\n   * @param sphere - The sphere\n   * @returns The containment type\n   */\n  static frustumContainsSphere(frustum: BoundingFrustum, sphere: BoundingSphere): ContainmentType {\n    let result = ContainmentType.Contains;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const intersectionType = CollisionUtil.intersectsPlaneAndSphere(plane, sphere);\n      if (intersectionType === PlaneIntersectionType.Front) {\n        return ContainmentType.Disjoint;\n      } else if (intersectionType === PlaneIntersectionType.Intersecting) {\n        result = ContainmentType.Intersects;\n        break;\n      }\n    }\n\n    return result;\n  }\n}\n", "import { IClone } from \"@oasis-engine/design\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a plane in three dimensional space.\n */\nexport class Plane implements IClone {\n  /**\n   * Normalize the normal vector of the specified plane.\n   * @param p - The specified plane\n   * @param out - A normalized version of the specified plane\n   */\n  static normalize(p: Plane, out: Plane): void {\n    const { normal } = p;\n    const factor = 1.0 / normal.length();\n\n    const outNormal = out.normal;\n    outNormal.x = normal.x * factor;\n    outNormal.y = normal.y * factor;\n    outNormal.z = normal.z * factor;\n    out.distance = p.distance * factor;\n  }\n\n  /**\n   * Calculate the plane that contains the three specified points.\n   * @param point0 - The first point\n   * @param point1 - The second point\n   * @param point2 - The third point\n   * @param out - The calculated plane\n   */\n  static fromPoints(point0: Vector3, point1: Vector3, point2: Vector3, out: Plane): void {\n    const x0 = point0.x;\n    const y0 = point0.y;\n    const z0 = point0.z;\n    const x1 = point1.x - x0;\n    const y1 = point1.y - y0;\n    const z1 = point1.z - z0;\n    const x2 = point2.x - x0;\n    const y2 = point2.y - y0;\n    const z2 = point2.z - z0;\n    const yz = y1 * z2 - z1 * y2;\n    const xz = z1 * x2 - x1 * z2;\n    const xy = x1 * y2 - y1 * x2;\n    const invPyth = 1.0 / Math.sqrt(yz * yz + xz * xz + xy * xy);\n\n    const x = yz * invPyth;\n    const y = xz * invPyth;\n    const z = xy * invPyth;\n\n    const { normal } = out;\n    normal.x = x;\n    normal.y = y;\n    normal.z = z;\n\n    out.distance = -(x * x0 + y * y0 + z * z0);\n  }\n\n  /** The normal of the plane. */\n  public readonly normal: Vector3 = new Vector3();\n  /** The distance of the plane along its normal to the origin. */\n  public distance: number = 0;\n\n  /**\n   * Constructor of Plane.\n   * @param normal - The normal vector\n   * @param distance - The distance of the plane along its normal to the origin\n   */\n  constructor(normal: Vector3 = null, distance: number = 0) {\n    normal && normal.cloneTo(this.normal);\n    this.distance = distance;\n  }\n\n  /**\n   * Normalize the normal vector of this plane.\n   * @returns The plane after normalize\n   */\n  normalize(): Plane {\n    Plane.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this plane.\n   * @returns A clone of this plane\n   */\n  clone(): Plane {\n    const out = new Plane();\n    this.cloneTo(out);\n    return out;\n  }\n\n  /**\n   * Clones this plane to the specified plane.\n   * @param out - The specified plane\n   * @returns The specified plane\n   */\n  cloneTo(out: Plane): Plane {\n    this.normal.cloneTo(out.normal);\n    out.distance = this.distance;\n    return out;\n  }\n}\n", "import { IClone } from \"@oasis-engine/design\";\nimport { BoundingBox } from \"./BoundingBox\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { CollisionUtil } from \"./CollisionUtil\";\nimport { ContainmentType } from \"./enums/ContainmentType\";\nimport { Matrix } from \"./Matrix\";\nimport { Plane } from \"./Plane\";\n\n/**\n * A bounding frustum.\n */\nexport class BoundingFrustum implements IClone {\n  /** The near plane of this frustum. */\n  public near: Plane;\n  /** The far plane of this frustum. */\n  public far: Plane;\n  /** The left plane of this frustum. */\n  public left: Plane;\n  /** The right plane of this frustum. */\n  public right: Plane;\n  /** The top plane of this frustum. */\n  public top: Plane;\n  /** The bottom plane of this frustum. */\n  public bottom: Plane;\n\n  /**\n   * Constructor of BoundingFrustum.\n   * @param matrix - The view-projection matrix\n   */\n  constructor(matrix: Matrix = null) {\n    this.near = new Plane();\n    this.far = new Plane();\n    this.left = new Plane();\n    this.right = new Plane();\n    this.top = new Plane();\n    this.bottom = new Plane();\n\n    matrix && this.calculateFromMatrix(matrix);\n  }\n\n  /**\n   * Creates a clone of this frustum.\n   * @returns A clone of this frustum\n   */\n  clone(): BoundingFrustum {\n    const bf = new BoundingFrustum();\n    this.cloneTo(bf);\n    return bf;\n  }\n\n  /**\n   * Clones this frustum to the specified frustum.\n   * @param out - The specified frustum\n   * @returns The specified frustum\n   */\n  cloneTo(out: BoundingFrustum): BoundingFrustum {\n    this.near.cloneTo(out.near);\n    this.far.cloneTo(out.far);\n    this.left.cloneTo(out.left);\n    this.right.cloneTo(out.right);\n    this.top.cloneTo(out.top);\n    this.bottom.cloneTo(out.bottom);\n    return out;\n  }\n\n  /**\n   * Get the plane by the given index.\n   * 0: near\n   * 1: far\n   * 2: left\n   * 3: right\n   * 4: top\n   * 5: bottom\n   * @param index - The index\n   * @returns The plane get\n   */\n  getPlane(index: number): Plane {\n    switch (index) {\n      case 0:\n        return this.near;\n      case 1:\n        return this.far;\n      case 2:\n        return this.left;\n      case 3:\n        return this.right;\n      case 4:\n        return this.top;\n      case 5:\n        return this.bottom;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Update all planes from the given matrix.\n   * @param matrix - The given view-projection matrix\n   */\n  public calculateFromMatrix(matrix: Matrix): void {\n    const me = matrix.elements;\n    const m11 = me[0];\n    const m12 = me[1];\n    const m13 = me[2];\n    const m14 = me[3];\n    const m21 = me[4];\n    const m22 = me[5];\n    const m23 = me[6];\n    const m24 = me[7];\n    const m31 = me[8];\n    const m32 = me[9];\n    const m33 = me[10];\n    const m34 = me[11];\n    const m41 = me[12];\n    const m42 = me[13];\n    const m43 = me[14];\n    const m44 = me[15];\n\n    // near\n    const nearNormal = this.near.normal;\n    nearNormal.x = -m14 - m13;\n    nearNormal.y = -m24 - m23;\n    nearNormal.z = -m34 - m33;\n    this.near.distance = -m44 - m43;\n    this.near.normalize();\n\n    // far\n    const farNormal = this.far.normal;\n    farNormal.x = m13 - m14;\n    farNormal.y = m23 - m24;\n    farNormal.z = m33 - m34;\n    this.far.distance = m43 - m44;\n\n    this.far.normalize();\n\n    // left\n    const leftNormal = this.left.normal;\n    leftNormal.x = -m14 - m11;\n    leftNormal.y = -m24 - m21;\n    leftNormal.z = -m34 - m31;\n    this.left.distance = -m44 - m41;\n    this.left.normalize();\n\n    // right\n    const rightNormal = this.right.normal;\n    rightNormal.x = m11 - m14;\n    rightNormal.y = m21 - m24;\n    rightNormal.z = m31 - m34;\n    this.right.distance = m41 - m44;\n    this.right.normalize();\n\n    // top\n    const topNormal = this.top.normal;\n    topNormal.x = m12 - m14;\n    topNormal.y = m22 - m24;\n    topNormal.z = m32 - m34;\n    this.top.distance = m42 - m44;\n    this.top.normalize();\n\n    // bottom\n    const bottomNormal = this.bottom.normal;\n    bottomNormal.x = -m14 - m12;\n    bottomNormal.y = -m24 - m22;\n    bottomNormal.z = -m34 - m32;\n    this.bottom.distance = -m44 - m42;\n    this.bottom.normalize();\n  }\n\n  /**\n   * Get whether or not a specified bounding box intersects with this frustum (Contains or Intersects).\n   * @param box - The box for testing\n   * @returns True if bounding box intersects with this frustum, false otherwise\n   */\n  public intersectsBox(box: BoundingBox): boolean {\n    return CollisionUtil.intersectsFrustumAndBox(this, box);\n  }\n\n  /**\n   * Get whether or not a specified bounding sphere intersects with this frustum (Contains or Intersects).\n   * @param sphere - The sphere for testing\n   * @returns True if bounding sphere intersects with this frustum, false otherwise\n   */\n  public intersectsSphere(sphere: BoundingSphere): boolean {\n    return CollisionUtil.frustumContainsSphere(this, sphere) !== ContainmentType.Disjoint;\n  }\n}\n", "import { IClone } from \"@oasis-engine/design\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector2 } from \"./Vector2\";\n\n/**\n * Represents a 3x3 mathematical matrix.\n */\nexport class Matrix3x3 implements IClone {\n  /**\n   * Determines the sum of two matrices.\n   * @param left - The first matrix to add\n   * @param right - The second matrix to add\n   * @param out - The sum of two matrices\n   */\n  static add(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] + re[0];\n    oe[1] = le[1] + re[1];\n    oe[2] = le[2] + re[2];\n\n    oe[3] = le[3] + re[3];\n    oe[4] = le[4] + re[4];\n    oe[5] = le[5] + re[5];\n\n    oe[6] = le[6] + re[6];\n    oe[7] = le[7] + re[7];\n    oe[8] = le[8] + re[8];\n  }\n\n  /**\n   * Determines the difference between two matrices.\n   * @param left - The first matrix to subtract\n   * @param right - The second matrix to subtract\n   * @param out - The difference between two matrices\n   */\n  static subtract(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] - re[0];\n    oe[1] = le[1] - re[1];\n    oe[2] = le[2] - re[2];\n\n    oe[3] = le[3] - re[3];\n    oe[4] = le[4] - re[4];\n    oe[5] = le[5] - re[5];\n\n    oe[6] = le[6] - re[6];\n    oe[7] = le[7] - re[7];\n    oe[8] = le[8] - re[8];\n  }\n\n  /**\n   * Determines the product of two matrices.\n   * @param left - The first matrix to multiply\n   * @param right - The second matrix to multiply\n   * @param out - The product of two matrices\n   */\n  static multiply(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    const l11 = le[0],\n      l12 = le[1],\n      l13 = le[2];\n    const l21 = le[3],\n      l22 = le[4],\n      l23 = le[5];\n    const l31 = le[6],\n      l32 = le[7],\n      l33 = le[8];\n\n    const r11 = re[0],\n      r12 = re[1],\n      r13 = re[2];\n    const r21 = re[3],\n      r22 = re[4],\n      r23 = re[5];\n    const r31 = re[6],\n      r32 = re[7],\n      r33 = re[8];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13;\n\n    oe[3] = l11 * r21 + l21 * r22 + l31 * r23;\n    oe[4] = l12 * r21 + l22 * r22 + l32 * r23;\n    oe[5] = l13 * r21 + l23 * r22 + l33 * r23;\n\n    oe[6] = l11 * r31 + l21 * r32 + l31 * r33;\n    oe[7] = l12 * r31 + l22 * r32 + l32 * r33;\n    oe[8] = l13 * r31 + l23 * r32 + l33 * r33;\n  }\n\n  /**\n   * Determines whether the specified matrices are equals.\n   * @param left - The first matrix to compare\n   * @param right - The second matrix to compare\n   * @returns True if the specified matrices are equals, false otherwise\n   */\n  static equals(left: Matrix3x3, right: Matrix3x3): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8])\n    );\n  }\n\n  /**\n   * Calculate a rotation matrix from a quaternion.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param out - The calculated rotation matrix\n   */\n  static rotationQuaternion(quaternion: Quaternion, out: Matrix3x3): void {\n    const oe = out.elements;\n    const { x, y, z, w } = quaternion;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[3] = yx - wz;\n    oe[6] = zx + wy;\n\n    oe[1] = yx + wz;\n    oe[4] = 1 - xx - zz;\n    oe[7] = zy - wx;\n\n    oe[2] = zx - wy;\n    oe[5] = zy + wx;\n    oe[8] = 1 - xx - yy;\n  }\n\n  /**\n   * Calculate a matrix from scale vector.\n   * @param s - The scale vector\n   * @param out - The calculated matrix\n   */\n  static scaling(s: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = s.x;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = s.y;\n    oe[5] = 0;\n\n    oe[6] = 0;\n    oe[7] = 0;\n    oe[8] = 1;\n  }\n\n  /**\n   * Calculate a matrix from translation vector.\n   * @param translation - The translation vector\n   * @param out - The calculated matrix\n   */\n  static translation(translation: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = 1;\n    oe[5] = 0;\n\n    oe[6] = translation.x;\n    oe[7] = translation.y;\n    oe[8] = 1;\n  }\n\n  /**\n   * Calculate the inverse of the specified matrix.\n   * @param a - The matrix whose inverse is to be calculated\n   * @param out - The inverse of the specified matrix\n   */\n  static invert(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    let det = a11 * b12 + a12 * b22 + a13 * b32;\n    if (!det) {\n      return;\n    }\n    det = 1.0 / det;\n\n    oe[0] = b12 * det;\n    oe[1] = (-a33 * a12 + a13 * a32) * det;\n    oe[2] = (a23 * a12 - a13 * a22) * det;\n\n    oe[3] = b22 * det;\n    oe[4] = (a33 * a11 - a13 * a31) * det;\n    oe[5] = (-a23 * a11 + a13 * a21) * det;\n\n    oe[6] = b32 * det;\n    oe[7] = (-a32 * a11 + a12 * a31) * det;\n    oe[8] = (a22 * a11 - a12 * a21) * det;\n  }\n\n  /**\n   * Calculate a 3x3 normal matrix from a 4x4 matrix.\n   * @remarks The calculation process is the transpose matrix of the inverse matrix.\n   * @param mat4 - The 4x4 matrix\n   * @param out - THe 3x3 normal matrix\n   */\n  static normalMatrix(mat4: Matrix, out: Matrix3x3): void {\n    const ae = mat4.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[2] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n\n    oe[3] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[4] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[5] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n\n    oe[6] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[7] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[8] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n  }\n\n  /**\n   * The specified matrix rotates around an angle.\n   * @param a - The specified matrix\n   * @param r - The rotation angle in radians\n   * @param out - The rotated matrix\n   */\n  static rotate(a: Matrix3x3, r: number, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n    const s = Math.sin(r);\n    const c = Math.cos(r);\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = c * a11 + s * a21;\n    oe[1] = c * a12 + s * a22;\n    oe[2] = c * a13 + s * a23;\n\n    oe[3] = c * a21 - s * a11;\n    oe[4] = c * a22 - s * a12;\n    oe[5] = c * a23 - s * a13;\n\n    oe[6] = a31;\n    oe[7] = a32;\n    oe[8] = a33;\n  }\n\n  /**\n   * Scale a matrix by a given vector.\n   * @param m - The matrix\n   * @param s - The given vector\n   * @param out - The scaled matrix\n   */\n  static scale(m: Matrix3x3, s: Vector2, out: Matrix3x3): void {\n    const { x, y } = s;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    oe[0] = x * ae[0];\n    oe[1] = x * ae[1];\n    oe[2] = x * ae[2];\n\n    oe[3] = y * ae[3];\n    oe[4] = y * ae[4];\n    oe[5] = y * ae[5];\n\n    oe[6] = ae[6];\n    oe[7] = ae[7];\n    oe[8] = ae[8];\n  }\n\n  /**\n   * Translate a matrix by a given vector.\n   * @param m - The matrix\n   * @param translation - The given vector\n   * @param out - The translated matrix\n   */\n  static translate(m: Matrix3x3, translation: Vector2, out: Matrix3x3): void {\n    const { x, y } = translation;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = a11;\n    oe[1] = a12;\n    oe[2] = a13;\n\n    oe[3] = a21;\n    oe[4] = a22;\n    oe[5] = a23;\n\n    oe[6] = x * a11 + y * a21 + a31;\n    oe[7] = x * a12 + y * a22 + a32;\n    oe[8] = x * a13 + y * a23 + a33;\n  }\n\n  /**\n   * Calculate the transpose of the specified matrix.\n   * @param a - The specified matrix\n   * @param out - The transpose of the specified matrix\n   */\n  static transpose(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a23 = ae[5];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n      oe[3] = a12;\n      oe[5] = ae[7];\n      oe[6] = a13;\n      oe[7] = a23;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n\n      oe[3] = ae[1];\n      oe[4] = ae[4];\n      oe[5] = ae[7];\n\n      oe[6] = ae[2];\n      oe[7] = ae[5];\n      oe[8] = ae[8];\n    }\n  }\n\n  /**\n   * An array containing the elements of the matrix (column matrix).\n   * @remarks\n   * elements[0] first column and first row value m11\n   * elements[1] first column and second row value m12\n   * elements[2] first column and third row value m13\n   * elements[3] second column and first row value m21\n   * and so on\n   */\n  elements: Float32Array = new Float32Array(9);\n\n  /**\n   * Constructor of 3*3 matrix.\n   * @param m11 - Default 1 column 1, row 1\n   * @param m12 - Default 0 column 1, row 2\n   * @param m13 - Default 0 column 1, row 3\n   * @param m21 - Default 0 column 2, row 1\n   * @param m22 - Default 1 column 2, row 2\n   * @param m23 - Default 0 column 2, row 3\n   * @param m31 - Default 0 column 3, row 1\n   * @param m32 - Default 0 column 3, row 2\n   * @param m33 - Default 1 column 3, row 3\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n  }\n\n  /**\n   * Set the value of this matrix, and return this matrix.\n   * @param m11\n   * @param m12\n   * @param m13\n   * @param m21\n   * @param m22\n   * @param m23\n   * @param m31\n   * @param m32\n   * @param m33\n   * @returns This matrix\n   */\n  setValue(\n    m11: number,\n    m12: number,\n    m13: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m31: number,\n    m32: number,\n    m33: number\n  ): Matrix3x3 {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n\n    return this;\n  }\n\n  /**\n   * Set the value of this matrix by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This matrix\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Matrix3x3 {\n    const srce = this.elements;\n    for (let i = 0; i < 12; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Set the value of this 3x3 matrix by the specified 4x4 matrix.\n   * upper-left principle\n   * @param a - The specified 4x4 matrix\n   * @returns This 3x3 matrix\n   */\n  setValueByMatrix(a: Matrix): Matrix3x3 {\n    const ae = a.elements;\n    const e = this.elements;\n\n    e[0] = ae[0];\n    e[1] = ae[1];\n    e[2] = ae[2];\n\n    e[3] = ae[4];\n    e[4] = ae[5];\n    e[5] = ae[6];\n\n    e[6] = ae[8];\n    e[7] = ae[9];\n    e[8] = ae[10];\n\n    return this;\n  }\n\n  /**\n   * Clone the value of this matrix to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n  }\n\n  /**\n   * Creates a clone of this matrix.\n   * @returns A clone of this matrix\n   */\n  clone(): Matrix3x3 {\n    const e = this.elements;\n    let ret = new Matrix3x3(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);\n    return ret;\n  }\n\n  /**\n   * Clones this matrix to the specified matrix.\n   * @param out - The specified matrix\n   * @returns The specified matrix\n   */\n  cloneTo(out: Matrix3x3): Matrix3x3 {\n    const e = this.elements;\n    const oe = out.elements;\n\n    oe[0] = e[0];\n    oe[1] = e[1];\n    oe[2] = e[2];\n\n    oe[3] = e[3];\n    oe[4] = e[4];\n    oe[5] = e[5];\n\n    oe[6] = e[6];\n    oe[7] = e[7];\n    oe[8] = e[8];\n\n    return out;\n  }\n\n  /**\n   * Determines the sum of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the sum of the two matrices\n   */\n  add(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.add(this, right, this);\n    return this;\n  }\n\n  /**\n   * Determines the difference between this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the difference between the two matrices\n   */\n  subtract(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.subtract(this, right, this);\n    return this;\n  }\n\n  /**\n   * Determines the product of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the product of the two matrices\n   */\n  multiply(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * Calculate a determinant of this matrix.\n   * @returns The determinant of this matrix\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2];\n    const a21 = e[3],\n      a22 = e[4],\n      a23 = e[5];\n    const a31 = e[6],\n      a32 = e[7],\n      a33 = e[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    return a11 * b12 + a12 * b22 + a13 * b32;\n  }\n\n  /**\n   * Identity this matrix.\n   * @returns This matrix after identity\n   */\n  identity(): Matrix3x3 {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n\n    return this;\n  }\n\n  /**\n   * Invert the matrix.\n   * @returns The matrix after invert\n   */\n  invert(): Matrix3x3 {\n    Matrix3x3.invert(this, this);\n    return this;\n  }\n\n  /**\n   * This matrix rotates around an angle.\n   * @param r - The rotation angle in radians\n   * @returns This matrix after rotate\n   */\n  rotate(r: number): Matrix3x3 {\n    Matrix3x3.rotate(this, r, this);\n    return this;\n  }\n\n  /**\n   * Scale this matrix by a given vector.\n   * @param s - The given vector\n   * @returns This matrix after scale\n   */\n  scale(s: Vector2): Matrix3x3 {\n    Matrix3x3.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * Translate this matrix by a given vector.\n   * @param translation - The given vector\n   * @returns This matrix after translate\n   */\n  translate(translation: Vector2): Matrix3x3 {\n    Matrix3x3.translate(this, translation, this);\n    return this;\n  }\n\n  /**\n   * Calculate the transpose of this matrix.\n   * @returns This matrix after transpose\n   */\n  transpose(): Matrix3x3 {\n    Matrix3x3.transpose(this, this);\n    return this;\n  }\n}\n", "import { IClone } from \"@oasis-engine/design\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a four dimensional mathematical quaternion.\n */\nexport class Quaternion implements IClone {\n  /** @internal */\n  static readonly _tempVector3 = new Vector3();\n\n  /**\n   * Determines the sum of two quaternions.\n   * @param left - The first quaternion to add\n   * @param right - The second quaternion to add\n   * @param out - The sum of two quaternions\n   */\n  static add(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n    out.z = left.z + right.z;\n    out.w = left.w + right.w;\n  }\n\n  /**\n   * Determines the product of two quaternions.\n   * @param left - The first quaternion to multiply\n   * @param right - The second quaternion to multiply\n   * @param out - The product of two quaternions\n   */\n  static multiply(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    const ax = left.x,\n      ay = left.y,\n      az = left.z,\n      aw = left.w;\n    const bx = right.x,\n      by = right.y,\n      bz = right.z,\n      bw = right.w;\n\n    out.x = ax * bw + aw * bx + ay * bz - az * by;\n    out.y = ay * bw + aw * by + az * bx - ax * bz;\n    out.z = az * bw + aw * bz + ax * by - ay * bx;\n    out.w = aw * bw - ax * bx - ay * by - az * bz;\n  }\n\n  /**\n   * Calculate quaternion that contains conjugated version of the specified quaternion.\n   * @param a - The specified quaternion\n   * @param out - The conjugate version of the specified quaternion\n   */\n  static conjugate(a: Quaternion, out: Quaternion): void {\n    out.x = -a.x;\n    out.y = -a.y;\n    out.z = -a.z;\n    out.w = a.w;\n  }\n\n  /**\n   * Determines the dot product of two quaternions.\n   * @param left - The first quaternion to dot\n   * @param right - The second quaternion to dot\n   * @returns The dot product of two quaternions\n   */\n  static dot(left: Quaternion, right: Quaternion): number {\n    return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n  }\n\n  /**\n   * Determines whether the specified quaternions are equals.\n   * @param left - The first quaternion to compare\n   * @param right - The second quaternion to compare\n   * @returns True if the specified quaternions are equals, false otherwise\n   */\n  static equals(left: Quaternion, right: Quaternion): boolean {\n    return (\n      MathUtil.equals(left.x, right.x) &&\n      MathUtil.equals(left.y, right.y) &&\n      MathUtil.equals(left.z, right.z) &&\n      MathUtil.equals(left.w, right.w)\n    );\n  }\n\n  /**\n   * Calculate a quaternion rotates around an arbitary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @param out - The quaternion after rotate\n   */\n  static rotationAxisAngle(axis: Vector3, rad: number, out: Quaternion): void {\n    const normalAxis = Quaternion._tempVector3;\n    Vector3.normalize(axis, normalAxis);\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    out.x = normalAxis.x * s;\n    out.y = normalAxis.y * s;\n    out.z = normalAxis.z * s;\n    out.w = Math.cos(rad);\n  }\n\n  /**\n   * Calculate a quaternion rotates around x, y, z axis (pitch/yaw/roll).\n   * @param x - The radian of rotation around X (pitch)\n   * @param y - The radian of rotation around Y (yaw)\n   * @param z - The radian of rotation around Z (roll)\n   * @param out - The calculated quaternion\n   */\n  static rotationEuler(x: number, y: number, z: number, out: Quaternion): void {\n    Quaternion.rotationYawPitchRoll(y, x, z, out);\n  }\n\n  /**\n   * Calculate a quaternion from the specified yaw, pitch and roll angles.\n   * @param yaw - Yaw around the y axis in radians\n   * @param pitch - Pitch around the x axis in radians\n   * @param roll - Roll around the z axis in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationYawPitchRoll(yaw: number, pitch: number, roll: number, out: Quaternion): void {\n    const halfRoll = roll * 0.5;\n    const halfPitch = pitch * 0.5;\n    const halfYaw = yaw * 0.5;\n\n    const sinRoll = Math.sin(halfRoll);\n    const cosRoll = Math.cos(halfRoll);\n    const sinPitch = Math.sin(halfPitch);\n    const cosPitch = Math.cos(halfPitch);\n    const sinYaw = Math.sin(halfYaw);\n    const cosYaw = Math.cos(halfYaw);\n\n    const cosYawPitch = cosYaw * cosPitch;\n    const sinYawPitch = sinYaw * sinPitch;\n\n    out.x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\n    out.y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\n    out.z = cosYawPitch * sinRoll - sinYawPitch * cosRoll;\n    out.w = cosYawPitch * cosRoll + sinYawPitch * sinRoll;\n  }\n\n  /**\n   * Calculate a quaternion from the specified 3x3 matrix.\n   * @param m - The specified 3x3 matrix\n   * @param out - The calculated quaternion\n   */\n  static rotationMatrix3x3(m: Matrix3x3, out: Quaternion): void {\n    const me = m.elements;\n    const m11 = me[0],\n      m12 = me[1],\n      m13 = me[2];\n    const m21 = me[3],\n      m22 = me[4],\n      m23 = me[5];\n    const m31 = me[6],\n      m32 = me[7],\n      m33 = me[8];\n    const scale = m11 + m22 + m33;\n    let sqrt, half;\n\n    if (scale > 0) {\n      sqrt = Math.sqrt(scale + 1.0);\n      out.w = sqrt * 0.5;\n      sqrt = 0.5 / sqrt;\n\n      out.x = (m23 - m32) * sqrt;\n      out.y = (m31 - m13) * sqrt;\n      out.z = (m12 - m21) * sqrt;\n    } else if (m11 >= m22 && m11 >= m33) {\n      sqrt = Math.sqrt(1.0 + m11 - m22 - m33);\n      half = 0.5 / sqrt;\n\n      out.x = 0.5 * sqrt;\n      out.y = (m12 + m21) * half;\n      out.z = (m13 + m31) * half;\n      out.w = (m23 - m32) * half;\n    } else if (m22 > m33) {\n      sqrt = Math.sqrt(1.0 + m22 - m11 - m33);\n      half = 0.5 / sqrt;\n\n      out.x = (m21 + m12) * half;\n      out.y = 0.5 * sqrt;\n      out.z = (m32 + m23) * half;\n      out.w = (m31 - m13) * half;\n    } else {\n      sqrt = Math.sqrt(1.0 + m33 - m11 - m22);\n      half = 0.5 / sqrt;\n\n      out.x = (m13 + m31) * half;\n      out.y = (m23 + m32) * half;\n      out.z = 0.5 * sqrt;\n      out.w = (m12 - m21) * half;\n    }\n  }\n\n  /**\n   * Calculate the inverse of the specified quaternion.\n   * @param a - The quaternion whose inverse is to be calculated\n   * @param out - The inverse of the specified quaternion\n   */\n  static invert(a: Quaternion, out: Quaternion): void {\n    const { x, y, z, w } = a;\n    const dot = x * x + y * y + z * z + w * w;\n    if (dot > MathUtil.zeroTolerance) {\n      const invDot = 1.0 / dot;\n      out.x = -x * invDot;\n      out.y = -y * invDot;\n      out.z = -z * invDot;\n      out.w = w * invDot;\n    }\n  }\n\n  /**\n   * Performs a linear blend between two quaternions.\n   * @param start - The first quaternion\n   * @param end - The second quaternion\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two quaternions\n   */\n  static lerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void {\n    const inv = 1.0 - t;\n    if (Quaternion.dot(start, end) >= 0) {\n      out.x = start.x * inv + end.x * t;\n      out.y = start.y * inv + end.y * t;\n      out.z = start.z * inv + end.z * t;\n      out.w = start.w * inv + end.w * t;\n    } else {\n      out.x = start.x * inv - end.x * t;\n      out.y = start.y * inv - end.y * t;\n      out.z = start.z * inv - end.z * t;\n      out.w = start.w * inv - end.w * t;\n    }\n\n    out.normalize();\n  }\n\n  /**\n   * Performs a spherical linear blend between two quaternions.\n   * @param start - The first quaternion\n   * @param end - The second quaternion\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of spherical linear blending between two quaternions\n   */\n  static slerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void {\n    const ax = start.x;\n    const ay = start.y;\n    const az = start.z;\n    const aw = start.w;\n    let bx = end.x;\n    let by = end.y;\n    let bz = end.z;\n    let bw = end.w;\n\n    let scale0, scale1;\n    // calc cosine\n    let cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > MathUtil.zeroTolerance) {\n      // standard case (slerp)\n      const omega = Math.acos(cosom);\n      const sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    }\n    // calculate final values\n    out.x = scale0 * ax + scale1 * bx;\n    out.y = scale0 * ay + scale1 * by;\n    out.z = scale0 * az + scale1 * bz;\n    out.w = scale0 * aw + scale1 * bw;\n  }\n\n  /**\n   * Scales the specified quaternion magnitude to unit length.\n   * @param a - The specified quaternion\n   * @param out - The normalized quaternion\n   */\n  static normalize(a: Quaternion, out: Quaternion): void {\n    const { x, y, z, w } = a;\n    let len: number = Math.sqrt(x * x + y * y + z * z + w * w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n      out.z = z * len;\n      out.w = w * len;\n    }\n  }\n\n  /**\n   * Calculate a quaternion rotate around X axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationX(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out.x = s;\n    out.y = 0;\n    out.z = 0;\n    out.w = c;\n  }\n\n  /**\n   * Calculate a quaternion rotate around Y axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationY(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out.x = 0;\n    out.y = s;\n    out.z = 0;\n    out.w = c;\n  }\n\n  /**\n   * Calculate a quaternion rotate around Z axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationZ(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out.x = 0;\n    out.y = 0;\n    out.z = s;\n    out.w = c;\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around X axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateX(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { x, y, z, w } = quaternion;\n    rad *= 0.5;\n    const bx = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out.x = x * bw + w * bx;\n    out.y = y * bw + z * bx;\n    out.z = z * bw - y * bx;\n    out.w = w * bw - x * bx;\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around Y axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateY(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { x, y, z, w } = quaternion;\n    rad *= 0.5;\n    const by = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out.x = x * bw - z * by;\n    out.y = y * bw + w * by;\n    out.z = z * bw + x * by;\n    out.w = w * bw - y * by;\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around Z axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateZ(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { x, y, z, w } = quaternion;\n    rad *= 0.5;\n    const bz = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out.x = x * bw + y * bz;\n    out.y = y * bw - x * bz;\n    out.z = z * bw + w * bz;\n    out.w = w * bw - z * bz;\n  }\n\n  /**\n   * Scale a quaternion by a given number.\n   * @param a - The quaternion\n   * @param s - The given number\n   * @param out - The scaled quaternion\n   */\n  static scale(a: Quaternion, s: number, out: Quaternion): void {\n    out.x = a.x * s;\n    out.y = a.y * s;\n    out.z = a.z * s;\n    out.w = a.w * s;\n  }\n\n  /** The x component of the quaternion. */\n  x: number;\n  /** The y component of the quaternion. */\n  y: number;\n  /** The z component of the quaternion. */\n  z: number;\n  /** The w component of the quaternion. */\n  w: number;\n\n  /**\n   * Constructor of Quaternion.\n   * @param x - The x component of the quaternion, default 0\n   * @param y - The y component of the quaternion, default 0\n   * @param z - The z component of the quaternion, default 0\n   * @param w - The w component of the quaternion, default 1\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n\n  /**\n   * Set the value of this quaternion, and return this quaternion.\n   * @param x - The x component of the quaternion\n   * @param y - The y component of the quaternion\n   * @param z - The z component of the quaternion\n   * @param w - The w component of the quaternion\n   * @returns This quaternion\n   */\n  setValue(x: number, y: number, z: number, w: number): Quaternion {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n\n    return this;\n  }\n\n  /**\n   * Set the value of this quaternion by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This quaternion\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Quaternion {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    this.w = array[offset + 3];\n    return this;\n  }\n\n  /**\n   * Transforms this quaternion into its conjugated version.\n   * @returns This quaternion\n   */\n  conjugate(): Quaternion {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n\n    return this;\n  }\n\n  /**\n   * Get the rotation axis and rotation angle of the quaternion (unit: radians).\n   * @param out - The axis as an output parameter\n   * @returns The rotation angle (unit: radians)\n   */\n  getAxisAngle(out: Vector3): number {\n    const { x, y, z } = this;\n    const length = x * x + y * y + z * z;\n\n    if (length < MathUtil.zeroTolerance) {\n      out.x = 1;\n      out.y = 0;\n      out.z = 0;\n\n      return 0;\n    } else {\n      const inv = 1.0 / length;\n      out.x = this.x * inv;\n      out.y = this.y * inv;\n      out.z = this.z * inv;\n\n      return Math.acos(this.w) * 2.0;\n    }\n  }\n\n  /**\n   * Identity this quaternion.\n   * @returns This quaternion after identity\n   */\n  identity(): Quaternion {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 1;\n    return this;\n  }\n\n  /**\n   * Calculate the length of this quaternion.\n   * @returns The length of this quaternion\n   */\n  length(): number {\n    const { x, y, z, w } = this;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Calculates the squared length of this quaternion.\n   * @returns The squared length of this quaternion\n   */\n  lengthSquared(): number {\n    const { x, y, z, w } = this;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Converts this quaternion into a unit quaternion.\n   * @returns This quaternion\n   */\n  normalize(): Quaternion {\n    Quaternion.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Get the euler of this quaternion.\n   * @param out - The euler (in radians) as an output parameter\n   * @returns Euler x->pitch y->yaw z->roll\n   */\n  toEuler(out: Vector3): Vector3 {\n    this.toYawPitchRoll(out);\n    const t = out.x;\n    out.x = out.y;\n    out.y = t;\n    return out;\n  }\n\n  /**\n   * Get the euler of this quaternion.\n   * @param out - The euler (in radians) as an output parameter\n   * @returns Euler x->yaw y->pitch z->roll\n   */\n  toYawPitchRoll(out: Vector3): Vector3 {\n    const { x, y, z, w } = this;\n    const xx = x * x;\n    const yy = y * y;\n    const zz = z * z;\n    const xy = x * y;\n    const zw = z * w;\n    const zx = z * x;\n    const yw = y * w;\n    const yz = y * z;\n    const xw = x * w;\n\n    out.y = Math.asin(2.0 * (xw - yz));\n    if (Math.cos(out.y) > MathUtil.zeroTolerance) {\n      out.z = Math.atan2(2.0 * (xy + zw), 1.0 - 2.0 * (zz + xx));\n      out.x = Math.atan2(2.0 * (zx + yw), 1.0 - 2.0 * (yy + xx));\n    } else {\n      out.z = Math.atan2(-2.0 * (xy - zw), 1.0 - 2.0 * (yy + zz));\n      out.x = 0.0;\n    }\n\n    return out;\n  }\n\n  /**\n   * Clone the value of this quaternion to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n    out[outOffset + 2] = this.z;\n    out[outOffset + 3] = this.w;\n  }\n\n  /**\n   * Creates a clone of this quaternion.\n   * @returns A clone of this quaternion\n   */\n  clone(): Quaternion {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  }\n\n  /**\n   * Clones this quaternion to the specified quaternion.\n   * @param out - The specified quaternion\n   * @returns The specified quaternion\n   */\n  cloneTo(out: Quaternion): Quaternion {\n    out.x = this.x;\n    out.y = this.y;\n    out.z = this.z;\n    out.w = this.w;\n    return out;\n  }\n\n  /**\n   * Calculate this quaternion rotate around X axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateX(rad: number): Quaternion {\n    Quaternion.rotateX(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotate around Y axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateY(rad: number): Quaternion {\n    Quaternion.rotateY(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotate around Z axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateZ(rad: number): Quaternion {\n    Quaternion.rotateZ(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotates around an arbitary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotationAxisAngle(axis: Vector3, rad: number): Quaternion {\n    Quaternion.rotationAxisAngle(axis, rad, this);\n    return this;\n  }\n\n  /**\n   * Determines the product of this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @returns The product of the two quaternions\n   */\n  multiply(quat: Quaternion): Quaternion {\n    Quaternion.multiply(this, quat, this);\n    return this;\n  }\n\n  /**\n   * Invert this quaternion.\n   * @returns This quaternion after invert\n   */\n  invert(): Quaternion {\n    Quaternion.invert(this, this);\n    return this;\n  }\n\n  /**\n   * Determines the dot product of this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @returns The dot product of two quaternions\n   */\n  dot(quat: Quaternion): number {\n    return Quaternion.dot(this, quat);\n  }\n\n  /**\n   * Performs a linear blend between this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @param t - The blend amount where 0 returns this and 1 quat\n   * @returns - The result of linear blending between two quaternions\n   */\n  lerp(quat: Quaternion, t: number): Quaternion {\n    Quaternion.lerp(this, quat, t, this);\n    return this;\n  }\n}\n", "import { IClone } from \"@oasis-engine/design\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a 4x4 mathematical matrix.\n */\nexport class Matrix implements IClone {\n  private static readonly _tempVec30: Vector3 = new Vector3();\n  private static readonly _tempVec31: Vector3 = new Vector3();\n  private static readonly _tempVec32: Vector3 = new Vector3();\n  private static readonly _tempMat30: Matrix3x3 = new Matrix3x3();\n\n  /** @internal Identity matrix. */\n  static readonly _identity: Matrix = new Matrix(\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0\n  );\n\n  /**\n   * Determines the product of two matrices.\n   * @param left - The first matrix to multiply\n   * @param right - The second matrix to multiply\n   * @param out - The product of the two matrices\n   */\n  static multiply(left: Matrix, right: Matrix, out: Matrix): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    const l11 = le[0],\n      l12 = le[1],\n      l13 = le[2],\n      l14 = le[3];\n    const l21 = le[4],\n      l22 = le[5],\n      l23 = le[6],\n      l24 = le[7];\n    const l31 = le[8],\n      l32 = le[9],\n      l33 = le[10],\n      l34 = le[11];\n    const l41 = le[12],\n      l42 = le[13],\n      l43 = le[14],\n      l44 = le[15];\n\n    const r11 = re[0],\n      r12 = re[1],\n      r13 = re[2],\n      r14 = re[3];\n    const r21 = re[4],\n      r22 = re[5],\n      r23 = re[6],\n      r24 = re[7];\n    const r31 = re[8],\n      r32 = re[9],\n      r33 = re[10],\n      r34 = re[11];\n    const r41 = re[12],\n      r42 = re[13],\n      r43 = re[14],\n      r44 = re[15];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13 + l41 * r14;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13 + l42 * r14;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13 + l43 * r14;\n    oe[3] = l14 * r11 + l24 * r12 + l34 * r13 + l44 * r14;\n\n    oe[4] = l11 * r21 + l21 * r22 + l31 * r23 + l41 * r24;\n    oe[5] = l12 * r21 + l22 * r22 + l32 * r23 + l42 * r24;\n    oe[6] = l13 * r21 + l23 * r22 + l33 * r23 + l43 * r24;\n    oe[7] = l14 * r21 + l24 * r22 + l34 * r23 + l44 * r24;\n\n    oe[8] = l11 * r31 + l21 * r32 + l31 * r33 + l41 * r34;\n    oe[9] = l12 * r31 + l22 * r32 + l32 * r33 + l42 * r34;\n    oe[10] = l13 * r31 + l23 * r32 + l33 * r33 + l43 * r34;\n    oe[11] = l14 * r31 + l24 * r32 + l34 * r33 + l44 * r34;\n\n    oe[12] = l11 * r41 + l21 * r42 + l31 * r43 + l41 * r44;\n    oe[13] = l12 * r41 + l22 * r42 + l32 * r43 + l42 * r44;\n    oe[14] = l13 * r41 + l23 * r42 + l33 * r43 + l43 * r44;\n    oe[15] = l14 * r41 + l24 * r42 + l34 * r43 + l44 * r44;\n  }\n\n  /**\n   * Determines whether the specified matrices are equals.\n   * @param left - The first matrix to compare\n   * @param right - The second matrix to compare\n   * @returns True if the specified matrices are equals, false otherwise\n   */\n  static equals(left: Matrix, right: Matrix): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8]) &&\n      MathUtil.equals(le[9], re[9]) &&\n      MathUtil.equals(le[10], re[10]) &&\n      MathUtil.equals(le[11], re[11]) &&\n      MathUtil.equals(le[12], re[12]) &&\n      MathUtil.equals(le[13], re[13]) &&\n      MathUtil.equals(le[14], re[14]) &&\n      MathUtil.equals(le[15], re[15])\n    );\n  }\n\n  /**\n   * Calculate a rotation matrix from a quaternion.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param out - The calculated rotation matrix\n   */\n  static rotationQuaternion(quaternion: Quaternion, out: Matrix): void {\n    const oe = out.elements;\n    const { x, y, z, w } = quaternion;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[1] = yx + wz;\n    oe[2] = zx - wy;\n    oe[3] = 0;\n\n    oe[4] = yx - wz;\n    oe[5] = 1 - xx - zz;\n    oe[6] = zy + wx;\n    oe[7] = 0;\n\n    oe[8] = zx + wy;\n    oe[9] = zy - wx;\n    oe[10] = 1 - xx - yy;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix rotates around an arbitary axis.\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @param out - The matrix after rotate\n   */\n  static rotationAxisAngle(axis: Vector3, r: number, out: Matrix): void {\n    const oe = out.elements;\n    let { x, y, z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n    let s, c, t;\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = x * x * t + c;\n    oe[1] = y * x * t + z * s;\n    oe[2] = z * x * t - y * s;\n    oe[3] = 0;\n\n    oe[4] = x * y * t - z * s;\n    oe[5] = y * y * t + c;\n    oe[6] = z * y * t + x * s;\n    oe[7] = 0;\n\n    oe[8] = x * z * t + y * s;\n    oe[9] = y * z * t - x * s;\n    oe[10] = z * z * t + c;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from a quaternion and a translation.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param translation - The translation used to calculate the matrix\n   * @param out - The calculated matrix\n   */\n  static rotationTranslation(quaternion: Quaternion, translation: Vector3, out: Matrix): void {\n    Matrix.rotationQuaternion(quaternion, out);\n\n    const oe = out.elements;\n    oe[12] = translation.x;\n    oe[13] = translation.y;\n    oe[14] = translation.z;\n  }\n\n  /**\n   * Calculate an affine matrix.\n   * @param scale - The scale used to calculate matrix\n   * @param rotation - The rotation used to calculate matrix\n   * @param translation - The translation used to calculate matrix\n   * @param out - The calculated matrix\n   */\n  static affineTransformation(scale: Vector3, rotation: Quaternion, translation: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const { x, y, z, w } = rotation;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = scale.x;\n    let sy = scale.y;\n    let sz = scale.z;\n\n    oe[0] = (1 - (yy + zz)) * sx;\n    oe[1] = (xy + wz) * sx;\n    oe[2] = (xz - wy) * sx;\n    oe[3] = 0;\n\n    oe[4] = (xy - wz) * sy;\n    oe[5] = (1 - (xx + zz)) * sy;\n    oe[6] = (yz + wx) * sy;\n    oe[7] = 0;\n\n    oe[8] = (xz + wy) * sz;\n    oe[9] = (yz - wx) * sz;\n    oe[10] = (1 - (xx + yy)) * sz;\n    oe[11] = 0;\n\n    oe[12] = translation.x;\n    oe[13] = translation.y;\n    oe[14] = translation.z;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from scale vector.\n   * @param s - The scale vector\n   * @param out - The calculated matrix\n   */\n  static scaling(s: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = s.x;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = s.y;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = s.z;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from translation vector.\n   * @param translation - The translation vector\n   * @param out - The calculated matrix\n   */\n  static translation(translation: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = 1;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 1;\n    oe[11] = 0;\n\n    oe[12] = translation.x;\n    oe[13] = translation.y;\n    oe[14] = translation.z;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate the inverse of the specified matrix.\n   * @param a - The matrix whose inverse is to be calculated\n   * @param out - The inverse of the specified matrix\n   */\n  static invert(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[2] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[3] = (a33 * b04 - a32 * b05 - a34 * b03) * det;\n\n    oe[4] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[5] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[6] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[7] = (a31 * b05 - a33 * b02 + a34 * b01) * det;\n\n    oe[8] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n    oe[9] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n    oe[10] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n    oe[11] = (a32 * b02 - a31 * b04 - a34 * b00) * det;\n\n    oe[12] = (a22 * b07 - a21 * b09 - a23 * b06) * det;\n    oe[13] = (a11 * b09 - a12 * b07 + a13 * b06) * det;\n    oe[14] = (a42 * b01 - a41 * b03 - a43 * b00) * det;\n    oe[15] = (a31 * b03 - a32 * b01 + a33 * b00) * det;\n  }\n\n  /**\n   * Calculate a right-handed look-at matrix.\n   * @param eye - The position of the viewer's eye\n   * @param target - The camera look-at target\n   * @param up - The camera's up vector\n   * @param out - The calculated look-at matrix\n   */\n  static lookAt(eye: Vector3, target: Vector3, up: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const xAxis: Vector3 = Matrix._tempVec30;\n    const yAxis: Vector3 = Matrix._tempVec31;\n    const zAxis: Vector3 = Matrix._tempVec32;\n\n    Vector3.subtract(eye, target, zAxis);\n    zAxis.normalize();\n    Vector3.cross(up, zAxis, xAxis);\n    xAxis.normalize();\n    Vector3.cross(zAxis, xAxis, yAxis);\n\n    oe[0] = xAxis.x;\n    oe[1] = yAxis.x;\n    oe[2] = zAxis.x;\n    oe[3] = 0;\n\n    oe[4] = xAxis.y;\n    oe[5] = yAxis.y;\n    oe[6] = zAxis.y;\n    oe[7] = 0;\n\n    oe[8] = xAxis.z;\n    oe[9] = yAxis.z;\n    oe[10] = zAxis.z;\n    oe[11] = 0;\n\n    oe[12] = -Vector3.dot(xAxis, eye);\n    oe[13] = -Vector3.dot(yAxis, eye);\n    oe[14] = -Vector3.dot(zAxis, eye);\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate an orthographic projection matrix.\n   * @param left - The left edge of the viewing\n   * @param right - The right edge of the viewing\n   * @param bottom - The bottom edge of the viewing\n   * @param top - The top edge of the viewing\n   * @param near - The depth of the near plane\n   * @param far - The depth of the far plane\n   * @param out - The calculated orthographic projection matrix\n   */\n  static ortho(left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n\n    oe[0] = -2 * lr;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = -2 * bt;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 2 * nf;\n    oe[11] = 0;\n\n    oe[12] = (left + right) * lr;\n    oe[13] = (top + bottom) * bt;\n    oe[14] = (far + near) * nf;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a perspective projection matrix.\n   * @param fovy - Field of view in the y direction, in radians\n   * @param aspect - Aspect ratio, defined as view space width divided by height\n   * @param near - The depth of the near plane\n   * @param far - The depth of the far plane\n   * @param out - The calculated perspective projection matrix\n   */\n  static perspective(fovy: number, aspect: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const f = 1.0 / Math.tan(fovy / 2);\n    const nf = 1 / (near - far);\n\n    oe[0] = f / aspect;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = f;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = (far + near) * nf;\n    oe[11] = -1;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 2 * far * near * nf;\n    oe[15] = 0;\n  }\n\n  /**\n   * The specified matrix rotates around an arbitary axis.\n   * @param m - The specified matrix\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @param out - The rotated matrix\n   */\n  static rotateAxisAngle(m: Matrix, axis: Vector3, r: number, out: Matrix): void {\n    let { x, y, z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    const me = m.elements;\n    const oe = out.elements;\n    let s, c, t;\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    let a11 = me[0],\n      a12 = me[1],\n      a13 = me[2],\n      a14 = me[3];\n    let a21 = me[4],\n      a22 = me[5],\n      a23 = me[6],\n      a24 = me[7];\n    let a31 = me[8],\n      a32 = me[9],\n      a33 = me[10],\n      a34 = me[11];\n\n    // Construct the elements of the rotation matrix\n    let b11 = x * x * t + c;\n    let b12 = y * x * t + z * s;\n    let b13 = z * x * t - y * s;\n    let b21 = x * y * t - z * s;\n    let b22 = y * y * t + c;\n    let b23 = z * y * t + x * s;\n    let b31 = x * z * t + y * s;\n    let b32 = y * z * t - x * s;\n    let b33 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = a11 * b11 + a21 * b12 + a31 * b13;\n    oe[1] = a12 * b11 + a22 * b12 + a32 * b13;\n    oe[2] = a13 * b11 + a23 * b12 + a33 * b13;\n    oe[3] = a14 * b11 + a24 * b12 + a34 * b13;\n\n    oe[4] = a11 * b21 + a21 * b22 + a31 * b23;\n    oe[5] = a12 * b21 + a22 * b22 + a32 * b23;\n    oe[6] = a13 * b21 + a23 * b22 + a33 * b23;\n    oe[7] = a14 * b21 + a24 * b22 + a34 * b23;\n\n    oe[8] = a11 * b31 + a21 * b32 + a31 * b33;\n    oe[9] = a12 * b31 + a22 * b32 + a32 * b33;\n    oe[10] = a13 * b31 + a23 * b32 + a33 * b33;\n    oe[11] = a14 * b31 + a24 * b32 + a34 * b33;\n\n    if (m !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      oe[12] = me[12];\n      oe[13] = me[13];\n      oe[14] = me[14];\n      oe[15] = me[15];\n    }\n  }\n\n  /**\n   * Scale a matrix by a given vector.\n   * @param m - The matrix\n   * @param s - The given vector\n   * @param out - The scaled matrix\n   */\n  static scale(m: Matrix, s: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { x, y, z } = s;\n\n    oe[0] = me[0] * x;\n    oe[1] = me[1] * x;\n    oe[2] = me[2] * x;\n    oe[3] = me[3] * x;\n\n    oe[4] = me[4] * y;\n    oe[5] = me[5] * y;\n    oe[6] = me[6] * y;\n    oe[7] = me[7] * y;\n\n    oe[8] = me[8] * z;\n    oe[9] = me[9] * z;\n    oe[10] = me[10] * z;\n    oe[11] = me[11] * z;\n\n    oe[12] = me[12];\n    oe[13] = me[13];\n    oe[14] = me[14];\n    oe[15] = me[15];\n  }\n\n  /**\n   * Translate a matrix by a given vector.\n   * @param m - The matrix\n   * @param v - The given vector\n   * @param out - The translated matrix\n   */\n  static translate(m: Matrix, v: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { x, y, z } = v;\n\n    if (m === out) {\n      oe[12] = me[0] * x + me[4] * y + me[8] * z + me[12];\n      oe[13] = me[1] * x + me[5] * y + me[9] * z + me[13];\n      oe[14] = me[2] * x + me[6] * y + me[10] * z + me[14];\n      oe[15] = me[3] * x + me[7] * y + me[11] * z + me[15];\n    } else {\n      const a11 = me[0],\n        a12 = me[1],\n        a13 = me[2],\n        a14 = me[3];\n      const a21 = me[4],\n        a22 = me[5],\n        a23 = me[6],\n        a24 = me[7];\n      const a31 = me[8],\n        a32 = me[9],\n        a33 = me[10],\n        a34 = me[11];\n\n      (oe[0] = a11), (oe[1] = a12), (oe[2] = a13), (oe[3] = a14);\n      (oe[4] = a21), (oe[5] = a22), (oe[6] = a23), (oe[7] = a24);\n      (oe[8] = a31), (oe[9] = a32), (oe[10] = a33), (oe[11] = a34);\n\n      oe[12] = a11 * x + a21 * y + a31 * z + me[12];\n      oe[13] = a12 * x + a22 * y + a32 * z + me[13];\n      oe[14] = a13 * x + a23 * y + a33 * z + me[14];\n      oe[15] = a14 * x + a24 * y + a34 * z + me[15];\n    }\n  }\n\n  /**\n   * Calculate the transpose of the specified matrix.\n   * @param a - The specified matrix\n   * @param out - The transpose of the specified matrix\n   */\n  static transpose(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a14 = ae[3];\n      const a23 = ae[6];\n      const a24 = ae[7];\n      const a34 = ae[11];\n\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = a12;\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = a13;\n      oe[9] = a23;\n      oe[11] = ae[14];\n\n      oe[12] = a14;\n      oe[13] = a24;\n      oe[14] = a34;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = ae[1];\n      oe[5] = ae[5];\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = ae[2];\n      oe[9] = ae[6];\n      oe[10] = ae[10];\n      oe[11] = ae[14];\n\n      oe[12] = ae[3];\n      oe[13] = ae[7];\n      oe[14] = ae[11];\n      oe[15] = ae[15];\n    }\n  }\n\n  /**\n   * An array containing the elements of the matrix (column matrix).\n   * @remarks\n   * elements[0] first column and first row value m11\n   * elements[1] first column and second row value m12\n   * elements[2] first column and third row value m13\n   * elements[3] first column and fourth row value m14\n   * elements[4] second column and first row value m21\n   * and so on\n   */\n  elements: Float32Array = new Float32Array(16);\n\n  /**\n   * Constructor of 4x4 Matrix.\n   * @param m11 - default 1, column 1, row 1\n   * @param m12 - default 0, column 1, row 2\n   * @param m13 - default 0, column 1, row 3\n   * @param m14 - default 0, column 1, row 4\n   * @param m21 - default 0, column 2, row 1\n   * @param m22 - default 1, column 2, row 2\n   * @param m23 - default 0, column 2, row 3\n   * @param m24 - default 0, column 2, row 4\n   * @param m31 - default 0, column 3, row 1\n   * @param m32 - default 0, column 3, row 2\n   * @param m33 - default 1, column 3, row 3\n   * @param m34 - default 0, column 3, row 4\n   * @param m41 - default 0, column 4, row 1\n   * @param m42 - default 0, column 4, row 2\n   * @param m43 - default 0, column 4, row 3\n   * @param m44 - default 1, column 4, row 4\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m14: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m24: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1,\n    m34: number = 0,\n    m41: number = 0,\n    m42: number = 0,\n    m43: number = 0,\n    m44: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n  }\n\n  /**\n   * Set the value of this matrix, and return this matrix.\n   * @param m11 - column 1, row 1\n   * @param m12 - column 1, row 2\n   * @param m13 - column 1, row 3\n   * @param m14 - column 1, row 4\n   * @param m21 - column 2, row 1\n   * @param m22 - column 2, row 2\n   * @param m23 - column 2, row 3\n   * @param m24 - column 2, row 4\n   * @param m31 - column 3, row 1\n   * @param m32 - column 3, row 2\n   * @param m33 - column 3, row 3\n   * @param m34 - column 3, row 4\n   * @param m41 - column 4, row 1\n   * @param m42 - column 4, row 2\n   * @param m43 - column 4, row 3\n   * @param m44 - column 4, row 4\n   * @returns This matrix\n   */\n  setValue(\n    m11: number,\n    m12: number,\n    m13: number,\n    m14: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m24: number,\n    m31: number,\n    m32: number,\n    m33: number,\n    m34: number,\n    m41: number,\n    m42: number,\n    m43: number,\n    m44: number\n  ): Matrix {\n    const e = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n\n    return this;\n  }\n\n  /**\n   * Set the value of this matrix by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This matrix\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Matrix {\n    const srce = this.elements;\n    for (let i = 0; i < 16; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Clone the value of this matrix to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n    out[outOffset + 9] = e[9];\n    out[outOffset + 10] = e[10];\n    out[outOffset + 11] = e[11];\n    out[outOffset + 12] = e[12];\n    out[outOffset + 13] = e[13];\n    out[outOffset + 14] = e[14];\n    out[outOffset + 15] = e[15];\n  }\n\n  /**\n   * Creates a clone of this matrix.\n   * @returns A clone of this matrix\n   */\n  clone(): Matrix {\n    const e = this.elements;\n    let ret = new Matrix(\n      e[0],\n      e[1],\n      e[2],\n      e[3],\n      e[4],\n      e[5],\n      e[6],\n      e[7],\n      e[8],\n      e[9],\n      e[10],\n      e[11],\n      e[12],\n      e[13],\n      e[14],\n      e[15]\n    );\n    return ret;\n  }\n\n  /**\n   * Clones this matrix to the specified matrix.\n   * @param out - The specified matrix\n   * @returns The specified matrix\n   */\n  cloneTo(out: Matrix): Matrix {\n    const e = this.elements;\n    const oe = out.elements;\n\n    oe[0] = e[0];\n    oe[1] = e[1];\n    oe[2] = e[2];\n    oe[3] = e[3];\n\n    oe[4] = e[4];\n    oe[5] = e[5];\n    oe[6] = e[6];\n    oe[7] = e[7];\n\n    oe[8] = e[8];\n    oe[9] = e[9];\n    oe[10] = e[10];\n    oe[11] = e[11];\n\n    oe[12] = e[12];\n    oe[13] = e[13];\n    oe[14] = e[14];\n    oe[15] = e[15];\n\n    return out;\n  }\n\n  /**\n   * Determines the product of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the product of the two matrices\n   */\n  multiply(right: Matrix): Matrix {\n    Matrix.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * Calculate a determinant of this matrix.\n   * @returns The determinant of this matrix\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2],\n      a14 = e[3];\n    const a21 = e[4],\n      a22 = e[5],\n      a23 = e[6],\n      a24 = e[7];\n    const a31 = e[8],\n      a32 = e[9],\n      a33 = e[10],\n      a34 = e[11];\n    const a41 = e[12],\n      a42 = e[13],\n      a43 = e[14],\n      a44 = e[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  }\n\n  /**\n   * Decompose this matrix to translation, rotation and scale elements.\n   * @param translation - Translation vector as an output parameter\n   * @param rotation - Rotation quaternion as an output parameter\n   * @param scale - Scale vector as an output parameter\n   * @returns True if this matrix can be decomposed, false otherwise\n   */\n  decompose(translation: Vector3, rotation: Quaternion, scale: Vector3): boolean {\n    const rm: Matrix3x3 = Matrix._tempMat30;\n\n    const e = this.elements;\n    const rme = rm.elements;\n\n    const m11 = e[0];\n    const m12 = e[1];\n    const m13 = e[2];\n    const m14 = e[3];\n    const m21 = e[4];\n    const m22 = e[5];\n    const m23 = e[6];\n    const m24 = e[7];\n    const m31 = e[8];\n    const m32 = e[9];\n    const m33 = e[10];\n    const m34 = e[11];\n\n    translation.x = e[12];\n    translation.y = e[13];\n    translation.z = e[14];\n\n    const xs = Math.sign(m11 * m12 * m13 * m14) < 0 ? -1 : 1;\n    const ys = Math.sign(m21 * m22 * m23 * m24) < 0 ? -1 : 1;\n    const zs = Math.sign(m31 * m32 * m33 * m34) < 0 ? -1 : 1;\n\n    const sx = xs * Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    const sy = ys * Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    const sz = zs * Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n    scale.x = sx;\n    scale.y = sy;\n    scale.z = sz;\n\n    if (\n      Math.abs(sx) < MathUtil.zeroTolerance ||\n      Math.abs(sy) < MathUtil.zeroTolerance ||\n      Math.abs(sz) < MathUtil.zeroTolerance\n    ) {\n      rotation.identity();\n      return false;\n    } else {\n      const invSX = 1 / sx;\n      const invSY = 1 / sy;\n      const invSZ = 1 / sz;\n\n      rme[0] = m11 * invSX;\n      rme[1] = m12 * invSX;\n      rme[2] = m13 * invSX;\n      rme[3] = m21 * invSY;\n      rme[4] = m22 * invSY;\n      rme[5] = m23 * invSY;\n      rme[6] = m31 * invSZ;\n      rme[7] = m32 * invSZ;\n      rme[8] = m33 * invSZ;\n      Quaternion.rotationMatrix3x3(rm, rotation);\n      return true;\n    }\n  }\n\n  /**\n   * Get rotation from this matrix.\n   * @param out - Rotation quaternion as an output parameter\n   * @returns The out\n   */\n  getRotation(out: Quaternion): Quaternion {\n    const e = this.elements;\n    let trace = e[0] + e[5] + e[10];\n\n    if (trace > MathUtil.zeroTolerance) {\n      let S = Math.sqrt(trace + 1.0) * 2;\n      out.w = 0.25 * S;\n      out.x = (e[6] - e[9]) / S;\n      out.y = (e[8] - e[2]) / S;\n      out.z = (e[1] - e[4]) / S;\n    } else if (e[0] > e[5] && e[0] > e[10]) {\n      let S = Math.sqrt(1.0 + e[0] - e[5] - e[10]) * 2;\n      out.w = (e[6] - e[9]) / S;\n      out.x = 0.25 * S;\n      out.y = (e[1] + e[4]) / S;\n      out.z = (e[8] + e[2]) / S;\n    } else if (e[5] > e[10]) {\n      let S = Math.sqrt(1.0 + e[5] - e[0] - e[10]) * 2;\n      out.w = (e[8] - e[2]) / S;\n      out.x = (e[1] + e[4]) / S;\n      out.y = 0.25 * S;\n      out.z = (e[6] + e[9]) / S;\n    } else {\n      let S = Math.sqrt(1.0 + e[10] - e[0] - e[5]) * 2;\n      out.w = (e[1] - e[4]) / S;\n      out.x = (e[8] + e[2]) / S;\n      out.y = (e[6] + e[9]) / S;\n      out.z = 0.25 * S;\n    }\n\n    return out;\n  }\n\n  /**\n   * Get scale from this matrix.\n   * @param out - Scale vector as an output parameter\n   * @returns The out\n   */\n  getScaling(out: Vector3): Vector3 {\n    //getScale()\n    const e = this.elements;\n    const m11 = e[0],\n      m12 = e[1],\n      m13 = e[2];\n    const m21 = e[4],\n      m22 = e[5],\n      m23 = e[6];\n    const m31 = e[8],\n      m32 = e[9],\n      m33 = e[10];\n\n    out.x = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    out.y = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    out.z = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n    return out;\n  }\n\n  /**\n   * Get translation from this matrix.\n   * @param out - Translation vector as an output parameter\n   * @returns The out\n   */\n  getTranslation(out: Vector3): Vector3 {\n    const e = this.elements;\n\n    out.x = e[12];\n    out.y = e[13];\n    out.z = e[14];\n\n    return out;\n  }\n\n  /**\n   * Identity this matrix.\n   * @returns This matrix after identity\n   */\n  identity(): Matrix {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n\n    e[4] = 0;\n    e[5] = 1;\n    e[6] = 0;\n    e[7] = 0;\n\n    e[8] = 0;\n    e[9] = 0;\n    e[10] = 1;\n    e[11] = 0;\n\n    e[12] = 0;\n    e[13] = 0;\n    e[14] = 0;\n    e[15] = 1;\n\n    return this;\n  }\n\n  /**\n   * Invert the matrix.\n   * @returns The matrix after invert\n   */\n  invert(): Matrix {\n    Matrix.invert(this, this);\n    return this;\n  }\n\n  /**\n   * This matrix rotates around an arbitary axis.\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @returns This matrix after rotate\n   */\n  rotateAxisAngle(axis: Vector3, r: number): Matrix {\n    Matrix.rotateAxisAngle(this, axis, r, this);\n    return this;\n  }\n\n  /**\n   * Scale this matrix by a given vector.\n   * @param s - The given vector\n   * @returns This matrix after scale\n   */\n  scale(s: Vector3): Matrix {\n    Matrix.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * Translate this matrix by a given vector.\n   * @param v - The given vector\n   * @returns This matrix after translate\n   */\n  translate(v: Vector3): Matrix {\n    Matrix.translate(this, v, this);\n    return this;\n  }\n\n  /**\n   * Calculate the transpose of this matrix.\n   * @returns This matrix after transpose\n   */\n  transpose(): Matrix {\n    Matrix.transpose(this, this);\n    return this;\n  }\n}\n", "import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { CollisionUtil } from \"./CollisionUtil\";\nimport { Plane } from \"./Plane\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a ray with an origin and a direction in 3D space.\n */\nexport class Ray {\n  /** The origin of the ray. */\n  readonly origin: Vector3 = new Vector3();\n  /** The direction of the ray. */\n  readonly direction: Vector3 = new Vector3();\n\n  /**\n   * Constructor of Ray.\n   * @param origin - The origin vector\n   * @param direction - The direction vector\n   */\n  constructor(origin: Vector3 = null, direction: Vector3 = null) {\n    origin && origin.cloneTo(this.origin);\n    direction && direction.cloneTo(this.direction);\n  }\n\n  /**\n   * Check if this ray intersects the specified plane.\n   * @param plane - The specified plane\n   * @returns The distance from this ray to the specified plane if intersecting, -1 otherwise\n   */\n  intersectPlane(plane: Plane): number {\n    return CollisionUtil.intersectsRayAndPlane(this, plane);\n  }\n\n  /**\n   * Check if this ray intersects the specified sphere.\n   * @param sphere - The specified sphere\n   * @returns The distance from this ray to the specified sphere if intersecting, -1 otherwise\n   */\n  intersectSphere(sphere: BoundingSphere): number {\n    return CollisionUtil.intersectsRayAndSphere(this, sphere);\n  }\n\n  /**\n   * Check if this ray intersects the specified box (AABB).\n   * @param box - The specified box\n   * @returns The distance from this ray to the specified box if intersecting, -1 otherwise\n   */\n  intersectBox(box: BoundingBox): number {\n    return CollisionUtil.intersectsRayAndBox(this, box);\n  }\n\n  /**\n   * The coordinates of the specified distance from the origin in the ray direction.\n   * @param distance - The specified distance\n   * @param out - The coordinates as an output parameter\n   * @returns The out\n   */\n  getPoint(distance: number, out: Vector3): Vector3 {\n    Vector3.scale(this.direction, distance, out);\n    return out.add(this.origin);\n  }\n}\n", "import { MathUtil } from \"./MathUtil\";\nimport { Vector3 } from \"./Vector3\";\n\n// Prevent gimbal lock.\nconst ESP = MathUtil.zeroTolerance;\n\n// Spherical.\nexport class Spherical {\n  public radius;\n  public phi;\n  public theta;\n\n  constructor(radius?, phi?, theta?) {\n    this.radius = radius !== undefined ? radius : 1.0;\n    this.phi = phi !== undefined ? phi : 0;\n    this.theta = theta !== undefined ? theta : 0;\n  }\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n\n    return this;\n  }\n\n  makeSafe() {\n    this.phi = MathUtil.clamp(this.phi, ESP, Math.PI - ESP);\n    return this;\n  }\n\n  setFromVec3(v3: Vector3) {\n    this.radius = v3.length();\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(v3.x, v3.z);\n      this.phi = Math.acos(MathUtil.clamp(v3.y / this.radius, -1, 1));\n    }\n\n    return this;\n  }\n\n  setToVec3(v3: Vector3) {\n    const sinPhiRadius = Math.sin(this.phi) * this.radius;\n\n    v3.x = sinPhiRadius * Math.sin(this.theta);\n    v3.y = Math.cos(this.phi) * this.radius;\n    v3.z = sinPhiRadius * Math.cos(this.theta);\n\n    return this;\n  }\n}\n", "import { IClone } from \"@oasis-engine/design\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a 2D-vector.\n */\nexport class Vector2 implements IClone {\n  /** @internal zero.*/\n  static readonly _zero = new Vector2(0.0, 0.0);\n  /** @internal one.*/\n  static readonly _one = new Vector2(1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x - right.x;\n    out.y = left.y - right.y;\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x * right.x;\n    out.y = left.y * right.y;\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x / right.x;\n    out.y = left.y / right.y;\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector2, right: Vector2): number {\n    return left.x * right.x + left.y * right.y;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(left: Vector2, right: Vector2): number {\n    const x = right.x - left.x;\n    const y = right.y - left.y;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(left: Vector2, right: Vector2): number {\n    const x = right.x - left.x;\n    const y = right.y - left.y;\n    return x * x + y * y;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector2, right: Vector2): boolean {\n    return MathUtil.equals(left.x, right.x) && MathUtil.equals(left.y, right.y);\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param t - The blend amount where 0 returns left and 1 right\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(left: Vector2, right: Vector2, t: number, out: Vector2): void {\n    const { x, y } = left;\n    out.x = x + (right.x - x) * t;\n    out.y = y + (right.y - y) * t;\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = Math.max(left.x, right.x);\n    out.y = Math.max(left.y, right.y);\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = Math.min(left.x, right.x);\n    out.y = Math.min(left.y, right.y);\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param left - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(left: Vector2, out: Vector2): void {\n    out.x = -left.x;\n    out.y = -left.y;\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param left - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(left: Vector2, out: Vector2): void {\n    const { x, y } = left;\n    let len: number = Math.sqrt(x * x + y * y);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param left - The vector to scale\n   * @param scale - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(left: Vector2, s: number, out: Vector2): void {\n    out.x = left.x * s;\n    out.y = left.y * s;\n  }\n\n  /** The x component of the vector. */\n  x: number;\n  /** The y component of the vector. */\n  y: number;\n\n  /**\n   * Constructor of Vector2.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @returns This vector\n   */\n  setValue(x: number, y: number): Vector2 {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Set the value of this vector by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Vector2 {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector2): Vector2 {\n    this.x += right.x;\n    this.y += right.y;\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector2): Vector2 {\n    this.x -= right.x;\n    this.y -= right.y;\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector2): Vector2 {\n    this.x *= right.x;\n    this.y *= right.y;\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  divide(right: Vector2): Vector2 {\n    this.x /= right.x;\n    this.y /= right.y;\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { x, y } = this;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { x, y } = this;\n    return x * x + y * y;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector2 {\n    this.x = -this.x;\n    this.y = -this.y;\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector2 {\n    Vector2.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector2 {\n    this.x *= s;\n    this.y *= s;\n    return this;\n  }\n\n  /**\n   * Clone the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector2 {\n    return new Vector2(this.x, this.y);\n  }\n\n  /**\n   * Clones this vector to the specified vector.\n   * @param out - The specified vector\n   * @returns The specified vector\n   */\n  cloneTo(out: Vector2): Vector2 {\n    out.x = this.x;\n    out.y = this.y;\n    return out;\n  }\n}\n", "import { IClone } from \"@oasis-engine/design\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\n\n/**\n * Describes a 4D-vector.\n */\nexport class Vector4 implements IClone {\n  /** @internal zero.*/\n  static readonly _zero = new Vector4(0.0, 0.0, 0.0, 0.0);\n  /** @internal one.*/\n  static readonly _one = new Vector4(1.0, 1.0, 1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n    out.z = left.z + right.z;\n    out.w = left.w + right.w;\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x - right.x;\n    out.y = left.y - right.y;\n    out.z = left.z - right.z;\n    out.w = left.w - right.w;\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x * right.x;\n    out.y = left.y * right.y;\n    out.z = left.z * right.z;\n    out.w = left.w * right.w;\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x / right.x;\n    out.y = left.y / right.y;\n    out.z = left.z / right.z;\n    out.w = left.w / right.w;\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector4, right: Vector4): number {\n    return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(a: Vector4, b: Vector4): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    const w = b.w - a.w;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(a: Vector4, b: Vector4): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    const w = b.w - a.w;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector4, right: Vector4): boolean {\n    return (\n      MathUtil.equals(left.x, right.x) &&\n      MathUtil.equals(left.y, right.y) &&\n      MathUtil.equals(left.z, right.z) &&\n      MathUtil.equals(left.w, right.w)\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param start - The first vector\n   * @param end - The second vector\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(start: Vector4, end: Vector4, t: number, out: Vector4): void {\n    const { x, y, z, w } = start;\n    out.x = x + (end.x - x) * t;\n    out.y = y + (end.y - y) * t;\n    out.z = z + (end.z - z) * t;\n    out.w = w + (end.w - w) * t;\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = Math.max(left.x, right.x);\n    out.y = Math.max(left.y, right.y);\n    out.z = Math.max(left.z, right.z);\n    out.w = Math.max(left.w, right.w);\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = Math.min(left.x, right.x);\n    out.y = Math.min(left.y, right.y);\n    out.z = Math.min(left.z, right.z);\n    out.w = Math.min(left.w, right.w);\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param a - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(a: Vector4, out: Vector4): void {\n    out.x = -a.x;\n    out.y = -a.y;\n    out.z = -a.z;\n    out.w = -a.w;\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param a - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(a: Vector4, out: Vector4): void {\n    const { x, y, z, w } = a;\n    let len: number = Math.sqrt(x * x + y * y + z * z + w * w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n      out.z = z * len;\n      out.w = w * len;\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param a - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(a: Vector4, s: number, out: Vector4): void {\n    out.x = a.x * s;\n    out.y = a.y * s;\n    out.z = a.z * s;\n    out.w = a.w * s;\n  }\n\n  /**\n   * Performs a transformation using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector3\n   */\n  static transform(v: Vector4, m: Matrix, out: Vector4): void {\n    const { x, y, z, w } = v;\n    const e = m.elements;\n    out.x = x * e[0] + y * e[4] + z * e[8] + w * e[12];\n    out.y = x * e[1] + y * e[5] + z * e[9] + w * e[13];\n    out.z = x * e[2] + y * e[6] + z * e[10] + w * e[14];\n    out.w = x * e[3] + y * e[7] + z * e[11] + w * e[15];\n  }\n\n  /**\n   * Performs a transformation using the given quaternion.\n   * @param v - The vector to transform\n   * @param q - The transform quaternion\n   * @param out - The transformed vector\n   */\n  static transformByQuat(v: Vector4, q: Quaternion, out: Vector4): void {\n    const { x, y, z, w } = v;\n    const qx = q.x;\n    const qy = q.y;\n    const qz = q.z;\n    const qw = q.w;\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out.x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out.y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out.z = iz * qw - iw * qz - ix * qy + iy * qx;\n    out.w = w;\n  }\n\n  /** The x component of the vector. */\n  x: number;\n  /** The y component of the vector. */\n  y: number;\n  /** The z component of the vector. */\n  z: number;\n  /** The w component of the vector. */\n  w: number;\n\n  /**\n   * Constructor of Vector4.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   * @param w - The w component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @param z - The z component of the vector\n   * @param w - The w component of the vector\n   * @returns This vector\n   */\n  setValue(x: number, y: number, z: number, w: number): Vector4 {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n\n  /**\n   * Set the value of this vector by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Vector4 {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    this.w = array[offset + 3];\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector4): Vector4 {\n    this.x += right.x;\n    this.y += right.y;\n    this.z += right.z;\n    this.w += right.w;\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector4): Vector4 {\n    this.x -= right.x;\n    this.y -= right.y;\n    this.z -= right.z;\n    this.w -= right.w;\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector4): Vector4 {\n    this.x *= right.x;\n    this.y *= right.y;\n    this.z *= right.z;\n    this.w *= right.w;\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  divide(right: Vector4): Vector4 {\n    this.x /= right.x;\n    this.y /= right.y;\n    this.z /= right.z;\n    this.w /= right.w;\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { x, y, z, w } = this;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { x, y, z, w } = this;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector4 {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    this.w = -this.w;\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector4 {\n    Vector4.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector4 {\n    this.x *= s;\n    this.y *= s;\n    this.z *= s;\n    this.w *= s;\n    return this;\n  }\n\n  /**\n   * Clone the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n    out[outOffset + 2] = this.z;\n    out[outOffset + 3] = this.w;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector4 {\n    let ret = new Vector4(this.x, this.y, this.z, this.w);\n    return ret;\n  }\n\n  /**\n   * Clones this vector to the specified vector.\n   * @param out - The specified vector\n   * @returns The specified vector\n   */\n  cloneTo(out: Vector4): Vector4 {\n    out.x = this.x;\n    out.y = this.y;\n    out.z = this.z;\n    out.w = this.w;\n    return out;\n  }\n}\n", "import { IClone } from \"@oasis-engine/design\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a color in the from of RGBA (in order: R, G, B, A).\n */\nexport class Color implements IClone {\n  /**\n   * Modify a value from the gamma space to the linear space.\n   * @param value - The value in gamma space\n   * @returns The value in linear space\n   */\n  static gammaToLinearSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value <= 0.04045) return value / 12.92;\n    else if (value < 1.0) return Math.pow((value + 0.055) / 1.055, 2.4);\n    else return Math.pow(value, 2.4);\n  }\n\n  /**\n   * Modify a value from the linear space to the gamma space.\n   * @param value - The value in linear space\n   * @returns The value in gamma space\n   */\n  static linearToGammaSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value < 0.0031308) return 12.92 * value;\n    else if (value < 1.0) return 1.055 * Math.pow(value, 0.41666) - 0.055;\n    else return Math.pow(value, 0.41666);\n  }\n\n  /**\n   * Determines whether the specified colors are equals.\n   * @param left - The first color to compare\n   * @param right - The second color to compare\n   * @returns True if the specified colors are equals, false otherwise\n   */\n  static equals(left: Color, right: Color): boolean {\n    return (\n      MathUtil.equals(left.r, right.r) &&\n      MathUtil.equals(left.g, right.g) &&\n      MathUtil.equals(left.b, right.b) &&\n      MathUtil.equals(left.a, right.a)\n    );\n  }\n\n  /** The red component of the color, 0~1. */\n  public r: number;\n  /** The green component of the color, 0~1. */\n  public g: number;\n  /** The blue component of the color, 0~1. */\n  public b: number;\n  /** The alpha component of the color, 0~1. */\n  public a: number;\n\n  /**\n   * Constructor of Color.\n   * @param r - The red component of the color\n   * @param g - The green component of the color\n   * @param b - The blue component of the color\n   * @param a - The alpha component of the color\n   */\n  constructor(r: number = 1, g: number = 1, b: number = 1, a: number = 1) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * Creates a clone of this color.\n   * @returns A clone of this color\n   */\n  clone(): Color {\n    const ret = new Color(this.r, this.g, this.b, this.a);\n    return ret;\n  }\n\n  /**\n   * Clones this color to the specified color.\n   * @param out - The specified color\n   * @returns The specified color\n   */\n  cloneTo(out: Color): Color {\n    out.r = this.r;\n    out.g = this.g;\n    out.b = this.b;\n    out.a = this.a;\n    return out;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from gamma space to linear space.\n   * @param out - The color in linear space\n   * @returns The color in linear space\n   */\n  toLinear(out: Color): Color {\n    out.r = Color.gammaToLinearSpace(this.r);\n    out.g = Color.gammaToLinearSpace(this.g);\n    out.b = Color.gammaToLinearSpace(this.b);\n    return out;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from linear space to gamma space.\n   * @param out - The color in gamma space\n   * @returns The color in gamma space\n   */\n  toGamma(out: Color): Color {\n    out.r = Color.linearToGammaSpace(this.r);\n    out.g = Color.linearToGammaSpace(this.g);\n    out.b = Color.linearToGammaSpace(this.b);\n    return out;\n  }\n}\n", "type PromiseNotifier = (progress: number) => void;\n\n/**\n * Asset Promise Status\n */\nexport enum AssetPromiseStatus {\n  /** Success. */\n  Success,\n  /** Pending. */\n  Pending,\n  /** Failed. */\n  Failed\n}\n/**\n * Asset Loading Promise.\n */\nexport class AssetPromise<T> extends Promise<T> {\n  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>,\n      T9 | PromiseLike<T9>,\n      T10 | PromiseLike<T10>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>,\n      T9 | PromiseLike<T9>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7, T8>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7]>;\n\n  static all<T1, T2, T3, T4, T5, T6>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6]>;\n\n  static all<T1, T2, T3, T4, T5>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5]>;\n\n  static all<T1, T2, T3, T4>(\n    values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>]\n  ): AssetPromise<[T1, T2, T3, T4]>;\n\n  static all<T1, T2, T3>(\n    values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]\n  ): AssetPromise<[T1, T2, T3]>;\n\n  static all<T1, T2>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): AssetPromise<[T1, T2]>;\n\n  static all<T>(values: readonly (T | PromiseLike<T>)[]): AssetPromise<T[]>;\n\n  /**\n   * Return a new resource Promise through the provided asset promise collection.\n   * The resolved of the new AssetPromise will be triggered when all the Promises in the provided set are completed.\n   * @param - AssetPromise Collection\n   * @returns AssetPromise\n   */\n  static all<T>(promises: T | PromiseLike<T>[]): AssetPromise<T[]> {\n    return new AssetPromise((resolve, reject, setProgress) => {\n      if (!Array.isArray(promises)) {\n        return resolve([promises]);\n      }\n\n      let completed = 0;\n      let total = promises.length;\n      let results = new Array<T>(total);\n\n      promises.forEach((value, index) => {\n        Promise.resolve(value)\n          .then((result) => {\n            results[index] = result;\n\n            completed += 1;\n            setProgress(completed / total);\n\n            if (completed == total) {\n              resolve(results);\n            }\n          })\n          .catch((err) => reject(err));\n      });\n    });\n  }\n\n  private _status: AssetPromiseStatus;\n  private _progress: number;\n  private _reject: (reason?: any) => void;\n  private _listeners: Set<PromiseNotifier>;\n\n  /**\n   * Current promise state.\n   */\n  get status(): AssetPromiseStatus {\n    return this._status;\n  }\n\n  /**\n   * Loading progress.\n   */\n  get progress(): number {\n    return this._progress;\n  }\n\n  /**\n   * Progress callback.\n   * @param callback - Progress callback\n   * @returns Asset Promise\n   */\n  onProgress(callback: (progress?: number) => any): AssetPromise<T> {\n    this._listeners.add(callback);\n    return this;\n  }\n\n  /**\n   * Cancel promise request.\n   * @returns Asset promise\n   */\n  cancel(): AssetPromise<T> {\n    if (this._status !== AssetPromiseStatus.Pending) {\n      return this;\n    }\n    this._reject(\"Promise Canceled\");\n    return this;\n  }\n\n  /**\n   * Create an asset loading Promise.\n   * @param executor - A callback used to initialize the promise. This callback is passed two arguments:\n   * a resolve callback used to resolve the promise with a value or the result of another promise,\n   * and a reject callback used to reject the promise with a provided reason or error.\n   * and a setProgress callback used to set promise progress with a percent.\n   */\n  constructor(\n    executor: (\n      resolve: (value?: T | PromiseLike<T>) => void,\n      reject?: (reason?: any) => void,\n      setProgress?: PromiseNotifier\n    ) => void\n  ) {\n    let newReject: (reason?: any) => void;\n\n    const setProgress = (progress: number) => {\n      if (progress <= this._progress) {\n        return;\n      }\n      this._progress = progress;\n\n      for (const listener of this._listeners) {\n        listener(progress);\n      }\n    };\n\n    super((resolve, reject) => {\n      newReject = (reason?: any) => {\n        // Add it to the micro task to avoid reporting an error when calling this directly.\n        Promise.resolve().then(() => {\n          this._status = AssetPromiseStatus.Failed;\n          reject(reason);\n        });\n      };\n      executor(\n        (value: T) => {\n          // Add it to the micro task to avoid reporting an error when calling this directly.\n          Promise.resolve().then(() => {\n            setProgress(1);\n            this._status = AssetPromiseStatus.Success;\n            resolve(value);\n          });\n        },\n        newReject,\n        (progress: number) => {\n          // Add it to the micro task to avoid reporting an error when calling this directly\n          Promise.resolve().then(() => {\n            setProgress(progress);\n          });\n        }\n      );\n    });\n    this._reject = newReject;\n    this._listeners = new Set();\n    this._progress = 0;\n    this._status = AssetPromiseStatus.Pending;\n  }\n}\n", "export const Util = {\n  isArray:\n    \"isArray\" in Array\n      ? Array.isArray\n      : (value: any): boolean => {\n          return toString.call(value) === \"[object Array]\";\n        },\n  isArrayLike(x: any): boolean {\n    return !!x && typeof x.length === \"number\" && typeof x !== \"function\";\n  },\n  clone<T>(obj: T): T {\n    if (typeof obj !== \"object\" || obj === null) {\n      return obj;\n    }\n    let rst;\n    if (Util.isArrayLike(obj)) {\n      rst = (obj as any).slice();\n      for (let i = 0, l = (obj as any).length; i < l; i++) {\n        rst[i] = Util.clone(obj[i]);\n      }\n    } else {\n      rst = {};\n      for (const k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          rst[k] = Util.clone(obj[k]);\n        }\n      }\n    }\n\n    return rst;\n  },\n\n  downloadBlob(blob: Blob, fileName: string = \"\") {\n    if (navigator && navigator.msSaveBlob) {\n      navigator.msSaveBlob(blob, fileName);\n      return;\n    }\n\n    let url = window.URL.createObjectURL(blob);\n    let a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style.display = \"none\";\n    a.href = url;\n    a.download = fileName;\n    a.addEventListener(\"click\", () => {\n      if (a.parentElement) {\n        a.parentElement.removeChild(a);\n      }\n    });\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n};\n\nexport const isArrayLike = <T>(x: any): x is ArrayLike<T> =>\n  x && typeof x.length === \"number\" && typeof x !== \"function\";\n\n/**\n * Fastly remove an element from array.\n * @param array - Array\n * @param item - Element\n */\nexport function removeFromArray(array: any[], item: any): boolean {\n  const index = array.indexOf(item);\n  if (index < 0) {\n    return false;\n  }\n  const last = array.length - 1;\n  if (index !== last) {\n    const end = array[last];\n    array[index] = end;\n  }\n  array.length--;\n  return true;\n}\n\nexport function ObjectValues(obj: any) {\n  return Object.keys(obj).map((key: any) => obj[key]);\n}\n", "import { AssetPromise } from \"./AssetPromise\";\nimport { LoadItem } from \"./LoadItem\";\nimport { RefObject } from \"./RefObject\";\nimport { Engine } from \"..\";\nimport { Loader } from \"./Loader\";\nimport { AssetType } from \"./AssetType\";\nimport { ObjectValues } from \"../base/Util\";\n\n/**\n * ResourceManager\n */\nexport class ResourceManager {\n  /** Loader collection. */\n  private static _loaders: { [key: number]: Loader<any> } = {};\n  private static _extTypeMapping: { [key: string]: AssetType } = {};\n\n  /**\n   * @internal\n   */\n  static _addLoader(type: AssetType, loader: Loader<any>, extnames: string[]) {\n    this._loaders[type] = loader;\n    for (let i = 0, len = extnames.length; i < len; i++) {\n      this._extTypeMapping[extnames[i]] = type;\n    }\n  }\n\n  private static _getTypeByUrl(url: string): AssetType {\n    const path = url.split(\"?\")[0];\n    return this._extTypeMapping[path.substring(path.lastIndexOf(\".\") + 1)];\n  }\n\n  /** The number of retries after failing to load assets. */\n  retryCount: number = 1;\n  /** Retry delay time after failed to load assets, in milliseconds. */\n  retryInterval: number = 0;\n  /** The default timeout period for loading assets, in milliseconds. */\n  timeout: number = 20000;\n\n  /** Asset path pool, key is asset ID, value is asset path */\n  private _assetPool: { [key: number]: string } = Object.create(null);\n  /** Asset pool, the key is the asset path and the value is the asset. */\n  private _assetUrlPool: { [key: string]: Object } = Object.create(null);\n  /** Reference counted object pool, key is the object ID, and reference counted objects are put into this pool. */\n  private _refObjectPool: { [key: number]: RefObject } = Object.create(null);\n  /** Loading assets. */\n  private _loadingPromises: { [url: string]: AssetPromise<any> } = {};\n\n  /**\n   * Create a ResourceManager.\n   * @param engine - Engine to which the current ResourceManager belongs\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Load asset asynchronously through the path.\n   * @param path - Path\n   * @returns Asset promise\n   */\n  load<T>(path: string): AssetPromise<T>;\n\n  /**\n   * Load asset collection asynchronously through urls.\n   * @param path - Path collections\n   * @returns Asset Promise\n   */\n  load(pathes: string[]): AssetPromise<Object[]>;\n\n  /**\n   * Load the asset asynchronously by asset item information.\n   * @param assetItem - AssetItem\n   * @returns AssetPromise\n   */\n  load<T>(assetItem: LoadItem): AssetPromise<T>;\n\n  /**\n   * Load the asset collection asynchronously by loading the information collection.\n   * @param assetItems - Asset collection\n   * @returns AssetPromise\n   */\n  load(assetItems: LoadItem[]): AssetPromise<Object[]>;\n\n  load<T>(assetInfo: string | LoadItem | (LoadItem | string)[]): AssetPromise<T | Object[]> {\n    // single item\n    if (!Array.isArray(assetInfo)) {\n      return this._loadSingleItem(assetInfo);\n    }\n    // multi items\n    const promises = assetInfo.map((item) => this._loadSingleItem<T>(item));\n    return AssetPromise.all(promises);\n  }\n\n  /**\n   * Cancel all assets that have not finished loading.\n   */\n  cancelNotLoaded(): void;\n\n  /**\n   * Cancel assets whose url has not finished loading.\n   * @param url - Resource url\n   */\n  cancelNotLoaded(url: string): void;\n\n  /**\n   * Cancel the incompletely loaded assets in urls.\n   * @param urls - Resource urls\n   */\n  cancelNotLoaded(urls: string[]): void;\n\n  cancelNotLoaded(url?: string | string[]): void {\n    if (!url) {\n      ObjectValues(this._loadingPromises).forEach((promise) => {\n        promise.cancel();\n      });\n    } else if (typeof url === \"string\") {\n      this._loadingPromises[url]?.cancel();\n    } else {\n      url.forEach((p) => {\n        this._loadingPromises[p]?.cancel();\n      });\n    }\n  }\n\n  /**\n   * Garbage collection will release resource objects managed by reference counting.\n   * @remarks The release principle is that it is not referenced by the components, including direct and indirect reference.\n   */\n  gc(): void {\n    const objects = ObjectValues(this._refObjectPool);\n    for (let i = 0, len = objects.length; i < len; i++) {\n      if (!objects[i].isGCIgnored) {\n        objects[i].destroy();\n      }\n    }\n  }\n\n  /**\n   * Get asset url from instanceId.\n   * @param instanceId - Engine instance id\n   * @returns Asset url\n   */\n  getAssetPath(instanceId: number): string {\n    return this._assetPool[instanceId];\n  }\n\n  /**\n   * @internal\n   */\n  _addAsset(path: string, asset: RefObject): void {\n    this._assetPool[asset.instanceId] = path;\n    this._assetUrlPool[path] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteAsset(asset: RefObject): void {\n    const id = asset.instanceId;\n    const path = this._assetPool[id];\n    if (path) {\n      delete this._assetPool[id];\n      delete this._assetUrlPool[path];\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addRefObject(id: number, asset: RefObject): void {\n    this._refObjectPool[id] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteRefObject(id: number): void {\n    delete this._refObjectPool[id];\n  }\n\n  private _assignDefaultOptions(assetInfo: LoadItem): LoadItem | never {\n    assetInfo.type = assetInfo.type ?? ResourceManager._getTypeByUrl(assetInfo.url);\n    if (assetInfo.type === undefined) {\n      throw `asset type should be specified: ${assetInfo.url}`;\n    }\n    assetInfo.retryCount = assetInfo.retryCount ?? this.retryCount;\n    assetInfo.timeout = assetInfo.timeout ?? this.timeout;\n    assetInfo.retryInterval = assetInfo.retryInterval ?? this.retryInterval;\n    assetInfo.url = assetInfo.url ?? assetInfo.urls.join(\",\");\n    return assetInfo;\n  }\n\n  private _loadSingleItem<T>(item: LoadItem | string): AssetPromise<T> {\n    const info = this._assignDefaultOptions(typeof item === \"string\" ? { url: item } : item);\n    const url = info.url;\n    // has cache\n    if (this._assetUrlPool[url]) {\n      return new AssetPromise((resolve) => {\n        resolve(this._assetUrlPool[url] as T);\n      });\n    }\n    // loading\n    if (this._loadingPromises[url]) {\n      return this._loadingPromises[info.url];\n    }\n    const loader = ResourceManager._loaders[info.type];\n    const promise = loader.load(info, this);\n    this._loadingPromises[url] = promise;\n    promise\n      .then((res) => {\n        if (loader.useCache) this._addAsset(url, res);\n        delete this._loadingPromises[url];\n      })\n      .catch(() => {});\n    return promise;\n  }\n}\n\n/**\n * Declare ResourceLoader's decorator.\n * @param assetType - Type of asset\n * @param extnames - Name of file extension\n */\nexport function resourceLoader(assetType: AssetType, extnames: string[], useCache: boolean = true) {\n  return <T extends Loader<any>>(Target: { new (useCache: boolean): T }) => {\n    const loader = new Target(useCache);\n    ResourceManager._addLoader(assetType, loader, extnames);\n  };\n}\n", "import { EventDispatcher } from \"./EventDispatcher\";\n\nexport type Listener = ((e: Event) => any) & { once?: boolean };\n\n/** Event Object. * @class */\nexport class Event {\n  get propagationStopped(): boolean {\n    return this._propagationStopped;\n  }\n\n  get target(): EventDispatcher {\n    return this._target;\n  }\n\n  set target(t) {\n    this._target = t;\n  }\n\n  get timeStamp(): number {\n    return this._timeStamp;\n  }\n\n  get currentTarget(): EventDispatcher {\n    return this._currentTarget;\n  }\n\n  set currentTarget(t) {\n    this._currentTarget = t;\n  }\n\n  get bubbles(): boolean {\n    return this._bubbles;\n  }\n\n  get type(): string | number {\n    return this._type;\n  }\n\n  public data: any;\n\n  private _timeStamp: number;\n\n  private _target: EventDispatcher;\n\n  private _currentTarget: any;\n\n  private _bubbles: boolean;\n\n  private _propagationStopped: boolean;\n\n  private _type: string | number;\n\n  constructor(type: string | number, target: EventDispatcher = null, data: any = {}, bubbles: boolean = true) {\n    this._timeStamp = new Date().getTime();\n    this._target = target;\n    this.data = data;\n    this._currentTarget = null;\n    this._bubbles = bubbles;\n    this._propagationStopped = false;\n    this._type = type;\n  }\n\n  public stopPropagation(): void {\n    this._propagationStopped = true;\n  }\n}\n", "/**\n * Clone mode.\n */\nexport enum CloneMode {\n  /** Ignore clone. */\n  Ignore,\n  /** Assignment clone. */\n  Assignment,\n  /** Shallow clone. */\n  Shallow,\n  /** Deep clone. */\n  Deep\n}\n", "import { IClone } from \"@oasis-engine/design\";\nimport { CloneMode } from \"./enums/CloneMode\";\n\ntype TypeArray =\n  | Uint8Array\n  | Uint16Array\n  | Uint32Array\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n\n/**\n * Property decorator, ignore the property when cloning.\n */\nexport function ignoreClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Ignore);\n}\n\n/**\n * Property decorator, assign value to the property when cloning.\n *\n * @remarks\n * If it's a primitive type, the value will be copied.\n * If it's a class type, the reference will be copied.\n */\nexport function assignmentClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Assignment);\n}\n\n/**\n * Property decorator, shallow clone the property when cloning.\n * After cloning, it will keep its own reference independent, and use the method of assignment to clone all its internal properties.\n * if the internal property is a primitive type, the value will be copied, if the internal property is a reference type, its reference address will be copied.\u3002\n *\n * @remarks\n * Applicable to Object, Array, TypedArray and Class types.\n */\nexport function shallowClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Shallow);\n}\n\n/**\n * Property decorator, deep clone the property when cloning.\n * After cloning, it will maintain its own reference independence, and all its internal deep properties will remain completely independent.\n *\n * @remarks\n * Applicable to Object, Array, TypedArray and Class types.\n * If Class is encountered during the deep cloning process, the custom cloning function of the object will be called first. Custom cloning requires the object to implement the IClone interface.\n */\nexport function deepClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Deep);\n}\n\n/**\n * @internal\n * Clone manager.\n */\nexport class CloneManager {\n  /** @internal */\n  static _subCloneModeMap = new Map<Object, Object>();\n  /** @internal */\n  static _cloneModeMap = new Map<Object, Object>();\n\n  private static _obejctType = Object.getPrototypeOf(Object);\n\n  /**\n   * Register clone mode.\n   * @param target - Clone target\n   * @param propertyKey - Clone property name\n   * @param mode - Clone mode\n   */\n  static registerCloneMode(target: Object, propertyKey: string, mode: CloneMode): void {\n    let targetMap = CloneManager._subCloneModeMap.get(target.constructor);\n    if (!targetMap) {\n      targetMap = Object.create(null);\n      CloneManager._subCloneModeMap.set(target.constructor, targetMap);\n    }\n    targetMap[propertyKey] = mode;\n  }\n\n  /**\n   * Get the clone mode according to the prototype chain.\n   */\n  static getCloneMode(type: Function): Object {\n    let cloneModes = CloneManager._cloneModeMap.get(type);\n    if (!cloneModes) {\n      cloneModes = Object.create(null);\n      CloneManager._cloneModeMap.set(type, cloneModes);\n      const obejctType = CloneManager._obejctType;\n      const cloneModeMap = CloneManager._subCloneModeMap;\n      while (type !== obejctType) {\n        const subCloneModes = cloneModeMap.get(type);\n        if (subCloneModes) {\n          Object.assign(cloneModes, subCloneModes);\n        }\n        type = Object.getPrototypeOf(type);\n      }\n    }\n    return cloneModes;\n  }\n\n  /**\n   * Deep clone the object.\n   * @param source - Clone source\n   * @param target - Clone target\n   */\n  static deepCloneObject(source: Object, target: Object): void {\n    const type = source.constructor;\n    switch (type) {\n      case Uint8Array:\n      case Uint16Array:\n      case Uint32Array:\n      case Int8Array:\n      case Int16Array:\n      case Int32Array:\n      case Float32Array:\n      case Float64Array:\n        // Type array clone.\n        (<TypeArray>target).set(<TypeArray>source);\n        break;\n      case Array:\n        // Array clone.\n        for (let i = 0, n = (<[]>source).length; i < n; i++) {\n          CloneManager._deepCloneObjectItem(source, target, i);\n        }\n        break;\n      default:\n        const customSource = <IClone>source;\n        if (customSource.clone && customSource.cloneTo) {\n          // Custom clone.\n          customSource.cloneTo(target);\n        } else {\n          // Object or other class not implments custom clone.\n          const keys = Object.keys(source);\n          for (let i = 0, n = keys.length; i < n; i++) {\n            CloneManager._deepCloneObjectItem(source, target, keys[i]);\n          }\n        }\n    }\n  }\n\n  private static _deepCloneObjectItem(source: object, target: object, k: number | string): void {\n    const sourceItem = source[k];\n    if (sourceItem instanceof Object) {\n      const itemType = (<Object>sourceItem).constructor;\n      switch (itemType) {\n        case Uint8Array:\n        case Uint16Array:\n        case Uint32Array:\n        case Int8Array:\n        case Int16Array:\n        case Int32Array:\n        case Float32Array:\n        case Float64Array:\n          // Type array clone.\n          const sourceTypeArrayItem = <TypeArray>sourceItem;\n          let targetTypeArrayItem = <TypeArray>target[k];\n          if (targetTypeArrayItem == null) {\n            target[k] = sourceTypeArrayItem.slice();\n          } else {\n            targetTypeArrayItem.set(sourceTypeArrayItem);\n          }\n          break;\n        case Array:\n          // Array clone.\n          const sourceArryItem = <[]>sourceItem;\n          let targetArrayItem = <[]>target[k];\n          if (targetArrayItem == null) {\n            target[k] = new Array(sourceArryItem.length);\n          } else {\n            targetArrayItem.length = sourceArryItem.length;\n          }\n          CloneManager.deepCloneObject(sourceArryItem, targetArrayItem);\n          break;\n        default:\n          if (sourceItem.clone && sourceItem.cloneTo) {\n            // Custom clone.\n            let sourceCustomItem = <IClone>sourceItem;\n            let targetCustomItem = <IClone>target[k];\n            if (targetCustomItem) {\n              sourceCustomItem.cloneTo(targetCustomItem);\n            } else {\n              target[k] = sourceCustomItem.clone();\n            }\n          } else {\n            // Object or other class not implments custom clone.\n            let targetItem = <Object>target[k];\n            targetItem == null && (target[k] = targetItem = new sourceItem.constructor());\n            CloneManager.deepCloneObject(sourceItem, targetItem);\n            break;\n          }\n      }\n    } else {\n      // Null or undefine and primitive type.\n      target[k] = sourceItem;\n    }\n  }\n}\n", "import { ignoreClone } from \"../clone/CloneManager\";\nimport { Engine } from \"../Engine\";\n\n/**\n * EngineObject.\n */\nexport abstract class EngineObject {\n  private static _instanceIdCounter: number = 0;\n\n  /** Engine unique id. */\n  @ignoreClone\n  readonly instanceId: number = ++EngineObject._instanceIdCounter;\n\n  /** Engine to which the object belongs. */\n  @ignoreClone\n  protected _engine: Engine;\n\n  constructor(engine: Engine) {\n    this._engine = engine;\n  }\n}\n", "import { EngineObject } from \"./EngineObject\";\nimport { Event } from \"./Event\";\nimport { ignoreClone } from \"../clone/CloneManager\";\n\n/**\n * EventDispatcher, which can be inherited as a base class.\n */\nexport class EventDispatcher extends EngineObject {\n  @ignoreClone\n  private _evts = Object.create(null);\n  private _evtCount = 0;\n\n  /**\n   * Determine whether there is event listening.\n   * @param event - Event name\n   * @returns Returns whether there is a corresponding event\n   */\n  hasEvent(event: string): boolean {\n    return this._evts[event] != null;\n  }\n\n  /**\n   * Returns the names of all registered events.\n   * @returns All event names\n   */\n  eventNames(): string[] {\n    if (this._evtCount === 0) return [];\n    return Object.keys(this._evts);\n  }\n\n  /**\n   * Returns the number of listeners with the specified event name.\n   * @param event - Event name\n   * @returns The count of listeners\n   */\n  listenerCount(event: string): number {\n    const listeners = this._evts[event];\n\n    if (!listeners) return 0;\n    if (listeners.fn) return 1;\n    return listeners.length;\n  }\n\n  /**\n   * Dispatch the event with the specified event name.\n   * @param event - Event name\n   * @param data - Data\n   * @returns - Whether the dispatching is successful\n   */\n  dispatch(event: string, data?: any): boolean {\n    if (!this._evts[event]) {\n      return false;\n    }\n\n    const listeners = this._evts[event];\n\n    if (listeners.fn) {\n      if (listeners.once) this.removeEventListener(event, listeners.fn);\n      listeners.fn(data);\n    } else {\n      const l = listeners.length;\n      for (let i = 0; i < l; i++) {\n        if (listeners[i].once) this.removeEventListener(event, listeners[i].fn);\n        listeners[i].fn(data);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Add a listener/\n   * @param event - Event name\n   * @param fn - Function\n   * @returns This\n   */\n  on(event: string, fn: Function): EventDispatcher {\n    return this.addEventListener(event, fn);\n  }\n\n  /**\n   * Add a one-time listener.\n   * @param event - Event name\n   * @param fn - Function\n   * @returns This\n   */\n  once(event: string, fn: Function): EventDispatcher {\n    return this.addEventListener(event, fn, true);\n  }\n\n  /**\n   * @deprecated Use `on/once` instead.\n   * Add a listener function with the specified event name.\n   * @param event - Event name\n   * @param fn - Function\n   * @param once - Is it a one-time listener\n   * @returns this\n   */\n  addEventListener(event: string, fn: Function, once?: boolean): EventDispatcher {\n    const listener = { fn, once };\n    const events = this._evts;\n    if (!events[event]) {\n      events[event] = listener;\n      this._evtCount++;\n    } else if (!events[event].fn) {\n      events[event].push(listener);\n    } else {\n      events[event] = [events[event], listener];\n    }\n    return this;\n  }\n\n  /**\n   * Remove the event listener(s) of the specified event name.\n   * @param event - Event name\n   * @param fn - Function, If is undefined, delete all corresponding event listeners.\n   */\n  off(event: string, fn?: Function): EventDispatcher {\n    if (!this._evts[event]) return this;\n    if (!fn) {\n      this._clearEvent(event);\n      return this;\n    }\n\n    const listeners = this._evts[event];\n\n    if (listeners.fn && listeners.fn === fn) {\n      this._clearEvent(event);\n    } else {\n      const index = listeners.indexOf(fn);\n      if (index > -1) {\n        const temp = listeners[listeners.length - 1];\n        listeners[index] = temp;\n        listeners.length--;\n        if (listeners.length === 1) {\n          this._evts[event] = listeners[0];\n        }\n      }\n    }\n    return this;\n  }\n\n  /**\n   * @deprecated Use `off` instead.\n   * Remove the event listener(s) of the specified event name.\n   * @param event - Event name\n   * @param fn - Function, If is undefined, delete all corresponding event listeners.\n   */\n  removeEventListener(event: string, fn?: Function): EventDispatcher {\n    return this.off(event, fn);\n  }\n\n  /**\n   * Remove all event listeners.\n   * @param event - Event name, delete all events if not passed\n   */\n  removeAllEventListeners(event?: string): void {\n    if (event) {\n      if (this._evts[event]) this._clearEvent(event);\n    } else {\n      this._evts = Object.create(null);\n      this._evtCount = 0;\n    }\n  }\n\n  /**\n   * @deprecated Use `dispatch` instead.\n   */\n  trigger(e: Event) {\n    this.dispatch(e.type as string, e.data);\n  }\n\n  private _clearEvent(event: string) {\n    if (--this._evtCount === 0) {\n      this._evts = Object.create(null);\n    } else {\n      delete this._evts[event];\n    }\n  }\n}\n", "/**\n * @class\n * @private\n */\n/* tslint:disable */\nconst noop = (message?: any, ...optionalParams: any[]) => {};\nconst debug = console.log.bind(console);\nconst info = console.info.bind(console);\nconst warn = console.warn.bind(console);\nconst error = console.error.bind(console);\n\nexport const Logger = {\n  debug: noop,\n  info: noop,\n  warn: noop,\n  error: noop,\n  isEnabled: false,\n\n  /** Turn on log */\n  enable() {\n    this.debug = debug;\n    this.info = info;\n    this.warn = warn;\n    this.error = error;\n    this.isEnabled = true;\n  },\n\n  /** Turn off log */\n  disable() {\n    this.debug = noop;\n    this.info = noop;\n    this.warn = noop;\n    this.error = noop;\n    this.isEnabled = false;\n  }\n};\n", "/**\n * Tools for calculating the time per frame.\n */\nexport class Time {\n  private _clock: { now: () => number };\n\n  private _timeScale: number;\n\n  private _deltaTime: number;\n\n  private _startTime: number;\n\n  private _lastTickTime: number;\n  /**\n   * Constructor of the Time.\n   */\n  constructor() {\n    this._clock = performance ? performance : Date;\n\n    this._timeScale = 1.0;\n    this._deltaTime = 0.0001;\n\n    const now = this._clock.now();\n    this._startTime = now;\n    this._lastTickTime = now;\n  }\n\n  reset() {\n    this._lastTickTime = this._clock.now();\n  }\n\n  /**\n   * Current Time\n   * @readonly\n   */\n  get nowTime(): number {\n    return this._clock.now();\n  }\n\n  /**\n   * Time between two ticks\n   * @readonly\n   */\n  get deltaTime(): number {\n    return this._deltaTime;\n  }\n\n  /**\n   * Scaled delta time.\n   */\n  get timeScale(): number {\n    return this._timeScale;\n  }\n  set timeScale(s) {\n    this._timeScale = s;\n  }\n\n  /**\n   * Unscaled delta time.\n   * @readonly\n   */\n  get unscaledDeltaTime(): number {\n    return this._deltaTime / this._timeScale;\n  }\n\n  /**\n   * The elapsed time, after the clock is initialized.\n   */\n  get timeSinceStartup(): number {\n    return this.nowTime - this._startTime;\n  }\n\n  /**\n   * Call every frame, update delta time and other data.\n   */\n  public tick(): void {\n    const now = this.nowTime;\n    this._deltaTime = (now - this._lastTickTime) * this._timeScale;\n    this._lastTickTime = now;\n  }\n}\n", "/**\n * The type of resource, mainly used to deal with the recovery of GL objects associated with the resource object.\n */\nexport enum InternalAssetType {\n  /** Belonging to the current scene, GL resources will be automatically released when the scene is switched. */\n  Scene = 1,\n  /** Cache automatically handles, if not used in a period of time, GL resources will be released. */\n  Cache = 2\n}\n\n/**\n * Camera's clear mode enumeration\n * @readonly\n */\nexport enum ClearMode {\n  /** Do not perform any operations to clear the background */\n  DONT_CLEAR = 0,\n  /** Clear the background color and depth buffer */\n  SOLID_COLOR = 1,\n  /** Only clear the depth buffer */\n  DEPTH_ONLY = 2,\n  /** Only clear colors */\n  COLOR_ONLY = 3,\n  /** Only clear the template buffer */\n  STENCIL_ONLY = 4,\n  /** Clear all buffers */\n  ALL_CLEAR = 5\n}\n\n/**\n * Material type enumeration\n * @readonly\n */\nexport enum MaterialType {\n  /** Opaque */\n  OPAQUE = 1000,\n  /** Transparent */\n  TRANSPARENT = 2000\n}\n\n/**\n * Rendering state that can be turned on or off.\n * @readonly\n */\nexport enum RenderState {\n  /** Color blend calculation of fragments */\n  BLEND = 3042,\n  /** Front and back culling */\n  CULL_FACE = 2884,\n  /** Depth test */\n  DEPTH_TEST = 2929,\n  /** Alpha test */\n  ALPHA_TEST = 3008,\n  /** Offset of the depth value of the polygon fragment. */\n  POLYGON_OFFSET_FILL = 32823,\n  /** Calculation of temporary coverage value determined by alpha value. */\n  SAMPLE_ALPHA_TO_COVERAGE = 32926,\n  /** Clipping test, discarding the fragments outside the clipping rectangle. */\n  SCISSOR_TEST = 3089\n}\n\n/**\n * Face enumeration\n * @readonly\n */\nexport enum FrontFace {\n  /** Clockwise */\n  CW = 0x0900,\n  /** Counterclockwise */\n  CCW = 0x0901\n}\n\n/**\n * Face culling enum\n * @readonly\n */\nexport enum CullFace {\n  /** Front */\n  FRONT = 1028,\n  /** Back */\n  BACK = 1029,\n  /** Front and back */\n  FRONT_AND_BACK = 1032\n}\n\n/**\n * Display surface enumeration\n * @readonly\n * */\nexport enum Side {\n  /** Cull the back, only show the front */\n  FRONT,\n  /** Cull the front, only show the back */\n  BACK,\n  /** Cull out before smoothing, without showing any surface */\n  NONE,\n  /** Turn off culling, display the front and back */\n  DOUBLE\n}\n\n/**\n * Comparison function enum\n * @readonly\n */\nexport enum CompFunc {\n  /** Never pass */\n  NEVER = 0x0200,\n  /** Pass when less than the reference value */\n  LESS = 0x0201,\n  /** Pass when equal to reference value */\n  EQUAL = 0x0202,\n  /** Pass when less than or equal to the reference value */\n  LEQUAL = 0x0203,\n  /** Pass when greater than the reference value */\n  GREATER = 0x0204,\n  /** Pass when not equal to reference value */\n  NOTEQUAL = 0x0205,\n  /** Pass when greater than or equal to the reference value */\n  GEQUAL = 0x0206,\n  /** Always pass */\n  ALWAYS = 0x0207\n}\n\n/**\n * Data type enumeration\n */\nexport enum DataType {\n  /** Float */\n  FLOAT = 5126, // gl.FLOAT\n  /** Floating-point two-dimensional vector */\n  FLOAT_VEC2 = 35664, // gl.FLOAT_VEC2\n  /** Floating-point three-dimensional vector */\n  FLOAT_VEC3 = 35665, // gl.FLOAT_VEC3\n  /** Floating-point four-dimensional vector */\n  FLOAT_VEC4 = 35666, // gl.FLOAT_VEC4\n\n  /** Integer */\n  INT = 5124, // gl.INT\n  /** Integer two-dimensional vector */\n  INT_VEC2 = 35667, // gl.INT_VEC2\n  /** Integer three-dimensional vector */\n  INT_VEC3 = 35668, // gl.INT_VEC3\n  /** Integer four-dimensional vector */\n  INT_VEC4 = 35669, // gl.INT_VEC4\n\n  /** Boolean */\n  BOOL = 35670, // gl.BOOL\n  /** Boolean two-dimensional vector */\n  BOOL_VEC2 = 35671, // gl.BOOL_VEC2\n  /** Boolean three-dimensional vector */\n  BOOL_VEC3 = 35672, // gl.BOOL_VEC3\n  /** Boolean four-dimensional vector */\n  BOOL_VEC4 = 35673, // gl.BOOL_VEC4\n\n  /** Second-order matrix */\n  FLOAT_MAT2 = 35674, // gl.FLOAT_MAT2\n  /** Third-order matrix */\n  FLOAT_MAT3 = 35675, // gl.FLOAT_MAT3\n  /** Fourth-order matrix */\n  FLOAT_MAT4 = 35676, // gl.FLOAT_MAT4\n\n  /** Float array */\n  FLOAT_ARRAY = 35677, // gl.FLOAT_ARRAY\n  /** Floating-point two-dimensional vector array */\n  FLOAT_VEC2_ARRAY = 100000,\n  /** Floating-point three-dimensional vector array */\n  FLOAT_VEC3_ARRAY,\n  /** Floating-point four-dimensional vector array */\n  FLOAT_VEC4_ARRAY,\n\n  /** Integer array */\n  INT_ARRAY,\n  /** Integer two-dimensional vector array */\n  INT_VEC2_ARRAY,\n  /** Integer three-dimensional vector array */\n  INT_VEC3_ARRAY,\n  /** Integer four-dimensional vector array */\n  INT_VEC4_ARRAY,\n\n  /** Second-order matrix array */\n  FLOAT_MAT2_ARRAY,\n  /** Third-order matrix array */\n  FLOAT_MAT3_ARRAY,\n  /** Fourth-order matrix array */\n  FLOAT_MAT4_ARRAY,\n\n  /** 2D texture sampler array */\n  SAMPLER_2D_ARRAY,\n  /** Cube map texture sampler array */\n  SAMPLER_CUBE_ARRAY,\n\n  /** 2D sampler */\n  SAMPLER_2D = 35678, // gl.SAMPLER_2D\n  /** Cube map Texture sampler */\n  SAMPLER_CUBE = 35680, // gl.SAMPLER_CUBE\n\n  /** Byte */\n  BYTE = 5120, // gl.BYTE\n  /** Unsigned byte */\n  UNSIGNED_BYTE = 5121, // gl.UNSIGNED_BYTE\n  /** Short */\n  SHORT = 5122, // gl.SHORT\n  /** Unsigned short */\n  UNSIGNED_SHORT = 5123, // gl.UNSIGNED_SHORT\n  /** Unsigned int */\n  UNSIGNED_INT = 5125 // gl.UNSIGNED_INT\n}\n\n/**\n * Uniform Semantic and Oasis3D extension supported by glTF 1.0\n * @readonly\n */\nexport enum UniformSemantic {\n  // -- GLTF\n  /** Local matrix */\n  LOCAL = 1,\n  /** Model matrix */\n  MODEL = 2,\n  /** View matrix */\n  VIEW = 3,\n  /** Project matrix */\n  PROJECTION = 4,\n  /** Model View matrix */\n  MODELVIEW = 5,\n  /** View Projection matrix */\n  VIEWPROJECTION = 21,\n  /** Model View Project matrix */\n  MODELVIEWPROJECTION = 6,\n  /** Model matrix's inverse matrix */\n  MODELINVERSE = 7,\n  /** View matrix's inverse matrix */\n  VIEWINVERSE = 8,\n  /** Projection matrix's inverse matrix */\n  PROJECTIONINVERSE = 9,\n  /** Model View matrix's inverse matrix */\n  MODELVIEWINVERSE = 10,\n  /** Model View Project matrix's inverse matrix */\n  MODELVIEWPROJECTIONINVERSE = 11,\n  /** The inverse transpose matrix of Model matrix, which can be used to transform Normal */\n  MODELINVERSETRANSPOSE = 12,\n  /** Model View matrix's inverse transpose matrix */\n  MODELVIEWINVERSETRANSPOSE = 13,\n  /** Viewport parameter */\n  VIEWPORT = 14,\n  /** Joint matrix array */\n  JOINTMATRIX = 15,\n  /** MorphTarget weights */\n  MORPHWEIGHTS = 16,\n\n  // --\n  /** Current camera position */\n  EYEPOS = 17,\n  /** How long the current program is running */\n  TIME = 18,\n  /** Joint matrix texture */\n  JOINTTEXTURE = 19,\n  /** Joint count */\n  JOINTCOUNT = 20\n}\n\n/**\n * Color blending method enumeration\n */\nexport enum BlendFunc {\n  /** Multiply all channels by 0 */\n  ZERO = 0,\n  /** Multiply all channels by 1 */\n  ONE = 1,\n  /** Multiply all channels by source color */\n  SRC_COLOR = 768,\n  /** Multiply all channels by 1 minus source color */\n  ONE_MINUS_SRC_COLOR = 769,\n  /** Multiply all channels by source alpha */\n  SRC_ALPHA = 770,\n  /** Multiply all channels by 1 minus source alpha */\n  ONE_MINUS_SRC_ALPHA = 771,\n  /** Multiply all channels by destination alpha */\n  DST_ALPHA = 772,\n  /** Multiply all channels by 1 minus destination alpha */\n  ONE_MINUS_DST_ALPHA = 773,\n  /** Multiply all channels by destination color */\n  DST_COLOR = 774,\n  /** Multiply all channels by 1 minus destination color */\n  ONE_MINUS_DST_COLOR = 775,\n  /**\n   * Multiplies the RGB colors by the smaller of either the source alpha value or the value of 1 minus the destination alpha value. The alpha value is multiplied by 1.\n   */\n  SRC_ALPHA_SATURATE = 776,\n  /**\n   * Multiply all channels by a color constant.\n   */\n  enumANT_COLOR = 32769,\n  /** Multiply all channels by 1 minus the color constant. */\n  ONE_MINUS_enumANT_COLOR = 32770,\n  /**\n   * Multiply all channels by an alpha constant.\n   */\n  enumANT_ALPHA = 32771,\n  /**\n   * Multiply all channels by one minus the Alpha constant.\n   */\n  ONE_MINUS_enumANT_ALPHA = 32772\n}\n\n/**\n * Probe rendering rate.\n * */\nexport enum RefreshRate {\n  /** Only render once */\n  ONCE = 1,\n  /** Render every frame. */\n  EVERYFRAME = 2\n}\n\n/**\n * GL Capabilities\n * Some capabilities can be smoothed out by extension, and some capabilities must use WebGL 2.0.\n * */\nexport enum GLCapabilityType {\n  standardDerivatives = \"OES_standard_derivatives\",\n  shaderTextureLod = \"EXT_shader_texture_lod\",\n  elementIndexUint = \"OES_element_index_uint\",\n  depthTexture = \"WEBGL_depth_texture\",\n  drawBuffers = \"WEBGL_draw_buffers\",\n  vertexArrayObject = \"OES_vertex_array_object\",\n  instancedArrays = \"ANGLE_instanced_arrays\",\n  multipleSample = \"multipleSampleOnlySupportedInWebGL2\",\n  textureFloat = \"OES_texture_float\",\n  textureFloatLinear = \"OES_texture_float_linear\",\n  textureHalfFloat = \"OES_texture_half_float\",\n  textureHalfFloatLinear = \"OES_texture_half_float_linear\",\n  WEBGL_colorBufferFloat = \"WEBGL_color_buffer_float\",\n  colorBufferFloat = \"EXT_color_buffer_float\",\n  colorBufferHalfFloat = \"EXT_color_buffer_half_float\",\n  textureFilterAnisotropic = \"EXT_texture_filter_anisotropic\",\n\n  astc = \"WEBGL_compressed_texture_astc\",\n  astc_webkit = \"WEBKIT_WEBGL_compressed_texture_astc\",\n  etc = \"WEBGL_compressed_texture_etc\",\n  etc_webkit = \"WEBKIT_WEBGL_compressed_texture_etc\",\n  etc1 = \"WEBGL_compressed_texture_etc1\",\n  etc1_webkit = \"WEBKIT_WEBGL_compressed_texture_etc1\",\n  pvrtc = \"WEBGL_compressed_texture_pvrtc\",\n  pvrtc_webkit = \"WEBKIT_WEBGL_compressed_texture_pvrtc\",\n  s3tc = \"WEBGL_compressed_texture_s3tc\",\n  s3tc_webkit = \"WEBKIT_WEBGL_compressed_texture_s3tc\"\n  // atc = \"WEBGL_compressed_texture_atc\",\n  // s3tc_srgb = \"WEBGL_compressed_texture_s3tc_srgb\"\n}\n\nexport type TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray\n  | Float32Array\n  | Float64Array;\n", "/**\n * High-performance unordered array, delete uses exchange method to improve performance, internal capacity only increases.\n */\nexport class DisorderedArray<T> {\n  _elements: T[];\n\n  length: number = 0;\n\n  constructor(count: number = 0) {\n    this._elements = new Array<T>(count);\n  }\n\n  add(element: T): void {\n    if (this.length === this._elements.length) this._elements.push(element);\n    else this._elements[this.length] = element;\n    this.length++;\n  }\n\n  delete(element: T): void {\n    //TODO: It can be optimized for custom binary search and other algorithms, currently this._elements>=this.length wastes performance.\n    const index = this._elements.indexOf(element);\n    this.deleteByIndex(index);\n  }\n  /**\n   *\n   * @param index\n   * @returns The replaced item is used to reset its index.\n   */\n  deleteByIndex(index: number): T {\n    var elements: T[] = this._elements;\n    let end: T = null;\n    const lastIndex = this.length - 1;\n    if (index !== lastIndex) {\n      end = elements[lastIndex];\n      elements[index] = end;\n    }\n    this.length--;\n    return end;\n  }\n\n  garbageCollection(): void {\n    this._elements.length = this.length;\n  }\n}\n", "import { ShaderMacro } from \"./ShaderMacro\";\n\n/**\n * Shader macro collection.\n * @internal\n */\nexport class ShaderMacroCollection {\n  /**\n   * Union of two macro collection.\n   * @param left - input macro collection\n   * @param right - input macro collection\n   * @param out - union output macro collection\n   */\n  static unionCollection(left: ShaderMacroCollection, right: ShaderMacroCollection, out: ShaderMacroCollection): void {\n    const outMask = out._mask;\n    let minSize: number, maxSize: number;\n    let minMask: number[], maxMask: number[];\n    if (left._length < right._length) {\n      minSize = left._length;\n      maxSize = right._length;\n      minMask = left._mask;\n      maxMask = right._mask;\n    } else {\n      minSize = right._length;\n      maxSize = left._length;\n      minMask = right._mask;\n      maxMask = left._mask;\n    }\n\n    let i = 0;\n    outMask.length < maxSize && (outMask.length = maxSize);\n    for (; i < minSize; i++) {\n      outMask[i] = minMask[i] | maxMask[i];\n    }\n    for (; i < maxSize; i++) {\n      outMask[i] = maxMask[i];\n    }\n    out._length = maxSize;\n  }\n\n  /** @internal */\n  _mask: number[] = [];\n  /** @internal */\n  _length: number = 0;\n\n  /**\n   * Enable one macro in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  enable(macro: ShaderMacro): void {\n    const index = macro._index;\n    const size = index + 1;\n    const mask = this._mask;\n    let maskStart = this._length; // must from this._length because this._length maybe less than mask.length and have dirty data should clear.\n    if (maskStart < size) {\n      mask.length < size && (mask.length = size); // mask.length maybe small than size,maybe not.\n      for (; maskStart < index; maskStart++) {\n        mask[maskStart] = 0;\n      }\n      mask[index] = macro._value;\n      this._length = size;\n    } else {\n      mask[index] |= macro._value;\n    }\n  }\n\n  /**\n   * Disable one macro in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  disable(macro: ShaderMacro): void {\n    const index = macro._index;\n    const mask = this._mask;\n    const endIndex = this._length - 1;\n    if (index > endIndex) {\n      return;\n    }\n    const newValue = mask[index] & ~macro._value;\n    if (index == endIndex && newValue === 0) {\n      this._length--;\n    } else {\n      mask[index] = newValue;\n    }\n  }\n\n  /**\n   * Union of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  unionCollection(macroCollection: ShaderMacroCollection): void {\n    const addMask = macroCollection._mask;\n    const addSize = macroCollection._length;\n    const mask = this._mask;\n    const maskSize = this._length;\n    if (maskSize < addSize) {\n      mask.length < addSize && (mask.length = addSize);\n      let i = 0;\n      for (; i < maskSize; i++) {\n        mask[i] |= addMask[i];\n      }\n      for (; i < addSize; i++) {\n        mask[i] = addMask[i];\n      }\n      this._length = addSize;\n    } else {\n      for (let i = 0; i < addSize; i++) {\n        mask[i] |= addMask[i];\n      }\n    }\n  }\n\n  /**\n   * Complementarity of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  complementaryCollection(macroCollection: ShaderMacroCollection): void {\n    const removeMask = macroCollection._mask;\n    const mask = this._mask;\n    let endIndex = this._length - 1;\n    let i = Math.min(macroCollection._length - 1, endIndex);\n    for (; i >= 0; i--) {\n      const newValue = mask[i] & ~removeMask[i];\n      if (i == endIndex && newValue === 0) {\n        endIndex--;\n        this._length--;\n      } else {\n        mask[i] = newValue;\n      }\n    }\n  }\n\n  /**\n   * Intersection of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  intersectionCollection(macroCollection: ShaderMacroCollection): void {\n    const unionMask = macroCollection._mask;\n    const mask = this._mask;\n    for (let i = this._length - 1; i >= 0; i--) {\n      const value = mask[i] & unionMask[i];\n      if (value == 0 && i == this._length - 1) {\n        this._length--;\n      } else {\n        mask[i] = value;\n      }\n    }\n  }\n\n  /**\n   * Whether macro is enabled in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  isEnable(macro: ShaderMacro): boolean {\n    const index = macro._index;\n    if (index >= this._length) {\n      return false;\n    }\n    return (this._mask[index] & macro._value) !== 0;\n  }\n\n  /**\n   * Clear this macro collection.\n   */\n  clear(): void {\n    this._length = 0;\n  }\n}\n", "import { Camera } from \"./Camera\";\nimport { DisorderedArray } from \"./DisorderedArray\";\nimport { Component } from \"./Component\";\nimport { Renderer } from \"./Renderer\";\nimport { Script } from \"./Script\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\n\n/**\n * The manager of the components.\n */\nexport class ComponentsManager {\n  // Script\n  private _onStartScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onLateUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _destoryComponents: Script[] = [];\n\n  // Animation\n  private _onUpdateAnimations: DisorderedArray<Component> = new DisorderedArray();\n\n  // Render\n  private _renderers: DisorderedArray<Renderer> = new DisorderedArray();\n  private _onUpdateRenderers: DisorderedArray<Renderer> = new DisorderedArray();\n\n  // Delay dispose active/inActive Pool\n  private _componentsContainerPool: Component[][] = [];\n\n  addRenderer(renderer: Renderer) {\n    renderer._rendererIndex = this._renderers.length;\n    this._renderers.add(renderer);\n  }\n\n  removeRenderer(renderer: Renderer) {\n    const replaced = this._renderers.deleteByIndex(renderer._rendererIndex);\n    replaced && (replaced._rendererIndex = renderer._rendererIndex);\n    renderer._rendererIndex = -1;\n  }\n\n  addOnStartScript(script: Script) {\n    script._onStartIndex = this._onStartScripts.length;\n    this._onStartScripts.add(script);\n  }\n\n  removeOnStartScript(script: Script): void {\n    const replaced = this._onStartScripts.deleteByIndex(script._onStartIndex);\n    replaced && (replaced._onStartIndex = script._onStartIndex);\n    script._onStartIndex = -1;\n  }\n\n  addOnUpdateScript(script: Script) {\n    script._onUpdateIndex = this._onUpdateScripts.length;\n    this._onUpdateScripts.add(script);\n  }\n\n  removeOnUpdateScript(script: Script): void {\n    const replaced = this._onUpdateScripts.deleteByIndex(script._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = script._onUpdateIndex);\n    script._onUpdateIndex = -1;\n  }\n\n  addOnLateUpdateScript(script: Script): void {\n    script._onLateUpdateIndex = this._onLateUpdateScripts.length;\n    this._onLateUpdateScripts.add(script);\n  }\n\n  removeOnLateUpdateScript(script: Script): void {\n    const replaced = this._onLateUpdateScripts.deleteByIndex(script._onLateUpdateIndex);\n    replaced && (replaced._onLateUpdateIndex = script._onLateUpdateIndex);\n    script._onLateUpdateIndex = -1;\n  }\n\n  addOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    animation._onUpdateIndex = this._onUpdateAnimations.length;\n    this._onUpdateAnimations.add(animation);\n  }\n\n  removeOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    const replaced = this._onUpdateAnimations.deleteByIndex(animation._onUpdateIndex);\n    //@ts-ignore\n    replaced && (replaced._onUpdateIndex = animation._onUpdateIndex);\n    //@ts-ignore\n    animation._onUpdateIndex = -1;\n  }\n\n  addOnUpdateRenderers(renderer: Renderer): void {\n    renderer._onUpdateIndex = this._onUpdateRenderers.length;\n    this._onUpdateRenderers.add(renderer);\n  }\n\n  removeOnUpdateRenderers(renderer: Renderer): void {\n    const replaced = this._onUpdateRenderers.deleteByIndex(renderer._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = renderer._onUpdateIndex);\n    renderer._onUpdateIndex = -1;\n  }\n\n  addDestoryComponent(component): void {\n    this._destoryComponents.push(component);\n  }\n\n  callScriptOnStart(): void {\n    const onStartScripts = this._onStartScripts;\n    if (onStartScripts.length > 0) {\n      const elements = onStartScripts._elements;\n      // The 'onStartScripts.length' maybe add if you add some Script with addComponent() in some Script's onStart()\n      for (let i = 0; i < onStartScripts.length; i++) {\n        const script = elements[i];\n        script._started = true;\n        script._onStartIndex = -1;\n        script.onStart();\n      }\n      onStartScripts.length = 0;\n    }\n  }\n\n  callScriptOnUpdate(deltaTime): void {\n    const elements = this._onUpdateScripts._elements;\n    for (let i = this._onUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (element._started) {\n        element.onUpdate(deltaTime);\n      }\n    }\n  }\n\n  callScriptOnLateUpdate(deltaTime): void {\n    const elements = this._onLateUpdateScripts._elements;\n    for (let i = this._onLateUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (element._started) {\n        element.onLateUpdate(deltaTime);\n      }\n    }\n  }\n\n  callAnimationUpdate(deltaTime): void {\n    const elements = this._onUpdateAnimations._elements;\n    for (let i = this._onUpdateAnimations.length - 1; i >= 0; --i) {\n      //@ts-ignore\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRendererOnUpdate(deltaTime: number): void {\n    const elements = this._onUpdateRenderers._elements;\n    for (let i = this._onUpdateRenderers.length - 1; i >= 0; --i) {\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRender(context: RenderContext): void {\n    const camera = context._camera;\n    const elements = this._renderers._elements;\n    for (let i = this._renderers.length - 1; i >= 0; --i) {\n      const element = elements[i];\n\n      // filter by camera culling mask.\n      if (!(camera.cullingMask & element._entity.layer)) {\n        continue;\n      }\n\n      // filter by camera frustm.\n      if (camera.enableFrustumCulling) {\n        element.isCulled = !camera._frustum.intersectsBox(element.bounds);\n        if (element.isCulled) {\n          continue;\n        }\n      }\n\n      element._updateShaderData(context);\n\n      // union camera global macro and renderer macro.\n      ShaderMacroCollection.unionCollection(\n        camera._globalShaderMacro,\n        element.shaderData._macroCollection,\n        element._globalShaderMacro\n      );\n\n      element._render(camera);\n    }\n  }\n\n  callComponentDestory(): void {\n    const destoryComponents = this._destoryComponents;\n    const length = destoryComponents.length;\n    if (length > 0) {\n      for (let i = length - 1; i >= 0; --i) {\n        destoryComponents[i].onDestroy();\n      }\n      destoryComponents.length = 0;\n    }\n  }\n\n  callCameraOnBeginRender(camera: Camera) {\n    const camComps = camera.entity._components;\n    for (let i = camComps.length - 1; i >= 0; --i) {\n      const camComp = camComps[i];\n      (camComp as any).onBeginRender && (camComp as any).onBeginRender(camera);\n    }\n  }\n\n  callCameraOnEndRender(camera: Camera) {\n    const camComps = camera.entity._components;\n    for (let i = camComps.length - 1; i >= 0; --i) {\n      const camComp = camComps[i];\n      (camComp as any).onBeginRender && (camComp as any).onEndRender(camera);\n    }\n  }\n\n  getActiveChangedTempList(): Component[] {\n    return this._componentsContainerPool.length ? this._componentsContainerPool.pop() : [];\n  }\n\n  putActiveChangedTempList(componentContainer: Component[]): void {\n    componentContainer.length = 0;\n    this._componentsContainerPool.push(componentContainer);\n  }\n}\n", "import { Component } from \"../Component\";\nimport { CloneManager } from \"./CloneManager\";\nimport { CloneMode } from \"./enums/CloneMode\";\n\nexport class ComponentCloner {\n  /**\n   * Clone component.\n   * @param source - Clone source\n   * @param target - Clone target\n   */\n  static cloneComponent(source: Component, target: Component): void {\n    const cloneModes = CloneManager.getCloneMode(source.constructor);\n    const keys = Object.keys(source);\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const k = keys[i];\n      const cloneMode = cloneModes[k];\n      switch (cloneMode) {\n        case undefined:\n        case CloneMode.Assignment:\n          target[k] = source[k];\n          break;\n        case CloneMode.Shallow:\n          const sourcePropS: Object = source[k];\n          if (sourcePropS instanceof Object) {\n            let tarProp = <Object>target[k];\n            tarProp == null && (tarProp = target[k] = sourcePropS.constructor());\n            Object.assign(tarProp, sourcePropS);\n          } else {\n            // Null or undefine and primitive type.\n            target[k] = sourcePropS;\n          }\n          break;\n        case CloneMode.Deep:\n          const sourcePropD: Object = source[k];\n          if (sourcePropD instanceof Object) {\n            let tarProp = <Object>target[k];\n            tarProp == null && (tarProp = target[k] = sourcePropD.constructor());\n            CloneManager.deepCloneObject(sourcePropD, tarProp);\n          } else {\n            // Null or undefine and primitive type.\n            target[k] = sourcePropD;\n          }\n          break;\n      }\n    }\n  }\n}\n", "import { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\n\ntype ComponentConstructor = new (entity: Entity) => Component;\n\n/**\n * Used for component dependency registration.\n */\nexport class ComponentsDependencies {\n  /**\n   * @internal\n   */\n  private static _dependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n  private static _invDependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n\n  /**\n   * Register component dependencies.\n   * @param currentComponent - The component you want to be register.\n   * @param dependentComponent - The component's dependencies.\n   */\n  static register(currentComponent: ComponentConstructor, dependentComponent: ComponentConstructor) {\n    this._addDependency(currentComponent, dependentComponent, this._dependenciesMap);\n    this._addDependency(dependentComponent, currentComponent, this._invDependenciesMap);\n  }\n\n  /**\n   * @internal\n   */\n  static _addCheck(entity: Entity, type: ComponentConstructor) {\n    // Check if there are dependent components.\n    const dependencies = ComponentsDependencies._dependenciesMap.get(type);\n    if (dependencies) {\n      for (let i = 0, len = dependencies.length; i < len; i++) {\n        if (!entity.getComponent(dependencies[i])) {\n          throw `you should add ${dependencies[i]} before adding ${type}`;\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _removeCheck(entity: Entity, type: ComponentConstructor) {\n    const invDenpendencies = ComponentsDependencies._invDependenciesMap.get(type);\n    if (invDenpendencies) {\n      for (let i = 0, len = invDenpendencies.length; i < len; i++) {\n        if (entity.getComponent(invDenpendencies[i])) {\n          throw `you should remove ${invDenpendencies[i]} before adding ${type}`;\n        }\n      }\n    }\n  }\n\n  private static _addDependency(\n    currentComponent: ComponentConstructor,\n    dependentComponent: ComponentConstructor,\n    map: Map<any, any>\n  ) {\n    let components = map.get(currentComponent);\n    if (!components) {\n      components = [];\n      map.set(currentComponent, components);\n    }\n    if (components.indexOf(dependentComponent) === -1) {\n      components.push(dependentComponent);\n    }\n  }\n\n  private constructor() {}\n}\n\nexport function dependencies(...abilityClass: ComponentConstructor[]) {\n  return function <T extends ComponentConstructor>(target: T): void {\n    abilityClass.forEach((ability) => ComponentsDependencies.register(target, ability));\n  };\n}\n", "/**\n * Layer, used for bit operations.\n */\nexport enum Layer {\n  Layer0 = 0x1,\n  Layer1 = 0x2,\n  Layer2 = 0x4,\n  Layer3 = 0x8,\n  Layer4 = 0x10,\n  Layer5 = 0x20,\n  Layer6 = 0x40,\n  Layer7 = 0x80,\n  Layer8 = 0x100,\n  Layer9 = 0x200,\n  Layer10 = 0x400,\n  Layer11 = 0x800,\n  Layer12 = 0x1000,\n  Layer13 = 0x2000,\n  Layer14 = 0x4000,\n  Layer15 = 0x8000,\n  Layer16 = 0x10000,\n  Layer17 = 0x20000,\n  Layer18 = 0x40000,\n  Layer19 = 0x80000,\n  Layer20 = 0x100000,\n  Layer21 = 0x200000,\n  Layer22 = 0x400000,\n  Layer23 = 0x800000,\n  Layer24 = 0x1000000,\n  Layer25 = 0x2000000,\n  Layer26 = 0x4000000,\n  Layer27 = 0x8000000,\n  Layer28 = 0x10000000,\n  Layer29 = 0x20000000,\n  Layer30 = 0x40000000,\n  Layer31 = 0x80000000,\n  Everything = 0xffffffff,\n  Nothing = 0x0\n}\n", "import { EngineObject } from \"./base\";\nimport { assignmentClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { Scene } from \"./Scene\";\n\n/**\n * The base class of the components.\n */\nexport abstract class Component extends EngineObject {\n  /** @internal */\n  @ignoreClone\n  _entity: Entity;\n  /** @internal */\n  @ignoreClone\n  _destroyed: boolean = false;\n\n  @assignmentClone\n  private _enabled: boolean = true;\n  @ignoreClone\n  private _awaked: boolean = false;\n\n  /**\n   * Enabled getter, 'enabled' indicates whether the component is enabled.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Enabled setter, indicates whether the component is enabled.\n   */\n  set enabled(value: boolean) {\n    if (value === this._enabled) {\n      return;\n    }\n    this._enabled = value;\n    if (value) {\n      this._entity.isActiveInHierarchy && this._onEnable();\n    } else {\n      this._entity.isActiveInHierarchy && this._onDisable();\n    }\n  }\n\n  /**\n   * Destroyed getter, 'destroyed' indicates whether the component is destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * The entitiy which the component belongs to.\n   */\n  get entity(): Entity {\n    return this._entity;\n  }\n\n  /**\n   * The scene which the component's entity belongs to.\n   */\n  get scene(): Scene {\n    return this._entity.scene;\n  }\n\n  /**\n   * The engine which the component's entity belongs to.\n   */\n  get engine(): Engine {\n    return this._entity.engine;\n  }\n\n  constructor(entity: Entity) {\n    super(entity.engine);\n    this._entity = entity;\n  }\n\n  /**\n   * Destory this instance.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n    this._entity._removeComponent(this);\n    if (this._entity.isActiveInHierarchy) {\n      this._enabled && this._onDisable();\n      this._onInActive();\n    }\n    this._destroyed = true;\n    this._onDestroy();\n  }\n\n  /**\n   * @internal\n   */\n  _onAwake(): void {}\n\n  /**\n   * @internal\n   */\n  _onEnable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDisable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {}\n\n  /**\n   * @internal\n   */\n  _onActive(): void {}\n\n  /**\n   * @internal\n   */\n  _onInActive(): void {}\n\n  /**\n   * @internal\n   */\n  _setActive(value: boolean): void {\n    if (value) {\n      if (!this._awaked) {\n        this._awaked = true;\n        this._onAwake();\n      }\n      // You can do isActive = false in onAwake function.\n      if (this._entity._isActiveInHierarchy) {\n        this._onActive();\n        this._enabled && this._onEnable();\n      }\n    } else {\n      this._enabled && this._onDisable();\n      this._onInActive();\n    }\n  }\n\n  //---------------------------------------------Deprecated-----------------------------------------------------------------\n\n  private _renderPriority: number = 0;\n\n  /**\n   * @deprecated\n   * Rendering priority.\n   */\n  get renderPriority(): number {\n    return this._renderPriority;\n  }\n  set renderPriority(val: number) {\n    this._renderPriority = val;\n  }\n}\n", "import { removeFromArray } from \"./base/Util\";\n\n/**\n * Used to update tags.\n */\nexport class UpdateFlag {\n  /** Flag. */\n  flag = true;\n\n  constructor(private _flags: UpdateFlag[] = []) {}\n\n  /**\n   * Destroy.\n   */\n  destroy(): void {\n    const flags = this._flags;\n    removeFromArray(flags, this);\n    this._flags = null;\n  }\n}\n", "import { MathUtil, Matrix, Matrix3x3, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { assignmentClone, deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * Used to implement transformation related functions.\n */\nexport class Transform extends Component {\n  private static _tempQuat0: Quaternion = new Quaternion();\n  private static _tempVec3: Vector3 = new Vector3();\n  private static _tempMat30: Matrix3x3 = new Matrix3x3();\n  private static _tempMat31: Matrix3x3 = new Matrix3x3();\n  private static _tempMat32: Matrix3x3 = new Matrix3x3();\n  private static _tempMat40: Matrix = new Matrix();\n  private static _tempMat41: Matrix = new Matrix();\n  private static _tempMat42: Matrix = new Matrix();\n  private static _tempMat43: Matrix = new Matrix();\n\n  private static _LOCAL_EULER_FLAG: number = 0x1;\n  private static _LOCAL_QUAT_FLAG: number = 0x2;\n  private static _WORLD_POSITION_FLAG: number = 0x4;\n  private static _WORLD_EULER_FLAG: number = 0x8;\n  private static _WORLD_QUAT_FLAG: number = 0x10;\n  private static _WORLD_SCALE_FLAG: number = 0x20;\n  private static _LOCAL_MATRIX_FLAG: number = 0x40;\n  private static _WORLD_MATRIX_FLAG: number = 0x80;\n\n  /** _WORLD_MATRIX_FLAG | _WORLD_POSITION_FLAG */\n  private static _WM_WP_FLAGS: number = 0x84;\n  /** _WORLD_MATRIX_FLAG | _WORLD_EULER_FLAG | _WORLD_QUAT_FLAG */\n  private static _WM_WE_WQ_FLAGS: number = 0x98;\n  /** _WORLD_MATRIX_FLAG | _WORLD_POSITION_FLAG | _WORLD_EULER_FLAG | _WORLD_QUAT_FLAG */\n  private static _WM_WP_WE_WQ_FLAGS: number = 0x9c;\n  /** Transform._WORLD_MATRIX_FLAG | Transform._WORLD_SCALE_FLAG */\n  private static _WM_WS_FLAGS: number = 0xa0;\n  /** Transform._WORLD_MATRIX_FLAG | Transform._WORLD_POSITION_FLAG | Transform._WORLD_SCALE_FLAG */\n  private static _WM_WP_WS_FLAGS: number = 0xa4;\n  /** Transform._WORLD_MATRIX_FLAG | Transform._WORLD_POSITION_FLAG | Transform._WORLD_EULER_FLAG | Transform._WORLD_QUAT_FLAG | Transform._WORLD_SCALE_FLAG */\n  private static _WM_WP_WE_WQ_WS_FLAGS: number = 0xbc;\n\n  @deepClone\n  private _position: Vector3 = new Vector3();\n  @deepClone\n  private _rotation: Vector3 = new Vector3();\n  @deepClone\n  private _rotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _scale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _worldPosition: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotation: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _lossyWorldScale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _localMatrix: Matrix = new Matrix();\n  @deepClone\n  private _worldMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _changeFlags: UpdateFlag[] = [];\n  @ignoreClone\n  private _isParentDirty: boolean = true;\n  @ignoreClone\n  private _parentTransformCache: Transform = null;\n\n  private _dirtyFlag: number = Transform._WM_WP_WE_WQ_WS_FLAGS;\n\n  /**\n   * Local position.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      value.cloneTo(this._position);\n    }\n    this._setDirtyFlagTrue(Transform._LOCAL_MATRIX_FLAG);\n    this._updateWorldPositionFlag();\n  }\n\n  /**\n   * World position.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldPosition(): Vector3 {\n    if (this._isContainDirtyFlag(Transform._WORLD_POSITION_FLAG)) {\n      if (this._getParentTransform()) {\n        this.worldMatrix.getTranslation(this._worldPosition);\n      } else {\n        this._position.cloneTo(this._worldPosition);\n      }\n      this._setDirtyFlagFalse(Transform._WORLD_POSITION_FLAG);\n    }\n    return this._worldPosition;\n  }\n\n  set worldPosition(value: Vector3) {\n    if (this._worldPosition !== value) {\n      value.cloneTo(this._worldPosition);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat41);\n      Vector3.transformCoordinate(value, Transform._tempMat41, this._position);\n    } else {\n      value.cloneTo(this._position);\n    }\n    this.position = this._position;\n    this._setDirtyFlagFalse(Transform._WORLD_POSITION_FLAG);\n  }\n\n  /**\n   * Local rotation, defining the rotation value in degrees, Yaw/Pitch/Roll sequence.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get rotation(): Vector3 {\n    if (this._isContainDirtyFlag(Transform._LOCAL_EULER_FLAG)) {\n      this._rotationQuaternion.toEuler(this._rotation);\n      this._rotation.scale(MathUtil.radToDegreeFactor); // radians to degrees\n\n      this._setDirtyFlagFalse(Transform._LOCAL_EULER_FLAG);\n    }\n    return this._rotation;\n  }\n\n  set rotation(value: Vector3) {\n    if (this._rotation !== value) {\n      value.cloneTo(this._rotation);\n    }\n    this._setDirtyFlagTrue(Transform._LOCAL_MATRIX_FLAG | Transform._LOCAL_QUAT_FLAG);\n    this._setDirtyFlagFalse(Transform._LOCAL_EULER_FLAG);\n    this._updateWorldRotationFlag();\n  }\n\n  /**\n   * World rotation, defining the rotation value in degrees, Yaw/Pitch/Roll sequence.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldRotation(): Vector3 {\n    if (this._isContainDirtyFlag(Transform._WORLD_EULER_FLAG)) {\n      this.worldRotationQuaternion.toEuler(this._worldRotation);\n      this._worldRotation.scale(MathUtil.radToDegreeFactor); // Radian to angle\n      this._setDirtyFlagFalse(Transform._WORLD_EULER_FLAG);\n    }\n    return this._worldRotation;\n  }\n\n  set worldRotation(value: Vector3) {\n    if (this._worldRotation !== value) {\n      value.cloneTo(this._worldRotation);\n    }\n    Quaternion.rotationEuler(\n      MathUtil.degreeToRadian(value.x),\n      MathUtil.degreeToRadian(value.y),\n      MathUtil.degreeToRadian(value.z),\n      this._worldRotationQuaternion\n    );\n    this.worldRotationQuaternion = this._worldRotationQuaternion;\n    this._setDirtyFlagFalse(Transform._WORLD_EULER_FLAG);\n  }\n\n  /**\n   * Local rotaion, defining the rotation by using a unit quaternion.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get rotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(Transform._LOCAL_QUAT_FLAG)) {\n      Quaternion.rotationEuler(\n        MathUtil.degreeToRadian(this._rotation.x),\n        MathUtil.degreeToRadian(this._rotation.y),\n        MathUtil.degreeToRadian(this._rotation.z),\n        this._rotationQuaternion\n      );\n      this._setDirtyFlagFalse(Transform._LOCAL_QUAT_FLAG);\n    }\n    return this._rotationQuaternion;\n  }\n\n  set rotationQuaternion(value: Quaternion) {\n    if (this._rotationQuaternion !== value) {\n      value.cloneTo(this._rotationQuaternion);\n    }\n    this._setDirtyFlagTrue(Transform._LOCAL_MATRIX_FLAG | Transform._LOCAL_EULER_FLAG);\n    this._setDirtyFlagFalse(Transform._LOCAL_QUAT_FLAG);\n    this._updateWorldRotationFlag();\n  }\n\n  /**\n   * World rotaion, defining the rotation by using a unit quaternion.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldRotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(Transform._WORLD_QUAT_FLAG)) {\n      const parent = this._getParentTransform();\n      if (parent != null) {\n        Quaternion.multiply(parent.worldRotationQuaternion, this.rotationQuaternion, this._worldRotationQuaternion);\n      } else {\n        this.rotationQuaternion.cloneTo(this._worldRotationQuaternion);\n      }\n      this._setDirtyFlagFalse(Transform._WORLD_QUAT_FLAG);\n    }\n    return this._worldRotationQuaternion;\n  }\n\n  set worldRotationQuaternion(value: Quaternion) {\n    if (this._worldRotationQuaternion !== value) {\n      value.cloneTo(this._worldRotationQuaternion);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Quaternion.invert(parent.worldRotationQuaternion, Transform._tempQuat0);\n      Quaternion.multiply(value, Transform._tempQuat0, this._rotationQuaternion);\n    } else {\n      value.cloneTo(this._rotationQuaternion);\n    }\n    this.rotationQuaternion = this._rotationQuaternion;\n    this._setDirtyFlagFalse(Transform._WORLD_QUAT_FLAG);\n  }\n\n  /**\n   * Local scaling.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get scale(): Vector3 {\n    return this._scale;\n  }\n\n  set scale(value: Vector3) {\n    if (this._scale !== value) {\n      value.cloneTo(this._scale);\n    }\n    this._setDirtyFlagTrue(Transform._LOCAL_MATRIX_FLAG);\n    this._updateWorldScaleFlag();\n  }\n\n  /**\n   * Local lossy scaling.\n   * @remarks The value obtained may not be correct under certain conditions(for example, the parent node has scaling, and the child node has a rotation), the scaling will be tilted. Vector3 cannot be used to correctly represent the scaling. Must use Matrix3x3.\n   */\n  get lossyWorldScale(): Vector3 {\n    if (this._isContainDirtyFlag(Transform._WORLD_SCALE_FLAG)) {\n      if (this._getParentTransform()) {\n        const scaleMat = this._getScaleMatrix();\n        const e = scaleMat.elements;\n        this._lossyWorldScale.setValue(e[0], e[4], e[8]);\n      } else {\n        this._scale.cloneTo(this._lossyWorldScale);\n      }\n      this._setDirtyFlagFalse(Transform._WORLD_SCALE_FLAG);\n    }\n    return this._lossyWorldScale;\n  }\n\n  /**\n   * Local matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get localMatrix(): Matrix {\n    if (this._isContainDirtyFlag(Transform._LOCAL_MATRIX_FLAG)) {\n      Matrix.affineTransformation(this._scale, this.rotationQuaternion, this._position, this._localMatrix);\n      this._setDirtyFlagFalse(Transform._LOCAL_MATRIX_FLAG);\n    }\n    return this._localMatrix;\n  }\n\n  set localMatrix(value: Matrix) {\n    if (this._localMatrix !== value) {\n      value.cloneTo(this._localMatrix);\n    }\n    this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale);\n    this._setDirtyFlagTrue(Transform._LOCAL_EULER_FLAG);\n    this._setDirtyFlagFalse(Transform._LOCAL_MATRIX_FLAG);\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * World matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldMatrix(): Matrix {\n    if (this._isContainDirtyFlag(Transform._WORLD_MATRIX_FLAG)) {\n      const parent = this._getParentTransform();\n      if (parent) {\n        Matrix.multiply(parent.worldMatrix, this.localMatrix, this._worldMatrix);\n      } else {\n        this.localMatrix.cloneTo(this._worldMatrix);\n      }\n      this._setDirtyFlagFalse(Transform._WORLD_MATRIX_FLAG);\n    }\n    return this._worldMatrix;\n  }\n\n  set worldMatrix(value: Matrix) {\n    if (this._worldMatrix !== value) {\n      value.cloneTo(this._worldMatrix);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat42);\n      Matrix.multiply(value, Transform._tempMat42, this._localMatrix);\n    } else {\n      value.cloneTo(this._localMatrix);\n    }\n    this.localMatrix = this._localMatrix;\n    this._setDirtyFlagFalse(Transform._WORLD_MATRIX_FLAG);\n  }\n\n  /**\n   * Set local position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setPosition(x: number, y: number, z: number): void {\n    this._position.setValue(x, y, z);\n    this.position = this._position;\n  }\n\n  /**\n   * Set local rotaion by the X, Y, Z components of the euler angle, unit in degrees, Yaw/Pitch/Roll sequence.\n   * @param x - The angle of rotation around the X axis\n   * @param y - The angle of rotation around the Y axis\n   * @param z - The angle of rotation around the Z axis\n   */\n  setRotation(x: number, y: number, z: number): void {\n    this._rotation.setValue(x, y, z);\n    this.rotation = this._rotation;\n  }\n\n  /**\n   * Set local rotaion by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._rotationQuaternion.setValue(x, y, z, w);\n    this.rotationQuaternion = this._rotationQuaternion;\n  }\n\n  /**\n   * Set local scaling by scaling values along X, Y, Z axis.\n   * @param x - Scaling along X axis\n   * @param y - Scaling along Y axis\n   * @param z - Scaling along Z axis\n   */\n  setScale(x: number, y: number, z: number): void {\n    this._scale.setValue(x, y, z);\n    this.scale = this._scale;\n  }\n\n  /**\n   * Set world position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setWorldPosition(x: number, y: number, z: number): void {\n    this._worldPosition.setValue(x, y, z);\n    this.worldPosition = this._worldPosition;\n  }\n\n  /**\n   * Set world rotaion by the X, Y, Z components of the euler angle, unit in degrees, Yaw/Pitch/Roll sequence.\n   * @param x - The angle of rotation around the X axis\n   * @param y - The angle of rotation around the Y axis\n   * @param z - The angle of rotation around the Z axis\n   */\n  setWorldRotation(x: number, y: number, z: number): void {\n    this._worldRotation.setValue(x, y, z);\n    this.worldRotation = this._worldRotation;\n  }\n\n  /**\n   * Set local rotaion by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setWorldRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._worldRotationQuaternion.setValue(x, y, z, w);\n    this.worldRotationQuaternion = this._worldRotationQuaternion;\n  }\n\n  /**\n   * Get the forward direction in world space.\n   * @param forward - Forward vector\n   * @returns Forward vector\n   */\n  getWorldForward(forward: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    forward.setValue(-e[8], -e[9], -e[10]);\n    return forward.normalize();\n  }\n\n  /**\n   * Get the right direction in world space.\n   * @param right - Right vector\n   * @returns Right vector\n   */\n  getWorldRight(right: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    right.setValue(e[0], e[1], e[2]);\n    return right.normalize();\n  }\n\n  /**\n   * Get the up direction in world space.\n   * @param up - Up vector\n   * @returns Up vector\n   */\n  getWorldUp(up: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    up.setValue(e[4], e[5], e[6]);\n    return up.normalize();\n  }\n\n  /**\n   * Translate along the passed Vector3.\n   * @param translation - Direction and distance of translation\n   * @param relativeToLocal - Relative to local space\n   */\n  translate(translation: Vector3, relativeToLocal?: boolean): void;\n\n  /**\n   * Translate along the passed X, Y, Z value.\n   * @param x - Translate direction and distance along x axis\n   * @param y - Translate direction and distance along y axis\n   * @param z - Translate direction and distance along z axis\n   * @param relativeToLocal - Relative to local space\n   */\n  translate(x: number, y: number, z: number, relativeToLocal?: boolean): void;\n\n  translate(\n    translationOrX: Vector3 | number,\n    relativeToLocalOrY?: boolean | number,\n    z?: number,\n    relativeToLocal?: boolean\n  ): void {\n    if (typeof translationOrX === \"number\") {\n      const translate = Transform._tempVec3;\n      translate.setValue(translationOrX, <number>relativeToLocalOrY, z);\n      this._translate(translate, relativeToLocal);\n    } else {\n      this._translate(translationOrX, <boolean>relativeToLocalOrY);\n    }\n  }\n\n  /**\n   * Rotate around the passed Vector3.\n   * @param rotation - Euler angle in degrees\n   * @param relativeToLocal - Relative to local space\n   */\n  rotate(rotation: Vector3, relativeToLocal?: boolean): void;\n\n  /**\n   * Rotate around the passed Vector3.\n   * @param x - Rotation along x axis, in degrees\n   * @param y - Rotation along y axis, in degrees\n   * @param z - Rotation along z axis, in degrees\n   * @param relativeToLocal - Relative to local space\n   */\n  rotate(x: number, y: number, z: number, relativeToLocal?: boolean): void;\n\n  rotate(\n    rotationOrX: Vector3 | number,\n    relativeToLocalOrY?: boolean | number,\n    z?: number,\n    relativeToLocal?: boolean\n  ): void {\n    if (typeof rotationOrX === \"number\") {\n      this._rotateXYZ(rotationOrX, <number>relativeToLocalOrY, z, relativeToLocal);\n    } else {\n      this._rotateXYZ(rotationOrX.x, rotationOrX.y, rotationOrX.z, <boolean>relativeToLocalOrY);\n    }\n  }\n\n  /**\n   * Rotate around the specified axis according to the specified angle.\n   * @param axis - Rotate axis\n   * @param angle - Rotate angle in degrees\n   * @param relativeToLocal - Relative to local space\n   */\n  rotateByAxis(axis: Vector3, angle: number, relativeToLocal: boolean = true): void {\n    const rad = angle * MathUtil.degreeToRadFactor;\n    Quaternion.rotationAxisAngle(axis, rad, Transform._tempQuat0);\n    this._rotateByQuat(Transform._tempQuat0, relativeToLocal);\n  }\n\n  /**\n   * Rotate and ensure that the world front vector points to the target world position.\n   * @param worldPosition - Target world position\n   * @param worldUp - Up direciton in world space, defalut is Vector3(0, 1, 0)\n   */\n  lookAt(worldPosition: Vector3, worldUp?: Vector3): void {\n    const position = this.worldPosition;\n    const EPSILON = MathUtil.zeroTolerance;\n    if (\n      Math.abs(position.x - worldPosition.x) < EPSILON &&\n      Math.abs(position.y - worldPosition.y) < EPSILON &&\n      Math.abs(position.z - worldPosition.z) < EPSILON\n    ) {\n      return;\n    }\n    const rotMat = Transform._tempMat43;\n    const worldRotationQuaternion = this._worldRotationQuaternion;\n\n    worldUp = worldUp ?? Transform._tempVec3.setValue(0, 1, 0);\n    Matrix.lookAt(position, worldPosition, worldUp, rotMat);\n    rotMat.getRotation(worldRotationQuaternion).invert();\n    this.worldRotationQuaternion = worldRotationQuaternion;\n  }\n\n  /**\n   * Register world transform change flag.\n   * @returns Change flag\n   */\n  registerWorldChangeFlag(): UpdateFlag {\n    const flag = new UpdateFlag(this._changeFlags);\n    this._changeFlags.push(flag);\n    return flag;\n  }\n\n  /**\n   * @internal\n   */\n  _parentChange(): void {\n    this._isParentDirty = true;\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionFlag(): void {\n    if (!this._isContainDirtyFlags(Transform._WM_WP_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WP_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldRotationFlag() {\n    if (!this._isContainDirtyFlags(Transform._WM_WE_WQ_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WE_WQ_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag(); // Rotation update of parent entity will trigger world position and rotation update of all child entity.\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionAndRotationFlag() {\n    if (!this._isContainDirtyFlags(Transform._WM_WP_WE_WQ_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WP_WE_WQ_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldScaleFlag() {\n    if (!this._isContainDirtyFlags(Transform._WM_WS_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WS_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldPositionAndScaleFlag(): void {\n    if (!this._isContainDirtyFlags(Transform._WM_WP_WS_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WP_WS_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * Update all world transform property dirty flag, the principle is the same as above.\n   */\n  private _updateAllWorldFlag(): void {\n    if (!this._isContainDirtyFlags(Transform._WM_WP_WE_WQ_WS_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WP_WE_WQ_WS_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateAllWorldFlag();\n      }\n    }\n  }\n\n  private _getParentTransform(): Transform | null {\n    if (!this._isParentDirty) {\n      return this._parentTransformCache;\n    }\n    let parentCache: Transform = null;\n    let parent = this._entity.parent;\n    while (parent) {\n      const transform = parent.transform;\n      if (transform) {\n        parentCache = transform;\n        break;\n      } else {\n        parent = parent.parent;\n      }\n    }\n    this._parentTransformCache = parentCache;\n    this._isParentDirty = false;\n    return parentCache;\n  }\n\n  private _getScaleMatrix(): Matrix3x3 {\n    const invRotation = Transform._tempQuat0;\n    const invRotationMat = Transform._tempMat30;\n    const worldRotScaMat = Transform._tempMat31;\n    const scaMat = Transform._tempMat32;\n    worldRotScaMat.setValueByMatrix(this.worldMatrix);\n    Quaternion.invert(this.worldRotationQuaternion, invRotation);\n    Matrix3x3.rotationQuaternion(invRotation, invRotationMat);\n    Matrix3x3.multiply(invRotationMat, worldRotScaMat, scaMat);\n    return scaMat;\n  }\n\n  private _isContainDirtyFlags(targetDirtyFlags: number): boolean {\n    return (this._dirtyFlag & targetDirtyFlags) === targetDirtyFlags;\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number) {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number) {\n    this._dirtyFlag &= ~type;\n  }\n\n  private _worldAssociatedChange(type: number): void {\n    this._dirtyFlag |= type;\n    const len = this._changeFlags.length;\n    for (let i = len - 1; i >= 0; i--) {\n      this._changeFlags[i].flag = true;\n    }\n  }\n\n  private _rotateByQuat(rotateQuat: Quaternion, relativeToLocal: boolean) {\n    if (relativeToLocal) {\n      Quaternion.multiply(this.rotationQuaternion, rotateQuat, this._rotationQuaternion);\n      this.rotationQuaternion = this._rotationQuaternion;\n    } else {\n      Quaternion.multiply(this.worldRotationQuaternion, rotateQuat, this._worldRotationQuaternion);\n      this.worldRotationQuaternion = this._worldRotationQuaternion;\n    }\n  }\n\n  private _translate(translation: Vector3, relativeToLocal: boolean = true): void {\n    if (relativeToLocal) {\n      const rotationMat = Transform._tempMat40;\n      Matrix.rotationQuaternion(this.rotationQuaternion, rotationMat);\n      Vector3.transformCoordinate(translation, rotationMat, Transform._tempVec3);\n      this.position = this._position.add(Transform._tempVec3);\n    } else {\n      this.worldPosition = this._worldPosition.add(translation);\n    }\n  }\n\n  private _rotateXYZ(x: number, y: number, z: number, relativeToLocal: boolean = true): void {\n    const radFactor = MathUtil.degreeToRadFactor;\n    const rotQuat = Transform._tempQuat0;\n    Quaternion.rotationEuler(x * radFactor, y * radFactor, z * radFactor, rotQuat);\n    this._rotateByQuat(rotQuat, relativeToLocal);\n  }\n\n  /**\n   * @deprecated Please use translate() function instead.\n   * Translate in the specified direction and distance.\n   * @param x - The direction and distance of translation in x axis\n   * @param y - The direction and distance of translation in y axis\n   * @param z - The direction and distance of translation in z axis\n   * @param relativeToLocal - Whether relative local space\n   */\n  translateXYZ(x: number, y: number, z: number, relativeToLocal: boolean = true): void {\n    this.translate(x, y, z, relativeToLocal);\n  }\n\n  /**\n   * @deprecated please use rotate() function instead.\n   * Rotate according to the specified Euler angle.\n   * @param x - The angle that rotate around of x axis (uint: angle)\n   * @param y - The angle that rotate around of y axis (uint: angle)\n   * @param z - The angle that rotate around of z axis (uint: angle)\n   * @param relativeToLocal - Whether relative local space\n   */\n  rotateXYZ(x: number, y: number, z: number, relativeToLocal: boolean = true): void {\n    this.rotate(x, y, z, relativeToLocal);\n  }\n}\n", "import { Matrix, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { EngineObject } from \"./base\";\nimport { ComponentCloner } from \"./clone/ComponentCloner\";\nimport { Component } from \"./Component\";\nimport { ComponentsDependencies } from \"./ComponentsDependencies\";\nimport { DisorderedArray } from \"./DisorderedArray\";\nimport { Engine } from \"./Engine\";\nimport { Layer } from \"./Layer\";\nimport { Scene } from \"./Scene\";\nimport { Transform } from \"./Transform\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * Entity, be used as components container.\n */\nexport class Entity extends EngineObject {\n  private static _entitys: DisorderedArray<Entity> = new DisorderedArray();\n\n  /**\n   * Find entity globally by name.\n   * @param name - The name of the entity which want to be finded.\n   * @returns The entity which be finded.\n   */\n  static findByName(name: string): Entity {\n    const entitys = Entity._entitys;\n    const elements = entitys._elements;\n    for (let i = entitys.length - 1; i >= 0; i--) {\n      const entity = elements[i];\n      if (entity.name === name) {\n        return entity;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find entity globally by path, use the \u2018/\u2019 symbol as the path separator.\n   * @deprecated Use scene find by path instead.\n   * @param scene - The scene be finded in.\n   * @param path - The path fo the entity eg: /root/entity.\n   * @returns The entity which be finded.\n   */\n  static findByPath(scene: Scene, path: string): Entity | null {\n    return scene.findEntityByPath(path);\n  }\n\n  /**\n   * @internal\n   */\n  static _findChildByName(root: Entity, name: string): Entity {\n    const children = root._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  static _traverseSetOwnerScene(entity: Entity, scene: Scene): void {\n    entity._scene = scene;\n    const children = entity._children;\n    for (let i = entity.childCount - 1; i >= 0; i--) {\n      this._traverseSetOwnerScene(children[i], scene);\n    }\n  }\n\n  name: string;\n  /** The layer the entity belongs to. */\n  layer: Layer = Layer.Layer0;\n  readonly transform: Transform;\n\n  /** @internal */\n  _isActiveInHierarchy: boolean = false;\n  /** @internal */\n  _components: Component[] = [];\n  /** @internal */\n  _children: Entity[] = [];\n  /** @internal */\n  _scene: Scene;\n  /** @internal */\n  _isRoot: boolean = false;\n  /** @internal */\n  _isActive: boolean = true;\n\n  private _parent: Entity = null;\n  private _activeChangedComponents: Component[];\n\n  /**\n   * Whether to activate locally.\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  set isActive(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      if (value) {\n        const parent = this._parent;\n        if (parent?._isActiveInHierarchy || (this._isRoot && this._scene._isActiveInEngine)) {\n          this._processActive();\n        }\n      } else {\n        if (this._isActiveInHierarchy) {\n          this._processInActive();\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether it is active in the hierarchy.\n   */\n  get isActiveInHierarchy(): boolean {\n    return this._isActiveInHierarchy;\n  }\n\n  /**\n   * The parent entity.\n   */\n  get parent(): Entity {\n    return this._parent;\n  }\n\n  set parent(entity: Entity) {\n    if (entity !== this._parent) {\n      const oldParent = this._removeFromParent();\n      const newParent = (this._parent = entity);\n      if (newParent) {\n        newParent._children.push(this);\n        const parentScene = newParent._scene;\n        if (this._scene !== parentScene) {\n          Entity._traverseSetOwnerScene(this, parentScene);\n        }\n\n        if (newParent._isActiveInHierarchy) {\n          !this._isActiveInHierarchy && this._isActive && this._processActive();\n        } else {\n          this._isActiveInHierarchy && this._processInActive();\n        }\n      } else {\n        this._isActiveInHierarchy && this._processInActive();\n        if (oldParent) {\n          Entity._traverseSetOwnerScene(this, null);\n        }\n      }\n      this._setTransformDirty();\n    }\n  }\n\n  /**\n   * The children entities\n   */\n  get children(): Readonly<Entity[]> {\n    return this._children;\n  }\n\n  /**\n   * Number of the children entities\n   */\n  get childCount(): number {\n    return this._children.length;\n  }\n\n  /**\n   * The scene the entity belongs to.\n   */\n  get scene(): Scene {\n    return this._scene;\n  }\n\n  /**\n   * The engine the entity belongs to.\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  /**\n   * Create a entity.\n   * @param engine - The engine the entity belongs to.\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    Entity._entitys.add(this);\n    this.name = name;\n    this.transform = this.addComponent(Transform);\n    this._inverseWorldMatFlag = this.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * Add component based on the component type.\n   * @param type - The type of the component.\n   * @returns\tThe component which has been added.\n   */\n  addComponent<T extends Component>(type: new (entity: Entity) => T): T {\n    ComponentsDependencies._addCheck(this, type);\n    const component = new type(this);\n    this._components.push(component);\n    if (this._isActiveInHierarchy) {\n      component._setActive(true);\n    }\n    return component;\n  }\n\n  /**\n   * Get component which match the type.\n   * @param type - The type of the component.\n   * @returns\tThe first component which match type.\n   */\n  getComponent<T extends Component>(type: new (entity: Entity) => T): T {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        return component;\n      }\n    }\n  }\n\n  /**\n   * Get components which match the type.\n   * @param type - The type of the component.\n   * @param results - The components which match type.\n   * @returns\tThe components which match type.\n   */\n  getComponents<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Get the components which match the type of the entity and it's children.\n   * @param type - The component type.\n   * @param results - The components collection.\n   * @returns\tThe components collection which match the type.\n   */\n  getComponentsIncludeChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    this._getComponentsInChildren<T>(type, results);\n    return results;\n  }\n\n  /**\n   * Add child entity.\n   * @param child - The child entity which want to be added.\n   */\n  addChild(child: Entity): void {\n    child.parent = this;\n  }\n\n  /**\n   * Remove child entitiy.\n   * @param child - The child entity which want to be removed.\n   */\n  removeChild(child: Entity): void {\n    child.parent = null;\n  }\n\n  /**\n   * Find child entity by index.\n   * @param index - The index of the child entity.\n   * @returns\tThe component which be finded.\n   */\n  getChild(index: number): Entity {\n    return this._children[index];\n  }\n\n  /**\n   * Find child entity by name.\n   * @param name - The name of the entity which want to be finded.\n   * @returns The component which be finded.\n   */\n  findByName(name: string): Entity {\n    const children = this._children;\n    const child = Entity._findChildByName(this, name);\n    if (child) return child;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      const grandson = child.findByName(name);\n      if (grandson) {\n        return grandson;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find the entity by path.\n   * @param path - The path fo the entity eg: /entity.\n   * @returns The component which be finded.\n   */\n  findByPath(path: string): Entity {\n    const splits = path.split(\"/\");\n    let entity: Entity = this;\n    for (let i = 0, length = splits.length; i < length; ++i) {\n      const split = splits[i];\n      if (split) {\n        entity = Entity._findChildByName(entity, split);\n        if (!entity) {\n          return null;\n        }\n      }\n    }\n    return entity;\n  }\n\n  /**\n   * Create child entity.\n   * @param name - The child entity's name.\n   * @returns The child entity.\n   */\n  createChild(name?: string): Entity {\n    const child = new Entity(this.engine, name);\n    child.layer = this.layer;\n    child.parent = this;\n    return child;\n  }\n\n  /**\n   * Clear children entities.\n   */\n  clearChildren(): void {\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      child._parent = null;\n      child._isActiveInHierarchy && child._processInActive();\n      Entity._traverseSetOwnerScene(child, null); // Must after child._processInActive().\n    }\n    children.length = 0;\n  }\n\n  /**\n   * Clone\n   * @returns Cloned entity.\n   */\n  clone(): Entity {\n    const cloneEntity = new Entity(this._engine, this.name);\n\n    cloneEntity._isActive = this._isActive;\n    cloneEntity.transform.localMatrix = this.transform.localMatrix;\n\n    const children = this._children;\n    for (let i = 0, len = this._children.length; i < len; i++) {\n      const child = children[i];\n      cloneEntity.addChild(child.clone());\n    }\n\n    const components = this._components;\n    for (let i = 0, n = components.length; i < n; i++) {\n      const sourceComp = components[i];\n      if (!(sourceComp instanceof Transform)) {\n        const targetComp = cloneEntity.addComponent(<new (entity: Entity) => Component>sourceComp.constructor);\n        ComponentCloner.cloneComponent(sourceComp, targetComp);\n      }\n    }\n\n    return cloneEntity;\n  }\n\n  /**\n   * Destroy self.\n   */\n  destroy(): void {\n    const abilityArray = this._components;\n    for (let i = abilityArray.length - 1; i >= 0; i--) {\n      abilityArray[i].destroy();\n    }\n    this._components.length = 0;\n\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      children[i].destroy();\n    }\n    this._children.length = 0;\n\n    if (this._parent != null) {\n      const parentChildren = this._parent._children;\n      parentChildren.splice(parentChildren.indexOf(this), 1);\n    }\n    this._parent = null;\n    Entity._entitys.delete(this);\n  }\n\n  /**\n   * @internal\n   */\n  _removeComponent(component: Component): void {\n    ComponentsDependencies._removeCheck(this, component.constructor as any);\n    const components = this._components;\n    components.splice(components.indexOf(component), 1);\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromParent(): Entity {\n    const oldParent = this._parent;\n    if (oldParent != null) {\n      const oldParentChildren = oldParent._children;\n      oldParentChildren.splice(oldParentChildren.indexOf(this), 1);\n      this._parent = null;\n    }\n    return oldParent;\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main inActive entity' active in hierarchy, if the operation is in main inActive entity or it's children script's onDisable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(true);\n  }\n\n  /**\n   * @internal\n   */\n  _processInActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main active entity' inActive in hierarchy, if the operation is in main active entity or it's children script's onEnable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setInActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(false);\n  }\n\n  private _getComponentsInChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): void {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    for (let i = this._children.length - 1; i >= 0; i--) {\n      this._children[i]._getComponentsInChildren<T>(type, results);\n    }\n  }\n\n  private _setActiveComponents(isActive: boolean): void {\n    const activeChangedComponents = this._activeChangedComponents;\n    for (let i = 0, length = activeChangedComponents.length; i < length; ++i) {\n      activeChangedComponents[i]._setActive(isActive);\n    }\n    this._engine._componentsManager.putActiveChangedTempList(activeChangedComponents);\n    this._activeChangedComponents = null;\n  }\n\n  private _setActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = true;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      activeChangedComponents.push(components[i]);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child: Entity = children[i];\n      child.isActive && child._setActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setInActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = false;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      activeChangedComponents.push(components[i]);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child: Entity = children[i];\n      child.isActive && child._setInActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setTransformDirty() {\n    if (this.transform) {\n      this.transform._parentChange();\n    } else {\n      for (let i = 0, len = this._children.length; i < len; i++) {\n        this._children[i]._setTransformDirty();\n      }\n    }\n  }\n\n  //--------------------------------------------------------------deprecated----------------------------------------------------------------\n  private _invModelMatrix: Matrix = new Matrix();\n  private _inverseWorldMatFlag: UpdateFlag;\n\n  /**\n   * @deprecated\n   * Use transform.position instead.\n   */\n  get position(): Vector3 {\n    return this.transform.position;\n  }\n\n  set position(val: Vector3) {\n    this.transform.position = val;\n  }\n\n  /**\n   * @deprecated\n   * Use transform.worldPosition instead.\n   */\n  get worldPosition(): Vector3 {\n    return this.transform.worldPosition;\n  }\n\n  set worldPosition(val: Vector3) {\n    this.transform.worldPosition = val;\n  }\n\n  /**\n   * @deprecated\n   * Use transform.rotationQuaternion instead.\n   */\n  get rotation(): Quaternion {\n    return this.transform.rotationQuaternion;\n  }\n\n  set rotation(val: Quaternion) {\n    this.transform.rotationQuaternion = val;\n  }\n\n  /**\n   * @deprecated\n   * Use transform.scale instead.\n   */\n  get scale(): Vector3 {\n    return this.transform.scale;\n  }\n\n  set scale(val: Vector3) {\n    this.transform.scale = val;\n  }\n\n  /**\n   * @deprecated\n   */\n  getInvModelMatrix(): Matrix {\n    if (this._inverseWorldMatFlag.flag) {\n      Matrix.invert(this.transform.worldMatrix, this._invModelMatrix);\n      this._inverseWorldMatFlag.flag = false;\n    }\n    return this._invModelMatrix;\n  }\n}\n", "import { SceneFeature } from \"./SceneFeature\";\nimport { EngineFeature } from \"./EngineFeature\";\nimport { Scene } from \"./Scene\";\nimport { Engine } from \"./Engine\";\n\n/**\n * Manage a set of feature objects.\n */\nexport class FeatureManager<T extends EngineFeature | SceneFeature> {\n  private _features: Array<new (engine: Engine) => T> = [];\n\n  private _objects = [];\n\n  /**\n   * Register a feature.\n   * @param {SceneFeature|EngineFeature} Feature\n   */\n  public registerFeature(IFeature: new () => T): void {\n    const featureArray = this._features;\n\n    // Search by type, avoid adding\n    for (let i = 0, len = featureArray.length; i < len; i++) {\n      if (featureArray[i] === IFeature) {\n        return;\n      }\n    }\n\n    // Add to global array\n    featureArray.push(IFeature);\n\n    // Add to existing scene\n    const objectArray = this._objects;\n    for (let i = 0, len = objectArray.length; i < len; i++) {\n      objectArray[i].features.push(new IFeature());\n    }\n  }\n\n  /**\n   * Add an feature with functional characteristics.\n   * @param {Scene|Engine} obj - Scene or engine\n   */\n  public addObject(obj: Scene | Engine): void {\n    obj.features = [];\n    for (let i = 0, len = this._features.length; i < len; i++) {\n      obj.features.push(new this._features[i]((<any>obj).engine ?? <any>obj) as any);\n    }\n    this._objects.push(obj);\n  }\n\n  /**\n   * Call the specified method of the feature.\n   * @param obj - Scene or engine\n   * @param method - Method name\n   * @param args - Function args\n   */\n  public callFeatureMethod(obj: Scene | Engine, method: string, args: any[]): void {\n    const features = obj.features;\n    const count = features.length;\n\n    for (let i = 0; i < count; i++) {\n      const feature = features[i];\n      if (feature[method]) {\n        feature[method].apply(feature, args);\n      }\n    }\n  }\n\n  /**\n   * Find feature.\n   * @param obj - Scene or engine\n   * @param feature - plug-in\n   */\n\n  public findFeature(obj: Scene | Engine, IFeature: new () => T): T {\n    const features = obj.features;\n    const count = features.length;\n\n    for (let i = 0; i < count; i++) {\n      const feature = features[i];\n      if (feature.constructor === (IFeature as any)) {\n        return feature as any;\n      }\n    }\n    return undefined;\n  }\n}\n", "import { Primitive } from \"../graphic\";\nimport { SubPrimitive } from \"../graphic/SubPrimitive\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\n\n/**\n * Render element.\n */\nexport class RenderElement {\n  private static _elementPoolIndex: number = 0;\n  private static _elementPool: RenderElement[] = [];\n\n  /**\n   * Get render element from pool.\n   * @remark The return value is only valid for the current frame, and the next frame will be automatically recycled for reuse.\n   */\n  static getFromPool(): RenderElement {\n    const { _elementPoolIndex: index, _elementPool: pool } = RenderElement;\n    RenderElement._elementPoolIndex++;\n    if (pool.length === index) {\n      const element = new RenderElement();\n      pool.push(element);\n      return element;\n    } else {\n      return pool[index];\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _restPool() {\n    RenderElement._elementPoolIndex = 0;\n  }\n\n  /** Render component. */\n  component: Renderer;\n  /** Primitive. */\n  primitive: Primitive;\n  /** Sub primitive. */\n  subPrimitive: SubPrimitive;\n  /** Material. */\n  material: Material;\n\n  setValue(component: Renderer, primitive: Primitive, subPrimitive: SubPrimitive, material: Material): void {\n    this.component = component;\n    this.primitive = primitive;\n    this.subPrimitive = subPrimitive;\n    this.material = material;\n  }\n}\n", "import { Camera } from \"./Camera\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Scene feature plug-in.\n * @deprecated\n */\nexport abstract class SceneFeature {\n  /**\n   * Callback before every scene update.\n   * @param scene - Scene\n   */\n  public preUpdate(scene: Scene): void {}\n\n  /**\n   * Callback after every scene update.\n   * @param scene - Scene\n   */\n  public postUpdate(scene: Scene): void {}\n\n  /**\n   * Callback before scene rendering.\n   * @param scene - Scene\n   * @param camera - Camera\n   */\n  public preRender(scene: Scene, camera: Camera): void {}\n\n  /**\n   * Callback after scene rendering.\n   * @param scene - Scene\n   * @param camera - Camera\n   */\n  public postRender(scene: Scene, camera: Camera): void {}\n\n  /**\n   * Callback after the scene is destroyed.\n   * @param scene - Scene\n   */\n  public destroy(scene: Scene): void {}\n}\n", "/**\n * Blend factor.\n * @remarks defines which function is used for blending pixel arithmetic\n */\nexport enum BlendFactor {\n  /** (0, 0, 0, 0)*/\n  Zero,\n  /** (1, 1, 1, 1)*/\n  One,\n  /** (Rs, Gs, Bs, As) */\n  SourceColor,\n  /** (1 - Rs, 1 - Gs, 1 - Bs, 1 - As)*/\n  OneMinusSourceColor,\n  /** (Rd, Gd, Bd, Ad)*/\n  DestinationColor,\n  /** (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad)*/\n  OneMinusDestinationColor,\n  /** (As, As, As, As)*/\n  SourceAlpha,\n  /** (1 - As, 1 - As, 1 - As, 1 - As)*/\n  OneMinusSourceAlpha,\n  /** (Ad, Ad, Ad, Ad)*/\n  DestinationAlpha,\n  /** (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad)*/\n  OneMinusDestinationAlpha,\n  /** (min(As, 1 - Ad), min(As, 1 - Ad), min(As, 1 - Ad), 10)*/\n  SourceAlphaSaturate,\n  /** (Rc, Gc, Bc, Ac)*/\n  BlendColor,\n  /** (1 - Rc, 1 - Gc, 1 - Bc, 1 - Ac)*/\n  OneMinusBlendColor\n}\n", "/**\n * Blend operation function.\n * @remarks defines how a new pixel is combined with a pixel.\n */\nexport enum BlendOperation {\n  /** src + dst. */\n  Add,\n  /** src - dst. */\n  Subtract,\n  /** dst - src. */\n  ReverseSubtract,\n  /** Minimum of source and destination. */\n  Min,\n  /** Maximum of source and destination. */\n  Max\n}\n", "/**\n * Set which color channels can be rendered to frame buffer.\n * @remarks enumeration can be combined using bit operations.\n */\nexport enum ColorWriteMask {\n  /** Do not write to any channel. */\n  None = 0,\n  /** Write to the red channel. */\n  Red = 0x1,\n  /** Write to the green channel. */\n  Green = 0x2,\n  /** Write to the blue channel. */\n  Blue = 0x4,\n  /** Write to the alpha channel. */\n  Alpha = 0x8,\n  /** Write to all channel. */\n  All = 0xf\n}\n", "/**\n * Depth/Stencil comparison function.\n * @remarks Specifies a function that compares incoming pixel depth/stencil to the current depth/stencil buffer value.\n */\nexport enum CompareFunction {\n  /** never pass. */\n  Never,\n  /** pass if the incoming value is less than the depth/stencil buffer value. */\n  Less,\n  /** pass if the incoming value equals the depth/stencil buffer value. */\n  Equal,\n  /** pass if the incoming value is less than or equal to the depth/stencil buffer value. */\n  LessEqual,\n  /** pass if the incoming value is greater than the depth/stencil buffer value. */\n  Greater,\n  /** pass if the incoming value is not equal to the depth/stencil buffer value. */\n  NotEqual,\n  /** pass if the incoming value is greater than or equal to the depth/stencil buffer value. */\n  GreaterEqual,\n  /** always pass. */\n  Always\n}\n", "/**\n * Culling mode.\n * @remarks specifies whether or not front- and/or back-facing polygons can be culled.\n */\nexport enum CullMode {\n  /** Disable culling. */\n  Off,\n  /** cut the front-face of the polygons. */\n  Front,\n  /** cut the back-face of the polygons. */\n  Back\n}\n", "/**\n * Stencil operation mode.\n * @remarks sets the front and/or back-facing stencil test actions.\n */\nexport enum StencilOperation {\n  /** Keeps the current value. */\n  Keep,\n  /** Sets the stencil buffer value to 0. */\n  Zero,\n  /** Sets the stencil buffer value to the reference value. */\n  Replace,\n  /** Increments the current stencil buffer value. Clamps to the maximum representable unsigned value. */\n  IncrementSaturate,\n  /** Decrements the current stencil buffer value. Clamps to 0. */\n  DecrementSaturate,\n  /** Inverts the current stencil buffer value bitwise. */\n  Invert,\n  /** Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing the maximum representable unsigned value. */\n  IncrementWrap,\n  /** Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable unsigned value when decrementing a stencil buffer value of 0. */\n  DecrementWrap\n}\n", "/**\n * Render queue type.\n */\nexport enum RenderQueueType {\n  /** Opaque queue. */\n  Opaque = 1000,\n  /** Transparency cutoff queue. */\n  AlphaTest = 2000,\n  /** Transparent queue, rendering from back to front to ensure correct rendering of transparent objects. */\n  Transparent = 3000\n}\n", "import { Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { Layer } from \"../Layer\";\nimport { RenderQueueType } from \"../material/enums/RenderQueueType\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { RenderElement } from \"./RenderElement\";\n\ninterface SpriteElement {\n  component: Renderer;\n  positionQuad;\n  uvRect;\n  tintColor;\n  texture;\n  renderMode;\n  camera;\n}\n\ntype Item = RenderElement | SpriteElement;\n\n/**\n * Render collection.\n * @private\n */\nexport class RenderQueue {\n  /** @internal */\n  static readonly compileMacros: ShaderMacroCollection = new ShaderMacroCollection();\n\n  readonly items: Item[] = [];\n\n  /**\n   * Push a render element.\n   */\n  pushPrimitive(element: RenderElement): void {\n    this.items.push(element);\n  }\n\n  /**\n   * Sort the elements.\n   */\n  sort(cameraPosition: Vector3): void {\n    this.items.sort((a: Item, b: Item) => {\n      const aIsPrimitive = this._isPrimitive(a);\n      const bIsPrimitive = this._isPrimitive(b);\n\n      if (aIsPrimitive && bIsPrimitive) {\n        const aElement: RenderElement = <RenderElement>a;\n        const bElement: RenderElement = <RenderElement>b;\n        const aRenderQueue = aElement.material.renderQueueType;\n        const bRenderQueue = bElement.material.renderQueueType;\n\n        if (aRenderQueue > bRenderQueue) {\n          return 1;\n        }\n        if (aRenderQueue < bRenderQueue) {\n          return -1;\n        }\n\n        // sort transparent queue from back to front.\n        if (aRenderQueue >= RenderQueueType.Transparent && bRenderQueue >= RenderQueueType.Transparent) {\n          const aDistance = Vector3.distanceSquared(aElement.component.entity.transform.worldPosition, cameraPosition);\n          const bDistance = Vector3.distanceSquared(bElement.component.entity.transform.worldPosition, cameraPosition);\n\n          return bDistance - aDistance;\n        }\n\n        // reduce switching shaderProgram\n        return aElement.material.shader.name.localeCompare(bElement.material.shader.name);\n      } else if (aIsPrimitive && !bIsPrimitive) {\n        return -1;\n      } else if (!aIsPrimitive && bIsPrimitive) {\n        return 1;\n      }\n    });\n  }\n\n  pushSprite(component: Component, positionQuad, uvRect, tintColor, texture, renderMode, camera: Camera) {\n    const element: SpriteElement = {\n      // @ts-ignore\n      component,\n      positionQuad,\n      uvRect,\n      tintColor,\n      texture,\n      renderMode,\n      camera\n    };\n    this.items.push(element);\n  }\n\n  render(camera: Camera, replaceMaterial: Material, mask: Layer) {\n    const items = this.items;\n    if (items.length === 0) {\n      return;\n    }\n\n    const spriteMaterial = camera._renderPipeline._defaultSpriteMaterial;\n    const { engine, scene } = camera;\n    const renderCount = engine._renderCount;\n    const rhi = engine._hardwareRenderer;\n    const sceneData = scene.shaderData;\n    const cameraData = camera.shaderData;\n\n    for (let i = 0, n = items.length; i < n; i++) {\n      const item = items[i];\n      const renderPassFlag = item.component.entity.layer;\n\n      if (!(renderPassFlag & mask)) {\n        continue;\n      }\n\n      if (this._isPrimitive(item)) {\n        rhi.flushSprite(engine, spriteMaterial);\n\n        const compileMacros = RenderQueue.compileMacros;\n        const element = <RenderElement>item;\n        const renderer = element.component;\n        const material = replaceMaterial ? replaceMaterial : element.material;\n        const rendererData = renderer.shaderData;\n        const materialData = material.shaderData;\n\n        // @todo: temporary solution\n        material._preRender(element);\n\n        // union render global macro and material self macro.\n        ShaderMacroCollection.unionCollection(\n          renderer._globalShaderMacro,\n          materialData._macroCollection,\n          compileMacros\n        );\n        compileMacros.unionCollection(element.primitive._macroCollection); //CM&SS: temporary\n\n        const program = material.shader._getShaderProgram(engine, compileMacros);\n        if (!program.isValid) {\n          continue;\n        }\n\n        const switchProgram = program.bind();\n        const switchRenderCount = renderCount !== program._uploadRenderCount;\n\n        if (switchRenderCount) {\n          program.groupingOtherUniformBlock();\n          program.uploadAll(program.sceneUniformBlock, sceneData);\n          program.uploadAll(program.cameraUniformBlock, cameraData);\n          program.uploadAll(program.rendererUniformBlock, rendererData);\n          program.uploadAll(program.materialUniformBlock, materialData);\n          program._uploadCamera = camera;\n          program._uploadRenderer = renderer;\n          program._uploadMaterial = material;\n          program._uploadRenderCount = renderCount;\n        } else {\n          if (program._uploadCamera !== camera) {\n            program.uploadUniforms(program.cameraUniformBlock, cameraData);\n            program._uploadCamera = camera;\n          }\n\n          if (program._uploadRenderer !== renderer) {\n            program.uploadUniforms(program.rendererUniformBlock, rendererData);\n            program._uploadRenderer = renderer;\n          }\n\n          if (program._uploadMaterial !== material) {\n            program.uploadUniforms(program.materialUniformBlock, materialData);\n            program._uploadMaterial = material;\n          }\n\n          if (switchProgram) {\n            program.uploadTextures(program.sceneUniformBlock, sceneData);\n            program.uploadTextures(program.cameraUniformBlock, cameraData);\n            program.uploadTextures(program.rendererUniformBlock, rendererData);\n            program.uploadTextures(program.materialUniformBlock, materialData);\n          }\n        }\n\n        material.renderState._apply(camera.engine);\n\n        rhi.drawPrimitive(element.primitive, element.subPrimitive, program);\n      } else {\n        const spirteElement = <SpriteElement>item;\n        rhi.drawSprite(\n          spriteMaterial,\n          spirteElement.positionQuad,\n          spirteElement.uvRect,\n          spirteElement.tintColor,\n          spirteElement.texture,\n          spirteElement.renderMode,\n          spirteElement.camera\n        );\n      }\n    }\n\n    rhi.flushSprite(engine, spriteMaterial);\n  }\n\n  /**\n   * Clear collection.\n   */\n  clear(): void {\n    this.items.length = 0;\n  }\n\n  private _isPrimitive(item) {\n    return !!item.primitive;\n  }\n}\n", "import pbr_common_frag_define from \"./common_frag_define.glsl\";\nimport pbr_util_frag_define from \"./util_frag_define.glsl\";\n\n/** IBL define */\nimport pbr_envmap_light_frag_define from \"./envmap_light_frag_define.glsl\";\n\n/** prop & texture */\nimport pbr_base_frag_define from \"./base_frag_define.glsl\";\nimport pbr_texture_frag_define from \"./texture_frag_define.glsl\";\n\n/** runtime context */\nimport pbr_runtime_frag_define from \"./runtime_frag_define.glsl\";\n\n// todo: generalize\nimport pbr_normal_frag_define from \"./normal_frag_define.glsl\";\n\n// todo: BxDF\nimport pbr_brdf_cook_torrance_frag_define from \"./brdf_cook_torrance_frag_define.glsl\";\n\n/** direct + IBL */\nimport pbr_direct_irradiance_frag_define from \"./direct_irradiance_frag_define.glsl\";\nimport pbr_ibl_specular_frag_define from \"./ibl_specular_frag_define.glsl\";\nimport pbr_ibl_diffuse_frag_define from \"./ibl_diffuse_frag_define.glsl\";\n\nimport pbr_begin_frag from \"./begin_frag.glsl\";\nimport pbr_direct_irradiance_frag from \"./direct_irradiance_frag.glsl\";\nimport pbr_ibl_diffuse_frag from \"./ibl_diffuse_frag.glsl\";\nimport pbr_ibl_specular_frag from \"./ibl_specular_frag.glsl\";\nimport pbr_end_frag from \"./end_frag.glsl\";\n\nexport default {\n  pbr_common_frag_define,\n  pbr_util_frag_define,\n\n  pbr_envmap_light_frag_define,\n\n  pbr_base_frag_define,\n  pbr_texture_frag_define,\n\n  pbr_runtime_frag_define,\n\n  pbr_normal_frag_define,\n\n  pbr_brdf_cook_torrance_frag_define,\n\n  pbr_direct_irradiance_frag_define,\n  pbr_ibl_specular_frag_define,\n  pbr_ibl_diffuse_frag_define,\n\n  pbr_begin_frag,\n  pbr_direct_irradiance_frag,\n  pbr_ibl_diffuse_frag,\n  pbr_ibl_specular_frag,\n  pbr_end_frag\n};\n", "import common from \"./common.glsl\";\nimport common_vert from \"./common_vert.glsl\";\nimport common_frag from \"./common_frag.glsl\";\n\nimport color_share from \"./color_share.glsl\";\nimport normal_share from \"./normal_share.glsl\";\nimport uv_share from \"./uv_share.glsl\";\nimport worldpos_share from \"./worldpos_share.glsl\";\nimport shadow_share from \"./shadow_share.glsl\";\nimport fog_share from \"./fog_share.glsl\";\n\nimport begin_normal_vert from \"./begin_normal_vert.glsl\";\nimport begin_position_vert from \"./begin_position_vert.glsl\";\n\nimport morph_target_vert from \"./morph_target_vert.glsl\";\n\nimport position_vert from \"./position_vert.glsl\";\nimport color_vert from \"./color_vert.glsl\";\nimport normal_vert from \"./normal_vert.glsl\";\nimport skinning_vert from \"./skinning_vert.glsl\";\nimport uv_vert from \"./uv_vert.glsl\";\nimport worldpos_vert from \"./worldpos_vert.glsl\";\nimport shadow_vert from \"./shadow_vert.glsl\";\nimport morph_vert from \"./morph_vert.glsl\";\nimport fog_vert from \"./fog_vert.glsl\";\n\nimport ambient_light_frag from \"./ambient_light_frag.glsl\";\nimport direct_light_frag from \"./direct_light_frag.glsl\";\nimport point_light_frag from \"./point_light_frag.glsl\";\nimport spot_light_frag from \"./spot_light_frag.glsl\";\nimport mobile_material_frag from \"./mobile_material_frag.glsl\";\nimport fog_frag from \"./fog_frag.glsl\";\n\nimport begin_mobile_frag from \"./begin_mobile_frag.glsl\";\nimport begin_normal_frag from \"./begin_normal_frag.glsl\";\nimport begin_viewdir_frag from \"./begin_viewdir_frag.glsl\";\n\nimport mobile_blinnphong_frag from \"./mobile_blinnphong_frag.glsl\";\nimport mobile_lambert_frag from \"./mobile_lambert_frag.glsl\";\n\nimport noise_common from \"./noise_common.glsl\";\nimport noise_cellular_2D from \"./noise_cellular_2D.glsl\";\nimport noise_cellular_2x2 from \"./noise_cellular_2x2.glsl\";\nimport noise_cellular_2x2x2 from \"./noise_cellular_2x2x2.glsl\";\nimport noise_cellular_3D from \"./noise_cellular_3D.glsl\";\nimport noise_cellular from \"./noise_cellular.glsl\";\nimport noise_perlin_2D from \"./noise_perlin_2D.glsl\";\nimport noise_perlin_3D from \"./noise_perlin_3D.glsl\";\nimport noise_perlin_4D from \"./noise_perlin_4D.glsl\";\nimport noise_perlin from \"./noise_perlin.glsl\";\nimport noise_psrd_2D from \"./noise_psrd_2D.glsl\";\nimport noise_simplex_2D from \"./noise_simplex_2D.glsl\";\nimport noise_simplex_3D_grad from \"./noise_simplex_3D_grad.glsl\";\nimport noise_simplex_3D from \"./noise_simplex_3D.glsl\";\nimport noise_simplex_4D from \"./noise_simplex_4D.glsl\";\nimport noise_simplex from \"./noise_simplex.glsl\";\n\nimport perturbation_share from \"./perturbation_share.glsl\";\nimport perturbation_frag from \"./perturbation_frag.glsl\";\nimport refraction_share from \"./refraction_share.glsl\";\nimport refraction_frag from \"./refraction_frag.glsl\";\n\nimport clipPlane_vert_define from \"./clipPlane_vert_define.glsl\";\nimport clipPlane_vert from \"./clipPlane_vert.glsl\";\nimport clipPlane_frag_define from \"./clipPlane_frag_define.glsl\";\nimport clipPlane_frag from \"./clipPlane_frag.glsl\";\n\nimport gamma_frag from \"./gamma_frag.glsl\";\n\nimport PBRShaderLib from \"./pbr\";\nimport oit_frag from \"./oit/oit_frag.glsl\";\nimport oit_frag_define from \"./oit/oit_frag_define.glsl\";\n\nexport const ShaderLib = {\n  common,\n  common_vert,\n  common_frag,\n\n  color_share,\n  normal_share,\n  uv_share,\n  worldpos_share,\n  shadow_share,\n  fog_share,\n\n  begin_normal_vert,\n  begin_position_vert,\n\n  morph_target_vert,\n\n  position_vert,\n  color_vert,\n  normal_vert,\n  skinning_vert,\n  uv_vert,\n  worldpos_vert,\n  shadow_vert,\n  morph_vert,\n  fog_vert,\n\n  ambient_light_frag,\n  direct_light_frag,\n  point_light_frag,\n  spot_light_frag,\n  mobile_material_frag,\n  fog_frag,\n\n  begin_mobile_frag,\n  begin_normal_frag,\n  begin_viewdir_frag,\n\n  mobile_blinnphong_frag,\n  mobile_lambert_frag,\n\n  noise_common,\n  noise_cellular_2D,\n  noise_cellular_2x2,\n  noise_cellular_2x2x2,\n  noise_cellular_3D,\n  noise_cellular,\n  noise_perlin_2D,\n  noise_perlin_3D,\n  noise_perlin_4D,\n  noise_perlin,\n  noise_psrd_2D,\n  noise_simplex_2D,\n  noise_simplex_3D_grad,\n  noise_simplex_3D,\n  noise_simplex_4D,\n  noise_simplex,\n\n  perturbation_share,\n  perturbation_frag,\n  refraction_share,\n  refraction_frag,\n\n  clipPlane_vert_define,\n  clipPlane_vert,\n  clipPlane_frag_define,\n  clipPlane_frag,\n\n  gamma_frag,\n\n  oit_frag,\n  oit_frag_define,\n\n  ...PBRShaderLib\n};\n\nexport function InjectShaderSlices(obj) {\n  Object.assign(ShaderLib, obj);\n}\n", "import { ShaderLib, InjectShaderSlices } from \"./ShaderLib\";\nimport { Logger } from \"../base/Logger\";\n\nclass ShaderFactory {\n  /**\n   * GLSL version.\n   * @param {string} version - \"100\" | \"300 es\"\n   * */\n  static parseVersion(version: string = \"100\") {\n    return `#version ${version}\\n`;\n  }\n\n  static parsePrecision(vertP: string, fragP: string, compileVert?: boolean) {\n    const downgrade = \"mediump\";\n\n    return `\n        #ifdef GL_FRAGMENT_PRECISION_HIGH\n          precision ${compileVert ? vertP : fragP} float;\n          precision ${compileVert ? vertP : fragP} int;\n\n          #define O3_VERTEX_PRECISION ${vertP}\n          #define O3_FRAGMENT_PRECISION ${fragP}\n        #else\n          precision ${downgrade} float;\n          precision ${downgrade} int;\n\n          #define O3_VERTEX_PRECISION ${downgrade}\n          #define O3_FRAGMENT_PRECISION ${downgrade}\n        #endif\n      `;\n  }\n\n  static parseShaderName(name) {\n    return `#define O3_SHADER_NAME ${name}\\n`;\n  }\n\n  static parseAttributeMacros(macros) {\n    return (\n      \"#define O3_ATTRIBUTE_MACROS_START\\n\" +\n      macros.map((m) => `#define ${m}\\n`).join(\"\") +\n      \"#define O3_ATTRIBUTE_MACROS_END\\n\"\n    );\n  }\n\n  static parseCustomMacros(macros: string[]) {\n    return (\n      \"#define O3_CUSTOM_MACROS_START\\n\" +\n      macros.map((m) => `#define ${m}\\n`).join(\"\") +\n      \"#define O3_CUSTOM_MACROS_END\\n\"\n    );\n  }\n\n  static parseShader(src) {\n    return ShaderFactory.parseIncludes(src);\n  }\n\n  static parseIncludes(src) {\n    const regex = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n    function replace(match, slice) {\n      var replace = ShaderLib[slice];\n\n      if (replace === undefined) {\n        Logger.error(`Shader slice \"${match.trim()}\" not founded.`);\n        return \"\";\n      }\n\n      return ShaderFactory.parseIncludes(replace);\n    }\n\n    return src.replace(regex, replace);\n  }\n\n  static InjectShaderSlices(slices) {\n    InjectShaderSlices(slices);\n  }\n\n  /**\n   * GLSL extension.\n   * @param {string[]} extensions - such as [\"GL_EXT_shader_texture_lod\"]\n   * */\n  static parseExtension(extensions: string[]) {\n    return (\n      `#define O3_EXTENSION_START\\n` +\n      extensions.map((e) => `#extension ${e} : enable\\n`).join(\"\") +\n      `#define O3_EXTENSION_END\\n`\n    );\n  }\n\n  /**\n   * Convert lower GLSL version to GLSL 300 es.\n   * @param shader - code\n   * @param isFrag - Whether it is a fragment shader.\n   * */\n  static convertTo300(shader: string, isFrag?: boolean) {\n    /** replace attribute and in */\n    shader = shader.replace(/\\battribute\\b/g, \"in\");\n    shader = shader.replace(/\\bvarying\\b/g, isFrag ? \"in\" : \"out\");\n\n    /** replace api */\n    shader = shader.replace(/\\btexture(2D|Cube)\\s*\\(/g, \"texture(\");\n    shader = shader.replace(/\\btexture(2D|Cube)LodEXT\\s*\\(/g, \"textureLod(\");\n    if (isFrag) {\n      const isMRT = /\\bgl_FragData\\[.+?\\]/g.test(shader);\n      if (isMRT) {\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"gl_FragData[0]\");\n        const result = shader.match(/\\bgl_FragData\\[.+?\\]/g);\n        shader = this.replaceMRTShader(shader, result);\n      } else {\n        shader = shader.replace(/void\\s+?main\\s*\\(/g, `out vec4 glFragColor;\\nvoid main(`);\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"glFragColor\");\n      }\n    }\n\n    return shader;\n  }\n\n  /**\n   * Returns the length of the draw buffer in the corresponding shaderCode.\n   * @param shader - shader code\n   */\n  static getMaxDrawBuffers(shader: string): number {\n    const mrtIndexSet = new Set();\n    const result = shader.match(/\\bgl_FragData\\[.+?\\]/g) || [];\n\n    for (let i = 0; i < result.length; i++) {\n      const res = result[i].match(/\\bgl_FragData\\[(.+?)\\]/);\n      mrtIndexSet.add(res[1]);\n    }\n\n    return mrtIndexSet.size;\n  }\n\n  /**\n   * Compatible with gl_FragColor and gl_FragData simultaneous errors.\n   * */\n  static compatible(fragmentShader: string) {\n    const hasFragData = /\\bgl_FragData\\[.+?\\]/g.test(fragmentShader);\n    if (hasFragData) {\n      fragmentShader = fragmentShader.replace(/\\bgl_FragColor\\b/g, \"gl_FragData[0]\");\n    }\n    return fragmentShader;\n  }\n\n  private static replaceMRTShader(shader: string, result: string[]): string {\n    let declaration = \"\";\n    const mrtIndexSet = new Set();\n\n    for (let i = 0; i < result.length; i++) {\n      const res = result[i].match(/\\bgl_FragData\\[(.+?)\\]/);\n      mrtIndexSet.add(res[1]);\n    }\n\n    mrtIndexSet.forEach((index) => {\n      declaration += `layout(location=${index}) out vec4 fragOutColor${index};\\n`;\n    });\n    declaration += `void main(`;\n\n    shader = shader.replace(/\\bgl_FragData\\[(.+?)\\]/g, \"fragOutColor$1\");\n\n    shader = shader.replace(/void\\s+?main\\s*\\(/g, declaration);\n    return shader;\n  }\n}\n\nexport { ShaderFactory };\n", "/**\n * Shader macro\u3002\n */\nexport class ShaderMacro {\n  /** name */\n  readonly name: string;\n\n  /** @internal */\n  _index: number;\n  /** @internal */\n  _value: number;\n\n  /**\n   * @internal\n   */\n  constructor(name: string, index: number, value: number) {\n    this.name = name;\n    this._index = index;\n    this._value = value;\n  }\n}\n", "/**\n * Shader data grouping.\n */\nexport enum ShaderDataGroup {\n  /** Scene group. */\n  Scene,\n  /** Camera group. */\n  Camera,\n  /** Renderer group. */\n  Renderer,\n  /** material group. */\n  Material\n}\n", "import { Color, Matrix, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { HardwareRenderer } from \"../HardwareRenderer\";\nimport { Texture } from \"../texture/Texture\";\nimport { ShaderPropertyValueType } from \"./ShaderData\";\n\n/**\n * Shader uniform\u3002\n * @internal\n */\nexport class ShaderUniform {\n  name: string;\n  propertyId: number;\n  location: WebGLUniformLocation;\n  textureIndex: GLenum | GLenum[];\n  applyFunc: (shaderUniform: ShaderUniform, value: ShaderPropertyValueType) => void;\n  cacheValue: number | Vector2 | Vector3 | Vector4;\n\n  private _rhi: HardwareRenderer;\n  private _gl: WebGLRenderingContext;\n\n  constructor(engine: Engine) {\n    const rhi = engine._hardwareRenderer;\n    this._rhi = rhi;\n    this._gl = rhi.gl;\n  }\n\n  upload1f(shaderUniform: ShaderUniform, value: number): void {\n    if (this.cacheValue !== value) {\n      this._gl.uniform1f(shaderUniform.location, value);\n      this.cacheValue = value;\n    }\n  }\n\n  upload1fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform1fv(shaderUniform.location, value);\n  }\n\n  upload2f(shaderUniform: ShaderUniform, value: Vector2 | Vector3 | Vector4 | Color): void {\n    const cacheVaue = <Vector2>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheVaue.x !== (<Color>value).r || cacheVaue.y !== (<Color>value).g) {\n        this._gl.uniform2f(shaderUniform.location, (<Color>value).r, (<Color>value).g);\n        cacheVaue.x = (<Color>value).r;\n        cacheVaue.y = (<Color>value).g;\n      }\n    } else {\n      if (cacheVaue.x !== (<Vector2>value).x || cacheVaue.y !== (<Vector2>value).y) {\n        this._gl.uniform2f(shaderUniform.location, (<Vector2>value).x, (<Vector2>value).y);\n        cacheVaue.x = (<Vector2>value).x;\n        cacheVaue.y = (<Vector2>value).y;\n      }\n    }\n  }\n\n  upload2fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform2fv(shaderUniform.location, value);\n  }\n\n  upload3f(shaderUniform: ShaderUniform, value: Vector3 | Vector4 | Color): void {\n    const cacheVaue = <Vector3>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheVaue.x !== (<Color>value).r || cacheVaue.y !== (<Color>value).g || cacheVaue.z !== (<Color>value).b) {\n        this._gl.uniform3f(shaderUniform.location, (<Color>value).r, (<Color>value).g, (<Color>value).b);\n        cacheVaue.x = (<Color>value).r;\n        cacheVaue.y = (<Color>value).g;\n        cacheVaue.z = (<Color>value).b;\n      }\n    } else {\n      if (\n        cacheVaue.x !== (<Vector3>value).x ||\n        cacheVaue.y !== (<Vector3>value).y ||\n        cacheVaue.z !== (<Vector3>value).z\n      ) {\n        this._gl.uniform3f(shaderUniform.location, (<Vector3>value).x, (<Vector3>value).y, (<Vector3>value).z);\n        cacheVaue.x = (<Vector3>value).x;\n        cacheVaue.y = (<Vector3>value).y;\n        cacheVaue.z = (<Vector3>value).z;\n      }\n    }\n  }\n\n  upload3fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform3fv(shaderUniform.location, value);\n  }\n\n  upload4f(shaderUniform: ShaderUniform, value: Vector4 | Color): void {\n    const cacheVaue = <Vector4>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (\n        cacheVaue.x !== (<Color>value).r ||\n        cacheVaue.y !== (<Color>value).g ||\n        cacheVaue.z !== (<Color>value).b ||\n        cacheVaue.w !== (<Color>value).a\n      ) {\n        this._gl.uniform4f(\n          shaderUniform.location,\n          (<Color>value).r,\n          (<Color>value).g,\n          (<Color>value).b,\n          (<Color>value).a\n        );\n        cacheVaue.x = (<Color>value).r;\n        cacheVaue.y = (<Color>value).g;\n        cacheVaue.z = (<Color>value).b;\n        cacheVaue.w = (<Color>value).a;\n      }\n    } else {\n      if (\n        cacheVaue.x !== (<Vector4>value).x ||\n        cacheVaue.y !== (<Vector4>value).y ||\n        cacheVaue.z !== (<Vector4>value).z ||\n        cacheVaue.w !== (<Vector4>value).w\n      ) {\n        this._gl.uniform4f(\n          shaderUniform.location,\n          (<Vector4>value).x,\n          (<Vector4>value).y,\n          (<Vector4>value).z,\n          (<Vector4>value).w\n        );\n        cacheVaue.x = (<Vector4>value).x;\n        cacheVaue.y = (<Vector4>value).y;\n        cacheVaue.z = (<Vector4>value).z;\n        cacheVaue.w = (<Vector4>value).w;\n      }\n    }\n  }\n\n  upload4fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform4fv(shaderUniform.location, value);\n  }\n\n  upload1i(shaderUniform: ShaderUniform, value: number): void {\n    if (this.cacheValue !== value) {\n      this._gl.uniform1i(shaderUniform.location, value);\n      this.cacheValue = value;\n    }\n  }\n\n  upload1iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform1iv(shaderUniform.location, value);\n  }\n\n  upload2i(shaderUniform: ShaderUniform, value: Vector2 | Vector3 | Vector4 | Color): void {\n    const cacheVaue = <Vector2>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheVaue.x !== (<Color>value).r || cacheVaue.y !== (<Color>value).g) {\n        this._gl.uniform2i(shaderUniform.location, (<Color>value).r, (<Color>value).g);\n        cacheVaue.x = (<Color>value).r;\n        cacheVaue.y = (<Color>value).g;\n      }\n    } else {\n      if (cacheVaue.x !== (<Vector2>value).x || cacheVaue.y !== (<Vector2>value).y) {\n        this._gl.uniform2i(shaderUniform.location, (<Vector2>value).x, (<Vector2>value).y);\n        cacheVaue.x = (<Vector2>value).x;\n        cacheVaue.y = (<Vector2>value).y;\n      }\n    }\n  }\n\n  upload2iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform2iv(shaderUniform.location, value);\n  }\n\n  upload3i(shaderUniform: ShaderUniform, value: Vector3 | Vector4 | Color): void {\n    const cacheVaue = <Vector3>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheVaue.x !== (<Color>value).r || cacheVaue.y !== (<Color>value).g || cacheVaue.z !== (<Color>value).b) {\n        this._gl.uniform3i(shaderUniform.location, (<Color>value).r, (<Color>value).g, (<Color>value).b);\n        cacheVaue.x = (<Color>value).r;\n        cacheVaue.y = (<Color>value).g;\n        cacheVaue.z = (<Color>value).b;\n      }\n    } else {\n      if (\n        cacheVaue.x !== (<Vector3>value).x ||\n        cacheVaue.y !== (<Vector3>value).y ||\n        cacheVaue.z !== (<Vector3>value).z\n      ) {\n        this._gl.uniform3i(shaderUniform.location, (<Vector3>value).x, (<Vector3>value).y, (<Vector3>value).z);\n        cacheVaue.x = (<Vector3>value).x;\n        cacheVaue.y = (<Vector3>value).y;\n        cacheVaue.z = (<Vector3>value).z;\n      }\n    }\n  }\n  upload3iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform3iv(shaderUniform.location, value);\n  }\n  upload4i(shaderUniform: ShaderUniform, value: Vector4 | Color): void {\n    const cacheVaue = <Vector4>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (\n        cacheVaue.x !== (<Color>value).r ||\n        cacheVaue.y !== (<Color>value).g ||\n        cacheVaue.z !== (<Color>value).b ||\n        cacheVaue.w !== (<Color>value).a\n      ) {\n        this._gl.uniform4i(\n          shaderUniform.location,\n          (<Color>value).r,\n          (<Color>value).g,\n          (<Color>value).b,\n          (<Color>value).a\n        );\n        cacheVaue.x = (<Color>value).r;\n        cacheVaue.y = (<Color>value).g;\n        cacheVaue.z = (<Color>value).b;\n        cacheVaue.w = (<Color>value).a;\n      }\n    } else {\n      if (\n        cacheVaue.x !== (<Vector4>value).x ||\n        cacheVaue.y !== (<Vector4>value).y ||\n        cacheVaue.z !== (<Vector4>value).z ||\n        cacheVaue.w !== (<Vector4>value).w\n      ) {\n        this._gl.uniform4i(\n          shaderUniform.location,\n          (<Vector4>value).x,\n          (<Vector4>value).y,\n          (<Vector4>value).z,\n          (<Vector4>value).w\n        );\n        cacheVaue.x = (<Vector4>value).x;\n        cacheVaue.y = (<Vector4>value).y;\n        cacheVaue.z = (<Vector4>value).z;\n        cacheVaue.w = (<Vector4>value).w;\n      }\n    }\n  }\n\n  upload4iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform4iv(shaderUniform.location, value);\n  }\n\n  uploadMat4(shaderUniform: ShaderUniform, value: Matrix): void {\n    this._gl.uniformMatrix4fv(shaderUniform.location, false, value.elements);\n  }\n\n  uploadMat4v(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniformMatrix4fv(shaderUniform.location, false, value);\n  }\n\n  uploadTexture(shaderUniform: ShaderUniform, value: Texture): void {\n    const rhi = this._rhi;\n    rhi.activeTexture(shaderUniform.textureIndex as GLenum);\n    rhi.bindTexture(value._target, value._glTexture);\n  }\n\n  uploadTextureArray(shaderUniform: ShaderUniform, value: Texture[]): void {\n    const rhi = this._rhi;\n    const textureIndices = shaderUniform.textureIndex as GLenum[];\n    for (let i = 0; i < value.length; i++) {\n      const texture = value[i];\n      rhi.activeTexture(textureIndices[i]);\n      rhi.bindTexture(texture._target, texture._glTexture);\n    }\n  }\n}\n", "import { ShaderUniform } from \"./ShaderUniform\";\n\n/**\n * Shader uniform block.\n * @internal\n */\nexport class ShaderUniformBlock {\n  readonly constUniforms: ShaderUniform[] = [];\n  readonly textureUniforms: ShaderUniform[] = [];\n}\n", "import { Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { HardwareRenderer } from \"../HardwareRenderer\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { Shader } from \"./Shader\";\nimport { ShaderData } from \"./ShaderData\";\nimport { ShaderUniform } from \"./ShaderUniform\";\nimport { ShaderUniformBlock } from \"./ShaderUniformBlock\";\n\n/**\n * Shader program, corresponding to the GPU shader program.\n * @internal\n */\nexport class ShaderProgram {\n  private static _counter: number = 0;\n\n  private static _addLineNum(str: string) {\n    const lines = str.split(\"\\n\");\n    const limitLength = (lines.length + 1).toString().length + 6;\n    let prefix;\n    return lines\n      .map((line, index) => {\n        prefix = `0:${index + 1}`;\n        if (prefix.length >= limitLength) return prefix.substring(0, limitLength) + line;\n\n        for (let i = 0; i < limitLength - prefix.length; i++) prefix += \" \";\n\n        return prefix + line;\n      })\n      .join(\"\\n\");\n  }\n\n  id: number;\n\n  readonly sceneUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly cameraUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly rendererUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly materialUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly otherUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n\n  /** @internal */\n  _uploadRenderCount: number = -1;\n  /** @internal */\n  _uploadCamera: Camera;\n  /** @internal */\n  _uploadRenderer: Renderer;\n  /** @internal */\n  _uploadMaterial: Material;\n\n  attributeLocation: Record<string, GLint> = Object.create(null);\n\n  // @todo: move to RHI.\n  private _isValid: boolean;\n  private _engine: Engine;\n  private _gl: WebGLRenderingContext;\n  private _vertexShader: WebGLShader;\n  private _fragmentShader: WebGLShader;\n  private _glProgram: WebGLProgram;\n  private _activeTextureUint: number = 0;\n\n  /**\n   * Whether this shader program is valid.\n   * @readonly\n   */\n  get isValid(): boolean {\n    return this._isValid;\n  }\n\n  constructor(engine: Engine, vertexSource: string, fragmentSource: string) {\n    this._engine = engine;\n    this._gl = engine._hardwareRenderer.gl;\n    this._glProgram = this._createProgram(vertexSource, fragmentSource);\n\n    if (this._glProgram) {\n      this._isValid = true;\n      this._recordLocation();\n    } else {\n      this._isValid = false;\n    }\n\n    this.id = ShaderProgram._counter++;\n  }\n\n  /**\n   * Upload all shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadAll(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    this.uploadUniforms(uniformBlock, shaderData);\n    this.uploadTextures(uniformBlock, shaderData);\n  }\n\n  /**\n   * Upload constant shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadUniforms(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    const properties = shaderData._properties;\n    const constUniforms = uniformBlock.constUniforms;\n\n    for (let i = 0, n = constUniforms.length; i < n; i++) {\n      const uniform = constUniforms[i];\n      const data = properties[uniform.propertyId];\n      data != null && uniform.applyFunc(uniform, data);\n    }\n  }\n\n  /**\n   * Upload texture shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadTextures(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    const properties = shaderData._properties;\n    const textureUniforms = uniformBlock.textureUniforms;\n    // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.\n    if (textureUniforms) {\n      for (let i = 0, n = textureUniforms.length; i < n; i++) {\n        const uniform = textureUniforms[i];\n        uniform.applyFunc(uniform, properties[uniform.propertyId]);\n      }\n    }\n  }\n\n  /**\n   * Groupping other data.\n   */\n  groupingOtherUniformBlock() {\n    const { constUniforms, textureUniforms } = this.otherUniformBlock;\n    constUniforms.length > 0 && this._groupingSubOtherUniforms(constUniforms, false);\n    textureUniforms.length > 0 && this._groupingSubOtherUniforms(textureUniforms, true);\n  }\n\n  /**\n   * Bind this shader program.\n   * @returns Whether the shader program is switched.\n   */\n  bind(): boolean {\n    const rhi: HardwareRenderer = this._engine._hardwareRenderer;\n    if (rhi._currentBind !== this) {\n      this._gl.useProgram(this._glProgram);\n      rhi._currentBind = this;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Destroy this shader program.\n   */\n  destroy(): void {\n    const gl = this._gl;\n    this._vertexShader && gl.deleteShader(this._vertexShader);\n    this._fragmentShader && gl.deleteShader(this._fragmentShader);\n    this._glProgram && gl.deleteProgram(this._glProgram);\n  }\n\n  private _groupingSubOtherUniforms(unifroms: ShaderUniform[], isTexture: boolean) {\n    for (let i = unifroms.length - 1; i >= 0; i--) {\n      const uniform = unifroms[i];\n      const group = Shader._getShaderPropertyGroup(uniform.name);\n      if (group !== undefined) {\n        unifroms.splice(unifroms.indexOf(uniform), 1);\n        this._groupingUniform(uniform, group, isTexture);\n      }\n    }\n  }\n\n  private _groupingUniform(uniform: ShaderUniform, group: ShaderDataGroup, isTexture: boolean): void {\n    switch (group) {\n      case ShaderDataGroup.Scene:\n        if (isTexture) {\n          this.sceneUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.sceneUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Camera:\n        if (isTexture) {\n          this.cameraUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.cameraUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Renderer:\n        if (isTexture) {\n          this.rendererUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.rendererUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Material:\n        if (isTexture) {\n          this.materialUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.materialUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      default:\n        if (isTexture) {\n          this.otherUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.otherUniformBlock.constUniforms.push(uniform);\n        }\n    }\n  }\n\n  /**\n   * init and link program with shader.\n   */\n  private _createProgram(vertexSource: string, fragmentSource: string): WebGLProgram | null {\n    const gl = this._gl;\n\n    // create and compile shader\n    const vertexShader = this._createShader(gl.VERTEX_SHADER, vertexSource);\n    if (!vertexShader) {\n      return null;\n    }\n\n    const fragmentShader = this._createShader(gl.FRAGMENT_SHADER, fragmentSource);\n    if (!fragmentShader) {\n      return null;\n    }\n\n    // link program and shader\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    gl.validateProgram(program);\n\n    if (gl.isContextLost()) {\n      Logger.error(\"Contex lost while linking program.\");\n      gl.deleteShader(vertexShader);\n      gl.deleteShader(fragmentShader);\n      return null;\n    }\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      Logger.error(\"Could not link WebGL program. \\n\" + gl.getProgramInfoLog(program));\n      gl.deleteProgram(program);\n      return null;\n    }\n\n    this._vertexShader = vertexShader;\n    this._fragmentShader = fragmentShader;\n    return program;\n  }\n\n  private _createShader(shaderType: number, shaderSource: string): WebGLShader | null {\n    const gl = this._gl;\n    const shader = gl.createShader(shaderType);\n\n    if (!shader) {\n      Logger.error(\"Context lost while create shader.\");\n      return null;\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n\n    if (gl.isContextLost()) {\n      Logger.error(\"Context lost while compiling shader.\");\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      Logger.error(\n        `Could not compile WebGL shader.\\n${gl.getShaderInfoLog(shader)}`,\n        ShaderProgram._addLineNum(shaderSource)\n      );\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  }\n\n  /**\n   * record the location of uniform/attribute.\n   */\n  private _recordLocation() {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const uniformInfos = this._getUniformInfos();\n    const attributeInfos = this._getAttributeInfos();\n\n    uniformInfos.forEach(({ name, size, type }) => {\n      const shaderUniform = new ShaderUniform(this._engine);\n      let isArray = false;\n      let isTexture = false;\n\n      if (name.indexOf(\"[0]\") > 0) {\n        name = name.substr(0, name.length - 3);\n        isArray = true;\n      }\n\n      const group = Shader._getShaderPropertyGroup(name);\n      const location = gl.getUniformLocation(program, name);\n      shaderUniform.name = name;\n      shaderUniform.propertyId = Shader.getPropertyByName(name)._uniqueId;\n      shaderUniform.location = location;\n\n      switch (type) {\n        case gl.FLOAT:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload1fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload1f;\n            shaderUniform.cacheValue = 0;\n          }\n          break;\n        case gl.FLOAT_VEC2:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload2fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload2f;\n            shaderUniform.cacheValue = new Vector2(0, 0);\n          }\n          break;\n        case gl.FLOAT_VEC3:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload3fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload3f;\n            shaderUniform.cacheValue = new Vector3(0, 0, 0);\n          }\n          break;\n        case gl.FLOAT_VEC4:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload4fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload4f;\n            shaderUniform.cacheValue = new Vector4(0, 0, 0, 0);\n          }\n          break;\n        case gl.BOOL:\n        case gl.INT:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload1iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload1i;\n            shaderUniform.cacheValue = 0;\n          }\n          break;\n        case gl.BOOL_VEC2:\n        case gl.INT_VEC2:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload2iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload2i;\n            shaderUniform.cacheValue = new Vector2(0, 0);\n          }\n          break;\n        case gl.BOOL_VEC3:\n        case gl.INT_VEC3:\n          if (isArray) {\n          } else {\n          }\n          shaderUniform.applyFunc = isArray ? shaderUniform.upload3iv : shaderUniform.upload3i;\n          shaderUniform.cacheValue = new Vector3(0, 0, 0);\n          break;\n        case gl.BOOL_VEC4:\n        case gl.INT_VEC4:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload4iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload4i;\n            shaderUniform.cacheValue = new Vector4(0, 0, 0);\n          }\n          break;\n        case gl.FLOAT_MAT4:\n          shaderUniform.applyFunc = isArray ? shaderUniform.uploadMat4v : shaderUniform.uploadMat4;\n          break;\n        case gl.SAMPLER_2D:\n        case gl.SAMPLER_CUBE:\n          isTexture = true;\n          if (isArray) {\n            const textureIndices = new Int32Array(size);\n            const glTextureIndices = new Array<number>(size);\n            for (let i = 0; i < size; i++) {\n              textureIndices[i] = this._activeTextureUint;\n              glTextureIndices[i] = gl.TEXTURE0 + this._activeTextureUint++;\n            }\n            shaderUniform.textureIndex = glTextureIndices;\n            shaderUniform.applyFunc = shaderUniform.uploadTextureArray;\n            this.bind();\n            gl.uniform1iv(location, textureIndices);\n          } else {\n            const textureIndex = gl.TEXTURE0 + this._activeTextureUint;\n            shaderUniform.textureIndex = textureIndex;\n            shaderUniform.applyFunc = shaderUniform.uploadTexture;\n            this.bind();\n            gl.uniform1i(location, this._activeTextureUint++);\n          }\n          break;\n      }\n      this._groupingUniform(shaderUniform, group, isTexture);\n    });\n\n    attributeInfos.forEach(({ name }) => {\n      this.attributeLocation[name] = gl.getAttribLocation(program, name);\n    });\n  }\n\n  private _getUniformInfos(): WebGLActiveInfo[] {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const uniformInfos: WebGLActiveInfo[] = [];\n\n    const uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < uniformCount; ++i) {\n      const info = gl.getActiveUniform(program, i);\n      uniformInfos[i] = info;\n    }\n\n    return uniformInfos;\n  }\n\n  private _getAttributeInfos(): WebGLActiveInfo[] {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const attributeInfos: WebGLActiveInfo[] = [];\n\n    const attributeCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < attributeCount; ++i) {\n      const info = gl.getActiveAttrib(program, i);\n      attributeInfos[i] = info;\n    }\n\n    return attributeInfos;\n  }\n}\n", "import { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\n\n/**\n * Shader property.\n */\nexport class ShaderProperty {\n  private static _propertyNameCounter: number = 0;\n\n  /** @internal */\n  _uniqueId: number;\n  /** @internal */\n  _group: ShaderDataGroup;\n\n  /**\n   * @internal\n   */\n  constructor() {\n    this._uniqueId = ShaderProperty._propertyNameCounter++;\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { ShaderFactory } from \"../shaderlib/ShaderFactory\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProgram } from \"./ShaderProgram\";\nimport { ShaderProperty } from \"./ShaderProperty\";\n\n/**\n * Shader containing vertex and fragment source.\n */\nexport class Shader {\n  private static _shaderCounter: number = 0;\n  private static _shaderMap: Record<string, Shader> = Object.create(null);\n  private static _propertyNameMap: Record<string, ShaderProperty> = Object.create(null);\n  private static _macroMaskMap: string[][] = [];\n  private static _macroCounter: number = 0;\n  private static _macroMap: Record<string, ShaderMacro> = Object.create(null);\n  private static _shaderExtension = [\"GL_EXT_shader_texture_lod\", \"GL_OES_standard_derivatives\", \"GL_EXT_draw_buffers\"];\n\n  /**\n   * Create a shader.\n   * @param name - Name of the shader\n   * @param vertexSource - Vertex source code\n   * @param fragmentSource - Fragment source code\n   */\n  static create(name: string, vertexSource: string, fragmentSource: string): Shader {\n    const shaderMap = Shader._shaderMap;\n    if (shaderMap[name]) {\n      throw `Shader named \"${name}\" already exists.`;\n    }\n    return (shaderMap[name] = new Shader(name, vertexSource, fragmentSource));\n  }\n\n  /**\n   * Find a shader by name.\n   * @param name - Name of the shader\n   */\n  static find(name: string): Shader {\n    return Shader._shaderMap[name];\n  }\n\n  /**\n   * Get shader macro by name.\n   * @param name - Name of the shader macro\n   * @returns Shader macro\n   */\n  static getMacroByName(name: string): ShaderMacro {\n    let macro = Shader._macroMap[name];\n    if (!macro) {\n      const maskMap = Shader._macroMaskMap;\n      const counter = Shader._macroCounter;\n      const index = Math.floor(counter / 32);\n      const bit = counter % 32;\n      macro = new ShaderMacro(name, index, 1 << bit);\n      Shader._macroMap[name] = macro;\n      if (index == maskMap.length) {\n        maskMap.length++;\n        maskMap[index] = new Array<string>(32);\n      }\n      maskMap[index][bit] = name;\n      Shader._macroCounter++;\n    }\n    return macro;\n  }\n\n  /**\n   * Get shader property by name.\n   * @param name - Name of the shader property\n   * @returns Shader property\n   */\n  static getPropertyByName(name: string): ShaderProperty {\n    const propertyNameMap = Shader._propertyNameMap;\n    if (propertyNameMap[name] != null) {\n      return propertyNameMap[name];\n    } else {\n      const property = new ShaderProperty();\n      propertyNameMap[name] = property;\n      return property;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getShaderPropertyGroup(propertyName: string): ShaderDataGroup | null {\n    const shaderProperty = Shader._propertyNameMap[propertyName];\n    return shaderProperty?._group;\n  }\n\n  private static _getNamesByMacros(macros: ShaderMacroCollection, out: string[]): void {\n    const maskMap = Shader._macroMaskMap;\n    const mask = macros._mask;\n    out.length = 0;\n    for (let i = 0, n = macros._length; i < n; i++) {\n      const subMaskMap = maskMap[i];\n      const subMask = mask[i];\n      const n = subMask < 0 ? 32 : Math.floor(Math.log2(subMask)) + 1; // if is negative must contation 1 << 31.\n      for (let j = 0; j < n; j++) {\n        if (subMask & (1 << j)) {\n          out.push(subMaskMap[j]);\n        }\n      }\n    }\n  }\n\n  /** The name of shader. */\n  readonly name: string;\n\n  /** @internal */\n  _shaderId: number = 0;\n\n  private _vertexSource: string;\n  private _fragmentSource: string;\n\n  private constructor(name: string, vertexSource: string, fragmentSource: string) {\n    this._shaderId = Shader._shaderCounter++;\n    this.name = name;\n    this._vertexSource = vertexSource;\n    this._fragmentSource = fragmentSource;\n  }\n\n  /**\n   * Compile shader variant by macro name list.\n   *\n   * @remarks\n   * Usually a shader contains some macros,any combination of macros is called shader variant.\n   *\n   * @param engine - Engine to which the shader variant belongs\n   * @param macros - Macro name list\n   */\n  compileVariant(engine: Engine, macros: string[]): void {\n    const compileMacros = RenderQueue.compileMacros;\n    compileMacros.clear();\n    for (let i = 0, n = macros.length; i < n; i++) {\n      compileMacros.enable(Shader.getMacroByName(macros[i]));\n    }\n    this._getShaderProgram(engine, compileMacros);\n  }\n\n  /**\n   * @internal\n   */\n  _getShaderProgram(engine: Engine, macroCollection: ShaderMacroCollection): ShaderProgram {\n    const shaderProgramPool = engine._getShaderProgramPool(this);\n    let shaderProgram = shaderProgramPool.get(macroCollection);\n    if (shaderProgram) {\n      return shaderProgram;\n    }\n\n    const isWebGL2: boolean = engine._hardwareRenderer.isWebGL2;\n    const macroNameList = [];\n    Shader._getNamesByMacros(macroCollection, macroNameList);\n    const macroNameStr = ShaderFactory.parseCustomMacros(macroNameList);\n    const shaderNameStr = ShaderFactory.parseShaderName(this.name || \"VOID\");\n    const versionStr = isWebGL2 ? \"#version 300 es\" : \"#version 100\";\n    const precisionStr = `\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      precision highp int;\n      #define O3_VERTEX_PRECISION highp\n      #define O3_FRAGMENT_PRECISION highp\n    #else\n      precision mediump float;\n      precision mediump int;\n      #define O3_VERTEX_PRECISION mediump\n      #define O3_FRAGMENT_PRECISION mediump\n    #endif\n    `;\n\n    let vertexSource = ShaderFactory.parseShader(\n      ` ${versionStr}\n        ${shaderNameStr}\n        ${precisionStr}\n        ${macroNameStr}\n        ` + this._vertexSource\n    );\n\n    let fragmentSource = ShaderFactory.parseShader(\n      ` ${versionStr}\n        ${shaderNameStr}\n        ${isWebGL2 ? \"\" : ShaderFactory.parseExtension(Shader._shaderExtension)}\n        ${precisionStr}\n        ${macroNameStr}\n      ` + this._fragmentSource\n    );\n\n    if (isWebGL2) {\n      vertexSource = ShaderFactory.convertTo300(vertexSource);\n      fragmentSource = ShaderFactory.convertTo300(fragmentSource, true);\n    }\n\n    shaderProgram = new ShaderProgram(engine, vertexSource, fragmentSource);\n\n    shaderProgramPool.cache(shaderProgram);\n    return shaderProgram;\n  }\n}\n", "import { Matrix } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { LightFeature } from \"./LightFeature\";\n\n/**\n * Light base class.\n */\nexport class Light extends Component {\n  /**\n   * Each type of light source is at most 10, beyond which it will not take effect.\n   * */\n  protected static _maxLight: number = 10;\n\n  private _viewMat: Matrix;\n  private _inverseViewMat: Matrix;\n\n  /**\n   * Mount to the current Scene.\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.findFeature(LightFeature).attachRenderLight(this);\n  }\n\n  /**\n   * Unmount from the current Scene.\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.findFeature(LightFeature).detachRenderLight(this);\n  }\n\n  /**\n   * View matrix.\n   * @readonly\n   */\n  get viewMatrix() {\n    if (!this._viewMat) this._viewMat = new Matrix();\n    Matrix.invert(this.entity.transform.worldMatrix, this._viewMat);\n    return this._viewMat;\n  }\n\n  /**\n   * Inverse view matrix.\n   * @readonly\n   */\n  get inverseViewMatrix() {\n    if (!this._inverseViewMat) this._inverseViewMat = new Matrix();\n    Matrix.invert(this.viewMatrix, this._inverseViewMat);\n    return this._inverseViewMat;\n  }\n}\n", "import { Color } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { Shader } from \"../shader\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Ambient light.\n */\nexport class AmbientLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_ambientLightColor\");\n\n  /**\n   * Ambient light color.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    this._color = value;\n    this.scene.shaderData.setColor(AmbientLight._colorProperty, this.lightColor);\n  }\n\n  /**\n   * Ambient light intensity.\n   */\n  get intensity(): number {\n    return this._intensity;\n  }\n\n  set intensity(value: number) {\n    this._intensity = value;\n    this.scene.shaderData.setColor(AmbientLight._colorProperty, this.lightColor);\n  }\n\n  /**\n   * Get the final light color.\n   * @readonly\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this._color.r * this._intensity;\n    this._lightColor.g = this._color.g * this._intensity;\n    this._lightColor.b = this._color.b * this._intensity;\n    this._lightColor.a = this._color.a * this._intensity;\n    return this._lightColor;\n  }\n\n  private _color: Color = new Color(1, 1, 1, 1);\n  private _intensity: number = 1;\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.color = this._color;\n  }\n}\n", "import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Directional light.\n */\nexport class DirectLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_directLightColor\");\n  private static _directionProperty: ShaderProperty = Shader.getPropertyByName(\"u_directLightDirection\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    direction: new Float32Array(3 * Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = DirectLight._combinedData;\n\n    shaderData.setFloatArray(DirectLight._colorProperty, data.color);\n    shaderData.setFloatArray(DirectLight._directionProperty, data.direction);\n  }\n\n  color: Color = new Color(1, 1, 1, 1);\n  intensity: number = 1;\n\n  private _forward: Vector3 = new Vector3();\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n  private _reverseDirection: Vector3 = new Vector3();\n\n  /**\n   * Get direction.\n   * @readonly\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /**\n   * Get the final light color.\n   * @readonly\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * Get the opposite direction of the directional light direction.\n   * @readonly\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._reverseDirection);\n    return this._reverseDirection;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const directionStart = lightIndex * 3;\n    const lightColor = this.lightColor;\n    const direction = this.direction;\n\n    const data = DirectLight._combinedData;\n\n    data.color[colorStart] = lightColor.r;\n    data.color[colorStart + 1] = lightColor.g;\n    data.color[colorStart + 2] = lightColor.b;\n    data.direction[directionStart] = direction.x;\n    data.direction[directionStart + 1] = direction.y;\n    data.direction[directionStart + 2] = direction.z;\n  }\n}\n", "import { Color } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { TextureCubeMap } from \"../texture\";\nimport { Light } from \"./Light\";\n\n/**\n * Environment light.\n */\nexport class EnvironmentMapLight extends Light {\n  private static _diffuseMacro: ShaderMacro = Shader.getMacroByName(\"O3_USE_DIFFUSE_ENV\");\n  private static _specularMacro: ShaderMacro = Shader.getMacroByName(\"O3_USE_SPECULAR_ENV\");\n  private static _diffuseTextureProperty: ShaderProperty = Shader.getPropertyByName(\"u_env_diffuseSampler\");\n  private static _specularTextureProperty: ShaderProperty = Shader.getPropertyByName(\"u_env_specularSampler\");\n  private static _mipLevelProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.mipMapLevel\");\n  private static _diffuseColorProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.diffuse\");\n  private static _specularColorProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.specular\");\n  private static _diffuseIntensityProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.diffuseIntensity\");\n  private static _specularIntensityProperty: ShaderProperty = Shader.getPropertyByName(\n    \"u_envMapLight.specularIntensity\"\n  );\n  private static _transformMatrixProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.transformMatrix\");\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData, light: EnvironmentMapLight): void {\n    // support rotation\n    const transformMatrix = light.entity.transform.worldMatrix;\n    shaderData.setMatrix(EnvironmentMapLight._transformMatrixProperty, transformMatrix);\n  }\n\n  /**\n   * Diffuse cube texture.\n   */\n  get diffuseTexture(): TextureCubeMap {\n    return this._diffuseTexture;\n  }\n\n  set diffuseTexture(value: TextureCubeMap) {\n    this._diffuseTexture = value;\n    const shaderData = this.scene.shaderData;\n\n    if (value) {\n      shaderData.setTexture(EnvironmentMapLight._diffuseTextureProperty, value);\n      shaderData.enableMacro(EnvironmentMapLight._diffuseMacro);\n    } else {\n      shaderData.disableMacro(EnvironmentMapLight._diffuseMacro);\n    }\n  }\n\n  /**\n   * Specular cube texture.\n   */\n  get specularTexture(): TextureCubeMap {\n    return this._specularTexture;\n  }\n\n  set specularTexture(value: TextureCubeMap) {\n    this._specularTexture = value;\n    const shaderData = this.scene.shaderData;\n\n    if (value) {\n      shaderData.setTexture(EnvironmentMapLight._specularTextureProperty, value);\n      shaderData.setFloat(EnvironmentMapLight._mipLevelProperty, this.specularTexture.mipmapCount);\n      shaderData.enableMacro(EnvironmentMapLight._specularMacro);\n    } else {\n      shaderData.disableMacro(EnvironmentMapLight._specularMacro);\n    }\n  }\n\n  /**\n   * Diffuse color.\n   */\n  get diffuseColor(): Color {\n    return this._diffuseColor;\n  }\n\n  set diffuseColor(value: Color) {\n    this._diffuseColor = value;\n\n    this.scene.shaderData.setColor(EnvironmentMapLight._diffuseColorProperty, value);\n  }\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this._specularColor;\n  }\n\n  set specularColor(value: Color) {\n    this._specularColor = value;\n\n    this.scene.shaderData.setColor(EnvironmentMapLight._specularColorProperty, value);\n  }\n\n  /**\n   * Diffuse intensity.\n   */\n  get diffuseIntensity(): number {\n    return this._diffuseIntensity;\n  }\n\n  set diffuseIntensity(value: number) {\n    this._diffuseIntensity = value;\n\n    this.scene.shaderData.setFloat(EnvironmentMapLight._diffuseIntensityProperty, value);\n  }\n\n  /**\n   * Specular intensity.\n   */\n  get specularIntensity(): number {\n    return this._specularIntensity;\n  }\n\n  set specularIntensity(value: number) {\n    this._specularIntensity = value;\n\n    this.scene.shaderData.setFloat(EnvironmentMapLight._specularIntensityProperty, value);\n  }\n\n  private _diffuseTexture: TextureCubeMap;\n  private _specularTexture: TextureCubeMap;\n  private _diffuseColor: Color = new Color(0.3, 0.3, 0.3, 1);\n  private _specularColor: Color = new Color(0.5, 0.5, 0.5, 1);\n  private _diffuseIntensity: number = 1;\n  private _specularIntensity: number = 1;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.diffuseColor = this._diffuseColor;\n    this.specularColor = this._specularColor;\n    this.diffuseIntensity = this._diffuseIntensity;\n    this.specularIntensity = this._specularIntensity;\n  }\n}\n", "import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Point light.\n */\nexport class PointLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightColor\");\n  private static _positionProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightPosition\");\n  private static _distanceProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightDistance\");\n  private static _decayProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightDecay\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    position: new Float32Array(3 * Light._maxLight),\n    distance: new Float32Array(Light._maxLight),\n    decay: new Float32Array(Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = PointLight._combinedData;\n\n    shaderData.setFloatArray(PointLight._colorProperty, data.color);\n    shaderData.setFloatArray(PointLight._positionProperty, data.position);\n    shaderData.setFloatArray(PointLight._distanceProperty, data.distance);\n    shaderData.setFloatArray(PointLight._decayProperty, data.decay);\n  }\n\n  color: Color = new Color(1, 1, 1, 1);\n  intensity: number = 1.0;\n  distance: number = 100;\n  decay: number = 0;\n\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n\n  /**\n   * Get light position.\n   * @readonly\n   */\n  get position(): Vector3 {\n    return this.entity.transform.worldPosition;\n  }\n\n  /**\n   * Get the final light color.\n   * @readonly\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const positionStart = lightIndex * 3;\n    const distanceStart = lightIndex;\n    const decayStart = lightIndex;\n\n    const lightColor = this.lightColor;\n    const lightPosition = this.position;\n\n    const data = PointLight._combinedData;\n\n    data.color[colorStart] = lightColor.r;\n    data.color[colorStart + 1] = lightColor.g;\n    data.color[colorStart + 2] = lightColor.b;\n    data.position[positionStart] = lightPosition.x;\n    data.position[positionStart + 1] = lightPosition.y;\n    data.position[positionStart + 2] = lightPosition.z;\n    data.distance[distanceStart] = this.distance;\n    data.decay[decayStart] = this.decay;\n  }\n}\n", "import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Spot light.\n */\nexport class SpotLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightColor\");\n  private static _positionProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightPosition\");\n  private static _directionProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightDirection\");\n  private static _distanceProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightDistance\");\n  private static _decayProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightDecay\");\n  private static _angleProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightAngle\");\n  private static _penumbraProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightPenumbra\");\n  private static _penumbraCosProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightPenumbraCos\");\n  private static _coneCosProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightConeCos\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    position: new Float32Array(3 * Light._maxLight),\n    direction: new Float32Array(3 * Light._maxLight),\n    distance: new Float32Array(Light._maxLight),\n    decay: new Float32Array(Light._maxLight),\n    angle: new Float32Array(Light._maxLight),\n    penumbra: new Float32Array(Light._maxLight),\n    penumbraCos: new Float32Array(Light._maxLight),\n    coneCos: new Float32Array(Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = SpotLight._combinedData;\n\n    shaderData.setFloatArray(SpotLight._colorProperty, data.color);\n    shaderData.setFloatArray(SpotLight._positionProperty, data.position);\n    shaderData.setFloatArray(SpotLight._directionProperty, data.direction);\n    shaderData.setFloatArray(SpotLight._distanceProperty, data.distance);\n    shaderData.setFloatArray(SpotLight._decayProperty, data.decay);\n    shaderData.setFloatArray(SpotLight._angleProperty, data.angle);\n    shaderData.setFloatArray(SpotLight._penumbraProperty, data.penumbra);\n    shaderData.setFloatArray(SpotLight._penumbraCosProperty, data.penumbraCos);\n    shaderData.setFloatArray(SpotLight._coneCosProperty, data.coneCos);\n  }\n\n  color: Color = new Color(1, 1, 1, 1);\n  penumbra: number = 0.2;\n  distance: number = 100;\n  intensity: number = 1.0;\n  decay: number = 0;\n  angle: number = Math.PI / 6;\n\n  private _forward: Vector3 = new Vector3();\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n  private _inverseDirection: Vector3 = new Vector3();\n\n  /**\n   * Get light position.\n   * @readonly\n   */\n  get position(): Vector3 {\n    return this.entity.transform.worldPosition;\n  }\n\n  /**\n   * Get light direction.\n   * @readonly\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /**\n   * Get the opposite direction of the spotlight.\n   * @readonly\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._inverseDirection);\n    return this._inverseDirection;\n  }\n\n  /**\n   * Get the final light color.\n   * @readonly\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const positionStart = lightIndex * 3;\n    const directionStart = lightIndex * 3;\n    const distanceStart = lightIndex;\n    const decayStart = lightIndex;\n    const angleStart = lightIndex;\n    const penumbraStart = lightIndex;\n    const penumbraCosStart = lightIndex;\n    const coneCosStart = lightIndex;\n\n    const color = this.lightColor;\n    const position = this.position;\n    const direction = this.direction;\n\n    const data = SpotLight._combinedData;\n\n    data.color[colorStart] = color.r;\n    data.color[colorStart + 1] = color.g;\n    data.color[colorStart + 2] = color.b;\n    data.position[positionStart] = position.x;\n    data.position[positionStart + 1] = position.y;\n    data.position[positionStart + 2] = position.z;\n    data.direction[directionStart] = direction.x;\n    data.direction[directionStart + 1] = direction.y;\n    data.direction[directionStart + 2] = direction.z;\n    data.distance[distanceStart] = this.distance;\n    data.decay[decayStart] = this.decay;\n    data.angle[angleStart] = this.angle;\n    data.penumbra[penumbraStart] = this.penumbra;\n    data.penumbraCos[penumbraCosStart] = Math.cos(this.angle * (1 - this.penumbra));\n    data.coneCos[coneCosStart] = Math.cos(this.angle);\n  }\n}\n", "import { Logger } from \"../base/Logger\";\nimport { SceneFeature } from \"../SceneFeature\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { AmbientLight } from \"./AmbientLight\";\nimport { DirectLight } from \"./DirectLight\";\nimport { EnvironmentMapLight } from \"./EnvironmentMapLight\";\nimport { Light } from \"./Light\";\nimport { PointLight } from \"./PointLight\";\nimport { SpotLight } from \"./SpotLight\";\n\n/**\n * Determine whether there are lights in the scene.\n * @returns Has light\n */\nexport function hasLight(): boolean {\n  return this.findFeature(LightFeature).visibleLights.length > 0;\n}\n\n/**\n * Light plug-in.\n */\nexport class LightFeature extends SceneFeature {\n  private static _ambientMacro: ShaderMacro = Shader.getMacroByName(\"O3_HAS_AMBIENT_LIGHT\");\n  private static _envMacro: ShaderMacro = Shader.getMacroByName(\"O3_HAS_ENVMAP_LIGHT\");\n\n  visibleLights: Light[];\n\n  constructor() {\n    super();\n    this.visibleLights = [];\n  }\n\n  /**\n   * Register a light object to the current scene.\n   * @param light\n   */\n  attachRenderLight(light: Light): void {\n    const index = this.visibleLights.indexOf(light);\n    if (index == -1) {\n      this.visibleLights.push(light);\n    } else {\n      Logger.warn(\"Light already attached.\");\n    }\n  }\n\n  /**\n   * Remove a light object from the current scene.\n   * @param light\n   */\n  detachRenderLight(light: Light): void {\n    const index = this.visibleLights.indexOf(light);\n    if (index != -1) {\n      this.visibleLights.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData) {\n    /**\n     * ambientLight and envMapLight only use the last one in the scene\n     * */\n    let ambientLightCount = 0;\n    let envMapLightCount = 0;\n    let directLightCount = 0;\n    let pointLightCount = 0;\n    let spotLightCount = 0;\n\n    let lights = this.visibleLights;\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const light = lights[i];\n      if (light instanceof AmbientLight) {\n        ambientLightCount++;\n      } else if (light instanceof EnvironmentMapLight) {\n        EnvironmentMapLight._updateShaderData(shaderData, light);\n        envMapLightCount++;\n      } else if (light instanceof DirectLight) {\n        light._appendData(directLightCount++);\n      } else if (light instanceof PointLight) {\n        light._appendData(pointLightCount++);\n      } else if (light instanceof SpotLight) {\n        light._appendData(spotLightCount++);\n      }\n    }\n\n    if (ambientLightCount) {\n      shaderData.enableMacro(LightFeature._ambientMacro);\n    } else {\n      shaderData.disableMacro(LightFeature._ambientMacro);\n    }\n\n    if (envMapLightCount) {\n      shaderData.enableMacro(LightFeature._envMacro);\n    } else {\n      shaderData.disableMacro(LightFeature._envMacro);\n    }\n\n    if (directLightCount) {\n      DirectLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_DIRECT_LIGHT_COUNT\", directLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_DIRECT_LIGHT_COUNT\");\n    }\n\n    if (pointLightCount) {\n      PointLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_POINT_LIGHT_COUNT\", pointLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_POINT_LIGHT_COUNT\");\n    }\n\n    if (spotLightCount) {\n      SpotLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_SPOT_LIGHT_COUNT\", spotLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_SPOT_LIGHT_COUNT\");\n    }\n  }\n}\n", "import { EngineObject } from \"../base/EngineObject\";\nimport { Engine } from \"../Engine\";\nimport { IRefObject } from \"./IRefObject\";\n\n/**\n * The base class of assets, with reference counting capability.\n */\nexport abstract class RefObject extends EngineObject implements IRefObject {\n  /** Whether to ignore the garbage collection check, if it is true, it will not be affected by ResourceManager.gc(). */\n  isGCIgnored: boolean = false;\n\n  private _refCount: number = 0;\n  private _destroyed: boolean = false;\n\n  /**\n   * Counted by valid references.\n   */\n  get refCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * Whether it has been destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  protected constructor(engine: Engine) {\n    super(engine);\n    engine.resourceManager._addRefObject(this.instanceId, this);\n  }\n\n  /**\n   * Destroy self.\n   * @param force - Whether to force the destruction, if it is fasle, refCount = 0 can be released successfully.\n   * @returns Whether the release was successful.\n   */\n  destroy(force: boolean = false): boolean {\n    if (this._destroyed) return true;\n    if (!force && this._refCount !== 0) return false;\n    const resourceManager = this._engine.resourceManager;\n    // resourceManager maybe null,because engine has destroyed.\n    // TODO:the right way to fix this is to ensure destroy all when call engine.destroy,thus don't need to add this project.\n    if (resourceManager) {\n      resourceManager._deleteAsset(this);\n      resourceManager._deleteRefObject(this.instanceId);\n    }\n\n    const refCount = this._getRefCount();\n    if (refCount > 0) {\n      this._addRefCount(-refCount);\n    }\n    this._engine = null;\n    this._onDestroy();\n    this._destroyed = true;\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  _getRefCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   * Add reference resource.\n   */\n  _addRefCount(value: number): void {\n    this._refCount += value;\n  }\n\n  /**\n   * @internal\n   * Remove reference resource.\n   */\n  _addToResourceManager(path: string): void {\n    this._engine.resourceManager._addAsset(path, this);\n  }\n\n  /**\n   * Called when the resource is destroyed.\n   * Subclasses can override this function.\n   */\n  protected abstract _onDestroy(): void;\n}\n", "export interface TextureFormatDetail {\n  internalFormat: GLint;\n  baseFormat?: GLenum;\n  dataType?: GLenum;\n  isCompressed: boolean;\n  attachment?: GLenum;\n}\n\n/**\n * @deprecated\n */\nexport enum GLCompressedTextureInternalFormat {\n  // astc\n  RGBA_ASTC_4X4_KHR = 0x93b0,\n  RGBA_ASTC_5X4_KHR = 0x93b1,\n  RGBA_ASTC_5X5_KHR = 0x93b2,\n  RGBA_ASTC_6X5_KHR = 0x93b3,\n  RGBA_ASTC_6X6_KHR = 0x93b4,\n  RGBA_ASTC_8X5_KHR = 0x93b5,\n  RGBA_ASTC_8X6_KHR = 0x93b6,\n  RGBA_ASTC_8X8_KHR = 0x93b7,\n  RGBA_ASTC_10X5_KHR = 0x93b8,\n  RGBA_ASTC_10X6_KHR = 0x93b9,\n  RGBA_ASTC_10X8_KHR = 0x93ba,\n  RGBA_ASTC_10X10_KHR = 0x93bb,\n  RGBA_ASTC_12X10_KHR = 0x93bc,\n  RGBA_ASTC_12X12_KHR = 0x93bd,\n  SRGB8_ALPHA8_ASTC_4X4_KHR = 0x93d0,\n  SRGB8_ALPHA8_ASTC_5X4_KHR = 0x93d1,\n  SRGB8_ALPHA8_ASTC_5X5_KHR = 0x93d2,\n  SRGB8_ALPHA8_ASTC_6X5_KHR = 0x93d3,\n  SRGB8_ALPHA8_ASTC_6X6_KHR = 0x93d4,\n  SRGB8_ALPHA8_ASTC_8X5_KHR = 0x93d5,\n  SRGB8_ALPHA8_ASTC_8X6_KHR = 0x93d6,\n  SRGB8_ALPHA8_ASTC_8X8_KHR = 0x93d7,\n  SRGB8_ALPHA8_ASTC_10X5_KHR = 0x93d8,\n  SRGB8_ALPHA8_ASTC_10X6_KHR = 0x93d9,\n  SRGB8_ALPHA8_ASTC_10X8_KHR = 0x93da,\n  SRGB8_ALPHA8_ASTC_10X10_KHR = 0x93db,\n  SRGB8_ALPHA8_ASTC_12X10_KHR = 0x93dc,\n  SRGB8_ALPHA8_ASTC_12X12_KHR = 0x93dd,\n\n  // etc1\n  RGB_ETC1_WEBGL = 0x8d64,\n\n  // etc2\n  R11_EAC = 0x9270,\n  SIGNED_R11_EAC = 0x9271,\n  RG11_EAC = 0x9272,\n  SIGNED_RG11_EAC = 0x9273,\n  RGB8_ETC2 = 0x9274,\n  SRGB8_ETC2 = 0x9275,\n  RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\n  SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\n  RGBA8_ETC2_EAC = 0x9278,\n  SRGB8_ALPHA8_ETC2_EAC = 0x9279,\n\n  // pvrtc\n  RGB_PVRTC_4BPPV1_IMG = 0x8c00,\n  RGB_PVRTC_2BPPV1_IMG = 0x8c01,\n  RGBA_PVRTC_4BPPV1_IMG = 0x8c02,\n  RGBA_PVRTC_2BPPV1_IMG = 0x8c03,\n\n  // s3tc\n  RGB_S3TC_DXT1_EXT = 0x83f0,\n  RGBA_S3TC_DXT1_EXT = 0x83f1,\n  RGBA_S3TC_DXT3_EXT = 0x83f2,\n  RGBA_S3TC_DXT5_EXT = 0x83f3\n}\n", "/**\n * The rendering buffer color format enumeration.\n */\nexport enum RenderBufferColorFormat {\n  /** RGB format,8 bits per channel. */\n  R8G8B8,\n  /** RGBA format,8 bits per channel. */\n  R8G8B8A8,\n  /** RGBA format,4 bits per channel. */\n  R4G4B4A4,\n  /** RGBA format,5 bits in R cahnnel, 5 bits in G channel, 5 bits in B cahnnel, 1 bit in A channel. */\n  R5G5B5A1,\n  /** RGB format,5 bits in R cahnnel, 6 bits in G channel, 5 bits in B cahnnel. */\n  R5G6B5,\n  /** transparent format, 8 bits. */\n  Alpha8,\n  /** RGBA format,16 bits per channel. */\n  R16G16B16A16,\n  /** RGBA format,32 bits per channel. */\n  R32G32B32A32\n}\n", "/**\n * Render buffer depth format enumeration.\n */\nexport enum RenderBufferDepthFormat {\n  /** Render to depth buffer,engine will automatically select the supported precision. */\n  Depth = 0,\n  /** Render to depth stencil buffer, engine will automatically select the supported precision. */\n  DepthStencil = 1,\n  /** Render to stencil buffer. */\n  Stencil = 2,\n\n  /** Force 16-bit depth buffer. */\n  Depth16 = 3,\n  /** Force 24-bit depth buffer. */\n  Depth24 = 4,\n  /** Force 32-bit depth buffer. */\n  Depth32 = 5,\n  /** Force 16-bit depth + 8-bit stencil buffer. */\n  Depth24Stencil8 = 6,\n  /** Force 32-bit depth + 8-bit stencil buffer. */\n  Depth32Stencil8 = 7\n}\n", "/**\n * The filter mode of the texture.\n */\nexport enum TextureFilterMode {\n  /** Point filtering. */\n  Point = 0,\n  /** Bilinear fitering. */\n  Bilinear = 1,\n  /** Trilinear filtering. */\n  Trilinear = 2\n}\n", "/**\n * Texture format enumeration.\n */\nexport enum TextureFormat {\n  /** RGB format,8 bits per channel. */\n  R8G8B8,\n  /** RGBA format,8 bits per channel. */\n  R8G8B8A8,\n  /** RGBA format,4 bits per channel. */\n  R4G4B4A4,\n  /** RGBA format,5 bits in R channel,5 bits in G channel,5 bits in B channel, 1 bit in A channel. */\n  R5G5B5A1,\n  /** RGB format,5 bits in R channel,6 bits in G channel,5 bits in B channel. */\n  R5G6B5,\n  /** Transparent format,8 bits. */\n  Alpha8,\n  /** RGBA format,32 bits per channel. */\n  R32G32B32A32,\n  /** RGB compressed format\u3002*/\n  DXT1,\n  /** RGBA compressed format\u3002*/\n  DXT5,\n  /** RGB compressed format,4 bits per pixel\u3002*/\n  ETC1_RGB,\n  /** RGB compressed format,4 bits per pixel\u3002*/\n  ETC2_RGB,\n  /** RGBA compressed format,5 bits per pixel,4 bit in RGB, 1 bit in A. */\n  ETC2_RGBA5,\n  /** RGB compressed format,8 bits per pixel. */\n  ETC2_RGBA8,\n  /** RGB compressed format,2 bits per pixel. */\n  PVRTC_RGB2,\n  /** RGBA compressed format,2 bits per pixel. */\n  PVRTC_RGBA2,\n  /** RGB compressed format,4 bits per pixel. */\n  PVRTC_RGB4,\n  /** RGBA compressed format,4 bits per pixel. */\n  PVRTC_RGBA4,\n  /** RGB(A) compressed format,128 bits per 4x4 pixel block. */\n  ASTC_4x4,\n  /** RGB(A) compressed format,128 bits per 5x5 pixel block. */\n  ASTC_5x5,\n  /** RGB(A) compressed format,128 bits per 6x6 pixel block. */\n  ASTC_6x6,\n  /** RGB(A) compressed format,128 bits per 8x8 pixel block. */\n  ASTC_8x8,\n  /** RGB(A) compressed format,128 bits per 10x10 pixel block. */\n  ASTC_10x10,\n  /** RGB(A) compressed format,128 bits per 12x12 pixel block. */\n  ASTC_12x12\n}\n", "/**\n * Wrapping mode of the texture.\n */\nexport enum TextureWrapMode {\n  /** Clampping mode. use the color of edge pixels beyond the texture boundary. */\n  Clamp = 0,\n  /** Repeating mode. tiling will be repeated if it exceeds the texture boundary. */\n  Repeat = 1,\n  /** Mirror repeat mode. tiling will be mirrored and repeated if it exceeds the texture boundary. */\n  Mirror = 2\n}\n", "import { RefObject } from \"../asset/RefObject\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { Logger } from \"../base/Logger\";\nimport { HardwareRenderer } from \"../HardwareRenderer\";\nimport { GLCompressedTextureInternalFormat, TextureFormatDetail } from \"../material/type\";\nimport { RenderBufferColorFormat } from \"./enums/RenderBufferColorFormat\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\n\n/**\n * The base class of texture, contains some common functions of texture-related classes.\n */\nexport abstract class Texture extends RefObject {\n  /** @internal */\n  static _readFrameBuffer: WebGLFramebuffer = null;\n\n  /** @internal */\n  static _isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * Get more texture info from TextureFormat.\n   * @internal\n   */\n  static _getFormatDetail(\n    format: TextureFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case TextureFormat.R8G8B8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB8 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R8G8B8A8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA8 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R4G4B4A4:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA4 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_4_4_4_4,\n          isCompressed: false\n        };\n      case TextureFormat.R5G5B5A1:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB5_A1 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_5_5_5_1,\n          isCompressed: false\n        };\n      case TextureFormat.R5G6B5:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB565 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_SHORT_5_6_5,\n          isCompressed: false\n        };\n      case TextureFormat.Alpha8:\n        return {\n          internalFormat: gl.ALPHA,\n          baseFormat: gl.ALPHA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R32G32B32A32:\n        return {\n          internalFormat: gl.RGBA32F,\n          baseFormat: gl.RGBA,\n          dataType: gl.FLOAT,\n          isCompressed: false\n        };\n      case TextureFormat.DXT1:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT,\n          isCompressed: true\n        };\n      case TextureFormat.DXT5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT,\n          isCompressed: true\n        };\n      case TextureFormat.ETC1_RGB:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGB:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB8_ETC2,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGBA5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGBA8:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA8_ETC2_EAC,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGB2:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_PVRTC_2BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGBA2:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGB4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGBA4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_PVRTC_4BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_4x4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_5x5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_5X5_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_6x6:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_6X6_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_8x8:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_8X8_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_10x10:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_10X10_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_12x12:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR,\n          isCompressed: true\n        };\n      default:\n        throw new Error(`this TextureFormat is not supported in Oasis Engine: ${format}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getRenderBufferColorFormatDetail(\n    format: RenderBufferColorFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case RenderBufferColorFormat.R8G8B8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB8 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R8G8B8A8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA8 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R4G4B4A4:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA4 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_4_4_4_4,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R5G5B5A1:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB5_A1 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_5_5_5_1,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R5G6B5:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB565 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_SHORT_5_6_5,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.Alpha8:\n        return {\n          internalFormat: gl.ALPHA,\n          baseFormat: gl.ALPHA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R16G16B16A16:\n        return {\n          internalFormat: gl.RGBA16F,\n          baseFormat: gl.RGBA,\n          dataType: gl.HALF_FLOAT,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R32G32B32A32:\n        return {\n          internalFormat: gl.RGBA32F,\n          baseFormat: gl.RGBA,\n          dataType: gl.FLOAT,\n          isCompressed: false\n        };\n      default:\n        throw new Error(`this RenderBufferColorFormat is not supported in Oasis Engine: ${format}`);\n    }\n  }\n\n  /**\n   * @internal\n   * @remarks In WebGL 1, internalformat must be the same as baseFormat when call texImage2D.\n   */\n  static _getRenderBufferDepthFormatDetail(\n    format: RenderBufferDepthFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case RenderBufferDepthFormat.Depth:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT32F : gl.DEPTH_COMPONENT16,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: isWebGL2 ? gl.FLOAT : gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.DepthStencil:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Stencil:\n        return {\n          internalFormat: gl.STENCIL_INDEX8,\n          baseFormat: gl.STENCIL_ATTACHMENT,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false,\n          attachment: gl.STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth16:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT16 : gl.DEPTH_COMPONENT16,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth24:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT24,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth32:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT32F,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.FLOAT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth24Stencil8:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth32Stencil8:\n        return {\n          internalFormat: gl.DEPTH32F_STENCIL8,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.FLOAT_32_UNSIGNED_INT_24_8_REV,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      default:\n        throw new Error(`this RenderBufferDepthFormat is not supported in Oasis Engine: ${format}`);\n    }\n  }\n\n  /**\n   * Check whether the corresponding texture format is supported.\n   * @internal\n   */\n  static _supportTextureFormat(format: TextureFormat, rhi): boolean {\n    let isSupported = true;\n\n    switch (format) {\n      case TextureFormat.R32G32B32A32:\n        {\n          if (!rhi.canIUse(GLCapabilityType.textureFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n    }\n\n    return isSupported;\n  }\n\n  /**\n   * @internal\n   */\n  static _supportRenderBufferColorFormat(format: RenderBufferColorFormat, rhi): boolean {\n    let isSupported = true;\n\n    switch (format) {\n      case RenderBufferColorFormat.R32G32B32A32:\n        {\n          if (!rhi.canIUse(GLCapabilityType.colorBufferFloat) || !rhi.canIUse(GLCapabilityType.textureFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n      case RenderBufferColorFormat.R16G16B16A16:\n        {\n          if (!rhi.canIUse(GLCapabilityType.colorBufferHalfFloat) || !rhi.canIUse(GLCapabilityType.textureHalfFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n    }\n\n    return isSupported;\n  }\n\n  /**\n   * @internal\n   */\n  static _supportRenderBufferDepthFormat(format: RenderBufferDepthFormat, rhi, isTexture: boolean): boolean {\n    const isWebGL2: boolean = rhi.isWebGL2;\n    let isSupported = true;\n\n    if (isTexture && !rhi.canIUse(GLCapabilityType.depthTexture)) {\n      return false;\n    }\n\n    switch (format) {\n      case RenderBufferDepthFormat.Stencil:\n        {\n          isSupported = false;\n        }\n        break;\n      case RenderBufferDepthFormat.Depth24:\n      case RenderBufferDepthFormat.Depth32:\n      case RenderBufferDepthFormat.Depth32Stencil8:\n        {\n          if (!isWebGL2) {\n            isSupported = false;\n          }\n        }\n        break;\n    }\n\n    return isSupported;\n  }\n\n  name: string;\n\n  _glTexture: WebGLTexture;\n  /** @internal */\n  _target: GLenum;\n  /** @internal */\n  _formatDetail: TextureFormatDetail;\n\n  protected _width: number;\n  protected _height: number;\n\n  /** @internal */\n  protected _rhi: HardwareRenderer;\n  /** @internal */\n  protected _mipmap: boolean;\n  /** @internal */\n  protected _mipmapCount: number;\n\n  private _wrapModeU: TextureWrapMode;\n  private _wrapModeV: TextureWrapMode;\n  private _filterMode: TextureFilterMode;\n  private _anisoLevel: number = 1;\n\n  /**\n   * The width of the texture.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * The height of the texture.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * Wrapping mode for texture coordinate S.\n   */\n  get wrapModeU(): TextureWrapMode {\n    return this._wrapModeU;\n  }\n\n  set wrapModeU(value: TextureWrapMode) {\n    if (value === this._wrapModeU) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    this._wrapModeU = value;\n\n    this._bind();\n    this._setWrapMode(value, gl.TEXTURE_WRAP_S);\n    this._unbind();\n  }\n\n  /**\n   * Wrapping mode for texture coordinate T.\n   */\n  get wrapModeV(): TextureWrapMode {\n    return this._wrapModeV;\n  }\n\n  set wrapModeV(value: TextureWrapMode) {\n    if (value === this._wrapModeV) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    this._wrapModeV = value;\n\n    this._bind();\n    this._setWrapMode(value, gl.TEXTURE_WRAP_T);\n    this._unbind();\n  }\n\n  /**\n   * Texture mipmapping count.\n   */\n  get mipmapCount(): number {\n    return this._mipmapCount;\n  }\n\n  /**\n   * Filter mode for texture.\n   */\n  get filterMode(): TextureFilterMode {\n    return this._filterMode;\n  }\n\n  set filterMode(value: TextureFilterMode) {\n    if (value === this._filterMode) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    this._filterMode = value;\n\n    this._bind();\n    switch (value) {\n      case TextureFilterMode.Point:\n        gl.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, this._mipmap ? gl.NEAREST_MIPMAP_NEAREST : gl.NEAREST);\n        break;\n      case TextureFilterMode.Bilinear:\n        gl.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, this._mipmap ? gl.LINEAR_MIPMAP_NEAREST : gl.LINEAR);\n        break;\n      case TextureFilterMode.Trilinear:\n        gl.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, this._mipmap ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);\n        break;\n    }\n    this._unbind();\n  }\n\n  /**\n   * Anisotropic level for texture.\n   */\n  get anisoLevel(): number {\n    return this._anisoLevel;\n  }\n\n  set anisoLevel(value: number) {\n    const max = this._rhi.capability.maxAnisoLevel;\n\n    if (value > max) {\n      Logger.warn(`anisoLevel:${value}, exceeds the limit and is automatically downgraded to:${max}`);\n      value = max;\n    }\n\n    if (value < 1) {\n      Logger.warn(`anisoLevel:${value}, must be greater than 0, and is automatically downgraded to 1`);\n      value = 1;\n    }\n\n    if (value === this._anisoLevel) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext & EXT_texture_filter_anisotropic = this._rhi.gl;\n\n    this._anisoLevel = value;\n\n    this._bind();\n    gl.texParameterf(this._target, gl.TEXTURE_MAX_ANISOTROPY_EXT, value);\n    this._unbind();\n  }\n\n  /**\n   * Generate multi-level textures based on the 0th level data.\n   */\n  public generateMipmaps(): void {\n    if (!this._mipmap) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    this._bind();\n    gl.generateMipmap(this._target);\n    this._unbind();\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy() {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    gl.deleteTexture(this._glTexture);\n    this._glTexture = null;\n    this._formatDetail = null;\n    // TODO: delete\n    this._rhi = null;\n  }\n\n  /** @internal */\n  _bind(): void {\n    this._rhi.bindTexture(this._target, this._glTexture);\n  }\n\n  /** @internal */\n  _unbind(): void {\n    this._rhi.bindTexture(this._target, null);\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @internal\n   * @param face - If it is a cube texture, you can choose which surface to read\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  protected _getPixelBuffer(\n    face: TextureCubeFace | null,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    if (!Texture._readFrameBuffer) {\n      Texture._readFrameBuffer = gl.createFramebuffer();\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, Texture._readFrameBuffer);\n\n    if (face != null) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n        this._glTexture,\n        0\n      );\n    } else {\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._glTexture, 0);\n    }\n    gl.readPixels(x, y, width, height, baseFormat, dataType, out);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  /**\n   * Pre-development mipmapping GPU memory.\n   * @internal\n   */\n  protected _initMipmap(isCube: boolean): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2 = this._rhi.isWebGL2;\n    let { internalFormat, baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n\n    if (isWebGL2) {\n      gl.texStorage2D(this._target, this._mipmapCount, internalFormat, this._width, this._height);\n    } else {\n      // In WebGL 1, internalformat must be the same as baseFormat\n      if (baseFormat !== internalFormat) {\n        internalFormat = baseFormat;\n      }\n\n      if (!isCube) {\n        for (let i = 0; i < this._mipmapCount; i++) {\n          const width = Math.max(1, this._width >> i);\n          const height = Math.max(1, this._height >> i);\n\n          gl.texImage2D(this._target, i, internalFormat, width, height, 0, baseFormat, dataType, null);\n        }\n      } else {\n        for (let i = 0; i < this._mipmapCount; i++) {\n          const size = Math.max(1, this._width >> i);\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            gl.texImage2D(\n              gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\n              i,\n              internalFormat,\n              size,\n              size,\n              0,\n              baseFormat,\n              dataType,\n              null\n            );\n          }\n        }\n      }\n    }\n\n    this._unbind();\n  }\n\n  /**\n   * Get the maximum mip level of the corresponding size:rounding down\n   * @remarks http://download.nvidia.com/developer/Papers/2005/NP2_Mipmapping/NP2_Mipmap_Creation.pdf\n   * @internal\n   */\n  protected _getMaxMiplevel(size: number): number {\n    return Math.floor(Math.log2(size));\n  }\n\n  /**\n   * @internal\n   */\n  protected _getMipmapCount(): number {\n    return this._mipmap ? Math.floor(Math.log2(Math.max(this._width, this._height))) + 1 : 1;\n  }\n\n  /**\n   * @internal\n   */\n  private _setWrapMode(value: TextureWrapMode, pname: GLenum): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n\n    if (\n      !isWebGL2 &&\n      value !== TextureWrapMode.Clamp &&\n      (!Texture._isPowerOf2(this._width) || !Texture._isPowerOf2(this._height))\n    ) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for REPEAT or MIRRORED_REPEAT in WebGL1,and has automatically downgraded to CLAMP_TO_EDGE\"\n      );\n      value = TextureWrapMode.Clamp;\n    }\n\n    switch (value) {\n      case TextureWrapMode.Clamp:\n        gl.texParameteri(this._target, pname, gl.CLAMP_TO_EDGE);\n        break;\n      case TextureWrapMode.Repeat:\n        gl.texParameteri(this._target, pname, gl.REPEAT);\n        break;\n      case TextureWrapMode.Mirror:\n        gl.texParameteri(this._target, pname, gl.MIRRORED_REPEAT);\n        break;\n    }\n  }\n}\n", "import { IClone } from \"@oasis-engine/design\";\nimport { Color, Matrix, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { IRefObject } from \"../asset/IRefObject\";\nimport { CloneManager } from \"../clone/CloneManager\";\nimport { Texture } from \"../texture/Texture\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { Shader } from \"./Shader\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProperty } from \"./ShaderProperty\";\n\nexport type ShaderPropertyValueType =\n  | number\n  | Vector2\n  | Vector3\n  | Vector4\n  | Color\n  | Matrix\n  | Texture\n  | Texture[]\n  | Int32Array\n  | Float32Array;\n\n/**\n * Shader data collection,Correspondence includes shader properties data and macros data.\n */\nexport class ShaderData implements IRefObject, IClone {\n  /** @internal */\n  _group: ShaderDataGroup;\n  /** @internal */\n  _properties: Record<number, ShaderPropertyValueType> = Object.create(null);\n  /** @internal */\n  _macroCollection: ShaderMacroCollection = new ShaderMacroCollection();\n\n  private _variableMacros: Record<string, string> = Object.create(null);\n  private _refCount: number = 0;\n\n  /**\n   * @internal\n   */\n  constructor(group: ShaderDataGroup) {\n    this._group = group;\n  }\n\n  /**\n   * Get float by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Float\n   */\n  getFloat(propertyName: string): number;\n\n  /**\n   * Get float by shader property.\n   * @param property - Shader property\n   * @returns Float\n   */\n  getFloat(property: ShaderProperty): number;\n\n  getFloat(property: string | ShaderProperty): number {\n    return this._getData(property);\n  }\n\n  /**\n   * Set float by shader property name.\n   * @remarks Corresponding float shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Float\n   */\n  setFloat(propertyName: string, value: number): void;\n\n  /**\n   * Set float by shader property.\n   * @remarks Corresponding float shader property type.\n   * @param property - Shader property\n   * @param value - Float\n   */\n  setFloat(property: ShaderProperty, value: number): void;\n\n  setFloat(property: string | ShaderProperty, value: number): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get int by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Int\n   */\n  getInt(propertyName: string): number;\n\n  /**\n   * Get int by shader property.\n   * @param property - Shader property\n   * @returns Int\n   */\n  getInt(property: ShaderProperty): number;\n\n  getInt(property: string | ShaderProperty): number {\n    return this._getData(property);\n  }\n\n  /**\n   * Set int by shader property name.\n   * @remarks Correspondence includes int and bool shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Int\n   */\n  setInt(propertyName: string, value: number): void;\n\n  /**\n   * Set int by shader property.\n   * @remarks Correspondence includes int and bool shader property type.\n   * @param property - Shader property\n   * @param value - Int\n   */\n  setInt(property: ShaderProperty, value: number): void;\n\n  setInt(property: string | ShaderProperty, value: number): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get float array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Float array\n   */\n  getFloatArray(propertyName: string): Float32Array;\n\n  /**\n   * Get float array by shader property.\n   * @param property - Shader property\n   * @returns Float array\n   */\n  getFloatArray(property: ShaderProperty): Float32Array;\n\n  getFloatArray(property: string | ShaderProperty): Float32Array {\n    return this._getData(property);\n  }\n\n  /**\n   * Set float array by shader property name.\n   * @remarks Correspondence includes float array\u3001vec2 array\u3001vec3 array\u3001vec4 array and matrix array shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Float array\n   */\n  setFloatArray(propertyName: string, value: Float32Array): void;\n\n  /**\n   * Set float array by shader property.\n   * @remarks Correspondence includes float array\u3001vec2 array\u3001vec3 array\u3001vec4 array and matrix array shader property type.\n   * @param property - Shader property\n   * @param value - Float array\n   */\n  setFloatArray(property: ShaderProperty, value: Float32Array): void;\n\n  setFloatArray(property: string | ShaderProperty, value: Float32Array): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get int array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Int Array\n   */\n  getIntArray(propertyName: string): Int32Array;\n\n  /**\n   * Get int array by shader property.\n   * @param property - Shader property\n   * @returns Int Array\n   */\n  getIntArray(property: ShaderProperty): Int32Array;\n\n  getIntArray(property: string | ShaderProperty): Int32Array {\n    return this._getData(property);\n  }\n\n  /**\n   * Set int array by shader property name.\n   * @remarks Correspondence includes bool array\u3001int array\u3001bvec2 array\u3001bvec3 array\u3001bvec4 array\u3001ivec2 array\u3001ivec3 array and ivec4 array shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Int Array\n   */\n  setIntArray(propertyName: string, value: Int32Array): void;\n\n  /**\n   * Set int array by shader property.\n   * @remarks Correspondence includes bool array\u3001int array\u3001bvec2 array\u3001bvec3 array\u3001bvec4 array\u3001ivec2 array\u3001ivec3 array and ivec4 array shader property type.\n   * @param property - Shader property\n   * @param value - Int Array\n   */\n  setIntArray(property: ShaderProperty, value: Int32Array): void;\n\n  setIntArray(property: string | ShaderProperty, value: Int32Array): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get two-dimensional from shader property name.\n   * @param propertyName - Shader property name\n   * @returns Two-dimensional vector\n   */\n  getVector2(propertyName: string): Vector2;\n\n  /**\n   * Get two-dimensional from shader property.\n   * @param property - Shader property\n   * @returns Two-dimensional vector\n   */\n  getVector2(property: ShaderProperty): Vector2;\n\n  getVector2(property: string | ShaderProperty): Vector2 {\n    return this._getData(property);\n  }\n\n  /**\n   * Set two-dimensional vector from shader property name.\n   * @remarks Correspondence includes vec2\u3001ivec2 and bvec2 shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Two-dimensional vector\n   */\n  setVector2(property: string, value: Vector2): void;\n\n  /**\n   * Set two-dimensional vector from shader property.\n   * @remarks Correspondence includes vec2\u3001ivec2 and bvec2 shader property type.\n   * @param property - Shader property\n   * @param value - Two-dimensional vector\n   */\n  setVector2(property: ShaderProperty, value: Vector2): void;\n\n  setVector2(property: string | ShaderProperty, value: Vector2): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get vector3 by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Three-dimensional vector\n   */\n  getVector3(propertyName: string): Vector3;\n\n  /**\n   * Get vector3 by shader property.\n   * @param property - Shader property\n   * @returns Three-dimensional vector\n   */\n  getVector3(property: ShaderProperty): Vector3;\n\n  getVector3(property: string | ShaderProperty): Vector3 {\n    return this._getData(property);\n  }\n\n  /**\n   * Set three dimensional vector by shader property name.\n   * @remarks Correspondence includes vec3\u3001ivec3 and bvec3 shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Three-dimensional vector\n   */\n  setVector3(property: string, value: Vector3): void;\n\n  /**\n   * Set three dimensional vector by shader property.\n   * @remarks Correspondence includes vec3\u3001ivec3 and bvec3 shader property type.\n   * @param property - Shader property\n   * @param value - Three-dimensional vector\n   */\n  setVector3(property: ShaderProperty, value: Vector3): void;\n\n  setVector3(property: string | ShaderProperty, value: Vector3): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get vector4 by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Four-dimensional vector\n   */\n  getVector4(propertyName: string): Vector4;\n\n  /**\n   * Get vector4 by shader property.\n   * @param property - Shader property\n   * @returns Four-dimensional vector\n   */\n  getVector4(property: ShaderProperty): Vector4;\n\n  getVector4(property: string | ShaderProperty): Vector4 {\n    return this._getData(property);\n  }\n\n  /**\n   * Set four-dimensional vector by shader property name.\n   * @remarks Correspondence includes vec4\u3001ivec4 and bvec4 shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Four-dimensional vector\n   */\n  setVector4(property: string, value: Vector4): void;\n\n  /**\n   * Set four-dimensional vector by shader property.\n   * @remarks Correspondence includes vec4\u3001ivec4 and bvec4 shader property type.\n   * @param property - Shader property\n   * @param value - Four-dimensional vector\n   */\n  setVector4(property: ShaderProperty, value: Vector4): void;\n\n  setVector4(property: string | ShaderProperty, value: Vector4): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get matrix by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Matrix\n   */\n  getMatrix(propertyName: string): Matrix;\n\n  /**\n   * Get matrix by shader property.\n   * @param property - Shader property\n   * @returns Matrix\n   */\n  getMatrix(property: ShaderProperty): Matrix;\n\n  getMatrix(property: string | ShaderProperty): Matrix {\n    return this._getData(property);\n  }\n\n  /**\n   * Set matrix by shader property name.\n   * @remarks Correspondence includes matrix shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Matrix\n   */\n  setMatrix(propertyName: string, value: Matrix);\n\n  /**\n   * Set matrix by shader property.\n   * @remarks Correspondence includes matrix shader property type.\n   * @param property - Shader property\n   * @param value - Matrix\n   */\n  setMatrix(property: ShaderProperty, value: Matrix);\n\n  setMatrix(property: string | ShaderProperty, value: Matrix): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get color by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Color\n   */\n  getColor(propertyName: string): Color;\n\n  /**\n   * Get color by shader property.\n   * @param property - Shader property\n   * @returns Color\n   */\n  getColor(property: ShaderProperty): Color;\n\n  getColor(property: string | ShaderProperty): Color {\n    return this._getData(property);\n  }\n\n  /**\n   * Set color by shader property name.\n   * @remarks Correspondence includes vec4 shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Color\n   */\n  setColor(propertyName: string, value: Color): void;\n\n  /**\n   * Set color by shader property.\n   * @remarks Correspondence includes vec4 shader property type.\n   * @param property - Shader property\n   * @param value - Color\n   */\n  setColor(property: ShaderProperty, value: Color): void;\n\n  setColor(property: string | ShaderProperty, value: Color): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get texture by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Texture\n   */\n  getTexture(propertyName: string): Texture;\n\n  /**\n   * Get texture by shader property.\n   * @param property - Shader property\n   * @returns Texture\n   */\n  getTexture(property: ShaderProperty): Texture;\n\n  getTexture(property: string | ShaderProperty): Texture {\n    return this._getData(property);\n  }\n\n  /**\n   * Set texture by shader property name.\n   * @param propertyName - Shader property name\n   * @param value - Texture\n   */\n  setTexture(propertyName: string, value: Texture): void;\n\n  /**\n   * Set texture by shader property.\n   * @param property - Shader property\n   * @param value - Texture\n   */\n  setTexture(property: ShaderProperty, value: Texture): void;\n\n  setTexture(property: string | ShaderProperty, value: Texture): void {\n    if (this._getRefCount() > 0) {\n      const lastValue = this._getData<Texture>(property);\n      lastValue && lastValue._addRefCount(-1);\n      value && value._addRefCount(1);\n    }\n    this._setData(property, value);\n  }\n\n  /**\n   * Get texture array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Texture array\n   */\n  getTextureArray(propertyName: string): Texture[];\n\n  /**\n   * Get texture array by shader property.\n   * @param property - Shader property\n   * @returns Texture array\n   */\n  getTextureArray(property: ShaderProperty): Texture[];\n\n  getTextureArray(property: string | ShaderProperty): Texture[] {\n    return this._getData(property);\n  }\n\n  /**\n   * Set texture array by shader property name.\n   * @param propertyName - Shader property name\n   * @param value - Texture array\n   */\n  setTextureArray(propertyName: string, value: Texture[]): void;\n\n  /**\n   * Set texture array by shader property.\n   * @param property - Shader property\n   * @param value - Texture array\n   */\n  setTextureArray(property: ShaderProperty, value: Texture[]): void;\n\n  setTextureArray(property: string | ShaderProperty, value: Texture[]): void {\n    if (this._getRefCount() > 0) {\n      const lastValue = this._getData<Texture[]>(property);\n      if (lastValue) {\n        for (let i = 0, n = lastValue.length; i < n; i++) {\n          lastValue[i]._addRefCount(-1);\n        }\n      }\n      if (value) {\n        for (let i = 0, n = value.length; i < n; i++) {\n          value[i]._addRefCount(1);\n        }\n      }\n    }\n    this._setData(property, value);\n  }\n\n  /**\n   * Enable macro.\n   * @param macroName - Macro name\n   */\n  enableMacro(macroName: string): void;\n\n  /**\n   * Enable macro.\n   * @param macro - Shader macro\n   */\n  enableMacro(macro: ShaderMacro): void;\n\n  /**\n   * Enable macro.\n   * @remarks Name and value will combine one macro, it's equal the macro of \"name value\".\n   * @param name - Macro name\n   * @param value - Macro value\n   */\n  enableMacro(name: string, value: string): void;\n\n  enableMacro(macro: string | ShaderMacro, value: string = null): void {\n    if (value) {\n      this._enableVariableMacro(<string>macro, value);\n    } else {\n      if (typeof macro === \"string\") {\n        macro = Shader.getMacroByName(macro);\n      }\n      this._macroCollection.enable(macro);\n    }\n  }\n\n  /**\n   * Disable macro\n   * @param macroName - Macro name\n   */\n  disableMacro(macroName: string): void;\n\n  /**\n   * Disable macro\n   * @param macro - Shader macro\n   */\n  disableMacro(macro: ShaderMacro): void;\n\n  disableMacro(macro: string | ShaderMacro): void {\n    if (typeof macro === \"string\") {\n      // @todo: should optimization variable macros disable performance\n      const variableValue = this._variableMacros[macro];\n      if (variableValue) {\n        this._disableVariableMacro(macro, variableValue);\n      } else {\n        macro = Shader.getMacroByName(macro);\n        this._macroCollection.disable(macro);\n      }\n    } else {\n      this._macroCollection.disable(macro);\n    }\n  }\n\n  clone(): ShaderData {\n    const shaderData = new ShaderData(this._group);\n    this.cloneTo(shaderData);\n    return shaderData;\n  }\n\n  cloneTo(target: ShaderData): void {\n    CloneManager.deepCloneObject(this._macroCollection, target._macroCollection);\n    Object.assign(target._variableMacros, this._variableMacros);\n\n    const properties = this._properties;\n    const targetProperties = target._properties;\n    const keys = Object.keys(properties);\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const k = keys[i];\n      const property: ShaderPropertyValueType = properties[k];\n      if (property != null) {\n        if (typeof property === \"number\") {\n          targetProperties[k] = property;\n        } else if (property instanceof Texture) {\n          targetProperties[k] = property;\n        } else if (property instanceof Array || property instanceof Float32Array || property instanceof Int32Array) {\n          targetProperties[k] = property.slice();\n        } else {\n          targetProperties[k] = property.clone();\n        }\n      } else {\n        targetProperties[k] = property;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getData<T extends ShaderPropertyValueType>(property: string | ShaderProperty): T {\n    if (typeof property === \"string\") {\n      property = Shader.getPropertyByName(property);\n    }\n    return this._properties[property._uniqueId] as T;\n  }\n\n  /**\n   * @internal\n   */\n  _setData<T extends ShaderPropertyValueType>(property: string | ShaderProperty, value: T): void {\n    if (typeof property === \"string\") {\n      property = Shader.getPropertyByName(property);\n    }\n\n    if (property._group !== this._group) {\n      if (property._group === undefined) {\n        property._group = this._group;\n      } else {\n        throw `This property has been used as ${ShaderDataGroup[property._group]} property.`;\n      }\n    }\n\n    this._properties[property._uniqueId] = value;\n  }\n\n  /**\n   * @internal\n   */\n  _getRefCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   */\n  _addRefCount(value: number): void {\n    this._refCount += value;\n    const properties = this._properties;\n    for (var k in properties) {\n      const property = properties[k];\n      // @todo: Seperate array to speed performace.\n      if (property && property instanceof Texture) {\n        property._addRefCount(value);\n      }\n    }\n  }\n\n  private _enableVariableMacro(name: string, value: string): void {\n    const variableMacro = this._variableMacros;\n    const variableValue = variableMacro[name];\n    if (variableValue !== value) {\n      variableValue && this._disableVariableMacro(name, variableValue);\n\n      const macro = Shader.getMacroByName(`${name} ${value}`);\n      this._macroCollection.enable(macro);\n      variableMacro[name] = value;\n    }\n  }\n\n  private _disableVariableMacro(name: string, value: string): void {\n    const oldMacro = Shader.getMacroByName(`${name} ${value}`);\n    this._macroCollection.disable(oldMacro);\n    delete this._variableMacros[name];\n  }\n}\n", "import { Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { EngineObject, GLCapabilityType, Logger } from \"./base\";\nimport { Camera } from \"./Camera\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { FeatureManager } from \"./FeatureManager\";\nimport { Layer } from \"./Layer\";\nimport { LightFeature } from \"./lighting/LightFeature\";\nimport { SceneFeature } from \"./SceneFeature\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderData } from \"./shader/ShaderData\";\n\n/**\n * Scene.\n */\nexport class Scene extends EngineObject {\n  private static _resolutionProperty = Shader.getPropertyByName(\"u_resolution\");\n\n  static sceneFeatureManager = new FeatureManager<SceneFeature>();\n\n  /** scene-related shaderdata  */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Scene);\n\n  /** scene name */\n  name: string;\n\n  /**\n   * @private\n   * @deprecated\n   * @todo: Migrate to camera\n   * Clipping surface, plane equations. The fragments below the clipping plane will be discard.\n   * @example\n   * ```ts\n   * scene.clipPlanes = [[0,1,0,0]];\n   * ```\n   * */\n  clipPlanes: Vector4[] = [];\n  _activeCameras: Camera[] = [];\n  _isActiveInEngine: boolean = false;\n\n  private _destroyed: boolean = false;\n  private _rootEntities: Entity[] = [];\n  private _resolution: Vector2 = new Vector2();\n\n  /**\n   * Get the scene's engine.\n   * @readonly\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  /**\n   * Count of root entities.\n   * @readonly\n   */\n  get rootEntitiesCount(): number {\n    return this._rootEntities.length;\n  }\n\n  /**\n   * Root entity collection.\n   * @readonly\n   */\n  get rootEntities(): Readonly<Entity[]> {\n    return this._rootEntities;\n  }\n\n  /**\n   * Whether it's destroyed.\n   * @readonly\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * Create scene.\n   * @param engine - Engine\n   * @param name - Name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name || \"\";\n\n    const shaderData = this.shaderData;\n    Scene.sceneFeatureManager.addObject(this);\n    shaderData._addRefCount(1);\n\n    // @todo: this is deviec macro,should add when compile shader.\n    if (this._engine._hardwareRenderer.canIUse(GLCapabilityType.shaderTextureLod)) {\n      shaderData.enableMacro(\"HAS_TEX_LOD\");\n    }\n    if (this._engine._hardwareRenderer.canIUse(GLCapabilityType.standardDerivatives)) {\n      shaderData.enableMacro(\"HAS_DERIVATIVES\");\n    }\n  }\n\n  /**\n   * Create root entity.\n   * @param name - Entity name\n   * @returns Entity\n   */\n  createRootEntity(name?: string): Entity {\n    const entity = new Entity(this._engine, name);\n    this.addRootEntity(entity);\n    return entity;\n  }\n\n  /**\n   * Append an entity.\n   * @param entity - The root entity to add\n   */\n  addRootEntity(entity: Entity): void {\n    const isRoot = entity._isRoot;\n\n    // let entity become root\n    if (!isRoot) {\n      entity._isRoot = true;\n      entity._removeFromParent();\n    }\n\n    // add or remove from scene's rootEntities\n    const oldScene = entity._scene;\n    if (oldScene !== this) {\n      if (oldScene && isRoot) {\n        oldScene._removeEntity(entity);\n      }\n      this._rootEntities.push(entity);\n      Entity._traverseSetOwnerScene(entity, this);\n    } else if (!isRoot) {\n      this._rootEntities.push(entity);\n    }\n\n    // process entity active/inActive\n    if (this._isActiveInEngine) {\n      !entity._isActiveInHierarchy && entity._isActive && entity._processActive();\n    } else {\n      entity._isActiveInHierarchy && entity._processInActive();\n    }\n  }\n\n  /**\n   * Remove an entity.\n   * @param entity - The root entity to remove\n   */\n  removeRootEntity(entity: Entity): void {\n    if (entity._isRoot && entity._scene == this) {\n      this._removeEntity(entity);\n      this._isActiveInEngine && entity._processInActive();\n      Entity._traverseSetOwnerScene(entity, null);\n    }\n  }\n\n  /**\n   * Get root entity from index.\n   * @param index - Index\n   * @returns Entity\n   */\n  getRootEntity(index: number = 0): Entity | null {\n    return this._rootEntities[index];\n  }\n\n  /**\n   * Find entity globally by name.\n   * @param name - Entity name\n   * @returns Entity\n   */\n  findEntityByName(name: string): Entity | null {\n    const children = this._rootEntities;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      const entity = child.findByName(name);\n      if (entity) {\n        return entity;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find entity globally by name,use \u2018/\u2019 symbol as a path separator.\n   * @param path - Entity's path\n   * @returns Entity\n   */\n  findEntityByPath(path: string): Entity | null {\n    const splits = path.split(\"/\").filter(Boolean);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      let findEntity = this.getRootEntity(i);\n      if (findEntity.name != splits[0]) continue;\n      for (let j = 1, m = splits.length; j < m; ++j) {\n        findEntity = Entity._findChildByName(findEntity, splits[j]);\n        if (!findEntity) break;\n      }\n      return findEntity;\n    }\n    return null;\n  }\n\n  /**\n   * Destroy this scene.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n    this._isActiveInEngine && (this._engine.sceneManager.activeScene = null);\n    Scene.sceneFeatureManager.callFeatureMethod(this, \"destroy\", [this]);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      this._rootEntities[i].destroy();\n    }\n    this._rootEntities.length = 0;\n    this._activeCameras.length = 0;\n    (Scene.sceneFeatureManager as any)._objects = [];\n    this.shaderData._addRefCount(-1);\n    this._destroyed = true;\n  }\n\n  /**\n   * Append a camera to this scene.\n   * @param camera  - Camera\n   */\n  attachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index === -1) {\n      this._activeCameras.push(camera);\n    } else {\n      Logger.warn(\"Camera already attached.\");\n    }\n  }\n\n  /**\n   * Remove a camera from this scene.\n   * @param camera - Camera\n   */\n  detachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index !== -1) {\n      this._activeCameras.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(active: boolean): void {\n    this._isActiveInEngine = active;\n    const rootEntities = this._rootEntities;\n    for (let i = rootEntities.length - 1; i >= 0; i--) {\n      const entity = rootEntities[i];\n      if (entity._isActive) {\n        active ? entity._processActive() : entity._processInActive();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData() {\n    const lightMgr = this.findFeature(LightFeature);\n    const shaderData = this.shaderData;\n    const canvas = this.engine.canvas;\n    const resolution = this._resolution;\n\n    lightMgr._updateShaderData(shaderData);\n\n    resolution.setValue(canvas.width, canvas.height);\n    shaderData.setVector2(Scene._resolutionProperty, resolution);\n  }\n\n  private _removeEntity(entity: Entity): void {\n    const oldRootEntities = this._rootEntities;\n    oldRootEntities.splice(oldRootEntities.indexOf(entity), 1);\n  }\n\n  //-----------------------------------------@deprecated-----------------------------------\n  static registerFeature(Feature: new () => SceneFeature) {\n    Scene.sceneFeatureManager.registerFeature(Feature);\n  }\n\n  findFeature<T extends SceneFeature>(Feature: { new (): T }): T {\n    return Scene.sceneFeatureManager.findFeature(this, Feature) as T;\n  }\n\n  features: SceneFeature[] = [];\n\n  /**\n   * Raycast.\n   * @deprecated\n   * @param ray\n   */\n  public raycast(ray: { origin: Vector3; direction: Vector3 }, outPos?: Vector3, tag?: Layer): any {}\n}\n", "import { AssetPromise } from \"./asset/AssetPromise\";\nimport { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Scene manager.\n */\nexport class SceneManager {\n  _activeScene: Scene;\n\n  /**\n   * Get the activated scene.\n   */\n  get activeScene(): Scene {\n    return this._activeScene;\n  }\n\n  set activeScene(scene: Scene) {\n    const oldScene = this._activeScene;\n    if (oldScene !== scene) {\n      oldScene && oldScene._processActive(false);\n      scene && scene._processActive(true);\n      this._activeScene = scene;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Load and activate scene.\n   * @param url - the path of the scene\n   * @param destroyOldScene - whether to destroy old scene information\n   * @returns scene promise\n   */\n  loadScene(url: string, destroyOldScene: boolean = true): AssetPromise<Scene> {\n    const scenePromise = this.engine.resourceManager.load<Scene>(url);\n    scenePromise.then((scene: Scene) => {\n      const oldScene: Scene = this._activeScene;\n      this.activeScene = scene;\n      if (oldScene && destroyOldScene) {\n        oldScene.destroy();\n      }\n    });\n    return scenePromise;\n  }\n\n  /**\n   * Merge the source scene into the target scene.\n   * @remarks the global information of destScene will be used after the merge, and the lightingMap information will be merged.\n   * @param sourceScene - source scene\n   * @param destScene - target scene\n   */\n  mergeScenes(sourceScene: Scene, destScene: Scene): void {\n    const oldRootEntities = sourceScene.rootEntities;\n    for (let i: number = 0, n: number = oldRootEntities.length; i < n; i++) {\n      destScene.addRootEntity(oldRootEntities[i]);\n    }\n  }\n}\n", "import blinnPhongFs from \"../shaderlib/extra/blinn-phong.fs.glsl\";\nimport blinnPhongVs from \"../shaderlib/extra/blinn-phong.vs.glsl\";\nimport particleFs from \"../shaderlib/extra/particle.fs.glsl\";\nimport particleVs from \"../shaderlib/extra/particle.vs.glsl\";\nimport pbrFs from \"../shaderlib/extra/pbr.fs.glsl\";\nimport pbrVs from \"../shaderlib/extra/pbr.vs.glsl\";\nimport shadowMapFs from \"../shaderlib/extra/shadow-map.fs.glsl\";\nimport shadowMapVs from \"../shaderlib/extra/shadow-map.vs.glsl\";\nimport shadowFs from \"../shaderlib/extra/shadow.fs.glsl\";\nimport skyboxFs from \"../shaderlib/extra/skybox.fs.glsl\";\nimport skyboxVs from \"../shaderlib/extra/skybox.vs.glsl\";\nimport unlitFs from \"../shaderlib/extra/unlit.fs.glsl\";\nimport unlitVs from \"../shaderlib/extra/unlit.vs.glsl\";\nimport { Shader } from \"./Shader\";\n\n/**\n * Internal shader pool.\n * @internal\n */\nexport class ShaderPool {\n  static init(): void {\n    Shader.create(\"blinn-phong\", blinnPhongVs, blinnPhongFs);\n    Shader.create(\"pbr\", pbrVs, pbrFs);\n    Shader.create(\"unlit\", unlitVs, unlitFs);\n    Shader.create(\"shadow-map\", shadowMapVs, shadowMapFs);\n    Shader.create(\"shadow\", shadowMapVs, shadowFs);\n    Shader.create(\"skybox\", skyboxVs, skyboxFs);\n    Shader.create(\"particle-shader\", particleVs, particleFs);\n  }\n}\n", "import { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProgram } from \"./ShaderProgram\";\n\n/**\n * Shader program pool.\n * @internal\n */\nexport class ShaderProgramPool {\n  private _cacheHierarchy: number = 1;\n  private _cacheMap: object = Object.create(null);\n  private _lastQueryMap: Record<number, ShaderProgram>;\n  private _lastQueryKey: number;\n\n  /**\n   * Get shader program by macro collection.\n   * @param macros - macro collection\n   * @returns shader program\n   */\n  get(macros: ShaderMacroCollection): ShaderProgram | null {\n    let cacheMap = this._cacheMap;\n    const maskLength = macros._length;\n    if (maskLength > this._cacheHierarchy) {\n      this._resizeCacheMapHierarchy(cacheMap, 0, maskLength);\n    }\n\n    const mask = macros._mask;\n    const endIndex = macros._length - 1;\n    const maxEndIndex = this._cacheHierarchy - 1;\n    for (let i = 0; i < maxEndIndex; i++) {\n      const subMask = endIndex < i ? 0 : mask[i];\n      let subCacheShaders: object = cacheMap[subMask];\n      subCacheShaders || (cacheMap[subMask] = subCacheShaders = Object.create(null));\n      cacheMap = subCacheShaders;\n    }\n\n    const cacheKey = endIndex < maxEndIndex ? 0 : mask[maxEndIndex];\n    const shader = (<Record<number, ShaderProgram>>cacheMap)[cacheKey];\n    if (!shader) {\n      this._lastQueryKey = cacheKey;\n      this._lastQueryMap = <Record<number, ShaderProgram>>cacheMap;\n    }\n    return shader;\n  }\n\n  /**\n   * Cache the shader program.\n   *\n   * @remarks\n   * The method must return an empty value after calling get() to run normally.\n   *\n   * @param shaderProgram - shader program\n   */\n  cache(shaderProgram: ShaderProgram): void {\n    this._lastQueryMap[this._lastQueryKey] = shaderProgram;\n  }\n\n  private _resizeCacheMapHierarchy(cacheMap: object, hierarchy: number, resizeLength: number): void {\n    // only expand but not shrink.\n    const end = this._cacheHierarchy - 1;\n    if (hierarchy == end) {\n      for (let k in cacheMap) {\n        const shader: ShaderProgram = cacheMap[k];\n        for (let i = 0, n = resizeLength - end; i < n; i++) {\n          if (i == n - 1) {\n            cacheMap[0] = shader;\n          } else {\n            cacheMap = cacheMap[i == 0 ? k : 0] = Object.create(null);\n          }\n        }\n      }\n      this._cacheHierarchy = resizeLength;\n    } else {\n      for (let k in cacheMap) {\n        this._resizeCacheMapHierarchy(cacheMap[k], ++hierarchy, resizeLength);\n      }\n    }\n  }\n}\n", "import { BlendOperation } from \"../enums/BlendOperation\";\nimport { BlendFactor } from \"../enums/BlendFactor\";\nimport { ColorWriteMask } from \"../enums/ColorWriteMask\";\n\n/**\n * The blend state of the render target.\n */\nexport class RenderTargetBlendState {\n  /** color (RGB) blend operation. */\n  colorBlendOperation: BlendOperation = BlendOperation.Add;\n  /** alpha (A) blend operation. */\n  alphaBlendOperation: BlendOperation = BlendOperation.Add;\n  /** color blend factor (RGB) for source. */\n  sourceColorBlendFactor: BlendFactor = BlendFactor.One;\n  /** alpha blend factor (A) for source. */\n  sourceAlphaBlendFactor: BlendFactor = BlendFactor.One;\n  /** color blend factor (RGB) for destination. */\n  destinationColorBlendFactor: BlendFactor = BlendFactor.Zero;\n  /** alpha blend factor (A) for destination. */\n  destinationAlphaBlendFactor: BlendFactor = BlendFactor.Zero;\n  /** color mask. */\n  colorWriteMask: ColorWriteMask = ColorWriteMask.All;\n\n  /** @internal */\n  _blendEnable: boolean = false;\n}\n", "import { Color } from \"@oasis-engine/math\";\nimport { HardwareRenderer } from \"../../HardwareRenderer\";\nimport { BlendFactor } from \"../enums/BlendFactor\";\nimport { BlendOperation } from \"../enums/BlendOperation\";\nimport { ColorWriteMask } from \"../enums/ColorWriteMask\";\nimport { RenderState } from \"./RenderState\";\nimport { RenderTargetBlendState } from \"./RenderTargetBlendState\";\n\n/**\n * Blend state.\n */\nexport class BlendState {\n  private static _getGLBlendFactor(blendFactor: BlendFactor): number {\n    switch (blendFactor) {\n      case BlendFactor.Zero:\n        return WebGLRenderingContext.ZERO;\n      case BlendFactor.One:\n        return WebGLRenderingContext.ONE;\n      case BlendFactor.SourceColor:\n        return WebGLRenderingContext.SRC_COLOR;\n      case BlendFactor.OneMinusSourceColor:\n        return WebGLRenderingContext.ONE_MINUS_SRC_COLOR;\n      case BlendFactor.DestinationColor:\n        return WebGLRenderingContext.DST_COLOR;\n      case BlendFactor.OneMinusDestinationColor:\n        return WebGLRenderingContext.ONE_MINUS_DST_COLOR;\n      case BlendFactor.SourceAlpha:\n        return WebGLRenderingContext.SRC_ALPHA;\n      case BlendFactor.OneMinusSourceAlpha:\n        return WebGLRenderingContext.ONE_MINUS_SRC_ALPHA;\n      case BlendFactor.DestinationAlpha:\n        return WebGLRenderingContext.DST_ALPHA;\n      case BlendFactor.OneMinusDestinationAlpha:\n        return WebGLRenderingContext.ONE_MINUS_DST_ALPHA;\n      case BlendFactor.SourceAlphaSaturate:\n        return WebGLRenderingContext.SRC_ALPHA_SATURATE;\n      case BlendFactor.BlendColor:\n        return WebGLRenderingContext.CONSTANT_COLOR;\n      case BlendFactor.OneMinusBlendColor:\n        return WebGLRenderingContext.ONE_MINUS_CONSTANT_COLOR;\n    }\n  }\n\n  private static _getGLBlendOperation(blendOperation: BlendOperation): number {\n    switch (blendOperation) {\n      case BlendOperation.Add:\n        return WebGLRenderingContext.FUNC_ADD;\n      case BlendOperation.Subtract:\n        return WebGLRenderingContext.FUNC_SUBTRACT;\n      case BlendOperation.ReverseSubtract:\n        return WebGLRenderingContext.FUNC_REVERSE_SUBTRACT;\n      case BlendOperation.Min:\n        return WebGL2RenderingContext.MIN; // in webgl1.0 is an extension\n      case BlendOperation.Max:\n        return WebGL2RenderingContext.MAX; // in webgl1.0 is an extension\n    }\n  }\n\n  /** The blend state of the render target. */\n  readonly targetBlendState: RenderTargetBlendState = new RenderTargetBlendState();\n  /** Constant blend color. */\n  readonly blendColor: Color = new Color(0, 0, 0, 0);\n  /** Whether to use (Alpha-to-Coverage) technolog. */\n  alphaToCoverage: boolean = false;\n\n  /**\n   * @internal\n   * Apply the current blend state by comparing with the last blend state.\n   */\n  _apply(hardwareRenderer: HardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.blendState);\n  }\n\n  private _platformApply(rhi: HardwareRenderer, lastState: BlendState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const lastTargetBlendState = lastState.targetBlendState;\n\n    const {\n      colorBlendOperation,\n      alphaBlendOperation,\n      sourceColorBlendFactor,\n      destinationColorBlendFactor,\n      sourceAlphaBlendFactor,\n      destinationAlphaBlendFactor,\n      colorWriteMask\n    } = this.targetBlendState;\n\n    const blendEnable = !(\n      sourceColorBlendFactor === BlendFactor.One &&\n      destinationColorBlendFactor === BlendFactor.Zero &&\n      sourceAlphaBlendFactor === BlendFactor.One &&\n      destinationAlphaBlendFactor === BlendFactor.Zero &&\n      (colorBlendOperation === BlendOperation.Add || colorBlendOperation === BlendOperation.Subtract) &&\n      (alphaBlendOperation === BlendOperation.Add || alphaBlendOperation === BlendOperation.Subtract)\n    );\n\n    if (blendEnable !== lastTargetBlendState._blendEnable) {\n      if (blendEnable) {\n        gl.enable(gl.BLEND);\n      } else {\n        gl.disable(gl.BLEND);\n      }\n      lastTargetBlendState._blendEnable = blendEnable;\n    }\n\n    if (blendEnable) {\n      // apply blend factor.\n      if (\n        sourceColorBlendFactor !== lastTargetBlendState.sourceColorBlendFactor ||\n        destinationColorBlendFactor !== lastTargetBlendState.destinationColorBlendFactor ||\n        sourceAlphaBlendFactor !== lastTargetBlendState.sourceAlphaBlendFactor ||\n        destinationAlphaBlendFactor !== lastTargetBlendState.destinationAlphaBlendFactor\n      ) {\n        gl.blendFuncSeparate(\n          BlendState._getGLBlendFactor(sourceColorBlendFactor),\n          BlendState._getGLBlendFactor(destinationColorBlendFactor),\n          BlendState._getGLBlendFactor(sourceAlphaBlendFactor),\n          BlendState._getGLBlendFactor(destinationAlphaBlendFactor)\n        );\n        lastTargetBlendState.sourceColorBlendFactor = sourceColorBlendFactor;\n        lastTargetBlendState.destinationColorBlendFactor = destinationColorBlendFactor;\n        lastTargetBlendState.sourceAlphaBlendFactor = sourceAlphaBlendFactor;\n        lastTargetBlendState.destinationAlphaBlendFactor = destinationAlphaBlendFactor;\n      }\n\n      // apply blend operation.\n      if (\n        colorBlendOperation !== lastTargetBlendState.colorBlendOperation ||\n        alphaBlendOperation !== lastTargetBlendState.alphaBlendOperation\n      ) {\n        gl.blendEquationSeparate(\n          BlendState._getGLBlendOperation(colorBlendOperation),\n          BlendState._getGLBlendOperation(alphaBlendOperation)\n        );\n        lastTargetBlendState.colorBlendOperation = colorBlendOperation;\n        lastTargetBlendState.alphaBlendOperation = alphaBlendOperation;\n      }\n\n      // apply blend color.\n      const blendColor = this.blendColor;\n      if (!Color.equals(lastState.blendColor, blendColor)) {\n        gl.blendColor(blendColor.r, blendColor.g, blendColor.b, blendColor.a);\n        blendColor.cloneTo(lastState.blendColor);\n      }\n    }\n\n    // apply color mask.\n    if (colorWriteMask !== lastTargetBlendState.colorWriteMask) {\n      gl.colorMask(\n        (colorWriteMask & ColorWriteMask.Red) !== 0,\n        (colorWriteMask & ColorWriteMask.Green) !== 0,\n        (colorWriteMask & ColorWriteMask.Blue) !== 0,\n        (colorWriteMask & ColorWriteMask.Alpha) !== 0\n      );\n      lastTargetBlendState.colorWriteMask = colorWriteMask;\n    }\n\n    // apply alpha to coverage.\n    const alphaToCoverage = this.alphaToCoverage;\n    if (alphaToCoverage !== lastState.alphaToCoverage) {\n      if (alphaToCoverage) {\n        gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      } else {\n        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      }\n      lastState.alphaToCoverage = alphaToCoverage;\n    }\n  }\n}\n", "import { HardwareRenderer } from \"../../HardwareRenderer\";\nimport { CompareFunction } from \"../enums/CompareFunction\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Depth state.\n */\nexport class DepthState {\n  private static _getGLCompareFunction(compareFunction: CompareFunction): number {\n    switch (compareFunction) {\n      case CompareFunction.Never:\n        return WebGLRenderingContext.NEVER;\n      case CompareFunction.Less:\n        return WebGLRenderingContext.LESS;\n      case CompareFunction.Equal:\n        return WebGLRenderingContext.EQUAL;\n      case CompareFunction.LessEqual:\n        return WebGL2RenderingContext.LEQUAL;\n      case CompareFunction.Greater:\n        return WebGL2RenderingContext.GREATER;\n      case CompareFunction.NotEqual:\n        return WebGL2RenderingContext.NOTEQUAL;\n      case CompareFunction.GreaterEqual:\n        return WebGL2RenderingContext.GEQUAL;\n      case CompareFunction.Always:\n        return WebGL2RenderingContext.ALWAYS;\n    }\n  }\n\n  /** Whether to enable the depth test. */\n  enabled: boolean = true;\n  /** Whether the depth value can be written.*/\n  writeEnabled: boolean = true;\n  /** Depth comparison function. */\n  compareFunction: CompareFunction = CompareFunction.Less;\n\n  /**\n   * @internal\n   * Apply the current depth state by comparing with the last depth state.\n   */\n  _apply(hardwareRenderer: HardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.depthState);\n  }\n\n  private _platformApply(rhi: HardwareRenderer, lastState: DepthState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const { enabled, compareFunction, writeEnabled } = this;\n\n    if (enabled != lastState.enabled) {\n      if (enabled) {\n        gl.enable(gl.DEPTH_TEST);\n      } else {\n        gl.disable(gl.DEPTH_TEST);\n      }\n      lastState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply compare func.\n      if (compareFunction != lastState.compareFunction) {\n        gl.depthFunc(DepthState._getGLCompareFunction(compareFunction));\n        lastState.compareFunction = compareFunction;\n      }\n\n      // apply write enabled.\n      if (writeEnabled != lastState.writeEnabled) {\n        gl.depthMask(writeEnabled);\n        lastState.writeEnabled = writeEnabled;\n      }\n    }\n  }\n}\n", "import { HardwareRenderer } from \"../../HardwareRenderer\";\nimport { CullMode } from \"../enums/CullMode\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Raster state.\n */\nexport class RasterState {\n  /** specifies whether or not front- and/or back-facing polygons can be culled. */\n  cullMode: CullMode = CullMode.Back;\n  /** the multiplier by which an implementation-specific value is multiplied with to create a constant depth offset. */\n  depthBias: number = 0;\n  /** the scale factor for the variable depth offset for each polygon. */\n  slopeScaledDepthBias: number = 0;\n\n  /** @internal */\n  _cullFaceEnable: boolean = true;\n\n  /**\n   * @internal\n   */\n  _apply(hardwareRenderer: HardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.rasterState);\n  }\n\n  private _platformApply(rhi: HardwareRenderer, lastState: RasterState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const { cullMode, depthBias, slopeScaledDepthBias } = this;\n\n    const cullFaceEnable = cullMode !== CullMode.Off;\n    if (cullFaceEnable !== lastState._cullFaceEnable) {\n      if (cullFaceEnable) {\n        gl.enable(gl.CULL_FACE);\n      } else {\n        gl.disable(gl.CULL_FACE);\n      }\n      lastState._cullFaceEnable = cullFaceEnable;\n    }\n\n    // apply front face.\n    if (cullFaceEnable) {\n      if (cullMode !== lastState.cullMode) {\n        if (cullMode == CullMode.Back) {\n          gl.cullFace(gl.BACK);\n        } else {\n          gl.cullFace(gl.FRONT);\n        }\n        lastState.cullMode = cullMode;\n      }\n    }\n\n    // apply polygonOffset.\n    if (depthBias !== lastState.depthBias || slopeScaledDepthBias !== lastState.slopeScaledDepthBias) {\n      if (depthBias !== 0 || slopeScaledDepthBias !== 0) {\n        gl.enable(gl.POLYGON_OFFSET_FILL);\n        gl.polygonOffset(slopeScaledDepthBias, depthBias);\n      } else {\n        gl.disable(gl.POLYGON_OFFSET_FILL);\n      }\n      lastState.depthBias = depthBias;\n      lastState.slopeScaledDepthBias = slopeScaledDepthBias;\n    }\n  }\n}\n", "import { HardwareRenderer } from \"../../HardwareRenderer\";\nimport { CompareFunction } from \"../enums/CompareFunction\";\nimport { StencilOperation } from \"../enums/StencilOperation\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Stencil state.\n */\nexport class StencilState {\n  private static _getGLCompareFunction(compareFunction: CompareFunction): number {\n    switch (compareFunction) {\n      case CompareFunction.Never:\n        return WebGLRenderingContext.NEVER;\n      case CompareFunction.Less:\n        return WebGLRenderingContext.LESS;\n      case CompareFunction.Equal:\n        return WebGLRenderingContext.EQUAL;\n      case CompareFunction.LessEqual:\n        return WebGLRenderingContext.LEQUAL;\n      case CompareFunction.Greater:\n        return WebGLRenderingContext.GREATER;\n      case CompareFunction.NotEqual:\n        return WebGLRenderingContext.NOTEQUAL;\n      case CompareFunction.GreaterEqual:\n        return WebGLRenderingContext.GEQUAL;\n      case CompareFunction.Always:\n        return WebGLRenderingContext.ALWAYS;\n    }\n  }\n\n  private static _getGLStencilOperation(compareFunction: StencilOperation): number {\n    switch (compareFunction) {\n      case StencilOperation.Keep:\n        return WebGLRenderingContext.KEEP;\n      case StencilOperation.Zero:\n        return WebGLRenderingContext.ZERO;\n      case StencilOperation.Replace:\n        return WebGLRenderingContext.REPLACE;\n      case StencilOperation.IncrementSaturate:\n        return WebGLRenderingContext.INCR;\n      case StencilOperation.DecrementSaturate:\n        return WebGLRenderingContext.DECR;\n      case StencilOperation.Invert:\n        return WebGLRenderingContext.INVERT;\n      case StencilOperation.IncrementWrap:\n        return WebGLRenderingContext.INCR_WRAP;\n      case StencilOperation.DecrementWrap:\n        return WebGLRenderingContext.DECR_WRAP;\n    }\n  }\n\n  /** Whether to enable stencil test. */\n  enabled: boolean = false;\n  /** Write the reference value of the stencil buffer. */\n  referenceValue: number = 0;\n  /** Specifying a bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done. */\n  mask: number = 0xff;\n  /** Specifying a bit mask to enable or disable writing of individual bits in the stencil planes. */\n  writeMask: number = 0xff;\n  /** The comparison function of the reference value of the front face of the geometry and the current buffer storage value. */\n  compareFunctionFront: CompareFunction = CompareFunction.Always;\n  /** The comparison function of the reference value of the back of the geometry and the current buffer storage value. */\n  compareFunctionBack: CompareFunction = CompareFunction.Always;\n  /** specifying the function to use for front face when both the stencil test and the depth test pass. */\n  passOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when both the stencil test and the depth test pass. */\n  passOperationBack: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for front face when the stencil test fails. */\n  failOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when the stencil test fails. */\n  failOperationBack: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for front face when the stencil test passes, but the depth test fails. */\n  zFailOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when the stencil test passes, but the depth test fails. */\n  zFailOperationBack: StencilOperation = StencilOperation.Keep;\n\n  /**\n   * @internal\n   */\n  _apply(hardwareRenderer: HardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.stencilState);\n  }\n\n  private _platformApply(rhi: HardwareRenderer, lastState: StencilState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const {\n      enabled,\n      referenceValue,\n      mask,\n      compareFunctionFront,\n      compareFunctionBack,\n      failOperationFront,\n      zFailOperationFront,\n      passOperationFront,\n      failOperationBack,\n      zFailOperationBack,\n      passOperationBack,\n      writeMask\n    } = this;\n\n    if (enabled != lastState.enabled) {\n      if (enabled) {\n        gl.enable(gl.STENCIL_TEST);\n      } else {\n        gl.disable(WebGLRenderingContext.STENCIL_TEST);\n      }\n      lastState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply stencil func.\n      const referenceOrMaskChange = referenceValue !== lastState.referenceValue || mask !== lastState.mask;\n      if (referenceOrMaskChange || compareFunctionFront !== lastState.compareFunctionFront) {\n        gl.stencilFuncSeparate(\n          gl.FRONT,\n          StencilState._getGLCompareFunction(compareFunctionFront),\n          referenceValue,\n          mask\n        );\n        lastState.compareFunctionFront = compareFunctionFront;\n      }\n\n      if (referenceOrMaskChange || compareFunctionBack !== lastState.compareFunctionBack) {\n        gl.stencilFuncSeparate(gl.BACK, StencilState._getGLCompareFunction(compareFunctionBack), referenceValue, mask);\n        lastState.compareFunctionBack = this.compareFunctionBack;\n      }\n      if (referenceOrMaskChange) {\n        lastState.referenceValue = this.referenceValue;\n        lastState.mask = this.mask;\n      }\n\n      // apply stencil operation.\n      if (\n        failOperationFront !== lastState.failOperationFront ||\n        zFailOperationFront !== lastState.zFailOperationFront ||\n        passOperationFront !== lastState.passOperationFront\n      ) {\n        gl.stencilOpSeparate(\n          gl.FRONT,\n          StencilState._getGLStencilOperation(failOperationFront),\n          StencilState._getGLStencilOperation(zFailOperationFront),\n          StencilState._getGLStencilOperation(passOperationFront)\n        );\n        lastState.failOperationFront = failOperationFront;\n        lastState.zFailOperationFront = zFailOperationFront;\n        lastState.passOperationFront = passOperationFront;\n      }\n\n      if (\n        failOperationBack !== lastState.failOperationBack ||\n        zFailOperationBack !== lastState.zFailOperationBack ||\n        passOperationBack !== lastState.passOperationBack\n      ) {\n        gl.stencilOpSeparate(\n          gl.BACK,\n          StencilState._getGLStencilOperation(failOperationBack),\n          StencilState._getGLStencilOperation(zFailOperationBack),\n          StencilState._getGLStencilOperation(passOperationBack)\n        );\n        lastState.failOperationBack = failOperationBack;\n        lastState.zFailOperationBack = zFailOperationBack;\n        lastState.passOperationBack = passOperationBack;\n      }\n\n      // apply write mask.\n      if (writeMask !== lastState.writeMask) {\n        gl.stencilMask(writeMask);\n        lastState.writeMask = writeMask;\n      }\n    }\n  }\n}\n", "import { Engine } from \"../../Engine\";\nimport { BlendState } from \"./BlendState\";\nimport { DepthState } from \"./DepthState\";\nimport { RasterState } from \"./RasterState\";\nimport { StencilState } from \"./StencilState\";\n\n/**\n * Render state.\n */\nexport class RenderState {\n  /** Blend state. */\n  readonly blendState: BlendState = new BlendState();\n  /** Depth state. */\n  readonly depthState: DepthState = new DepthState();\n  /** Stencil state. */\n  readonly stencilState: StencilState = new StencilState();\n  /** Raster state. */\n  readonly rasterState: RasterState = new RasterState();\n\n  /** @internal */\n  _apply(engine: Engine): void {\n    const hardwareRenderer = engine._hardwareRenderer;\n    const lastRenderState = engine._lastRenderState;\n    this.blendState._apply(hardwareRenderer, lastRenderState);\n    this.depthState._apply(hardwareRenderer, lastRenderState);\n    this.stencilState._apply(hardwareRenderer, lastRenderState);\n    this.rasterState._apply(hardwareRenderer, lastRenderState);\n  }\n}\n", "import { ResourceManager } from \"./asset/ResourceManager\";\nimport { Event, EventDispatcher, Logger, Time } from \"./base\";\nimport { Canvas } from \"./Canvas\";\nimport { ComponentsManager } from \"./ComponentsManager\";\nimport { EngineFeature } from \"./EngineFeature\";\nimport { Entity } from \"./Entity\";\nimport { FeatureManager } from \"./FeatureManager\";\nimport { HardwareRenderer } from \"./HardwareRenderer\";\nimport { RenderElement } from \"./RenderPipeline/RenderElement\";\nimport { Scene } from \"./Scene\";\nimport { SceneManager } from \"./SceneManager\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderPool } from \"./shader/ShaderPool\";\nimport { ShaderProgramPool } from \"./shader/ShaderProgramPool\";\nimport { RenderState } from \"./shader/state/RenderState\";\n\n/** TODO: delete */\nconst engineFeatureManager = new FeatureManager<EngineFeature>();\nShaderPool.init();\n\n/**\n * Engine.\n */\nexport class Engine extends EventDispatcher {\n  _componentsManager: ComponentsManager = new ComponentsManager();\n  _hardwareRenderer: HardwareRenderer;\n  _lastRenderState: RenderState = new RenderState();\n\n  /* @internal */\n  _renderCount: number = 0;\n  /* @internal */\n  _shaderProgramPools: ShaderProgramPool[] = [];\n\n  protected _canvas: Canvas;\n  private _resourceManager: ResourceManager = new ResourceManager(this);\n  private _sceneManager: SceneManager = new SceneManager(this);\n  private _vSyncCount: number = 1;\n  private _targetFrameRate: number = 60;\n  private _time: Time = new Time();\n  private _isPaused: boolean = true;\n  private _requestId: number;\n  private _timeoutId: number;\n  private _vSyncCounter: number = 1;\n  private _targetFrameInterval: number = 1000 / 60;\n\n  private _animate = () => {\n    if (this._vSyncCount) {\n      this._requestId = requestAnimationFrame(this._animate);\n      if (this._vSyncCounter++ % this._vSyncCount === 0) {\n        this.update();\n        this._vSyncCounter = 1;\n      }\n    } else {\n      this._timeoutId = window.setTimeout(this._animate, this._targetFrameInterval);\n      this.update();\n    }\n  };\n\n  /**\n   * The canvas to use for rendering.\n   * @readonly\n   */\n  get canvas(): Canvas {\n    return this._canvas;\n  }\n\n  /**\n   * Get the resource manager.\n   * @readonly\n   */\n  get resourceManager(): ResourceManager {\n    return this._resourceManager;\n  }\n\n  /**\n   * Get the scene manager.\n   * @readonly\n   */\n  get sceneManager(): SceneManager {\n    return this._sceneManager;\n  }\n\n  /**\n   * Get the Time class.\n   * @readonly\n   */\n  get time(): Time {\n    return this._time;\n  }\n\n  /**\n   * Whether the engine is paused.\n   * @readonly\n   */\n  get isPaused(): boolean {\n    return this._isPaused;\n  }\n\n  /**\n   * The number of vertical synchronization means the number of vertical blanking for one frame.\n   * @remarks 0 means that the vertical synchronization is turned off.\n   */\n  get vSyncCount(): number {\n    return this._vSyncCount;\n  }\n\n  set vSyncCount(value: number) {\n    this._vSyncCount = Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * Set the target frame rate you want to achieve.\n   * @remarks\n   * It only takes effect when vSyncCount = 0 (ie, vertical synchronization is turned off).\n   * The larger the value, the higher the target frame rate, Number.POSITIVE_INFINIT represents the infinite target frame rate.\n   */\n  get targetFrameRate(): number {\n    return this._targetFrameRate;\n  }\n\n  set targetFrameRate(value: number) {\n    value = Math.max(0.000001, value);\n    this._targetFrameRate = value;\n    this._targetFrameInterval = 1000 / value;\n  }\n\n  /**\n   * Graphics API renderer.\n   * @deprecated\n   */\n  get renderhardware(): HardwareRenderer {\n    return this._hardwareRenderer;\n  }\n\n  /**\n   * Create engine.\n   * @param canvas - The canvas to use for rendering\n   * @param hardwareRenderer - Graphics API renderer\n   */\n  constructor(canvas: Canvas, hardwareRenderer: HardwareRenderer) {\n    super(null);\n    this._hardwareRenderer = hardwareRenderer;\n    this._hardwareRenderer.init(canvas);\n    this._canvas = canvas;\n    // @todo delete\n    engineFeatureManager.addObject(this);\n    this._sceneManager.activeScene = new Scene(this, \"DefaultScene\");\n  }\n\n  /**\n   * Create an entity.\n   * @param name - The name of the entity\n   * @returns Entity\n   */\n  createEntity(name?: string): Entity {\n    return new Entity(this, name);\n  }\n\n  /**\n   * Pause the engine.\n   */\n  pause(): void {\n    this._isPaused = true;\n    cancelAnimationFrame(this._requestId);\n    clearTimeout(this._timeoutId);\n  }\n\n  /**\n   * Resume the engine.\n   */\n  resume(): void {\n    if (!this._isPaused) return;\n    this._isPaused = false;\n    this.time.reset();\n    requestAnimationFrame(this._animate);\n  }\n\n  /**\n   * Update the engine loop manually. If you call engine.run(), you generally don't need to call this function.\n   */\n  update(): void {\n    const time = this._time;\n    const deltaTime = time.deltaTime;\n\n    time.tick();\n    RenderElement._restPool();\n\n    engineFeatureManager.callFeatureMethod(this, \"preTick\", [this, this._sceneManager._activeScene]);\n\n    const scene = this._sceneManager._activeScene;\n    const componentsManager = this._componentsManager;\n    if (scene) {\n      componentsManager.callScriptOnStart();\n      componentsManager.callScriptOnUpdate(deltaTime);\n      componentsManager.callAnimationUpdate(deltaTime);\n      componentsManager.callScriptOnLateUpdate(deltaTime);\n\n      this._render(scene);\n    }\n\n    this._componentsManager.callComponentDestory();\n\n    engineFeatureManager.callFeatureMethod(this, \"postTick\", [this, this._sceneManager._activeScene]);\n  }\n\n  /**\n   * Execution engine loop.\n   */\n  run(): void {\n    // @todo: delete\n    engineFeatureManager.callFeatureMethod(this, \"preLoad\", [this]);\n    this.resume();\n    this.trigger(new Event(\"run\", this));\n  }\n\n  /**\n   * Destroy engine.\n   */\n  destroy(): void {\n    if (this._sceneManager) {\n      // -- event\n      this.trigger(new Event(\"shutdown\", this));\n      engineFeatureManager.callFeatureMethod(this, \"shutdown\", [this]);\n\n      // -- cancel animation\n      this.pause();\n\n      this._animate = null;\n\n      this._sceneManager._activeScene.destroy();\n      this._sceneManager = null;\n      this._resourceManager.gc();\n      this._resourceManager = null;\n\n      this._canvas = null;\n\n      this.features = [];\n      this._time = null;\n\n      // todo: delete\n      (engineFeatureManager as any)._objects = [];\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getShaderProgramPool(shader: Shader): ShaderProgramPool {\n    const index = shader._shaderId;\n    const shaderProgramPools = this._shaderProgramPools;\n    let pool = shaderProgramPools[index];\n    if (!pool) {\n      const length = index + 1;\n      if (length < shaderProgramPools.length) {\n        shaderProgramPools.length = length;\n      }\n      shaderProgramPools[index] = pool = new ShaderProgramPool();\n    }\n    return pool;\n  }\n\n  _render(scene: Scene): void {\n    const cameras = scene._activeCameras;\n    const componentsManager = this._componentsManager;\n    const deltaTime = this.time.deltaTime;\n    componentsManager.callRendererOnUpdate(deltaTime);\n\n    scene._updateShaderData();\n\n    if (cameras.length > 0) {\n      // Sort on priority\n      //@ts-ignore\n      cameras.sort((camera1, camera2) => camera1.priority - camera2.priority);\n      for (let i = 0, l = cameras.length; i < l; i++) {\n        const camera = cameras[i];\n        const cameraEntity = camera.entity;\n        if (camera.enabled && cameraEntity.isActiveInHierarchy) {\n          componentsManager.callCameraOnBeginRender(camera);\n          Scene.sceneFeatureManager.callFeatureMethod(scene, \"preRender\", [scene, camera]); //TODO: will be removed\n          camera.render();\n          Scene.sceneFeatureManager.callFeatureMethod(scene, \"postRender\", [scene, camera]); //TODO: will be removed\n          componentsManager.callCameraOnEndRender(camera);\n        }\n      }\n    } else {\n      Logger.debug(\"NO active camera.\");\n    }\n  }\n\n  //-----------------------------------------@deprecated-----------------------------------\n\n  findFeature(Feature) {\n    return engineFeatureManager.findFeature(this, Feature);\n  }\n\n  static registerFeature(Feature: new () => EngineFeature): void {\n    engineFeatureManager.registerFeature(Feature);\n  }\n\n  features: EngineFeature[] = [];\n}\n", "/**\n * System info.\n */\nexport class SystemInfo {\n  /**\n   * The pixel ratio of the device.\n   */\n  static get devicePixelRatio(): number {\n    return window.devicePixelRatio;\n  }\n}\n", "import { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Engine feature plug-in.\n * @deprecated\n */\nexport class EngineFeature {\n  /**\n   * Callback before the engine main loop runs,used to load resource.\n   * @param engine - Engine\n   */\n  public preLoad(engine: Engine): void {}\n\n  /**\n   * Callback before every engine tick.\n   * @param engine - Engine\n   * @param currentScene - Scene\n   */\n  public preTick(engine: Engine, currentScene: Scene): void {}\n\n  /**\n   * Callback after every engine tick.\n   * @param  engine - Engine\n   */\n  public postTick(engine: Engine, currentScene: Scene): void {}\n\n  /**\n   * Callback after the engine is destroyed.\n   * @param engine - Engine\n   */\n  public shutdown(engine: Engine): void {}\n}\n", "import { Camera } from \"./Camera\";\nimport { ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\n\n/**\n * Script class, used for logic writing.\n */\nexport class Script extends Component {\n  /** @internal */\n  @ignoreClone\n  _started: boolean = false;\n  /** @internal */\n  @ignoreClone\n  _onStartIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onLateUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPreRenderIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPostRenderIndex: number = -1;\n\n  /**\n   * Called when be enabled first time, only once.\n   */\n  onAwake(): void {}\n\n  /**\n   * Called when be enabled.\n   */\n  onEnable(): void {}\n\n  /**\n   * Called before the frame-level loop start for the first time, only once.\n   */\n  onStart(): void {}\n\n  /**\n   * The main loop, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onUpdate(deltaTime: number): void {}\n\n  /**\n   * Called after the onUpdate finished, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onLateUpdate(deltaTime: number): void {}\n\n  /**\n   * Called before camera rendering, called per camera.\n   * @param camera - Current camera.\n   */\n  onBeginRender(camera: Camera): void {}\n\n  /**\n   * Called after camera rendering, called per camera.\n   * @param camera - Current camera.\n   */\n  onEndRender(camera: Camera): void {}\n\n  /**\n   * Called when be diabled.\n   */\n  onDisable(): void {}\n\n  /**\n   * Called at the end of the destroyed frame.\n   */\n  onDestroy(): void {}\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onAwake(): void {\n    this.onAwake();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onEnable(): void {\n    const componentsManager = this.engine._componentsManager;\n    const prototype = Script.prototype;\n    if (!this._started) {\n      componentsManager.addOnStartScript(this);\n    }\n    if (this.onUpdate !== prototype.onUpdate) {\n      componentsManager.addOnUpdateScript(this);\n    }\n    if (this.onLateUpdate !== prototype.onLateUpdate) {\n      componentsManager.addOnLateUpdateScript(this);\n    }\n    this.onEnable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDisable(): void {\n    const componentsManager = this.engine._componentsManager;\n    // Use \"xxIndex\" is more safe.\n    // When call onDisable it maybe it still not in script queue,for example write \"entity.isActive = false\" in onWake().\n    if (this._onStartIndex !== -1) {\n      componentsManager.removeOnStartScript(this);\n    }\n    if (this._onUpdateIndex !== -1) {\n      componentsManager.removeOnUpdateScript(this);\n    }\n    if (this._onLateUpdateIndex !== -1) {\n      componentsManager.removeOnLateUpdateScript(this);\n    }\n    this.onDisable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDestroy(): void {\n    this.engine._componentsManager.addDestoryComponent(this);\n  }\n}\n", "import { BoundingBox, Matrix, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"./Camera\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { Shader } from \"./shader\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * Renderable components.\n */\nexport abstract class Renderer extends Component {\n  private static _localMatrixProperty = Shader.getPropertyByName(\"u_localMat\");\n  private static _worldMatrixProperty = Shader.getPropertyByName(\"u_modelMat\");\n  private static _mvMatrixProperty = Shader.getPropertyByName(\"u_MVMat\");\n  private static _mvpMatrixProperty = Shader.getPropertyByName(\"u_MVPMat\");\n  private static _mvInvMatrixProperty = Shader.getPropertyByName(\"u_MVInvMat\");\n  private static _normalMatrixProperty = Shader.getPropertyByName(\"u_normalMat\");\n\n  /** ShaderData related to renderer. */\n  @deepClone\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Renderer);\n  /** Whether it is clipped by the frustum, needs to be turned on camera.enableFrustumCulling\u3002 */\n  @ignoreClone\n  isCulled: boolean = false;\n\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n\n  /** @internal */\n  @ignoreClone\n  _rendererIndex: number = -1;\n\n  /** @internal */\n  @ignoreClone\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n\n  @ignoreClone\n  protected _overrideUpdate: boolean = false;\n\n  @ignoreClone\n  private _transformChangeFlag: UpdateFlag;\n  @deepClone\n  private _bounds: BoundingBox = new BoundingBox(new Vector3(), new Vector3());\n  @ignoreClone\n  private _mvMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _mvpMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _mvInvMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _normalMatrix: Matrix = new Matrix();\n\n  /**\n   * The bounding volume of the renderer.\n   */\n  get bounds(): BoundingBox {\n    const changeFlag = this._transformChangeFlag;\n    if (changeFlag.flag) {\n      this._updateBounds(this._bounds);\n      changeFlag.flag = false;\n    }\n    return this._bounds;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    const prototype = Renderer.prototype;\n    this._overrideUpdate = this.update !== prototype.update;\n    this._transformChangeFlag = this.entity.transform.registerWorldChangeFlag();\n    this.shaderData._addRefCount(1);\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(context: RenderContext) {\n    const shaderData = this.shaderData;\n    const worldMatrix = this.entity.transform.worldMatrix;\n    const mvMatrix = this._mvMatrix;\n    const mvpMatrix = this._mvpMatrix;\n    const mvInvMatrix = this._mvInvMatrix;\n    const normalMatrix = this._normalMatrix;\n\n    Matrix.multiply(context._camera.viewMatrix, worldMatrix, mvMatrix);\n    Matrix.multiply(context._viewProjectMatrix, worldMatrix, mvpMatrix);\n    Matrix.invert(mvMatrix, mvInvMatrix);\n    Matrix.invert(worldMatrix, normalMatrix);\n    normalMatrix.transpose();\n\n    shaderData.setMatrix(Renderer._localMatrixProperty, this.entity.transform.localMatrix);\n    shaderData.setMatrix(Renderer._worldMatrixProperty, worldMatrix);\n    shaderData.setMatrix(Renderer._mvMatrixProperty, mvMatrix);\n    shaderData.setMatrix(Renderer._mvpMatrixProperty, mvpMatrix);\n    shaderData.setMatrix(Renderer._mvInvMatrixProperty, mvInvMatrix);\n    shaderData.setMatrix(Renderer._normalMatrixProperty, normalMatrix);\n  }\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {\n    const flag = this._transformChangeFlag;\n    if (flag) {\n      flag.destroy();\n      this._transformChangeFlag = null;\n    }\n    this.shaderData._addRefCount(-1);\n  }\n\n  abstract render(camera: Camera): void;\n\n  update(deltaTime: number): void {}\n\n  protected _updateBounds(worldBounds: any): void {}\n\n  _onEnable() {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.addOnUpdateRenderers(this);\n    }\n    componentsManager.addRenderer(this);\n  }\n\n  _onDisable() {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.removeOnUpdateRenderers(this);\n    }\n    componentsManager.removeRenderer(this);\n  }\n\n  _render(camera: Camera) {\n    this.render(camera);\n  }\n}\n", "/**\n * Transparent mode.\n */\nexport enum AlphaMode {\n  /** Opaque mode. */\n  Opaque,\n  /** Color blending mode. */\n  Blend,\n  /** Transparency cutoff mode. */\n  CutOff\n}\n", "import { IClone } from \"@oasis-engine/design\";\nimport { RefObject } from \"../asset/RefObject\";\nimport { CloneManager } from \"../clone/CloneManager\";\nimport { Engine } from \"../Engine\";\nimport { RenderElement } from \"../RenderPipeline/RenderElement\";\nimport { ShaderDataGroup } from \"../shader/enums/ShaderDataGroup\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { RenderState } from \"../shader/state/RenderState\";\nimport { RenderQueueType } from \"./enums/RenderQueueType\";\n\n/**\n * Material.\n */\nexport class Material extends RefObject implements IClone {\n  /** Shader used by the material. */\n  shader: Shader;\n  /** Render queue type. */\n  renderQueueType: RenderQueueType = RenderQueueType.Opaque;\n  /** Shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Material);\n  /** Render state. */\n  readonly renderState: RenderState = new RenderState(); // todo: later will as a part of shaderData when shader effect frame is OK, that is more powerful and flexible.\n\n  /**\n   * Create a material instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  constructor(engine: Engine, shader: Shader) {\n    super(engine);\n    this.shader = shader;\n  }\n\n  /**\n   * Clone and return the instance.\n   */\n  clone(): Material {\n    const dest = new Material(this._engine, this.shader);\n    this.cloneTo(dest);\n    return dest;\n  }\n\n  /**\n   * Clone to the target material.\n   * @param target - target material\n   */\n  cloneTo(target: Material): void {\n    target.shader = this.shader;\n    target.renderQueueType = this.renderQueueType;\n    this.shaderData.cloneTo(target.shaderData);\n    CloneManager.deepCloneObject(this.renderState, target.renderState);\n  }\n\n  /**\n   * @override\n   */\n  _addRefCount(value: number): void {\n    super._addRefCount(value);\n    this.shaderData._addRefCount(value);\n  }\n\n  /**\n   * @internal\n   * @todo:temporary solution\n   */\n  _preRender(renderElement: RenderElement) {}\n\n  /**\n   * @override\n   */\n  protected _onDestroy(): void {}\n}\n", "import { Color } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { BlendFactor } from \"../shader/enums/BlendFactor\";\nimport { BlendOperation } from \"../shader/enums/BlendOperation\";\nimport { CullMode } from \"../shader/enums/CullMode\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { AlphaMode } from \"./enums/AlphaMode\";\nimport { RenderQueueType } from \"./enums/RenderQueueType\";\nimport { Material } from \"./Material\";\n\n/**\n * Blinn-phong Material.\n */\nexport class BlinnPhongMaterial extends Material {\n  private _emissiveColor: Color = new Color(0, 0, 0, 1);\n  private _diffuseColor: Color = new Color(1, 1, 1, 1);\n  private _specularColor: Color = new Color(1, 1, 1, 1);\n  private _emissiveTexture: Texture2D;\n  private _diffuseTexture: Texture2D;\n  private _specularTexture: Texture2D;\n  private _shininess: number = 16;\n  private _alphaMode: AlphaMode = AlphaMode.Opaque;\n  private _doubleSided: boolean = false;\n\n  /**\n   * Emissive color.\n   */\n  get emissiveColor(): Color {\n    return this._emissiveColor;\n  }\n\n  set emissiveColor(value: Color) {\n    this._emissiveColor = value;\n    this.shaderData.setColor(\"u_emissiveColor\", value);\n  }\n\n  /**\n   * Emissive texture.\n   */\n  get emissiveTexture(): Texture2D {\n    return this._emissiveTexture;\n  }\n\n  set emissiveTexture(value: Texture2D) {\n    this._emissiveTexture = value;\n\n    if (value) {\n      this.shaderData.enableMacro(\"O3_EMISSIVE_TEXTURE\");\n      this.shaderData.setTexture(\"u_emissiveTexture\", value);\n    } else {\n      this.shaderData.disableMacro(\"O3_EMISSIVE_TEXTURE\");\n    }\n  }\n\n  /**\n   * Diffuse color.\n   */\n  get diffuseColor(): Color {\n    return this._diffuseColor;\n  }\n\n  set diffuseColor(value: Color) {\n    this._diffuseColor = value;\n    this.shaderData.setColor(\"u_diffuseColor\", value);\n  }\n\n  /**\n   * Diffuse texture.\n   */\n  get diffuseTexture(): Texture2D {\n    return this._diffuseTexture;\n  }\n\n  set diffuseTexture(value: Texture2D) {\n    this._diffuseTexture = value;\n\n    if (value) {\n      this.shaderData.enableMacro(\"O3_DIFFUSE_TEXTURE\");\n      this.shaderData.setTexture(\"u_diffuseTexture\", value);\n    } else {\n      this.shaderData.disableMacro(\"O3_DIFFUSE_TEXTURE\");\n    }\n  }\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this._specularColor;\n  }\n\n  set specularColor(value: Color) {\n    this._specularColor = value;\n    this.shaderData.setColor(\"u_specularColor\", value);\n  }\n\n  /**\n   * Specular texture.\n   */\n  get specularTexture(): Texture2D {\n    return this._specularTexture;\n  }\n\n  set specularTexture(value: Texture2D) {\n    this._specularTexture = value;\n\n    if (value) {\n      this.shaderData.enableMacro(\"O3_SPECULAR_TEXTURE\");\n      this.shaderData.setTexture(\"u_specularTexture\", value);\n    } else {\n      this.shaderData.disableMacro(\"O3_SPECULAR_TEXTURE\");\n    }\n  }\n\n  /**\n   * Set the specular reflection coefficient, the larger the value, the more convergent the specular reflection effect.\n   */\n  get shininess(): number {\n    return this._shininess;\n  }\n\n  set shininess(value: number) {\n    this._shininess = value;\n    this.shaderData.setFloat(\"u_shininess\", value);\n  }\n\n  /**\n   * Transparent mode.\n   */\n  get alphaMode(): AlphaMode {\n    return this._alphaMode;\n  }\n\n  set alphaMode(v: AlphaMode) {\n    const target = this.renderState.blendState.targetBlendState;\n    const depthState = this.renderState.depthState;\n\n    switch (v) {\n      case AlphaMode.Opaque:\n      case AlphaMode.CutOff:\n        {\n          target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.One;\n          target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.Zero;\n          target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n          depthState.writeEnabled = true;\n          this.renderQueueType = RenderQueueType.Opaque;\n        }\n        break;\n      case AlphaMode.Blend:\n        {\n          target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;\n          target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n          target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n          depthState.writeEnabled = false;\n          this.renderQueueType = RenderQueueType.Transparent;\n        }\n        break;\n    }\n  }\n\n  /**\n   * Whether to render both sides.\n   * @remarks Only the front side is rendered by default\n   */\n  get doubleSided(): boolean {\n    return this._doubleSided;\n  }\n\n  set doubleSided(v: boolean) {\n    if (v) {\n      this.renderState.rasterState.cullMode = CullMode.Off;\n    } else {\n      this.renderState.rasterState.cullMode = CullMode.Back;\n    }\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"blinn-phong\"));\n    this.shaderData.enableMacro(\"O3_NEED_WORLDPOS\");\n\n    this.emissiveColor = this._emissiveColor;\n    this.diffuseColor = this._diffuseColor;\n    this.specularColor = this._specularColor;\n    this.shininess = this._shininess;\n  }\n\n  /**\n   * @override\n   */\n  clone(): BlinnPhongMaterial {\n    var dest: BlinnPhongMaterial = new BlinnPhongMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n", "import { Color, Matrix } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { BlendFactor } from \"../shader/enums/BlendFactor\";\nimport { BlendOperation } from \"../shader/enums/BlendOperation\";\nimport { CullMode } from \"../shader/enums/CullMode\";\nimport { Shader } from \"../shader/Shader\";\nimport { TextureCubeMap } from \"../texture\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { AlphaMode } from \"./enums/AlphaMode\";\nimport { RenderQueueType } from \"./enums/RenderQueueType\";\nimport { Material } from \"./Material\";\n\n/**\n * PBR (Physically-Based Rendering) Material.\n */\nexport abstract class PBRBaseMaterial extends Material {\n  private _baseColor: Color = new Color(1, 1, 1, 1);\n  private _normalScale: number = 1;\n  private _emissiveColor = new Color(0, 0, 0, 1);\n  private _occlusionStrength: number = 1;\n  private _alphaCutoff: number = 0.5;\n  private _envMapIntensity: number = 1;\n  private _refractionRatio: number = 1 / 1.33;\n  private _refractionDepth: number = 1;\n  private _perturbationUOffset: number = 0;\n  private _perturbationVOffset: number = 0;\n  private _PTMMatrix = new Matrix(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0);\n  private _baseColorTexture: Texture2D;\n  private _opacityTexture: Texture2D;\n  private _normalTexture: Texture2D;\n  private _emissiveTexture: Texture2D;\n  private _occlusionTexture: Texture2D;\n  private _reflectionTexture: TextureCubeMap;\n  private _refractionTexture: Texture2D;\n  private _perturbationTexture: Texture2D;\n\n  private _srgb: boolean = false;\n  private _srgbFast: boolean = false;\n  private _gamma: boolean = false;\n  private _getOpacityFromRGB: boolean = false;\n  private _envMapModeRefract: boolean = false;\n  private _alphaMode: AlphaMode = AlphaMode.Opaque;\n  private _doubleSided: boolean = false;\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this._baseColor;\n  }\n\n  set baseColor(v: Color) {\n    this._baseColor = v;\n    this.shaderData.setColor(\"u_baseColorFactor\", v);\n  }\n\n  /**\n   * Base color texture.\n   */\n  get baseColorTexture(): Texture2D {\n    return this._baseColorTexture;\n  }\n\n  set baseColorTexture(v: Texture2D) {\n    this._baseColorTexture = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"HAS_BASECOLORMAP\");\n      this.shaderData.setTexture(\"u_baseColorSampler\", v);\n    } else {\n      this.shaderData.disableMacro(\"HAS_BASECOLORMAP\");\n    }\n  }\n\n  /**\n   * Transparent coefficient.\n   */\n  get opacity(): number {\n    return this.baseColor.a;\n  }\n\n  set opacity(val: number) {\n    this.baseColor.a = val;\n  }\n\n  /**\n   * Transparent texture.\n   * */\n  get opacityTexture(): Texture2D {\n    return this._opacityTexture;\n  }\n\n  set opacityTexture(v: Texture2D) {\n    this._opacityTexture = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"HAS_OPACITYMAP\");\n      this.shaderData.setTexture(\"u_opacitySampler\", v);\n    } else {\n      this.shaderData.disableMacro(\"HAS_OPACITYMAP\");\n    }\n  }\n\n  /**\n   * Normal texture.\n   */\n  get normalTexture(): Texture2D {\n    return this._normalTexture;\n  }\n\n  set normalTexture(v: Texture2D) {\n    this._normalTexture = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"O3_HAS_NORMALMAP\");\n      this.shaderData.setTexture(\"u_normalSampler\", v);\n    } else {\n      this.shaderData.disableMacro(\"O3_HAS_NORMALMAP\");\n    }\n  }\n\n  /**\n   * Normal scale factor.\n   */\n  get normalScale(): number {\n    return this._normalScale;\n  }\n\n  set normalScale(v: number) {\n    this._normalScale = v;\n    this.shaderData.setFloat(\"u_normalScale\", v);\n  }\n\n  /**\n   * Emissive texture.\n   */\n  get emissiveTexture(): Texture2D {\n    return this._emissiveTexture;\n  }\n\n  set emissiveTexture(v: Texture2D) {\n    this._emissiveTexture = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"HAS_EMISSIVEMAP\");\n      this.shaderData.setTexture(\"u_emissiveSampler\", v);\n    } else {\n      this.shaderData.disableMacro(\"HAS_EMISSIVEMAP\");\n    }\n  }\n\n  /**\n   * Emissive color.\n   */\n  get emissiveColor(): Color {\n    return this._emissiveColor;\n  }\n\n  set emissiveColor(v: Color) {\n    this._emissiveColor = v;\n    this.shaderData.setColor(\"u_emissiveFactor\", v);\n  }\n\n  /**\n   * Occlusive texture.\n   */\n  get occlusionTexture(): Texture2D {\n    return this._occlusionTexture;\n  }\n\n  set occlusionTexture(v: Texture2D) {\n    this._occlusionTexture = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"HAS_OCCLUSIONMAP\");\n      this.shaderData.setTexture(\"u_occlusionSampler\", v);\n    } else {\n      this.shaderData.disableMacro(\"HAS_OCCLUSIONMAP\");\n    }\n  }\n\n  /**\n   * Occlusive intensity.\n   */\n  get occlusionStrength(): number {\n    return this._occlusionStrength;\n  }\n\n  set occlusionStrength(v: number) {\n    this._occlusionStrength = v;\n    this.shaderData.setFloat(\"u_occlusionStrength\", v);\n  }\n\n  /**\n   * Alpha cutoff value.\n   * @remarks fragments with alpha channel lower than cutoff value will be discarded.\n   */\n  get alphaCutoff(): number {\n    return this._alphaCutoff;\n  }\n\n  set alphaCutoff(v: number) {\n    this._alphaCutoff = v;\n    this.shaderData.setFloat(\"u_alphaCutoff\", v);\n  }\n\n  /**\n   * Reflection texture.\n   * @remarks if this texture is not set, the global environmentMapLight's specularTexture will be used.\n   */\n  get reflectionTexture(): TextureCubeMap {\n    return this._reflectionTexture;\n  }\n\n  set reflectionTexture(v: TextureCubeMap) {\n    this._reflectionTexture = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"HAS_REFLECTIONMAP\");\n      this.shaderData.setTexture(\"u_reflectionSampler\", v);\n    } else {\n      this.shaderData.disableMacro(\"HAS_REFLECTIONMAP\");\n    }\n  }\n\n  /**\n   * Reflection intensity.\n   */\n  get envMapIntensity(): number {\n    return this._envMapIntensity;\n  }\n\n  set envMapIntensity(v: number) {\n    this._envMapIntensity = v;\n    this.shaderData.setFloat(\"u_envMapIntensity\", v);\n  }\n\n  /**\n   * The ratio of IOR(index of refraction) from air to medium.eg. 1 / 1.33 from air to water.\n   */\n  get refractionRatio(): number {\n    return this._refractionRatio;\n  }\n\n  set refractionRatio(v: number) {\n    this._refractionRatio = v;\n    this.shaderData.setFloat(\"u_refractionRatio\", v);\n  }\n\n  /**\n   * The depth value of the local refraction texture, used to simulate the refraction distance.\n   */\n  get refractionDepth(): number {\n    return this._refractionDepth;\n  }\n\n  set refractionDepth(v: number) {\n    this._refractionDepth = v;\n    this.shaderData.setFloat(\"u_refractionDepth\", v);\n  }\n\n  /**\n   * Local refraction texture.\n   */\n  get refractionTexture(): Texture2D {\n    return this._refractionTexture;\n  }\n\n  set refractionTexture(v: Texture2D) {\n    this._refractionTexture = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"HAS_REFRACTIONMAP\");\n      this.shaderData.setTexture(\"u_refractionSampler\", v);\n      this.shaderData.setMatrix(\"u_PTMMatrix\", this._PTMMatrix);\n    } else {\n      this.shaderData.disableMacro(\"HAS_REFRACTIONMAP\");\n    }\n  }\n\n  /**\n   * Perturbation texture.\n   */\n  get perturbationTexture(): Texture2D {\n    return this._perturbationTexture;\n  }\n\n  set perturbationTexture(v: Texture2D) {\n    this._perturbationTexture = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"HAS_PERTURBATIONMAP\");\n      this.shaderData.setTexture(\"u_perturbationSampler\", v);\n    } else {\n      this.shaderData.disableMacro(\"HAS_PERTURBATIONMAP\");\n    }\n  }\n\n  /**\n   * Offset of the perturbation texture coordinate on S.\n   */\n  get perturbationUOffset(): number {\n    return this._perturbationUOffset;\n  }\n\n  set perturbationUOffset(v: number) {\n    this._perturbationUOffset = v;\n    this.shaderData.setFloat(\"u_perturbationUOffset\", v);\n  }\n\n  /**\n   * Offset of the perturbation texture coordinate on T.\n   */\n  get perturbationVOffset(): number {\n    return this._perturbationVOffset;\n  }\n\n  set perturbationVOffset(v: number) {\n    this._perturbationVOffset = v;\n    this.shaderData.setFloat(\"u_perturbationVOffset\", v);\n  }\n\n  /**\n   * Whether to use SRGB color space.\n   */\n  get srgb(): boolean {\n    return this._srgb;\n  }\n\n  set srgb(v: boolean) {\n    this._srgb = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"MANUAL_SRGB\");\n    } else {\n      this.shaderData.disableMacro(\"MANUAL_SRGB\");\n    }\n  }\n\n  /**\n   * Whether sRGB linear correction uses approximate fast algorithm.\n   * */\n  get srgbFast(): boolean {\n    return this._srgbFast;\n  }\n\n  set srgbFast(v: boolean) {\n    this._srgbFast = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"SRGB_FAST_APPROXIMATION\");\n    } else {\n      this.shaderData.disableMacro(\"SRGB_FAST_APPROXIMATION\");\n    }\n  }\n\n  /**\n   * Whether to use Gamma correction.\n   */\n  get gamma(): boolean {\n    return this._gamma;\n  }\n\n  set gamma(v: boolean) {\n    this._gamma = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"GAMMA\");\n    } else {\n      this.shaderData.disableMacro(\"GAMMA\");\n    }\n  }\n\n  /**\n   * Whether to take the brightness value of the opacityTexture as the transparency.\n   */\n  get getOpacityFromRGB(): boolean {\n    return this._getOpacityFromRGB;\n  }\n\n  set getOpacityFromRGB(v: boolean) {\n    this._getOpacityFromRGB = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"GETOPACITYFROMRGB\");\n    } else {\n      this.shaderData.disableMacro(\"GETOPACITYFROMRGB\");\n    }\n  }\n\n  /**\n   * Whether to refract global environmentMapLight, default reflection.\n   * */\n  get envMapModeRefract(): boolean {\n    return this._envMapModeRefract;\n  }\n\n  set envMapModeRefract(v: boolean) {\n    this._envMapModeRefract = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"ENVMAPMODE_REFRACT\");\n    } else {\n      this.shaderData.disableMacro(\"ENVMAPMODE_REFRACT\");\n    }\n  }\n\n  /**\n   * Transparent mode.\n   */\n  get alphaMode(): AlphaMode {\n    return this._alphaMode;\n  }\n\n  set alphaMode(v: AlphaMode) {\n    const target = this.renderState.blendState.targetBlendState;\n    const depthState = this.renderState.depthState;\n\n    this.shaderData.disableMacro(\"ALPHA_CUTOFF\");\n    this.shaderData.disableMacro(\"ALPHA_BLEND\");\n\n    switch (v) {\n      case AlphaMode.Opaque:\n        {\n          target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.One;\n          target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.Zero;\n          target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n          depthState.writeEnabled = true;\n          this.renderQueueType = RenderQueueType.Opaque;\n        }\n        break;\n      case AlphaMode.Blend:\n        {\n          this.shaderData.enableMacro(\"ALPHA_BLEND\");\n          target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;\n          target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n          target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n          depthState.writeEnabled = false;\n          this.renderQueueType = RenderQueueType.Transparent;\n        }\n        break;\n      case AlphaMode.CutOff:\n        {\n          this.shaderData.enableMacro(\"ALPHA_CUTOFF\");\n          target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.One;\n          target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.Zero;\n          target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n          depthState.writeEnabled = true;\n          this.renderQueueType = RenderQueueType.AlphaTest;\n        }\n        break;\n    }\n  }\n\n  /**\n   * Whether to render both sides.\n   * @remarks Only the front side is rendered by default\n   */\n  get doubleSided(): boolean {\n    return this._doubleSided;\n  }\n\n  set doubleSided(v: boolean) {\n    if (v) {\n      this.renderState.rasterState.cullMode = CullMode.Off;\n    } else {\n      this.renderState.rasterState.cullMode = CullMode.Back;\n    }\n  }\n\n  /**\n   * Create a pbr base material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"pbr\"));\n    this.shaderData.enableMacro(\"O3_NEED_WORLDPOS\");\n\n    this.baseColor = this._baseColor;\n    this.normalScale = this._normalScale;\n    this.emissiveColor = this._emissiveColor;\n    this.occlusionStrength = this._occlusionStrength;\n    this.alphaCutoff = this._alphaCutoff;\n    this.envMapIntensity = this._envMapIntensity;\n    this.refractionRatio = this._refractionRatio;\n    this.refractionDepth = this._refractionDepth;\n    this.perturbationUOffset = this._perturbationUOffset;\n    this.perturbationVOffset = this._perturbationVOffset;\n\n    this.srgb = this._srgb;\n    this.srgbFast = this._srgbFast;\n    this.gamma = this._gamma;\n    this.getOpacityFromRGB = this._getOpacityFromRGB;\n    this.envMapModeRefract = this._envMapModeRefract;\n    this.alphaMode = this._alphaMode;\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { PBRBaseMaterial } from \"./PBRBaseMaterial\";\n\n/**\n * PBR (Metallic-Roughness Workflow) Material.\n */\nexport class PBRMaterial extends PBRBaseMaterial {\n  private _metallicFactor: number = 1;\n  private _roughnessFactor: number = 1;\n  private _metallicTexture: Texture2D;\n  private _roughnessTexture: Texture2D;\n  private _metallicRoughnessTexture: Texture2D;\n\n  /**\n   * Metallic factor.\n   */\n  get metallicFactor(): number {\n    return this._metallicFactor;\n  }\n\n  set metallicFactor(v: number) {\n    this._metallicFactor = v;\n    this.shaderData.setFloat(\"u_metal\", v);\n  }\n\n  /**\n   * Rough factor.\n   */\n  get roughnessFactor(): number {\n    return this._roughnessFactor;\n  }\n\n  set roughnessFactor(v: number) {\n    this._roughnessFactor = v;\n    this.shaderData.setFloat(\"u_roughness\", v);\n  }\n\n  /**\n   * Metallic texture.\n   */\n  get metallicTexture(): Texture2D {\n    return this._metallicTexture;\n  }\n\n  set metallicTexture(v: Texture2D) {\n    this._metallicTexture = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"HAS_METALMAP\");\n      this.shaderData.setTexture(\"u_metallicSampler\", v);\n    } else {\n      this.shaderData.disableMacro(\"HAS_METALMAP\");\n    }\n  }\n\n  /**\n   * Rough texture.\n   */\n  get roughnessTexture(): Texture2D {\n    return this._roughnessTexture;\n  }\n\n  set roughnessTexture(v: Texture2D) {\n    this._roughnessTexture = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"HAS_ROUGHNESSMAP\");\n      this.shaderData.setTexture(\"u_roughnessSampler\", v);\n    } else {\n      this.shaderData.disableMacro(\"HAS_ROUGHNESSMAP\");\n    }\n  }\n\n  /**\n   * Metallic rough texture.\n   */\n  get metallicRoughnessTexture(): Texture2D {\n    return this._metallicRoughnessTexture;\n  }\n\n  set metallicRoughnessTexture(v: Texture2D) {\n    this._metallicRoughnessTexture = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"HAS_METALROUGHNESSMAP\");\n      this.shaderData.setTexture(\"u_metallicRoughnessSampler\", v);\n    } else {\n      this.shaderData.disableMacro(\"HAS_METALROUGHNESSMAP\");\n    }\n  }\n\n  /**\n   * Create a pbr metallic-roughness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine);\n    this.shaderData.enableMacro(\"IS_METALLIC_WORKFLOW\");\n\n    this.metallicFactor = this._metallicFactor;\n    this.roughnessFactor = this._roughnessFactor;\n  }\n\n  /**\n   * @override\n   */\n  clone(): PBRMaterial {\n    const dest = new PBRMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n", "import { Color } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { PBRBaseMaterial } from \"./PBRBaseMaterial\";\n\n/**\n * PBR (Specular-Glossiness Workflow) Material.\n */\nexport class PBRSpecularMaterial extends PBRBaseMaterial {\n  private _specularColor = new Color(1, 1, 1, 1);\n  private _glossinessFactor: number = 1;\n  private _specularGlossinessTexture: Texture2D;\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this._specularColor;\n  }\n\n  set specularColor(v: Color) {\n    this._specularColor = v;\n    this.shaderData.setColor(\"u_specularFactor\", v);\n  }\n\n  /**\n   * Glossiness factor.\n   */\n  get glossinessFactor(): number {\n    return this._glossinessFactor;\n  }\n\n  set glossinessFactor(v: number) {\n    this._glossinessFactor = v;\n    this.shaderData.setFloat(\"u_glossinessFactor\", v);\n  }\n\n  /**\n   * Specular and glossiness texture.\n   */\n  get specularGlossinessTexture(): Texture2D {\n    return this._specularGlossinessTexture;\n  }\n\n  set specularGlossinessTexture(v: Texture2D) {\n    this._specularGlossinessTexture = v;\n\n    if (v) {\n      this.shaderData.enableMacro(\"HAS_SPECULARGLOSSINESSMAP\");\n      this.shaderData.setTexture(\"u_specularGlossinessSampler\", v);\n    } else {\n      this.shaderData.disableMacro(\"HAS_SPECULARGLOSSINESSMAP\");\n    }\n  }\n\n  /**\n   * Create a pbr specular-glossiness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine);\n\n    this.specularColor = this._specularColor;\n    this.glossinessFactor = this._glossinessFactor;\n  }\n\n  /**\n   * @override\n   */\n  clone(): PBRSpecularMaterial {\n    const dest = new PBRSpecularMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n", "import { Color } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { BlendFactor } from \"../shader/enums/BlendFactor\";\nimport { BlendOperation } from \"../shader/enums/BlendOperation\";\nimport { CullMode } from \"../shader/enums/CullMode\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { AlphaMode } from \"./enums/AlphaMode\";\nimport { RenderQueueType } from \"./enums/RenderQueueType\";\nimport { Material } from \"./Material\";\n\n/**\n * Unlit Material.\n */\nexport class UnlitMaterial extends Material {\n  private _baseColor: Color = new Color(1, 1, 1, 1);\n  private _baseColorTexture: Texture2D;\n  private _alphaMode: AlphaMode = AlphaMode.Opaque;\n  private _doubleSided: boolean = false;\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this._baseColor;\n  }\n\n  set baseColor(value: Color) {\n    this._baseColor = value;\n    this.shaderData.setColor(\"u_baseColor\", value);\n  }\n\n  /**\n   * Base color texture.\n   */\n  get baseColorTexture(): Texture2D {\n    return this._baseColorTexture;\n  }\n\n  set baseColorTexture(value: Texture2D) {\n    this._baseColorTexture = value;\n\n    if (value) {\n      this.shaderData.enableMacro(\"O3_BASECOLOR_TEXTURE\");\n      this.shaderData.setTexture(\"u_baseColorTexture\", value);\n    } else {\n      this.shaderData.disableMacro(\"O3_BASECOLOR_TEXTURE\");\n    }\n  }\n\n  /**\n   * Transparent mode.\n   */\n  get alphaMode(): AlphaMode {\n    return this._alphaMode;\n  }\n\n  set alphaMode(v: AlphaMode) {\n    const target = this.renderState.blendState.targetBlendState;\n    const depthState = this.renderState.depthState;\n\n    switch (v) {\n      case AlphaMode.Opaque:\n      case AlphaMode.CutOff:\n        {\n          target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.One;\n          target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.Zero;\n          target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n          depthState.writeEnabled = true;\n          this.renderQueueType = RenderQueueType.Opaque;\n        }\n        break;\n      case AlphaMode.Blend:\n        {\n          target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;\n          target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n          target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n          depthState.writeEnabled = false;\n          this.renderQueueType = RenderQueueType.Transparent;\n        }\n        break;\n    }\n  }\n\n  /**\n   * Whether to render both sides.\n   * @remarks Only the front side is rendered by default\n   */\n  get doubleSided(): boolean {\n    return this._doubleSided;\n  }\n\n  set doubleSided(v: boolean) {\n    if (v) {\n      this.renderState.rasterState.cullMode = CullMode.Off;\n    } else {\n      this.renderState.rasterState.cullMode = CullMode.Back;\n    }\n  }\n\n  /**\n   * Create a unlit material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"unlit\"));\n    this.shaderData.enableMacro(\"OMIT_NORMAL\");\n\n    this.baseColor = this._baseColor;\n  }\n\n  /**\n   * @override\n   */\n  clone(): UnlitMaterial {\n    var dest = new UnlitMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n", "import { Vector4 } from \"@oasis-engine/math\";\nimport { ClearMode } from \"../base/Constant\";\nimport { Camera } from \"../Camera\";\nimport { Layer } from \"../Layer\";\nimport { Material } from \"../material/Material\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { RenderQueue } from \"./RenderQueue\";\n\nlet passNum = 0;\n\n/**\n * RednerPass.\n */\nclass RenderPass {\n  public name: string;\n  public enabled: boolean;\n  public priority: number;\n  public renderTarget: RenderTarget;\n  public replaceMaterial: Material;\n  public mask: Layer;\n  public renderOverride: boolean;\n  public clearMode;\n  private _clearParam;\n\n  /**\n   * Create a RenderPass.\n   * @param name - Pass name\n   * @param priority - Priority, less than 0 before the default pass, greater than 0 after the default pass\n   * @param renderTarget - The specified Render Target\n   * @param replaceMaterial -  Replaced material\n   * @param mask - Perform bit and operations with Entity.Layer to filter the objects that this Pass needs to render\n   * @param clearParam - Clear the background color of renderTarget\n   */\n  constructor(\n    name = `RENDER_PASS${passNum++}`,\n    priority = 0,\n    renderTarget = null,\n    replaceMaterial = null,\n    mask = null,\n    clearParam = new Vector4(0, 0, 0, 0)\n  ) {\n    this.name = name;\n    this.enabled = true;\n    this.priority = priority;\n    this.renderTarget = renderTarget;\n    this.replaceMaterial = replaceMaterial;\n    this.mask = mask || Layer.Everything;\n    this.renderOverride = false; // If renderOverride is set to true, you need to implement the render method\n\n    this.clearMode = ClearMode.SOLID_COLOR;\n    this._clearParam = clearParam; // PASS use render target's clearParam\n  }\n\n  /**\n   * Canvas clear parameters, the default is to use the clearColor of RenderTarget.\n   */\n  get clearParam() {\n    return this._clearParam;\n  }\n\n  set clearParam(v) {\n    this._clearParam = v;\n  }\n\n  /**\n   * Rendering callback, will be executed if renderOverride is set to true.\n   * @param camera - Camera\n   * @param queue - RenderQueue\n   */\n  render(camera: Camera, queue: RenderQueue) {}\n\n  /**\n   * Post rendering callback.\n   * @param camera - Camera\n   * @param queue - RenderQueue\n   */\n  preRender(camera: Camera, queue: RenderQueue) {}\n\n  /**\n   * Post rendering callback.\n   * @param camera - Camera\n   * @param queue - RenderQueue\n   */\n  postRender(camera: Camera, queue: RenderQueue) {}\n}\n\nexport { RenderPass };\n", "import { Vector3 } from \"@oasis-engine/math\";\nimport { ClearMode } from \"../base\";\nimport { Camera } from \"../Camera\";\nimport { RenderPass } from \"./RenderPass\";\n\n/**\n * @private\n */\nexport class SeparateSpritePass extends RenderPass {\n  private _spriteItems;\n\n  constructor(name = \"SeparateSprite\", priority = 10) {\n    super(name, priority);\n\n    this.clearMode = ClearMode.DONT_CLEAR;\n    this.renderOverride = true;\n\n    this._spriteItems = [];\n  }\n\n  get isUsed() {\n    return this._spriteItems.length > 0;\n  }\n\n  preRender() {\n    this.enabled = this.isUsed;\n  }\n\n  render(camera) {\n    const rhi = camera.renderHardware;\n\n    this._sortByDistance(camera.eyePos);\n    const items = this._spriteItems;\n    const material = camera._renderPipeline._defaultSpriteMaterial;\n\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      rhi.drawSprite(\n        material,\n        item.positionQuad,\n        item.uvRect,\n        item.tintColor,\n        item.texture,\n        item.renderMode,\n        item.camera\n      );\n    }\n\n    items.length = 0;\n  }\n\n  postRender(camera) {\n    if (this.enabled) {\n      camera.renderHardware.flushSprite(camera.engine, camera._hardwareRenderer._defaultSpriteMaterial);\n    }\n  }\n\n  _sortByDistance(eyePos) {\n    if (this._spriteItems.length > 1) {\n      this._spriteItems = this._spriteItems.sort(function (item1, item2) {\n        if (item1.component.renderPriority === item2.component.renderPriority) {\n          const pos1 = item1.component.node.worldPosition;\n          const pos2 = item2.component.node.worldPosition;\n\n          const dis = Vector3.distanceSquared(pos2, eyePos) - Vector3.distanceSquared(pos1, eyePos);\n          return dis;\n        } else {\n          return item1.component.renderPriority - item2.component.renderPriority;\n        }\n      });\n    }\n  }\n\n  pushSprite(component, positionQuad, uvRect, tintColor, texture, renderMode, camera: Camera) {\n    this._spriteItems.push({\n      component,\n      positionQuad,\n      uvRect,\n      tintColor,\n      texture,\n      renderMode,\n      camera\n    });\n  }\n}\n", "import { Vector4 } from \"@oasis-engine/math\";\nimport { ClearMode } from \"../base\";\nimport { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { Layer } from \"../Layer\";\nimport { RenderQueueType } from \"../material\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor, BlendOperation, CullMode, Shader } from \"../shader\";\nimport { TextureCubeFace } from \"../texture/enums/TextureCubeFace\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { RenderContext } from \"./RenderContext\";\nimport { RenderElement } from \"./RenderElement\";\nimport { RenderPass } from \"./RenderPass\";\nimport { RenderQueue } from \"./RenderQueue\";\nimport { SeparateSpritePass } from \"./SeparateSpritePass\";\n\n/**\n * Basic render pipeline.\n */\nexport class BasicRenderPipeline {\n  _defaultSpriteMaterial: Material;\n  protected _camera: Camera;\n  private _queue: RenderQueue;\n  private _defaultPass: RenderPass;\n  protected _renderPassArray: Array<RenderPass>;\n  private _canvasDepthPass;\n  private _separateSpritePass;\n\n  /**\n   * Create a basic render pipeline.\n   * @param camera - Camera\n   */\n  constructor(camera: Camera) {\n    this._camera = camera;\n    this._queue = new RenderQueue();\n\n    this._renderPassArray = [];\n    this._defaultPass = new RenderPass(\"default\", 0, null, null, 0);\n    this.addRenderPass(this._defaultPass);\n\n    // TODO: remove in next version.\n    const material = (this._defaultSpriteMaterial = new Material(camera.engine, Shader.find(\"Sprite\")));\n    const target = material.renderState.blendState.targetBlendState;\n    target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n    material.renderState.depthState.writeEnabled = false;\n    material.renderQueueType = RenderQueueType.Transparent;\n    material.renderState.rasterState.cullMode = CullMode.Off;\n  }\n\n  /**\n   * Default render pass.\n   */\n  get defaultRenderPass() {\n    return this._defaultPass;\n  }\n\n  /**\n   * Add render pass.\n   * @param nameOrPass - The name of this Pass or RenderPass object. When it is a name, the following parameters need to be provided\n   * @param priority - Priority, less than 0 before the default pass, greater than 0 after the default pass\n   * @param renderTarget - The specified Render Target\n   * @param replaceMaterial -  Replaced material\n   * @param mask - Perform bit and operations with Entity.Layer to filter the objects that this Pass needs to render\n   * @param clearParam - Clear the background color of renderTarget\n   */\n  addRenderPass(\n    nameOrPass: string | RenderPass,\n    priority: number = null,\n    renderTarget: RenderTarget = null,\n    replaceMaterial: Material = null,\n    mask: Layer = null,\n    clearParam = new Vector4(0, 0, 0, 0)\n  ) {\n    if (typeof nameOrPass === \"string\") {\n      const renderPass = new RenderPass(nameOrPass, priority, renderTarget, replaceMaterial, mask, clearParam);\n      this._renderPassArray.push(renderPass);\n    } else if (nameOrPass instanceof RenderPass) {\n      this._renderPassArray.push(nameOrPass);\n    }\n\n    this._renderPassArray.sort(function (p1, p2) {\n      return p1.priority - p2.priority;\n    });\n  }\n\n  /**\n   * Remove render pass by name or render pass object.\n   * @param nameOrPass - Render pass name or render pass object\n   */\n  removeRenderPass(nameOrPass: string | RenderPass): void {\n    let pass: RenderPass;\n    if (typeof nameOrPass === \"string\") pass = this.getRenderPass(nameOrPass);\n    else if (nameOrPass instanceof RenderPass) pass = nameOrPass;\n    if (pass) {\n      const idx = this._renderPassArray.indexOf(pass);\n      this._renderPassArray.splice(idx, 1);\n    }\n  }\n\n  /**\n   * Get render pass by name.\n   * @param  name - Render pass name\n   */\n  getRenderPass(name: string) {\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      const pass = this._renderPassArray[i];\n      if (pass.name === name) return pass;\n    }\n\n    return null;\n  }\n\n  /**\n   * Render queue.\n   */\n  get queue(): RenderQueue {\n    return this._queue;\n  }\n\n  /**\n   * Destroy internal resources.\n   */\n  destroy() {}\n\n  /**\n   * Perform scene rendering.\n   * @param context - Render context\n   * @param cubeFace - Render surface of cube texture\n   */\n  render(context: RenderContext, cubeFace?: TextureCubeFace) {\n    const camera = this._camera;\n    const queue = this._queue;\n\n    queue.clear();\n\n    camera.engine._componentsManager.callRender(context);\n\n    queue.sort(camera.entity.transform.worldPosition);\n\n    if (this._canvasDepthPass) this._canvasDepthPass.enabled = false;\n\n    if (this._separateSpritePass && this._separateSpritePass.isUsed) {\n      // If the default rendertarget is not canvas, you need to draw on the canvas again to ensure that there is depth information\n      if (this._defaultPass.renderTarget) {\n        if (!this._canvasDepthPass) {\n          this._canvasDepthPass = new RenderPass(\"CanvasDepthRenderPass\", 0, null, null, 0);\n          this._canvasDepthPass.clearMode = ClearMode.DONT_CLEAR;\n          this.addRenderPass(this._canvasDepthPass);\n        }\n        this._canvasDepthPass.enabled = true;\n      }\n    }\n\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      this._drawRenderPass(this._renderPassArray[i], camera, cubeFace);\n    }\n  }\n\n  private _drawRenderPass(pass: RenderPass, camera: Camera, cubeFace?: TextureCubeFace) {\n    pass.preRender(camera, this.queue);\n\n    if (pass.enabled) {\n      const rhi = camera.scene.engine._hardwareRenderer;\n      const renderTarget = camera.renderTarget || pass.renderTarget;\n      rhi.activeRenderTarget(renderTarget, camera);\n      rhi.setRenderTargetFace(renderTarget, cubeFace);\n      rhi.clearRenderTarget(camera.engine, pass.clearMode, pass.clearParam);\n\n      if (pass.renderOverride) {\n        pass.render(camera, this.queue);\n      } else {\n        this.queue.render(camera, pass.replaceMaterial, pass.mask);\n      }\n\n      rhi.blitRenderTarget(renderTarget);\n    }\n\n    pass.postRender(camera, this.queue);\n  }\n\n  /**\n   * Push a render element to the render queue.\n   * @param element - Render element\n   */\n  pushPrimitive(element: RenderElement) {\n    this._queue.pushPrimitive(element);\n  }\n\n  pushSprite(component: Component, positionQuad, uvRect, tintColor, texture, renderMode, camera: Camera) {\n    if ((component as any).separateDraw) {\n      if (!this._separateSpritePass) {\n        this._separateSpritePass = new SeparateSpritePass();\n        this.addRenderPass(this._separateSpritePass);\n      }\n\n      this._separateSpritePass.pushSprite(component, positionQuad, uvRect, tintColor, texture, renderMode, camera);\n      return;\n    }\n\n    this.queue.pushSprite(component, positionQuad, uvRect, tintColor, texture, renderMode, camera);\n  }\n}\n", "import { Matrix } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\n\n/**\n * Rendering context.\n */\nexport class RenderContext {\n  private static _renderContext: RenderContext = new RenderContext();\n\n  /**\n   * @internal\n   */\n  static _getRenderContext(camera: Camera): RenderContext {\n    const context = RenderContext._renderContext;\n    context._camera = camera;\n    Matrix.multiply(camera.projectionMatrix, camera.viewMatrix, context._viewProjectMatrix);\n    return context;\n  }\n\n  /** @internal */\n  _camera: Camera;\n  /** @internal */\n  _viewProjectMatrix: Matrix = new Matrix();\n}\n", "import { BoundingFrustum, MathUtil, Matrix, Ray, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { ClearMode } from \"./base\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { dependencies } from \"./ComponentsDependencies\";\nimport { Entity } from \"./Entity\";\nimport { Layer } from \"./Layer\";\nimport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { TextureCubeFace } from \"./texture/enums/TextureCubeFace\";\nimport { RenderTarget } from \"./texture/RenderTarget\";\nimport { Transform } from \"./Transform\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * @todo\n */\ntype Sky = {};\n\nclass MathTemp {\n  static tempMat4 = new Matrix();\n  static tempVec4 = new Vector4();\n  static tempVec3 = new Vector3();\n}\n\n/**\n * ClearFlag, which controls camera's background.\n */\nexport enum ClearFlags {\n  /* Clear depth and skybox. */\n  DepthSky,\n  /* Clear depth and color. */\n  DepthColor,\n  /* Clear depth only. */\n  Depth,\n  /* Do nothing. */\n  None\n}\n\n/**\n * Camera component, as the entrance to the three-dimensional world.\n */\n@dependencies(Transform)\nexport class Camera extends Component {\n  private static _viewMatrixProperty = Shader.getPropertyByName(\"u_viewMat\");\n  private static _projectionMatrixProperty = Shader.getPropertyByName(\"u_projMat\");\n  private static _vpMatrixProperty = Shader.getPropertyByName(\"u_VPMat\");\n  private static _inverseViewMatrixProperty = Shader.getPropertyByName(\"u_viewInvMat\");\n  private static _inverseProjectionMatrixProperty = Shader.getPropertyByName(\"u_projInvMat\");\n  private static _cameraPositionProperty = Shader.getPropertyByName(\"u_cameraPos\");\n\n  /** Rendering priority - A Camera with higher priority will be rendererd on top of a camera with lower priority. */\n  priority: number = 0;\n\n  /** Whether to enable frustum culling, it is enabled by default. */\n  enableFrustumCulling: boolean = true;\n\n  /**\n   * Culling mask - which layers the camera renders.\n   * @remarks Support bit manipulation, conresponding to Entity's layer.\n   */\n  cullingMask: Layer = Layer.Everything;\n\n  /** Shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Camera);\n\n  /** @internal */\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  @deepClone\n  _frustum: BoundingFrustum = new BoundingFrustum();\n  /** @internal */\n  @ignoreClone\n  _renderPipeline: BasicRenderPipeline;\n\n  private _isOrthographic: boolean = false;\n  private _isProjMatSetting = false;\n  private _clearMode: ClearMode = ClearMode.SOLID_COLOR;\n  private _nearClipPlane: number = 0.1;\n  private _farClipPlane: number = 100;\n  private _fieldOfView: number = 45;\n  private _orthographicSize: number = 10;\n  private _isProjectionDirty = true;\n  private _isInvProjMatDirty: boolean = true;\n  private _isFrustumProjectDirty: boolean = true;\n  private _customAspectRatio: number | undefined = undefined;\n  private _renderTarget: RenderTarget = null;\n\n  @ignoreClone\n  private _frustumViewChangeFlag: UpdateFlag;\n  @ignoreClone\n  private _transform: Transform;\n  @ignoreClone\n  private _isViewMatrixDirty: UpdateFlag;\n  @ignoreClone\n  private _isInvViewProjDirty: UpdateFlag;\n  @deepClone\n  private _projectionMatrix: Matrix = new Matrix();\n  @deepClone\n  private _viewMatrix: Matrix = new Matrix();\n  @deepClone\n  private _backgroundColor: Vector4 = new Vector4();\n  @deepClone\n  private _viewport: Vector4 = new Vector4(0, 0, 1, 1);\n  @deepClone\n  private _inverseProjectionMatrix: Matrix = new Matrix();\n  @deepClone\n  private _inverseViewMatrix: Matrix = new Matrix();\n  @deepClone\n  private _lastAspectSize: Vector2 = new Vector2(0, 0);\n  @deepClone\n  private _invViewProjMat: Matrix = new Matrix();\n\n  /**\n   * Near clip plane - the cloest point to the camera when rendering occurs.\n   */\n  get nearClipPlane(): number {\n    return this._nearClipPlane;\n  }\n\n  set nearClipPlane(value: number) {\n    this._nearClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Far clip plane - the furthest point to the camera when rendering occurs.\n   */\n  get farClipPlane(): number {\n    return this._farClipPlane;\n  }\n\n  set farClipPlane(value: number) {\n    this._farClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * The camera's view angle. activing when camera use perspective projection.\n   */\n  get fieldOfView(): number {\n    return this._fieldOfView;\n  }\n\n  set fieldOfView(value: number) {\n    this._fieldOfView = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Aspect ratio. The default is automatically calculated by the viewport's aspect ratio. If it is manually set, the manual value will be kept. Call resetAspectRatio() to restore it.\n   */\n  get aspectRatio(): number {\n    const canvas = this._entity.engine.canvas;\n    return this._customAspectRatio ?? (canvas.width * this._viewport.z) / (canvas.height * this._viewport.w);\n  }\n\n  set aspectRatio(value: number) {\n    this._customAspectRatio = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Viewport, normalized expression, the upper left corner is (0, 0), and the lower right corner is (1, 1).\n   * @remarks Re-assignment is required after modification to ensure that the modification takes effect.\n   */\n  get viewport(): Vector4 {\n    return this._viewport;\n  }\n\n  set viewport(value: Vector4) {\n    if (value !== this._viewport) {\n      value.cloneTo(this._viewport);\n    }\n    this._projMatChange();\n  }\n\n  /**\n   * Whether it is orthogonal, the default is false. True will use orthographic projection, false will use perspective projection.\n   */\n  get isOrthographic(): boolean {\n    return this._isOrthographic;\n  }\n\n  set isOrthographic(value: boolean) {\n    this._isOrthographic = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Half the size of the camera in orthographic mode.\n   */\n  get orthographicSize(): number {\n    return this._orthographicSize;\n  }\n\n  set orthographicSize(value: number) {\n    this._orthographicSize = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Clear background flags.\n   */\n  get clearFlags(): ClearFlags {\n    throw \"not implemented\";\n  }\n\n  /**\n   * @todo Skybox refactor\n   */\n  set clearFlags(value: ClearFlags) {\n    throw \"not implemented\";\n  }\n\n  /**\n   * Clear the background color of the viewport, which takes effect when clearFlags is DepthColor.\n   */\n  get backgroundColor(): Vector4 {\n    return this._backgroundColor;\n  }\n\n  set backgroundColor(value: Vector4) {\n    this.setClearMode(this._clearMode, value);\n  }\n\n  /**\n   * Clear the background sky of the viewport, active when clearFlags is DepthSky.\n   * @todo Render pipeline modification\n   */\n  get backgroundSky(): Sky {\n    throw new Error(\"not implemented\");\n  }\n\n  /**\n   * View matrix.\n   */\n  get viewMatrix(): Readonly<Matrix> {\n    // Remove scale\n    if (this._isViewMatrixDirty.flag) {\n      this._isViewMatrixDirty.flag = false;\n      Matrix.invert(this._transform.worldMatrix, this._viewMatrix);\n    }\n    return this._viewMatrix;\n  }\n\n  /**\n   * The projection matrix is \u200B\u200Bcalculated by the relevant parameters of the camera by default. If it is manually set, the manual value will be maintained. Call resetProjectionMatrix() to restore it.\n   */\n  set projectionMatrix(value: Matrix) {\n    this._projectionMatrix = value;\n    this._isProjMatSetting = true;\n    this._projMatChange();\n  }\n\n  get projectionMatrix(): Matrix {\n    const canvas = this._entity.engine.canvas;\n    if (\n      (!this._isProjectionDirty || this._isProjMatSetting) &&\n      this._lastAspectSize.x === canvas.width &&\n      this._lastAspectSize.y === canvas.height\n    ) {\n      return this._projectionMatrix;\n    }\n    this._isProjectionDirty = false;\n    this._lastAspectSize.x = canvas.width;\n    this._lastAspectSize.y = canvas.height;\n    const aspectRatio = this.aspectRatio;\n    if (!this._isOrthographic) {\n      Matrix.perspective(\n        MathUtil.degreeToRadian(this._fieldOfView),\n        aspectRatio,\n        this._nearClipPlane,\n        this._farClipPlane,\n        this._projectionMatrix\n      );\n    } else {\n      const width = this._orthographicSize * aspectRatio;\n      const height = this._orthographicSize;\n      Matrix.ortho(-width, width, -height, height, this._nearClipPlane, this._farClipPlane, this._projectionMatrix);\n    }\n    return this._projectionMatrix;\n  }\n\n  /**\n   * Whether to enable HDR.\n   * @todo When render pipeline modification\n   */\n  get enableHDR(): boolean {\n    console.log(\"not implemention\");\n    return false;\n  }\n\n  set enableHDR(value: boolean) {\n    console.log(\"not implemention\");\n  }\n\n  /**\n   * RenderTarget. After setting, it will be rendered to the renderTarget. If it is empty, it will be rendered to the main canvas.\n   */\n  get renderTarget(): RenderTarget | null {\n    return this._renderTarget;\n  }\n\n  set renderTarget(value: RenderTarget | null) {\n    this._renderTarget = value;\n  }\n\n  /**\n   * Create the Camera component.\n   * @param entity - Entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    const transform = this.entity.transform;\n    this._transform = transform;\n    this._isViewMatrixDirty = transform.registerWorldChangeFlag();\n    this._isInvViewProjDirty = transform.registerWorldChangeFlag();\n    this._frustumViewChangeFlag = transform.registerWorldChangeFlag();\n    this._renderPipeline = new BasicRenderPipeline(this);\n    this.shaderData._addRefCount(1);\n\n    this.setClearMode();\n  }\n\n  /**\n   * Restore the automatic calculation of projection matrix through fieldOfView, nearClipPlane and farClipPlane.\n   */\n  resetProjectionMatrix(): void {\n    this._isProjMatSetting = false;\n    this._projMatChange();\n  }\n\n  /**\n   * Restore the automatic calculation of the aspect ratio through the viewport aspect ratio.\n   */\n  resetAspectRatio(): void {\n    this._customAspectRatio = undefined;\n    this._projMatChange();\n  }\n\n  /**\n   * Transform a point from world space to viewport space.\n   * @param point - Point in world space\n   * @param out - A point in the viewport space, X and Y are the viewport space coordinates, Z is the viewport depth, the near clipping plane is 0, the far clipping plane is 1, and W is the world unit distance from the camera\n   * @returns Point in viewport space\n   */\n  worldToViewportPoint(point: Vector3, out: Vector4): Vector4 {\n    Matrix.multiply(this.projectionMatrix, this.viewMatrix, MathTemp.tempMat4);\n    MathTemp.tempVec4.setValue(point.x, point.y, point.z, 1.0);\n    Vector4.transform(MathTemp.tempVec4, MathTemp.tempMat4, MathTemp.tempVec4);\n\n    const w = MathTemp.tempVec4.w;\n    const nx = MathTemp.tempVec4.x / w;\n    const ny = MathTemp.tempVec4.y / w;\n    const nz = MathTemp.tempVec4.z / w;\n\n    // Transform of coordinate axis.\n    out.x = (nx + 1.0) * 0.5;\n    out.y = (1.0 - ny) * 0.5;\n    out.z = nz;\n    out.w = w;\n    return out;\n  }\n\n  /**\n   * Transform a point from viewport space to world space.\n   * @param point - Point in viewport. X and Y are the viewport space coordinates, Z is the viewport depth. The near clipping plane is 0, and the far clipping plane is 1.\n   * @param out - Point in world space\n   * @returns Point in world space\n   */\n  viewportToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    const invViewProjMat = this.invViewProjMat;\n    return this._innerViewportToWorldPoint(point, invViewProjMat, out);\n  }\n\n  /**\n   * Generate a ray by a point in viewport.\n   * @param point Point in viewport point.\n   * @param out - Ray\n   * @returns Ray\n   */\n  viewportPointToRay(point: Vector2, out: Ray): Ray {\n    const clipPoint = MathTemp.tempVec3;\n    // Use the intersection of the near clipping plane as the origin point.\n    clipPoint.setValue(point.x, point.y, 0);\n    const origin = this.viewportToWorldPoint(clipPoint, out.origin);\n    // Use the intersection of the far clipping plane as the origin point.\n    clipPoint.z = 1.0;\n    const farPoint: Vector3 = this._innerViewportToWorldPoint(clipPoint, this._invViewProjMat, clipPoint);\n    Vector3.subtract(farPoint, origin, out.direction);\n    out.direction.normalize();\n\n    return out;\n  }\n\n  /**\n   * Transform the X and Y coordinates of a point from screen space to viewport space\n   * @param point - Point in screen space\n   * @param out - Point in viewport space\n   * @returns Point in viewport space\n   */\n  screenToViewportPoint<T extends Vector2 | Vector3>(point: Vector3 | Vector2, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (point.x / canvas.width - viewport.x) / viewport.z;\n    out.y = (point.y / canvas.height - viewport.y) / viewport.w;\n    return out;\n  }\n\n  /**\n   * Transform the X and Y coordinates of a point from viewport space to screen space.\n   * @param point - Point in viewport space\n   * @param out - Point in screen space\n   * @returns Point in screen space\n   */\n  viewportToScreenPoint<T extends Vector2 | Vector3 | Vector4>(point: T, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (viewport.x + point.x * viewport.z) * canvas.width;\n    out.y = (viewport.y + point.y * viewport.w) * canvas.height;\n    return out;\n  }\n\n  /**\n   * Transform a point from world space to screen space.\n   * @param point - Point in world space\n   * @param out - Point of screen space\n   * @returns Point of screen space\n   */\n  worldToScreenPoint(point: Vector3, out: Vector4): Vector4 {\n    this.worldToViewportPoint(point, out);\n    return this.viewportToScreenPoint(out, out);\n  }\n\n  /**\n   * Transform a point from screen space to world space.\n   * @param point - Screen space point\n   * @param out - Point in world space\n   * @returns Point in world space\n   */\n  screenToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    this.screenToViewportPoint(point, out);\n    return this.viewportToWorldPoint(out, out);\n  }\n\n  /**\n   * Manually call the rendering of the camera.\n   * @param cubeFace - Cube rendering surface collection\n   */\n  render(cubeFace?: TextureCubeFace): void {\n    // compute cull frustm.\n    const context = RenderContext._getRenderContext(this);\n    if (this.enableFrustumCulling && (this._frustumViewChangeFlag.flag || this._isFrustumProjectDirty)) {\n      this._frustum.calculateFromMatrix(context._viewProjectMatrix);\n      this._frustumViewChangeFlag.flag = false;\n      this._isFrustumProjectDirty = false;\n    }\n\n    this._updateShaderData(context);\n\n    // union scene and camera macro.\n    ShaderMacroCollection.unionCollection(\n      this.scene.shaderData._macroCollection,\n      this.shaderData._macroCollection,\n      this._globalShaderMacro\n    );\n\n    this._renderPipeline.render(context, cubeFace);\n    this._engine._renderCount++;\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onActive() {\n    this.entity.scene.attachRenderCamera(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onInActive() {\n    this.entity.scene.detachRenderCamera(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onDestroy() {\n    this._renderPipeline?.destroy();\n    this._isInvViewProjDirty.destroy();\n    this._isViewMatrixDirty.destroy();\n    this.shaderData._addRefCount(-1);\n  }\n\n  private _projMatChange() {\n    this._isFrustumProjectDirty = true;\n    this._isProjectionDirty = true;\n    this._isInvProjMatDirty = true;\n    this._isInvViewProjDirty.flag = true;\n  }\n\n  private _innerViewportToWorldPoint(point: Vector3, invViewProjMat: Matrix, out: Vector3): Vector3 {\n    // Depth is a normalized value, 0 is nearPlane, 1 is farClipPlane.\n    const depth = point.z * 2 - 1;\n    // Transform to clipping space matrix\n    const clipPoint = MathTemp.tempVec4;\n    clipPoint.setValue(point.x * 2 - 1, 1 - point.y * 2, depth, 1);\n    Vector4.transform(clipPoint, invViewProjMat, clipPoint);\n    const invW = 1.0 / clipPoint.w;\n    out.x = clipPoint.x * invW;\n    out.y = clipPoint.y * invW;\n    out.z = clipPoint.z * invW;\n    return out;\n  }\n\n  private _updateShaderData(context: RenderContext) {\n    const shaderData = this.shaderData;\n    shaderData.setMatrix(Camera._viewMatrixProperty, this.viewMatrix);\n    shaderData.setMatrix(Camera._projectionMatrixProperty, this.projectionMatrix);\n    shaderData.setMatrix(Camera._vpMatrixProperty, context._viewProjectMatrix);\n    shaderData.setMatrix(Camera._inverseViewMatrixProperty, this.inverseViewMatrix);\n    shaderData.setMatrix(Camera._inverseProjectionMatrixProperty, this.inverseProjectionMatrix);\n    shaderData.setVector3(Camera._cameraPositionProperty, this._transform.worldPosition);\n  }\n\n  /**\n   * @private\n   * The inverse matrix of view projection matrix.\n   */\n  get invViewProjMat(): Matrix {\n    if (this._isInvViewProjDirty.flag) {\n      this._isInvViewProjDirty.flag = false;\n      Matrix.multiply(this.inverseViewMatrix, this.inverseProjectionMatrix, this._invViewProjMat);\n    }\n    return this._invViewProjMat;\n  }\n\n  /**\n   * @private\n   * The inverse of the projection matrix.\n   */\n  get inverseProjectionMatrix(): Readonly<Matrix> {\n    if (this._isInvProjMatDirty) {\n      this._isInvProjMatDirty = false;\n      Matrix.invert(this.projectionMatrix, this._inverseProjectionMatrix);\n    }\n    return this._inverseProjectionMatrix;\n  }\n\n  //-------------------------------------------------deprecated---------------------------------------------------\n\n  /**\n   * @deprecated\n   * View matrix inverse matrix.\n   */\n  get inverseViewMatrix(): Readonly<Matrix> {\n    this._transform.worldMatrix.cloneTo(this._inverseViewMatrix);\n    return this._inverseViewMatrix;\n  }\n\n  /**\n   * @deprecated\n   * @todo Involving the rendering pipeline to modify the rhi.clearRenderTarget method.\n   * @param clearMode\n   * @param backgroundColor\n   */\n  setClearMode(\n    clearMode: ClearMode = ClearMode.SOLID_COLOR,\n    backgroundColor: Vector4 = new Vector4(0.25, 0.25, 0.25, 1)\n  ): void {\n    this._clearMode = clearMode;\n    this._backgroundColor = backgroundColor;\n    this._renderPipeline.defaultRenderPass.clearParam = backgroundColor;\n    this._renderPipeline.defaultRenderPass.clearMode = clearMode;\n  }\n}\n", "import { AssetPromise } from \"./AssetPromise\";\n\nconst mimeType = {\n  json: \"json\",\n  gltf: \"json\",\n  mtl: \"json\",\n  prefab: \"json\",\n  txt: \"text\",\n  bin: \"arraybuffer\",\n  png: \"image\",\n  webp: \"image\",\n  jpg: \"image\"\n};\n\nconst defaultRetryCount = 4;\nconst defaultTimeout = 15000;\nconst defaultInterval = 500;\n\nexport type RequestConfig = {\n  type?: XMLHttpRequestResponseType | \"image\";\n  retryCount?: number;\n  retryInterval?: number;\n  timeout?: number;\n} & RequestInit;\n\n/**\n * Web request.\n * @param url - The link\n * @param config - Load configuration\n */\nexport function request<T>(url: string, config: RequestConfig = {}): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const retryCount = config.retryCount ?? defaultRetryCount;\n    const retryInterval = config.retryInterval ?? defaultInterval;\n    config.timeout = config.timeout ?? defaultTimeout;\n    config.type = config.type ?? getMimeTypeFromUrl(url);\n    const realRequest = config.type === \"image\" ? requestImage : requestRes;\n    let lastError: Error;\n    const executor = new MultiExecutor(\n      () => {\n        return realRequest<T>(url, config)\n          .onProgress(setProgress)\n          .then((res) => {\n            resolve(res);\n            executor.stop();\n          })\n          .catch((err) => (lastError = err));\n      },\n      retryCount,\n      retryInterval\n    );\n    executor.start(() => {\n      reject(lastError);\n    });\n  });\n}\n\nfunction requestImage<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject) => {\n    const { timeout } = config;\n    const img = new Image();\n    const onerror = () => {\n      reject(new Error(`request ${url} fail`));\n    };\n    img.onerror = onerror;\n\n    img.onabort = onerror;\n\n    const timeoutId = setTimeout(() => {\n      reject(new Error(`request ${url} timeout`));\n    }, timeout);\n\n    img.onload = ((timeoutId) => {\n      return () => {\n        // Call requestAnimationFrame to avoid iOS's bug.\n        requestAnimationFrame(() => {\n          //@ts-ignore\n          resolve(img);\n        });\n        clearTimeout(timeoutId);\n      };\n    })(timeoutId);\n\n    img.crossOrigin = \"anonymous\";\n\n    img.src = url;\n  });\n}\n\nfunction requestRes<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = config.timeout;\n    config.method = config.method ?? \"get\";\n    xhr.onload = () => {\n      if (xhr.status < 200 || xhr.status >= 300) {\n        reject(new Error(`request failed from: ${url}`));\n        return;\n      }\n      const result = xhr.response ?? xhr.responseText;\n      resolve(result);\n    };\n    xhr.onerror = () => {\n      reject(new Error(`request failed from: ${url}`));\n    };\n    xhr.ontimeout = () => {\n      reject(new Error(`request timeout from: ${url}`));\n    };\n    xhr.onprogress = (e) => {\n      setProgress(e.loaded / e.total);\n    };\n    xhr.open(config.method, url, true);\n    xhr.withCredentials = config.credentials === \"include\";\n    //@ts-ignore\n    xhr.responseType = config.type;\n    const headers = config.headers;\n    if (headers) {\n      Object.keys(headers).forEach((name) => {\n        xhr.setRequestHeader(name, headers[name]);\n      });\n    }\n    xhr.send(config.body);\n  });\n}\n\nfunction getMimeTypeFromUrl(url: string) {\n  const extname = url.substring(url.lastIndexOf(\".\") + 1);\n  return mimeType[extname];\n}\n\nexport class MultiExecutor {\n  private _timeoutId: number = -100;\n  private _currentCount = 0;\n  constructor(\n    private execFunc: (count?: number) => Promise<any>,\n    private totalCount: number,\n    private interval: number\n  ) {\n    this.exec = this.exec.bind(this);\n  }\n\n  private done: Function;\n  start(done?: Function): void {\n    this.done = done;\n    this.exec();\n  }\n\n  stop(): void {\n    clearTimeout(this._timeoutId);\n  }\n\n  private exec(): void {\n    if (this._currentCount >= this.totalCount) {\n      this.done && this.done();\n      return;\n    }\n    this._currentCount++;\n    this.execFunc(this._currentCount).then(() => {\n      //@ts-ignore\n      this._timeoutId = setTimeout(this.exec, this.interval);\n    });\n  }\n}\n", "import { LoadItem } from \"./LoadItem\";\nimport { AssetPromise } from \"./AssetPromise\";\nimport { RequestConfig, request } from \"./request\";\nimport { ResourceManager } from \"./ResourceManager\";\n/**\n * Loader abstract class.\n */\nexport abstract class Loader<T> {\n  request: <U>(url: string, config: RequestConfig) => AssetPromise<U> = request;\n  abstract load(item: LoadItem, resouceManager: ResourceManager): AssetPromise<T>;\n  constructor(public readonly useCache: boolean) {}\n}\n", "/**\n * Asset Type.\n */\nexport enum AssetType {\n  /**\n   * Plain text.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  Text = 0,\n  /**\n   * JSON.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  JSON = 1,\n  /**\n   * ArrayBuffer.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  Buffer = 2,\n  /** 2D Texture. */\n  Texture2D = 3,\n  /** Cube Texture. */\n  TextureCube = 4,\n  /** Material. */\n  Material = 5,\n  /** Mesh. */\n  Mesh = 6,\n  /** Animation Clip. */\n  AnimationClip = 7,\n  /** Prefab.*/\n  Perfab = 8,\n  /** Compress Texture. */\n  KTX = 9,\n  /** Cube Compress Texture. */\n  KTXCube = 10\n  /** @todo Scene. */\n  // Scene = 9\n}\n", "import { SceneFeature } from \"../SceneFeature\";\nimport { Collider } from \"./Collider\";\n\nexport class ColliderFeature extends SceneFeature {\n  colliders: Collider[];\n  constructor() {\n    super();\n\n    this.colliders = [];\n  }\n\n  /**\n   * Add a collider component.\n   * @param collider - The collider component to add\n   */\n  attachCollider(collider: Collider) {\n    this.colliders.push(collider);\n  }\n\n  /**\n   * Remove a collider component.\n   * @param collider - The collider component to remove\n   */\n  detachCollider(collider: Collider) {\n    const index = this.colliders.indexOf(collider);\n    if (index != -1) {\n      this.colliders.splice(index, 1);\n    }\n  }\n}\n", "import { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { ColliderFeature } from \"./ColliderFeature\";\n\n/**\n * Define collider data.\n */\nexport class Collider extends Component {\n  /**\n   * @param {Entity} entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  _onEnable(): void {\n    this.scene.findFeature(ColliderFeature).attachCollider(this);\n  }\n\n  _onDisable(): void {\n    this.scene.findFeature(ColliderFeature).detachCollider(this);\n  }\n}\n", "import { Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\n\n/**\n * Axis Aligned Bound Box (AABB).\n * @extends Collider\n */\nexport class ABoxCollider extends Collider {\n  private static _tempVec3: Vector3 = new Vector3();\n\n  public boxMin: Vector3;\n  public boxMax: Vector3;\n  private _corners: Array<Vector3> = [];\n  private _cornerFlag: boolean = false;\n\n  /**\n   * Constructor of ABoxCollider.\n   * @param entity - Entity which the box belongs to\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this.boxMin = new Vector3(-0.5, -0.5, -0.5);\n    this.boxMax = new Vector3(0.5, 0.5, 0.5);\n  }\n\n  /**\n   * Set box from the minimum point of the box and the maximum point of the box.\n   * @param min - The minimum point of the box\n   * @param max - The maximum point of the box\n   */\n  setBoxMinMax(min: Vector3, max: Vector3) {\n    this.boxMin = min;\n    this.boxMax = max;\n\n    this._cornerFlag = true;\n  }\n\n  /**\n   * Set box from the center point and the size of the bounding box.\n   * @param center - The center point\n   * @param size - The size of the bounding box\n   */\n  setBoxCenterSize(center: Vector3, size: Vector3) {\n    const halfSize = ABoxCollider._tempVec3;\n    Vector3.scale(size, 0.5, halfSize);\n    Vector3.add(center, halfSize, this.boxMax);\n    Vector3.subtract(center, halfSize, this.boxMin);\n\n    this._cornerFlag = true;\n  }\n\n  /**\n   * Get the eight corners of this bounding box.\n   */\n  getCorners(): Vector3[] {\n    if (this._cornerFlag) {\n      const minX = this.boxMin.x;\n      const minY = this.boxMin.y;\n      const minZ = this.boxMin.z;\n      const w = this.boxMax.x - minX;\n      const h = this.boxMax.y - minY;\n      const d = this.boxMax.z - minZ;\n\n      if (this._corners.length === 0) {\n        for (let i = 0; i < 8; ++i) {\n          this._corners.push(new Vector3());\n        }\n      }\n\n      this._corners[0].setValue(minX + w, minY + h, minZ + d);\n      this._corners[1].setValue(minX, minY + h, minZ + d);\n      this._corners[2].setValue(minX, minY, minZ + d);\n      this._corners[3].setValue(minX + w, minY, minZ + d);\n      this._corners[4].setValue(minX + w, minY + h, minZ);\n      this._corners[5].setValue(minX, minY + h, minZ);\n      this._corners[6].setValue(minX, minY, minZ);\n      this._corners[7].setValue(minX + w, minY, minZ);\n\n      this._cornerFlag = false;\n    }\n\n    return this._corners;\n    // if (this._corners.length === 0) {\n    //   const minX = this.boxMin.x;\n    //   const minY = this.boxMin.y;\n    //   const minZ = this.boxMin.z;\n    //   const w = this.boxMax.x - minX;\n    //   const h = this.boxMax.y - minY;\n    //   const d = this.boxMax.z - minZ;\n\n    //   this._corners = [\n    //     new Vector3(minX + w, minY + h, minZ + d),\n    //     new Vector3(minX, minY + h, minZ + d),\n    //     new Vector3(minX, minY, minZ + d),\n    //     new Vector3(minX + w, minY, minZ + d),\n    //     new Vector3(minX + w, minY + h, minZ),\n    //     new Vector3(minX, minY + h, minZ),\n    //     new Vector3(minX, minY, minZ),\n    //     new Vector3(minX + w, minY, minZ)\n    //   ];\n    // }\n\n    // return this._corners;\n  }\n}\n", "import { Collider } from \"./Collider\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\n/**\n * A bounding sphere.\n */\nexport class ASphereCollider extends Collider {\n  center: Vector3;\n\n  radius: number;\n  /**\n   * Constructor of ASphereCollider.\n   * @param  entity - Entity which the sphere belongs to\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    /** The center point of the sphere. */\n    this.center = new Vector3();\n\n    /** The radius of the sphere. */\n    this.radius = 1;\n  }\n\n  /**\n   * Set the center and radius of the sphere.\n   * @param center - The center point of the sphere\n   * @param radius - The radius of the sphere\n   */\n  setSphere(center: Vector3, radius: number) {\n    this.center = center;\n    this.radius = radius;\n  }\n}\n", "import { Collider } from \"./Collider\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\n\n/**\n * Represents a plane in three dimensional space.\n */\nexport class PlaneCollider extends Collider {\n  planePoint: Vector3;\n\n  normal: Vector3;\n\n  /**\n   * Constructor of PlaneCollider.\n   * @param entity - Entity which the plane belongs to\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    /** The point through the plane. */\n    this.planePoint = new Vector3();\n\n    /** The normal direction of the plane. */\n    this.normal = new Vector3(0, 1, 0);\n  }\n\n  /**\n   * Set a plane from point and normal.\n   * @param  point - The point through the plane\n   * @param  normal - The normal direction of the plane\n   */\n  setPlane(point: Vector3, normal: Vector3) {\n    this.planePoint = point;\n    this.normal = normal;\n  }\n}\n", "import { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * The result of raycast test.\n */\nexport class RaycastHit {\n  public distance: number;\n  public collider: any;\n  public point: Vector3;\n  /**\n   * Constructor of RaycastHit.\n   */\n  constructor() {\n    /** The distance from the collider point to the origin of the ray. */\n    this.distance = Number.MAX_VALUE;\n\n    /** The collider that has been intersecting. */\n    this.collider = null;\n\n    /** The point where the ray intersects.  */\n    this.point = null;\n  }\n}\n", "import { BoundingBox, BoundingSphere, Matrix, Plane, Ray, Vector3 } from \"@oasis-engine/math\";\nimport { ABoxCollider } from \"../collider/ABoxCollider\";\nimport { ASphereCollider } from \"../collider/ASphereCollider\";\nimport { ColliderFeature } from \"../collider/ColliderFeature\";\nimport { PlaneCollider } from \"../collider/PlaneCollider\";\nimport { Layer } from \"../Layer\";\nimport { Scene } from \"../Scene\";\nimport { RaycastHit } from \"./RaycastHit\";\n\n// TODO\n/** @internal */\nconst _tempVec3 = new Vector3();\n/** @internal */\nconst _tempPlane = new Plane();\n/** @internal */\nconst _tepmBox = new BoundingBox();\n/** @internal */\nconst _tempShpere = new BoundingSphere();\n\n/**\n * Perform ray detection on all Colliders in the scene and return to the one closest to the beginning of the ray.\n * @param _ray - The ray to perform\n * @param _outPos - The point where the ray intersects\n * @return The collider that has been intersecting\n */\n(Scene.prototype as any).raycast = function (ray: Ray, _outPos: Vector3, tag: Layer = Layer.Everything) {\n  const cf = this.findFeature(ColliderFeature);\n  const colliders = cf.colliders;\n\n  let nearestHit = new RaycastHit();\n\n  for (let i = 0, len = colliders.length; i < len; i++) {\n    const collider = colliders[i];\n    if (!collider.entity.isActiveInHierarchy) {\n      continue;\n    }\n\n    if (!(collider.entity.layer & tag)) {\n      continue;\n    }\n    const hit = new RaycastHit();\n    if (collider.raycast(ray, hit)) {\n      if (hit.distance < nearestHit.distance) {\n        nearestHit = hit;\n      }\n    }\n  } // end of for\n\n  if (_outPos && nearestHit.collider) {\n    nearestHit.point.cloneTo(_outPos);\n  }\n\n  return nearestHit.collider;\n};\n\n/**\n * Perform ray cast.\n * @param ray - The ray\n * @param hit - The raycasthit\n */\n(ABoxCollider.prototype as any).raycast = function (ray, hit) {\n  const localRay = _getLocalRay(this, ray);\n  // TODO\n  this.boxMin.cloneTo(_tepmBox.min);\n  this.boxMax.cloneTo(_tepmBox.max);\n  const intersect = localRay.intersectBox(_tepmBox);\n  if (intersect !== -1) {\n    _updateHitResult(this, localRay, intersect, hit, ray.origin);\n    return true;\n  } else {\n    return false;\n  } // end of else\n};\n\n(ASphereCollider.prototype as any).raycast = function (ray, hit) {\n  const localRay = _getLocalRay(this, ray);\n  // TODO\n  this.center.cloneTo(_tempShpere.center);\n  _tempShpere.radius = this.radio;\n  const intersect = localRay.intersectSphere(_tempShpere);\n  if (intersect !== -1) {\n    _updateHitResult(this, localRay, intersect, hit, ray.origin);\n    return true;\n  } else {\n    return false;\n  } // end of else\n};\n\n(PlaneCollider.prototype as any).raycast = function (ray, hit) {\n  const localRay = _getLocalRay(this, ray);\n  // TODO\n  this.normal.cloneTo(_tempPlane.normal);\n  _tempPlane.distance = -Vector3.dot(this.planePoint, _tempPlane.normal);\n  const intersect = localRay.intersectPlane(_tempPlane);\n  if (intersect !== -1) {\n    _updateHitResult(this, localRay, intersect, hit, ray.origin);\n    return true;\n  } else {\n    return false;\n  } // end of else\n};\n\n/**\n * Calculate the raycasthit in world space.\n * @param ray - The ray\n * @param distance - The distance\n * @param outHit - The raycasthit\n */\nfunction _updateHitResult(collider, ray: Ray, distance: number, outHit: RaycastHit, origin: Vector3) {\n  const hitPos = _tempVec3;\n  ray.getPoint(distance, hitPos);\n  Vector3.transformCoordinate(hitPos, collider.entity.transform.worldMatrix, hitPos);\n\n  outHit.distance = Vector3.distance(origin, hitPos);\n  outHit.collider = collider;\n  outHit.point = hitPos;\n}\n\n/**\n * transform ray to local space\n * @param {Ray} ray\n * @private\n */\n\nfunction _getLocalRay(collider, ray) {\n  const worldToLocal = collider.entity.getInvModelMatrix();\n\n  // o = worldToLocal * vec4(ray.origin, 1)\n  const o = new Vector3();\n  Vector3.transformCoordinate(ray.origin, worldToLocal, o);\n\n  // d = worldToLocal * vec4(ray.direction, 0)\n  const d = new Vector3();\n  _transformDirection(d, ray.direction, worldToLocal);\n\n  return new Ray(o, d);\n}\n\n// a: vec3\n// m: mat4\n// return m * vec3(a, 0)\nfunction _transformDirection(out: Vector3, a: Vector3, m: Matrix) {\n  const x = a.x;\n  const y = a.y;\n  const z = a.z;\n  const e = m.elements;\n  out.x = x * e[0] + y * e[4] + z * e[8];\n  out.y = x * e[1] + y * e[5] + z * e[9];\n  out.z = x * e[2] + y * e[6] + z * e[10];\n  return out;\n}\n", "import { BoundingBox, Vector3 } from \"@oasis-engine/math\";\nimport { Engine, EngineObject } from \"..\";\nimport { Primitive } from \"../graphic/Primitive\";\nimport { SubPrimitive } from \"../graphic/SubPrimitive\";\n\n/**\n * Mesh Asset Object\n */\nexport class Mesh extends EngineObject {\n  name: string;\n  primitives: Primitive[] = [];\n  groups: SubPrimitive[] = [];\n  weights: number[];\n  readonly bounds: BoundingBox = new BoundingBox(new Vector3(), new Vector3());\n\n  /**\n   * Contructor of mesh\n   * @param name - Name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n  }\n\n  updatePrimitiveWeightsIndices(weightsIndices: number[]) {\n    // this.primitives.forEach((primitive) => {\n    //   primitive.updateWeightsIndices(weightsIndices);\n    // });\n  }\n\n  destroy() {\n    this.primitives = null;\n  }\n}\n", "import { Matrix } from \"@oasis-engine/math\";\nimport { EngineObject } from \"../base/EngineObject\";\n\nlet skinID = 0;\n\n/**\n * Mesh skin data, equal glTF skins define\n */\nexport class Skin extends EngineObject {\n  public inverseBindMatrices: Matrix[];\n  public joints: string[];\n  public skeleton: string;\n  /**\n   * Contructor of skin\n   * @param name - name\n   */\n  constructor(name: string) {\n    super(null);\n\n    this.inverseBindMatrices = []; // inverse bind matrix array, element type: gl-matrix.mat4\n    this.joints = []; // joints name array, element type: string\n    this.skeleton = \"none\"; // root bone name\n  }\n}\n", "import { BoundingBox } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { ignoreClone, shallowClone } from \"../clone/CloneManager\";\nimport { Entity } from \"../Entity\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { RenderElement } from \"../RenderPipeline/RenderElement\";\nimport { Mesh } from \"./Mesh\";\n\nfunction addPrimitivesRefCount(mesh: Mesh, refCount: number): void {\n  const primitives = mesh.primitives;\n  for (let i = 0, l = primitives.length; i < l; i++) {\n    primitives[i]._addRefCount(refCount);\n  }\n}\n\n/**\n * MeshRenderer Component\n */\nexport class MeshRenderer extends Renderer {\n  private _mesh: Mesh;\n  @ignoreClone\n  private _instanceMaterials: Material[] = [];\n  @shallowClone\n  private _sharedMaterials: Material[] = [];\n\n  constructor(entity: Entity) {\n    super(entity);\n\n    this._mesh = null; // Mesh Asset Object\n  }\n\n  /**\n   * Current mesh object.\n   */\n  get mesh() {\n    return this._mesh;\n  }\n\n  /**\n   * Specify mesh which will be used to render.\n   * @param mesh - Mesh Object\n   */\n  set mesh(mesh: Mesh) {\n    if (this._mesh) {\n      addPrimitivesRefCount(this._mesh, -1);\n    }\n    addPrimitivesRefCount(mesh, 1);\n    this._mesh = mesh;\n    this._sharedMaterials = [];\n    this._instanceMaterials = [];\n  }\n\n  /**\n   * Specify a material that will be used by a primitive and the material could be shared.\n   * @param primitiveIndex - Primitive's index\n   * @param material - Material.\n   */\n  setSharedMaterial(primitiveIndex: number, material: Material) {\n    if (this._sharedMaterials[primitiveIndex]) {\n      this._sharedMaterials[primitiveIndex]._addRefCount(-1);\n    }\n    material._addRefCount(1);\n    this._sharedMaterials[primitiveIndex] = material;\n  }\n\n  /**\n   * Specify a material that will be used by a primitive.\n   * @param primitiveIndex - Primitive's index\n   * @param material - Material\n   */\n  setMaterial(primitiveIndex: number, material: Material) {\n    if (this._instanceMaterials[primitiveIndex]) {\n      this._instanceMaterials[primitiveIndex]._addRefCount(-1);\n    }\n    material._addRefCount(1);\n    this._instanceMaterials[primitiveIndex] = material;\n  }\n\n  /**\n   * Get the material object exclusive to this component\n   * @param primitiveIndex - Primitive's index\n   * @return Material\n   */\n  getInstanceMaterial(primitiveIndex: number): Material {\n    return this._instanceMaterials[primitiveIndex];\n  }\n\n  /**\n   * Get the shared primitive material object\n   * @param primitiveIndex Primitive's index\n   * @return Material\n   */\n  getSharedMaterial(primitiveIndex: number): Material {\n    return this._sharedMaterials[primitiveIndex];\n  }\n\n  /**\n   * Execute render\n   * @param camera\n   */\n  render(camera: Camera) {\n    const mesh = this._mesh;\n    if (!mesh) {\n      return;\n    }\n\n    const renderPipeline = camera._renderPipeline;\n    const { primitives, groups } = mesh;\n\n    //-- render every primitive\n    for (let i = 0, len = primitives.length; i < len; i++) {\n      const primitive = primitives[i];\n      const material = this._instanceMaterials[i] || this._sharedMaterials[i];\n      if (material) {\n        const element = RenderElement.getFromPool();\n        element.setValue(this, primitive, groups[i], material);\n        renderPipeline.pushPrimitive(element);\n      } else {\n        Logger.error(\"Primitive has no material: \" + primitive.name);\n      }\n    } // end of for\n  }\n\n  /**\n   * Destroy the component.\n   */\n  destroy() {\n    super.destroy();\n\n    //-- release mesh\n    this._mesh = null;\n\n    //-- materials\n    this._instanceMaterials = [];\n    this._sharedMaterials = [];\n\n    // delete reference count\n    for (let i = 0; i < this._instanceMaterials.length; i++) {\n      this._instanceMaterials[i]._addRefCount(-1);\n    }\n\n    // delete reference count\n    for (let i = 0; i < this._sharedMaterials.length; i++) {\n      this._sharedMaterials[i]._addRefCount(-1);\n    }\n\n    if (this._mesh) {\n      addPrimitivesRefCount(this._mesh, -1);\n    }\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    const localBounds = this.mesh.bounds;\n    const worldMatrix = this._entity.transform.worldMatrix;\n\n    BoundingBox.transform(localBounds, worldMatrix, worldBounds);\n  }\n}\n", "import { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Two-dimensional texture.\n */\nexport class Texture2D extends Texture {\n  private _format: TextureFormat;\n  /** Backward compatible with WebGL1.0. */\n  private _compressedMipFilled: number = 0;\n\n  /**\n   * Texture format.\n   * @readonly\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * Create Texture2D.\n   * @param engine - Define the engine to use to render this texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default  `TextureFormat.R8G8B8A8`\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: TextureFormat = TextureFormat.R8G8B8A8,\n    mipmap: boolean = true\n  ) {\n    super(engine);\n    const rhi = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n    const isWebGL2: boolean = rhi.isWebGL2;\n\n    if (!Texture._supportTextureFormat(format, rhi)) {\n      throw new Error(`Texture format is not supported:${TextureFormat[format]}`);\n    }\n\n    if (mipmap && !isWebGL2 && (!Texture._isPowerOf2(width) || !Texture._isPowerOf2(height))) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n      mipmap = false;\n    }\n\n    const formatDetail = Texture._getFormatDetail(format, gl, isWebGL2);\n\n    this._glTexture = gl.createTexture();\n    this._formatDetail = formatDetail;\n    this._rhi = rhi;\n    this._target = gl.TEXTURE_2D;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    (formatDetail.isCompressed && !isWebGL2) || this._initMipmap(false);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Repeat;\n  }\n\n  /**\n   * Setting pixels data through color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks If it is the WebGL1.0 platform and the texture format is compressed, the first upload must be filled with textures.\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Data width. if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height. if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x?: number,\n    y?: number,\n    width?: number,\n    height?: number\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const { internalFormat, baseFormat, dataType, isCompressed } = this._formatDetail;\n    const mipWidth = Math.max(1, this._width >> mipLevel);\n    const mipHeight = Math.max(1, this._height >> mipLevel);\n\n    x = x || 0;\n    y = y || 0;\n    width = width || mipWidth - x;\n    height = height || mipHeight - y;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isCompressed) {\n      const mipBit = 1 << mipLevel;\n      if (isWebGL2 || this._compressedMipFilled & mipBit) {\n        gl.compressedTexSubImage2D(this._target, mipLevel, x, y, width, height, internalFormat, colorBuffer);\n      } else {\n        gl.compressedTexImage2D(this._target, mipLevel, internalFormat, width, height, 0, colorBuffer);\n        this._compressedMipFilled |= mipBit;\n      }\n    } else {\n      gl.texSubImage2D(this._target, mipLevel, x, y, width, height, baseFormat, dataType, colorBuffer);\n    }\n\n    this._unbind();\n  }\n\n  /**\n   * Setting pixels data through TexImageSource, designated area and texture mipmapping level.\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x?: number,\n    y?: number\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);\n    gl.texSubImage2D(this._target, mipLevel, x || 0, y || 0, baseFormat, dataType, imageSource);\n    this._unbind();\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, out: ArrayBufferView): void {\n    if (this._formatDetail.isCompressed) {\n      throw new Error(\"Unable to read compressed texture\");\n    }\n    super._getPixelBuffer(null, x, y, width, height, out);\n  }\n}\n", "import { Matrix } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { Entity } from \"../Entity\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Shader } from \"../shader\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { TextureFilterMode } from \"../texture/enums/TextureFilterMode\";\nimport { TextureFormat } from \"../texture/enums/TextureFormat\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { MeshRenderer } from \"./MeshRenderer\";\nimport { Skin } from \"./Skin\";\n\n/**\n * SkinnedMeshRenderer\n */\nexport class SkinnedMeshRenderer extends MeshRenderer {\n  private static _jointCountProperty: ShaderProperty = Shader.getPropertyByName(\"u_jointCount\");\n  private static _jointSamplerProperty: ShaderProperty = Shader.getPropertyByName(\"u_jointSampler\");\n  private static _jointMatrixProperty: ShaderProperty = Shader.getPropertyByName(\"u_jointMatrix\");\n\n  private static _maxJoints: number = 0;\n\n  @ignoreClone\n  public matrixPalette: Float32Array;\n  @ignoreClone\n  public jointNodes: Entity[];\n  @ignoreClone\n  public jointTexture: Texture2D;\n\n  @ignoreClone\n  private _hasInitJoints: boolean = false;\n  @ignoreClone\n  private _mat: Matrix;\n  @ignoreClone\n  private _weights: number[];\n  @ignoreClone\n  private weightsIndices: number[] = [];\n  @ignoreClone\n  /** Whether to use joint texture. Automatically used when the device can't support the maxium number of bones. */\n  private _useJointTexture: boolean = false;\n\n  private _skin: Skin;\n\n  /**\n   * Constructor of SkinnedMeshRenderer\n   * @param entity - Entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._mat = new Matrix();\n    this._weights = null;\n    this._skin = null;\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(context: RenderContext) {\n    super._updateShaderData(context);\n\n    if (!this._useJointTexture && this.matrixPalette) {\n      this.shaderData.setFloatArray(SkinnedMeshRenderer._jointMatrixProperty, this.matrixPalette);\n    }\n  }\n\n  /**\n   * Set morph target weights\n   * @param weights - Weights\n   */\n  setWeights(weights: number[]) {\n    this._weights = weights;\n    if (!weights) {\n      return;\n    }\n    const len = weights.length;\n    for (let i = 0; i < len; i++) {\n      this.weightsIndices[i] = i;\n    }\n\n    const weightsIndices = this.weightsIndices;\n\n    for (let i = 0; i < len - 1; i++) {\n      for (let j = i + 1; j < len; j++) {\n        if (weights[j] > weights[i]) {\n          let t = weights[i];\n          weights[i] = weights[j];\n          weights[j] = t;\n          t = weightsIndices[i];\n          weightsIndices[i] = weightsIndices[j];\n          weightsIndices[j] = t;\n        }\n      }\n    }\n    this.mesh.updatePrimitiveWeightsIndices(weightsIndices);\n  }\n\n  /**\n   * Skin Object.\n   */\n  get skin() {\n    return this._skin;\n  }\n\n  set skin(skin) {\n    this._skin = skin;\n  }\n\n  get weights() {\n    return this._weights;\n  }\n\n  _initJoints() {\n    if (!this._skin) return;\n    const skin = this._skin;\n\n    const joints = skin.joints;\n    const jointNodes = [];\n    for (let i = joints.length - 1; i >= 0; i--) {\n      jointNodes[i] = this.findByNodeName(this.entity, joints[i]);\n    } // end of for\n    this.matrixPalette = new Float32Array(jointNodes.length * 16);\n    this.jointNodes = jointNodes;\n\n    /** Whether to use a skeleton texture */\n    const rhi = this.entity.engine._hardwareRenderer;\n    if (!rhi) return;\n    const maxAttribUniformVec4 = rhi.renderStates.getParameter(rhi.gl.MAX_VERTEX_UNIFORM_VECTORS);\n    const maxJoints = Math.floor((maxAttribUniformVec4 - 20) / 4);\n    const shaderData = this.shaderData;\n    const jointCount = this.jointNodes?.length;\n    if (jointCount) {\n      shaderData.enableMacro(\"O3_HAS_SKIN\");\n      shaderData.setInt(SkinnedMeshRenderer._jointCountProperty, jointCount);\n      if (joints.length > maxJoints) {\n        if (rhi.canIUseMoreJoints) {\n          this._useJointTexture = true;\n          shaderData.enableMacro(\"O3_USE_JOINT_TEXTURE\");\n          shaderData.setTexture(SkinnedMeshRenderer._jointSamplerProperty, this.jointTexture);\n        } else {\n          Logger.error(\n            `component's joints count(${joints}) greater than device's MAX_VERTEX_UNIFORM_VECTORS number ${maxAttribUniformVec4}, and don't support jointTexture in this device. suggest joint count less than ${maxJoints}.`,\n            this\n          );\n        }\n      } else {\n        const maxJoints = Math.max(SkinnedMeshRenderer._maxJoints, joints.length);\n        SkinnedMeshRenderer._maxJoints = maxJoints;\n        shaderData.disableMacro(\"O3_USE_JOINT_TEXTURE\");\n        shaderData.enableMacro(\"O3_JOINTS_NUM\", maxJoints.toString());\n      }\n    } else {\n      shaderData.disableMacro(\"O3_HAS_SKIN\");\n    }\n  }\n\n  private findByNodeName(entity: Entity, nodeName: string) {\n    if (!entity) return null;\n\n    const n = entity.findByName(nodeName);\n\n    if (n) return n;\n\n    return this.findByNodeName(entity.parent, nodeName);\n  }\n\n  private _findParent(entity: Entity, nodeName: string) {\n    if (entity) {\n      const parent = entity.parent;\n      if (!parent) return null;\n      if (parent.name === nodeName) return parent;\n\n      const brother = parent.findByName(nodeName);\n      if (brother) return brother;\n\n      return this._findParent(parent, nodeName);\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  update() {\n    if (!this._hasInitJoints) {\n      this._initJoints();\n      this._hasInitJoints = true;\n    }\n    if (this._skin) {\n      const joints = this.jointNodes;\n      const ibms = this._skin.inverseBindMatrices;\n      const matrixPalette = this.matrixPalette;\n      const worldToLocal = this.entity.getInvModelMatrix();\n\n      const mat = this._mat;\n      for (let i = joints.length - 1; i >= 0; i--) {\n        mat.identity();\n        if (joints[i]) {\n          Matrix.multiply(joints[i].transform.worldMatrix, ibms[i], mat);\n        } else {\n          ibms[i].cloneTo(mat);\n        }\n        Matrix.multiply(worldToLocal, mat, mat);\n        matrixPalette.set(mat.elements, i * 16);\n      } // end of for\n      if (this._useJointTexture) {\n        this.createJointTexture();\n      }\n    }\n  }\n\n  /**\n   * Generate joint texture.\n   * Format: (4 * RGBA) * jointCont\n   */\n  createJointTexture() {\n    if (!this.jointTexture) {\n      const engine = this.engine;\n      const rhi = engine._hardwareRenderer;\n      if (!rhi) return;\n      this.jointTexture = new Texture2D(engine, 4, this.jointNodes.length, TextureFormat.R32G32B32A32, false);\n      this.jointTexture.filterMode = TextureFilterMode.Point;\n    }\n    this.jointTexture.setPixelBuffer(this.matrixPalette);\n  }\n}\n", "import { Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Renderer } from \"../Renderer\";\n\n/**\n * LOD rendering group\n */\nexport class LODGroup extends Renderer {\n  private _lods = [];\n\n  /**\n   * Add a LOD level.\n   * @param distance - Distance between current entity and the camera.\n   * @param renderer - Renderer, when LOD level enabled, use this renderer to render.\n   */\n  addLod(distance: number, renderer: Renderer) {\n    // Disable component render function.\n    renderer.enabled = false;\n\n    this._lods.push({\n      distance,\n      rendererAbility: renderer\n    });\n\n    this._lods.sort((a, b) => b.distance - a.distance);\n  }\n\n  /**\n   * @private\n   */\n  render(camera: Camera) {\n    if (this._lods.length <= 0) return;\n\n    const dist = Vector3.distance(camera.entity.transform.worldPosition, this.entity.transform.worldPosition);\n\n    const lods = this._lods;\n    let activeLevel = 0;\n    for (let i = lods.length - 1; i >= 0; i--) {\n      const lod = lods[i];\n      if (dist < lod.distance) {\n        activeLevel = i;\n        break;\n      }\n    } // end of for\n\n    const lod = lods[activeLevel];\n    lod.rendererAbility.render(camera);\n  }\n}\n", "/**\n * Define the face of the cube texture.\n */\nexport enum TextureCubeFace {\n  /** Positive X face for a cube-mapped texture. */\n  PositiveX = 0,\n  /** Negative X face for a cube-mapped texture. */\n  NegativeX = 1,\n  /** Positive Y face for a cube-mapped texture. */\n  PositiveY = 2,\n  /** Negative Y face for a cube-mapped texture. */\n  NegativeY = 3,\n  /** Positive Z face for a cube-mapped texture. */\n  PositiveZ = 4,\n  /** Negative Z face for a cube-mapped texture. */\n  NegativeZ = 5\n}\n", "import { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Cube texture.\n */\nexport class TextureCubeMap extends Texture {\n  private _format: TextureFormat;\n  /** Backward compatible with WebGL1.0. */\n  private _compressedFaceFilled: number[] = [0, 0, 0, 0, 0, 0];\n\n  /**\n   * Texture format.\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * Create TextureCube.\n   * @param engine - Define the engine to use to render this texture\n   * @param size - Texture size. texture width must be equal to height in cube texture\n   * @param format - Texture format,default TextureFormat.R8G8B8A8\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(engine: Engine, size: number, format: TextureFormat = TextureFormat.R8G8B8A8, mipmap: boolean = true) {\n    super(engine);\n    const rhi = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n    const isWebGL2: boolean = rhi.isWebGL2;\n\n    if (!Texture._supportTextureFormat(format, rhi)) {\n      throw new Error(`Texture format is not supported:${TextureFormat[format]}`);\n    }\n\n    if (mipmap && !isWebGL2 && !Texture._isPowerOf2(size)) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n      mipmap = false;\n    }\n\n    const formatDetail = Texture._getFormatDetail(format, gl, isWebGL2);\n\n    this._glTexture = gl.createTexture();\n    this._formatDetail = formatDetail;\n    this._rhi = rhi;\n    this._target = gl.TEXTURE_CUBE_MAP;\n    this._mipmap = mipmap;\n    this._width = size;\n    this._height = size;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    (formatDetail.isCompressed && !isWebGL2) || this._initMipmap(true);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * Setting pixels data through cube face,color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks When compressed texture is in WebGL1, the texture must be filled first before writing the sub-region\n   * @param face - Cube face\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y -  Y coordinate of area start\n   * @param width - Data width.if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height.if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    face: TextureCubeFace,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x?: number,\n    y?: number,\n    width?: number,\n    height?: number\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const { internalFormat, baseFormat, dataType, isCompressed } = this._formatDetail;\n    const mipSize = Math.max(1, this._width >> mipLevel);\n\n    x = x || 0;\n    y = y || 0;\n    width = width || mipSize - x;\n    height = height || mipSize - y;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isCompressed) {\n      const mipBit = 1 << mipLevel;\n      if (isWebGL2 || this._compressedFaceFilled[face] & mipBit) {\n        gl.compressedTexSubImage2D(\n          gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n          mipLevel,\n          x,\n          y,\n          width,\n          height,\n          internalFormat,\n          colorBuffer\n        );\n      } else {\n        gl.compressedTexImage2D(\n          gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n          mipLevel,\n          internalFormat,\n          width,\n          height,\n          0,\n          colorBuffer\n        );\n        this._compressedFaceFilled[face] |= mipBit;\n      }\n    } else {\n      gl.texSubImage2D(\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n        mipLevel,\n        x,\n        y,\n        width,\n        height,\n        baseFormat,\n        dataType,\n        colorBuffer\n      );\n    }\n\n    this._unbind();\n  }\n\n  /**\n   * Setting pixels data through cube face, TexImageSource, designated area and texture mipmapping level.\n   * @param face - Cube face\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultipltAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    face: TextureCubeFace,\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x?: number,\n    y?: number\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);\n    gl.texSubImage2D(\n      gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n      mipLevel,\n      x || 0,\n      y || 0,\n      baseFormat,\n      dataType,\n      imageSource\n    );\n    this._unbind();\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified cube face and area.\n   * @param face - You can choose which cube face to read\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void {\n    if (this._formatDetail.isCompressed) {\n      throw new Error(\"Unable to read compressed texture\");\n    }\n    super._getPixelBuffer(face, x, y, width, height, out);\n  }\n}\n", "import { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * The texture is used for the output of depth information in off-screen rendering.\n */\nexport class RenderDepthTexture extends Texture {\n  /** @internal */\n  public _isCube: boolean = false;\n\n  private _format: RenderBufferDepthFormat;\n  private _autoMipmap: boolean = false;\n\n  /**\n   * Render depth texture format.\n   */\n  get format(): RenderBufferDepthFormat {\n    return this._format;\n  }\n\n  /**\n   * Whether to automatically generate multi-level textures.\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoMipmap;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoMipmap = value;\n  }\n\n  /**\n   * Create RenderDepthTexture.\n   * @param engine - Define the engine to use to render this depth texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default RenderBufferDepthFormat.Depth, engine will automatically select the supported precision\n   * @param mipmap - Whether to use multi-level texture\n   * @param isCube - Whether it's cube texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: RenderBufferDepthFormat = RenderBufferDepthFormat.Depth,\n    mipmap: boolean = false,\n    isCube: boolean = false\n  ) {\n    super(engine);\n    const rhi = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n    const isWebGL2: boolean = rhi.isWebGL2;\n\n    if (!Texture._supportRenderBufferDepthFormat(format, rhi, true)) {\n      throw new Error(`RenderBufferDepthFormat is not supported:${RenderBufferDepthFormat[format]}`);\n    }\n\n    if (isCube && width !== height) {\n      throw new Error(\"The cube texture must have the same width and height\");\n    }\n    if (mipmap && !isWebGL2 && (!Texture._isPowerOf2(width) || !Texture._isPowerOf2(height))) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n      mipmap = false;\n    }\n\n    this._glTexture = gl.createTexture();\n    this._formatDetail = Texture._getRenderBufferDepthFormatDetail(format, gl, isWebGL2);\n    this._isCube = isCube;\n    this._rhi = rhi;\n    this._target = isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._initMipmap(isCube);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n}\n", "import { EngineObject } from \"../base\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { RenderColorTexture } from \"./RenderColorTexture\";\nimport { RenderDepthTexture } from \"./RenderDepthTexture\";\nimport { Texture } from \"./Texture\";\n\n/**\n * The render target used for off-screen rendering.\n */\nexport class RenderTarget extends EngineObject {\n  public _frameBuffer: WebGLFramebuffer;\n  public _MSAAFrameBuffer: WebGLFramebuffer | null;\n\n  private _rhi;\n  private _width: number;\n  private _height: number;\n  private _antiAliasing: number;\n  private _colorTextures: RenderColorTexture[];\n  private _depthTexture: RenderDepthTexture | null;\n  private _depthRenderBuffer: WebGLRenderbuffer | null;\n  private _MSAAColorRenderBuffers: WebGLRenderbuffer[] = [];\n  private _MSAADepthRenderBuffer: WebGLRenderbuffer | null;\n  private _oriDrawBuffers: GLenum[];\n  private _blitDrawBuffers: GLenum[] | null;\n\n  /**\n   * Render target width.\n   * @readonly\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * Render target height.\n   * @readonly\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * Render color texture count.\n   * @readonly\n   */\n  get colorTextureCount(): number {\n    return this._colorTextures.length;\n  }\n\n  /**\n   * Depth texture.\n   * @readonly\n   */\n  get depthTexture(): RenderDepthTexture | null {\n    return this._depthTexture;\n  }\n\n  /**\n   * Anti-aliasing level.\n   * @remarks If the anti-aliasing level set is greater than the maximum level supported by the hardware, the maximum level of the hardware will be used.\n   * @readonly\n   */\n  get antiAliasing(): number {\n    return this._antiAliasing;\n  }\n\n  /**\n   * Create a render target through color texture and depth format.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTexture - Render color texture\n   * @param depthFormat - Depth format. default RenderBufferDepthFormat.Depth, engine will automatically select the supported precision\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: RenderColorTexture,\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target through color texture and depth format.\n   * @remarks If the color texture is not transmitted, only the depth texture is generated.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTexture - Render color texture\n   * @param depthTexture - Render depth texture\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: RenderColorTexture | null,\n    depthTexture: RenderDepthTexture,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target with color texture array and depth format.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTextures - Render color texture array\n   * @param depthFormat - Depth format. default RenderBufferDepthFormat.Depth,engine will automatically select the supported precision\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: RenderColorTexture[],\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target with color texture array and depth texture.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTextures - Render color texture array\n   * @param depthTexture - Depth texture\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: RenderColorTexture[],\n    depthTexture: RenderDepthTexture,\n    antiAliasing?: number\n  );\n\n  /**\n   * @internal\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    renderTexture: RenderColorTexture | Array<RenderColorTexture> | null,\n    depth: RenderDepthTexture | RenderBufferDepthFormat | null = RenderBufferDepthFormat.Depth,\n    antiAliasing: number = 1\n  ) {\n    super(engine);\n    const rhi = engine._hardwareRenderer;\n\n    /** @TODO\n     * MRT + Cube + [,MSAA]\n     * MRT + MSAA\n     */\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n\n    if (!(depth instanceof RenderDepthTexture) && !Texture._supportRenderBufferDepthFormat(depth, rhi, false)) {\n      throw new Error(`RenderBufferDepthFormat is not supported:${RenderBufferDepthFormat[depth]}`);\n    }\n\n    if ((renderTexture as RenderColorTexture[])?.length > 1 && !rhi.canIUse(GLCapabilityType.drawBuffers)) {\n      throw new Error(\"MRT is not supported\");\n    }\n\n    // Handle this._colorTextures\n    if (renderTexture) {\n      this._colorTextures = renderTexture instanceof Array ? renderTexture.slice() : [renderTexture];\n    } else {\n      this._colorTextures = [];\n    }\n\n    if (this._colorTextures.some((v: RenderColorTexture) => v.width !== width || v.height !== height)) {\n      throw new Error(\"RenderColorTexture's size must as same as RenderTarget\");\n    }\n\n    if (depth instanceof RenderDepthTexture && (depth.width !== width || depth.height !== height)) {\n      throw new Error(\"RenderDepthTexture's size must as same as RenderTarget\");\n    }\n\n    // TODO: necessary to support MRT + Cube + [,MSAA] ?\n    if (this._colorTextures.length > 1 && this._colorTextures.some((v: RenderColorTexture) => v._isCube)) {\n      throw new Error(\"MRT+Cube+[,MSAA] is not supported\");\n    }\n\n    const maxAntiAliasing = rhi.capability.maxAntiAliasing;\n    if (antiAliasing > maxAntiAliasing) {\n      Logger.warn(`MSAA antiAliasing exceeds the limit and is automatically downgraded to:${maxAntiAliasing}`);\n      antiAliasing = maxAntiAliasing;\n    }\n\n    this._rhi = rhi;\n    this._width = width;\n    this._height = height;\n    this._frameBuffer = gl.createFramebuffer();\n    this._antiAliasing = antiAliasing;\n\n    if (depth instanceof RenderDepthTexture) {\n      this._depthTexture = depth;\n    }\n\n    // Bind main FBO\n    this._bindMainFBO(depth);\n\n    // Bind MSAA FBO\n    if (antiAliasing > 1) {\n      this._MSAAFrameBuffer = gl.createFramebuffer();\n      this._bindMSAAFBO(depth);\n    }\n  }\n\n  /**\n   * Get the render color texture by index.\n   * @param index\n   */\n  public getColorTexture(index: number = 0): RenderColorTexture | null {\n    return this._colorTextures[index];\n  }\n\n  /**\n   * Destroy render target.\n   */\n  public destroy(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    gl.deleteFramebuffer(this._frameBuffer);\n    this._depthRenderBuffer && gl.deleteRenderbuffer(this._depthRenderBuffer);\n    this._MSAAFrameBuffer && gl.deleteFramebuffer(this._MSAAFrameBuffer);\n    this._MSAADepthRenderBuffer && gl.deleteRenderbuffer(this._MSAADepthRenderBuffer);\n\n    for (let i = 0; i < this._colorTextures.length; i++) {\n      this._colorTextures[i].destroy();\n    }\n\n    for (let i = 0; i < this._MSAAColorRenderBuffers.length; i++) {\n      gl.deleteRenderbuffer(this._MSAAColorRenderBuffers[i]);\n    }\n\n    this._depthTexture && this._depthTexture.destroy();\n\n    this._frameBuffer = null;\n    this._colorTextures.length = 0;\n    this._depthTexture = null;\n    this._depthRenderBuffer = null;\n    this._MSAAFrameBuffer = null;\n    this._MSAAColorRenderBuffers.length = 0;\n    this._MSAADepthRenderBuffer = null;\n  }\n\n  /**\n   * Activate this RenderTarget.\n   * @remarks\n   * If MSAA is turned on, MSAA FBO is activated, and then this._blitRenderTarget() is performed to exchange FBO.\n   * If MSAA is not turned on, activate the main FBO.\n   */\n  public _activeRenderTarget(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    if (this._MSAAFrameBuffer) {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._MSAAFrameBuffer);\n    } else {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n    }\n  }\n\n  /**\n   * Set which face of the cube texture to render to.\n   * @param faceIndex - Cube texture face\n   */\n  public _setRenderTargetFace(faceIndex: TextureCubeFace = TextureCubeFace.PositiveX): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const colorTexture = this._colorTextures[0];\n    const depthTexture = this._depthTexture;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n\n    // Bind render color texture\n    if (colorTexture?._isCube) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\n        colorTexture._glTexture,\n        0\n      );\n    }\n\n    // Bind depth texture\n    if (depthTexture?._isCube) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        depthTexture._formatDetail.attachment,\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\n        depthTexture._glTexture,\n        0\n      );\n    }\n\n    // Revert current activated render target\n    this._activeRenderTarget();\n  }\n\n  /**\n   * Blit FBO.\n   */\n  public _blitRenderTarget(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const mask = gl.COLOR_BUFFER_BIT | (this._depthTexture ? gl.DEPTH_BUFFER_BIT : 0);\n    const colorTextureLength = this._colorTextures.length;\n\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this._MSAAFrameBuffer);\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this._frameBuffer);\n\n    for (let textureIndex = 0; textureIndex < colorTextureLength; textureIndex++) {\n      const attachment = gl.COLOR_ATTACHMENT0 + textureIndex;\n\n      this._blitDrawBuffers[textureIndex] = attachment;\n\n      gl.readBuffer(attachment);\n      gl.drawBuffers(this._blitDrawBuffers);\n      gl.blitFramebuffer(0, 0, this._width, this._height, 0, 0, this._width, this._height, mask, gl.NEAREST);\n\n      this._blitDrawBuffers[textureIndex] = gl.NONE;\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  /**\n   * Bind main FBO.\n   */\n  private _bindMainFBO(renderDepth: RenderDepthTexture | RenderBufferDepthFormat | null): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const colorTextureLength = this._colorTextures.length;\n    const drawBuffers = new Array(colorTextureLength);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n\n    /** Color render buffer */\n    for (let i = 0; i < colorTextureLength; i++) {\n      const colorTexture = this._colorTextures[i];\n      const attachment = gl.COLOR_ATTACHMENT0 + i;\n\n      drawBuffers[i] = attachment;\n\n      // Cube texture please call _setRenderTargetFace()\n      if (!colorTexture._isCube) {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, colorTexture._glTexture, 0);\n      }\n    }\n\n    if (colorTextureLength > 1) {\n      gl.drawBuffers(drawBuffers);\n    }\n    this._oriDrawBuffers = drawBuffers;\n\n    /** Depth render buffer */\n    if (renderDepth !== null) {\n      if (renderDepth instanceof RenderDepthTexture) {\n        // Cube texture _setRenderTargetFace()\n        if (!renderDepth._isCube) {\n          gl.framebufferTexture2D(\n            gl.FRAMEBUFFER,\n            renderDepth._formatDetail.attachment,\n            gl.TEXTURE_2D,\n            renderDepth._glTexture,\n            0\n          );\n        }\n      } else if (this._antiAliasing <= 1) {\n        const { internalFormat, attachment } = Texture._getRenderBufferDepthFormatDetail(renderDepth, gl, isWebGL2);\n        const depthRenderBuffer = gl.createRenderbuffer();\n\n        this._depthRenderBuffer = depthRenderBuffer;\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, this._width, this._height);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, depthRenderBuffer);\n      }\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  }\n\n  /**\n   * Bind MSAA FBO.\n   */\n  private _bindMSAAFBO(renderDepth: RenderDepthTexture | RenderBufferDepthFormat | null): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const MSAADepthRenderBuffer = gl.createRenderbuffer();\n    const colorTextureLength = this._colorTextures.length;\n\n    this._blitDrawBuffers = new Array(colorTextureLength);\n    this._MSAADepthRenderBuffer = MSAADepthRenderBuffer;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._MSAAFrameBuffer);\n\n    // Prepare MRT+MSAA color RBOs\n    for (let i = 0; i < colorTextureLength; i++) {\n      const MSAAColorRenderBuffer = gl.createRenderbuffer();\n\n      this._MSAAColorRenderBuffers[i] = MSAAColorRenderBuffer;\n      this._blitDrawBuffers[i] = gl.NONE;\n\n      gl.bindRenderbuffer(gl.RENDERBUFFER, MSAAColorRenderBuffer);\n      gl.renderbufferStorageMultisample(\n        gl.RENDERBUFFER,\n        this._antiAliasing,\n        this._colorTextures[i]._formatDetail.internalFormat,\n        this._width,\n        this._height\n      );\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, MSAAColorRenderBuffer);\n    }\n    gl.drawBuffers(this._oriDrawBuffers);\n\n    // Prepare MSAA depth RBO\n    if (renderDepth !== null) {\n      const { internalFormat, attachment } =\n        renderDepth instanceof RenderDepthTexture\n          ? renderDepth._formatDetail\n          : Texture._getRenderBufferDepthFormatDetail(renderDepth, gl, isWebGL2);\n\n      gl.bindRenderbuffer(gl.RENDERBUFFER, MSAADepthRenderBuffer);\n      gl.renderbufferStorageMultisample(gl.RENDERBUFFER, this._antiAliasing, internalFormat, this._width, this._height);\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, MSAADepthRenderBuffer);\n    }\n\n    this._checkFrameBuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  }\n\n  /**\n   * Check FBO.\n   */\n  private _checkFrameBuffer(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n    switch (e) {\n      case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n        throw new Error(\n          \"The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete\"\n        );\n      case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n        throw new Error(\"There is no attachment\");\n      case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n        throw new Error(\" Height and width of the attachment are not the same.\");\n      case gl.FRAMEBUFFER_UNSUPPORTED:\n        throw new Error(\n          \"The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer\"\n        );\n    }\n\n    if (isWebGL2 && e === gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE) {\n      throw new Error(\n        \"The values of gl.RENDERBUFFER_SAMPLES are different among attached renderbuffers, or are non-zero if the attached images are a mix of renderbuffers and textures.\"\n      );\n    }\n  }\n}\n", "import { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { RenderBufferColorFormat } from \"./enums/RenderBufferColorFormat\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * The texture is used for the output of color information in off-screen rendering.\n */\nexport class RenderColorTexture extends Texture {\n  /** @internal */\n  public _isCube: boolean = false;\n\n  private _format: RenderBufferColorFormat;\n  private _autoMipmap: boolean = false;\n\n  /**\n   * Render color texture format.\n   * @readonly\n   */\n  get format(): RenderBufferColorFormat {\n    return this._format;\n  }\n\n  /**\n   * Whether to automatically generate multi-level textures.\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoMipmap;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoMipmap = value;\n  }\n\n  /**\n   * Create RenderColorTexture.\n   * @param engine - Define the engine to use to render this color texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default RenderBufferColorFormat.R8G8B8A8\n   * @param mipmap - Whether to use multi-level texture\n   * @param isCube - Whether it's cube texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: RenderBufferColorFormat = RenderBufferColorFormat.R8G8B8A8,\n    mipmap: boolean = false,\n    isCube: boolean = false\n  ) {\n    super(engine);\n    const rhi = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n    const isWebGL2: boolean = rhi.isWebGL2;\n\n    if (!Texture._supportRenderBufferColorFormat(format, rhi)) {\n      throw new Error(`RenderBufferColorFormat is not supported:${RenderBufferColorFormat[format]}`);\n    }\n\n    if (isCube && width !== height) {\n      throw new Error(\"The cube texture must have the same width and height\");\n    }\n    if (mipmap && !isWebGL2 && (!Texture._isPowerOf2(width) || !Texture._isPowerOf2(height))) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n      mipmap = false;\n    }\n\n    this._glTexture = gl.createTexture();\n    this._formatDetail = Texture._getRenderBufferColorFormatDetail(format, gl, isWebGL2);\n    this._isCube = isCube;\n    this._rhi = rhi;\n    this._target = isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._initMipmap(isCube);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified cube face and area.\n   * @param face - You can choose which cube face to read if it's cube texture\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  public getPixelBuffer(\n    face: TextureCubeFace | null,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void {\n    super._getPixelBuffer(face, x, y, width, height, out);\n  }\n}\n", "/**\n * Buffer usage.\n */\nexport enum BufferUsage {\n  /** The buffer content are intended to be specified once, and used many times */\n  Static,\n  /** The buffer contents are intended to be respecified repeatedly, and used many times */\n  Dynamic,\n  /** The buffer contents are intended to be specified once, and used at most a few times */\n  Stream\n}\n", "/**\n * Vertex element format.\n */\nexport enum VertexElementFormat {\n  /** 32-bit float */\n  Float,\n  /** Two-dimensional 32-bit float */\n  Vector2,\n  /** Three-dimensional 32-bit float */\n  Vector3,\n  /** Four-dimensional 32-bit float */\n  Vector4,\n  /** Four-dimensional 8-bit integer,range is [-128,127] */\n  Byte4,\n  /** Four-dimensional 8-bit Unsigned integer, range is [0,255] */\n  UByte4,\n  /** Four-dimensional 8-bit Normalized integer, range is [-1,1] */\n  NormalizedByte4,\n  /** Four-dimensional 8-bit Normalized unsigned integer, range is [0,1] */\n  NormalizedUByte4,\n  /** Two-dimensional 16-bit integer, range is[-32768, 32767] */\n  Short2,\n  /** Two-dimensional 16-bit Unsigned integer, range is [0, 65535] */\n  UShort2,\n  /** Two-dimensional 16-bit Unsigned integer, range is [-1, 1] */\n  NormalizedShort2,\n  /** Two-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */\n  NormalizedUShort2,\n  /** Four-dimensional 16-bit integer, range is [-32768, 32767] */\n  Short4,\n  /** Four-dimensional 16-bit Unsigned integer, range is [0, 65535] */\n  UShort4,\n  /** Four-dimensional 16-bit Normalized integer, range is[-1, 1] */\n  NormalizedShort4,\n  /** Four-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */\n  NormalizedUShort4\n}\n", "/**\n * Index format.\n */\nexport enum IndexFormat {\n  /** 8 bit */\n  UInt8,\n  /** 16 bit */\n  UInt16,\n  /** 32 bit */\n  UInt32\n}\n", "import { BufferUsage } from \"./enums/BufferUsage\";\nimport { VertexElementFormat } from \"./enums/VertexElementFormat\";\nimport { DataType } from \"../base/Constant\";\nimport { IndexFormat } from \"./enums/IndexFormat\";\n\nexport interface ElementInfo {\n  size: number;\n  type: DataType;\n}\n\nexport class BufferUtil {\n  /**\n   * @internal\n   */\n  static _getGLBufferUsage(gl: WebGLRenderingContext, bufferUsage: BufferUsage): number {\n    switch (bufferUsage) {\n      case BufferUsage.Static:\n        return gl.STATIC_DRAW;\n      case BufferUsage.Dynamic:\n        return gl.DYNAMIC_DRAW;\n      case BufferUsage.Stream:\n        return gl.STREAM_DRAW;\n    }\n  }\n\n  static _getGLIndexType(indexFormat: IndexFormat): DataType {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return DataType.UNSIGNED_BYTE;\n      case IndexFormat.UInt16:\n        return DataType.UNSIGNED_SHORT;\n      case IndexFormat.UInt32:\n        return DataType.UNSIGNED_INT;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getElementInfo(format: VertexElementFormat): ElementInfo {\n    let size: number;\n    let type: DataType;\n    switch (format) {\n      case VertexElementFormat.Float:\n        size = 1;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector2:\n        size = 2;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector3:\n        size = 3;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector4:\n        size = 4;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Byte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        break;\n      case VertexElementFormat.Short2:\n        size = 2;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.Short4:\n        size = 4;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.UShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      default:\n        break;\n    }\n    return { size, type };\n  }\n}\n", "/**\n * Buffer binding flag.\n */\nexport enum BufferBindFlag {\n  /** Vertex buffer binding flag */\n  VertexBuffer,\n  /** Index buffer binding flag */\n  IndexBuffer\n}\n", "/**\n * Define update strategy when call bufferData/bufferSubData func.\n */\nexport enum SetDataOptions {\n  /** Can overwrite part of used buffer data and ensure correct rendering */\n  None,\n  /** Discard old buffer and create a new buffer, and won't affect the previous rendering */\n  Discard\n  ///** Need to ensure that the buffer data will not be overwritten, and won't interrupting rendering if setData immediately */\n  //NoOverwrite\n}\n", "import { RefObject } from \"../asset/RefObject\";\nimport { Engine } from \"../Engine\";\nimport { HardwareRenderer } from \"../HardwareRenderer\";\nimport { BufferUtil } from \"./BufferUtil\";\nimport { BufferBindFlag } from \"./enums/BufferBindFlag\";\nimport { BufferUsage } from \"./enums/BufferUsage\";\nimport { SetDataOptions } from \"./enums/SetDataOptions\";\n\n/**\n * Buffer.\n */\nexport class Buffer extends RefObject {\n  _glBindTarget: number;\n  _glBufferUsage: number;\n  _nativeBuffer: WebGLBuffer;\n\n  private _hardwareRenderer: HardwareRenderer;\n  private _type: BufferBindFlag;\n  private _byteLength: number;\n  private _bufferUsage: BufferUsage;\n\n  /**\n   * Engine.\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  /**\n   * Buffer binding flag.\n   */\n  get type(): BufferBindFlag {\n    return this._type;\n  }\n\n  /**\n   * Byte length.\n   */\n  get byteLength(): number {\n    return this._byteLength;\n  }\n\n  /**\n   * Buffer usage.\n   */\n  get bufferUsage(): BufferUsage {\n    return this._bufferUsage;\n  }\n\n  /**\n   * Create Buffer.\n   * @param engine - Engine\n   * @param type - Buffer binding flag\n   * @param byteLength - Byte length\n   * @param bufferUsage - Buffer usage\n   */\n  constructor(engine: Engine, type: BufferBindFlag, byteLength: number, bufferUsage?: BufferUsage);\n\n  /**\n   * Create Buffer.\n   * @param engine - Engine\n   * @param type - Buffer binding flag\n   * @param byteLength - Byte length\n   * @param bufferUsage - Buffer usage\n   */\n  constructor(engine: Engine, type: BufferBindFlag, data: ArrayBuffer | ArrayBufferView, bufferUsage?: BufferUsage);\n\n  constructor(\n    engine: Engine,\n    type: BufferBindFlag,\n    byteLengthOrData: number | ArrayBuffer | ArrayBufferView,\n    bufferUsage: BufferUsage = BufferUsage.Static\n  ) {\n    super(engine);\n    this._engine = engine;\n    this._type = type;\n    this._bufferUsage = bufferUsage;\n\n    const hardwareRenderer = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = hardwareRenderer.gl;\n    const glBufferUsage = BufferUtil._getGLBufferUsage(gl, bufferUsage);\n    const glBindTarget = type === BufferBindFlag.VertexBuffer ? gl.ARRAY_BUFFER : gl.ELEMENT_ARRAY_BUFFER;\n\n    this._nativeBuffer = gl.createBuffer();\n    this._hardwareRenderer = hardwareRenderer;\n    this._glBufferUsage = glBufferUsage;\n    this._glBindTarget = glBindTarget;\n\n    this.bind();\n    if (typeof byteLengthOrData === \"number\") {\n      this._byteLength = byteLengthOrData;\n      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);\n    } else {\n      this._byteLength = byteLengthOrData.byteLength;\n      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  /**\n   * Bind buffer.\n   */\n  bind(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bindBuffer(this._glBindTarget, this._nativeBuffer);\n  }\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   */\n  setData(data: ArrayBuffer | ArrayBufferView): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - buffer byte offset\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Buffer byte offset\n   * @param dataLength - Data length\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength?: number): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Buffer byte offset\n   * @param dataLength - Data length\n   * @param options - Update strategy: None/Discard/NoOverwrite\n   */\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number,\n    dataOffset: number,\n    dataLength: number,\n    options: SetDataOptions\n  ): void;\n\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number = 0,\n    dataOffset: number = 0,\n    dataLength?: number,\n    options: SetDataOptions = SetDataOptions.None\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n    const glBindTarget: number = this._glBindTarget;\n    this.bind();\n\n    if (options === SetDataOptions.Discard) {\n      gl.bufferData(glBindTarget, this._byteLength, this._glBufferUsage);\n    }\n\n    // TypeArray is BYTES_PER_ELEMENT, unTypeArray is 1\n    const byteSize = (<Uint8Array>data).BYTES_PER_ELEMENT || 1;\n    const dataByteLength = dataLength ? byteSize * dataLength : data.byteLength;\n\n    if (dataOffset !== 0 || dataByteLength < data.byteLength) {\n      const isArrayBufferView = (<ArrayBufferView>data).byteOffset !== undefined;\n      if (isWebGL2 && isArrayBufferView) {\n        gl.bufferSubData(glBindTarget, bufferByteOffset, <ArrayBufferView>data, dataOffset, dataByteLength / byteSize);\n      } else {\n        const subData = new Uint8Array(\n          isArrayBufferView ? (<ArrayBufferView>data).buffer : <ArrayBuffer>data,\n          dataOffset * byteSize,\n          dataByteLength\n        );\n        gl.bufferSubData(glBindTarget, bufferByteOffset, subData);\n      }\n    } else {\n      gl.bufferSubData(glBindTarget, bufferByteOffset, data);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   */\n  getData(data: ArrayBufferView): void;\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Output data offset\n   * @param dataLength - Output data length\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength: number): void;\n\n  getData(data: ArrayBufferView, bufferByteOffset: number = 0, dataOffset: number = 0, dataLength?: number): void {\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n\n    if (isWebGL2) {\n      const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n      this.bind();\n      gl.getBufferSubData(this._glBindTarget, bufferByteOffset, data, dataOffset, dataLength);\n    } else {\n      throw \"Buffer is write-only on WebGL1.0 platforms.\";\n    }\n  }\n\n  /**\n   * @override\n   * Destroy.\n   */\n  _onDestroy() {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.deleteBuffer(this._nativeBuffer);\n    this._nativeBuffer = null;\n    this._hardwareRenderer = null;\n  }\n\n  /**\n   * @deprecated\n   */\n  resize(dataLength: number) {\n    this.bind();\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bufferData(this._glBindTarget, dataLength, this._glBufferUsage);\n    this._byteLength = dataLength;\n  }\n}\n", "/**\n * Primitive topology.\n */\nexport enum PrimitiveTopology {\n  /** Draws a single dot */\n  Points = 0,\n  /** Draws a line between a pair of vertices */\n  Lines = 1,\n  /** Draws a straight line to the next vertex, and connects the last vertex back to the first */\n  LineLoop = 2,\n  /** Draws a straight line to the next vertex. */\n  LineStrip = 3,\n  /** Draws a triangle for a group of three vertices */\n  Triangles = 4,\n  /** Draws a triangle strip */\n  TriangleStrip = 5,\n  /** Draws a triangle fan */\n  TriangleFan = 6\n}\n", "import { IndexFormat } from \"./enums/IndexFormat\";\nimport { Buffer } from \"./Buffer\";\n\n/**\n * Index buffer binding.\n */\nexport class IndexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _format: IndexFormat;\n\n  /**\n   * Index buffer.\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * Index buffer format.\n   */\n  get format(): IndexFormat {\n    return this._format;\n  }\n\n  /**\n   * Create index buffer binding.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  constructor(buffer: Buffer, format: IndexFormat) {\n    this._buffer = buffer;\n    this._format = format;\n  }\n}\n", "import { Buffer } from \"./Buffer\";\n\n/**\n * Vertex buffer binding.\n */\nexport class VertexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _stride: number;\n\n  /**\n   * Vertex buffer.\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * Vertex buffer stride.\n   */\n  get stride(): number {\n    return this._stride;\n  }\n\n  /**\n   * Create vertex buffer.\n   * @param buffer - Vertex buffer\n   * @param stride - Vertex buffer stride\n   */\n  constructor(buffer: Buffer, stride: number) {\n    this._buffer = buffer;\n    this._stride = stride;\n  }\n}\n", "import { IPlatformPrimitive } from \"@oasis-engine/design\";\nimport { RefObject } from \"../asset/RefObject\";\nimport { Engine } from \"../Engine\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { ShaderProgram } from \"../shader/ShaderProgram\";\nimport { BufferUtil } from \"./BufferUtil\";\nimport { IndexFormat } from \"./enums/IndexFormat\";\nimport { VertexElementFormat } from \"./enums/VertexElementFormat\";\nimport { IndexBufferBinding } from \"./IndexBufferBinding\";\nimport { SubPrimitive } from \"./SubPrimitive\";\nimport { VertexBufferBinding } from \"./VertexBufferBinding\";\nimport { VertexElement } from \"./VertexElement\";\n\n/**\n * @private\n */\nexport class Primitive extends RefObject {\n  private static _uvMacro: ShaderMacro = Shader.getMacroByName(\"O3_HAS_UV\");\n  private static _normalMacro: ShaderMacro = Shader.getMacroByName(\"O3_HAS_NORMAL\");\n  private static _tangentMacro: ShaderMacro = Shader.getMacroByName(\"O3_HAS_TANGENT\");\n  private static _vertexColorMacro: ShaderMacro = Shader.getMacroByName(\"O3_HAS_VERTEXCOLOR\");\n  private static _vertexAlphaMacro: ShaderMacro = Shader.getMacroByName(\"O3_HAS_VERTEXALPHA\");\n\n  /** Primitive name */\n  name: string;\n  /** Instanced count, disable instanced drawing when set zero */\n  instanceCount: number = 0;\n\n  /** @internal */\n  _macroCollection: ShaderMacroCollection = new ShaderMacroCollection(); // CM&SS:temp\n  _vertexElementMap: object = {};\n  _glIndexType: number;\n  _platformPrimitive: IPlatformPrimitive;\n\n  private _vertexBufferBindings: VertexBufferBinding[] = [];\n  private _indexBufferBinding: IndexBufferBinding = null;\n  private _vertexElements: VertexElement[] = [];\n\n  /**\n   *\n   */\n  get vertexBufferBindings(): Readonly<VertexBufferBinding[]> {\n    return this._vertexBufferBindings;\n  }\n\n  /**\n   * Vertex element collection.\n   */\n  get vertexElements(): Readonly<VertexElement[]> {\n    return this._vertexElements;\n  }\n\n  /**\n   * Index buffer binding.\n   */\n  get indexBufferBinding(): IndexBufferBinding {\n    return this._indexBufferBinding;\n  }\n\n  targets: any[] = [];\n\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this._platformPrimitive = this._engine._hardwareRenderer.createPlatformPrimitive(this);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBuffer - Vertex buffer\n   * @param stride - Vertex buffer stride\n   * @param firstIndex - Vertex buffer binding index, default is 0\n   */\n  setVertexBufferBinding(vertexBuffer: Buffer, stride: number, firstIndex?: number): void;\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBinding - Vertex buffer binding\n   * @param firstIndex - Vertex buffer binding index, default is 0\n   */\n  setVertexBufferBinding(vertexBufferBinding: VertexBufferBinding, firstIndex?: number): void;\n\n  setVertexBufferBinding(\n    bufferOrBinding: Buffer | VertexBufferBinding,\n    strideOrFirstIndex: number = 0,\n    firstIndex: number = 0\n  ): void {\n    let binding = <VertexBufferBinding>bufferOrBinding;\n    const isBinding = binding.buffer !== undefined;\n    isBinding || (binding = new VertexBufferBinding(<Buffer>bufferOrBinding, strideOrFirstIndex));\n\n    const bindings = this._vertexBufferBindings;\n    bindings.length <= firstIndex && (bindings.length = firstIndex + 1);\n    this._setVertexBufferBinding(isBinding ? strideOrFirstIndex : firstIndex, binding);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param bufferBindings - Vertex buffer binding collection\n   * @param firstIndex - First buffer binding index\n   */\n  setVertexBufferBindings(bufferBindings: VertexBufferBinding[], firstIndex: number = 0): void {\n    const bindings = this._vertexBufferBindings;\n    const count = bufferBindings.length;\n    const needLength = firstIndex + count;\n    bindings.length < needLength && (bindings.length = needLength);\n    for (let i = 0; i < count; i++) {\n      this._setVertexBufferBinding(firstIndex + i, bufferBindings[i]);\n    }\n  }\n\n  /**\n   * Set index buffer.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  setIndexBufferBinding(buffer: Buffer, format: IndexFormat): void;\n\n  /**\n   * Set index buffer.\n   * @param bufferBinding - Index buffer binding\n   */\n  setIndexBufferBinding(bufferBinding: IndexBufferBinding): void;\n\n  setIndexBufferBinding(bufferOrBinding: Buffer | IndexBufferBinding, format?: IndexFormat): void {\n    let binding = <IndexBufferBinding>bufferOrBinding;\n    const isBinding = binding.buffer !== undefined;\n    isBinding || (binding = new IndexBufferBinding(<Buffer>bufferOrBinding, format));\n    this._indexBufferBinding = binding;\n    this._glIndexType = BufferUtil._getGLIndexType(binding.format);\n  }\n\n  /**\n   * Set vertex elements.\n   * @param elements - Vertex element collection\n   */\n  setVertexElements(elements: VertexElement[]): void {\n    this._clearVertexElements();\n    for (let i = 0, n = elements.length; i < n; i++) {\n      this._addVertexElement(elements[i]);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _draw(shaderProgram: ShaderProgram, subPrimitive: SubPrimitive): void {\n    this._platformPrimitive.draw(shaderProgram, subPrimitive);\n  }\n\n  /**\n   * @override\n   */\n  _addRefCount(value: number): void {\n    super._addRefCount(value);\n    const vertexBufferBindings = this._vertexBufferBindings;\n    for (let i = 0, n = vertexBufferBindings.length; i < n; i++) {\n      vertexBufferBindings[i]._buffer._addRefCount(value);\n    }\n  }\n\n  /**\n   * @override\n   * Destroy.\n   */\n  _onDestroy() {\n    this._vertexBufferBindings = null;\n    this._indexBufferBinding = null;\n    this._vertexElements = null;\n    this._vertexElementMap = null;\n    this._platformPrimitive.destroy();\n  }\n\n  private _clearVertexElements(): void {\n    this._vertexElements.length = 0;\n    const vertexElementMap = this._vertexElementMap;\n    for (var k in vertexElementMap) {\n      delete vertexElementMap[k];\n    }\n\n    this._macroCollection.disable(Primitive._uvMacro);\n    this._macroCollection.disable(Primitive._normalMacro);\n    this._macroCollection.disable(Primitive._tangentMacro);\n    this._macroCollection.disable(Primitive._vertexColorMacro);\n    this._macroCollection.disable(Primitive._vertexAlphaMacro);\n  }\n\n  private _addVertexElement(element: VertexElement): void {\n    const { semantic, format } = element;\n    this._vertexElementMap[semantic] = element;\n    this._vertexElements.push(element);\n\n    // init primitive shaderData\n    switch (semantic) {\n      case \"TEXCOORD_0\":\n        this._macroCollection.enable(Primitive._uvMacro);\n        break;\n      case \"NORMAL\":\n        this._macroCollection.enable(Primitive._normalMacro);\n        break;\n      case \"TANGENT\":\n        this._macroCollection.enable(Primitive._tangentMacro);\n        break;\n      case \"COLOR_0\":\n        this._macroCollection.enable(Primitive._vertexColorMacro);\n        if (format === VertexElementFormat.Vector4) this._macroCollection.enable(Primitive._vertexAlphaMacro);\n        break;\n    }\n  }\n\n  private _setVertexBufferBinding(index: number, binding: VertexBufferBinding): void {\n    if (this._getRefCount() > 0) {\n      const lastBinding = this._vertexBufferBindings[index];\n      lastBinding && lastBinding._buffer._addRefCount(-1);\n      binding._buffer._addRefCount(1);\n    }\n    this._vertexBufferBindings[index] = binding;\n  }\n}\n", "import { VertexElementFormat } from \"./enums/VertexElementFormat\";\nimport { ElementInfo, BufferUtil } from \"./BufferUtil\";\n\n/**\n * Vertex element.\n */\nexport class VertexElement {\n  public readonly normalized = false;\n\n  _glElementInfo: ElementInfo;\n\n  private _semantic: string;\n  private _offset: number;\n  private _format: VertexElementFormat;\n  private _bindingIndex: number;\n  private _instanceStepRate: number;\n\n  /**\n   * Vertex semantic.\n   */\n  get semantic(): string {\n    return this._semantic;\n  }\n\n  /**\n   * Vertex data byte offset.\n   */\n  get offset(): number {\n    return this._offset;\n  }\n\n  /**\n   * Vertex data format.\n   */\n  get format(): VertexElementFormat {\n    return this._format;\n  }\n\n  /**\n   * Vertex buffer binding index.\n   */\n  get bindingIndex(): number {\n    return this._bindingIndex;\n  }\n\n  /**\n   * Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.\n   */\n  get instanceStepRate(): number {\n    return this._instanceStepRate;\n  }\n\n  /**\n   * Create vertex element.\n   * @param semantic - Input vertex semantic\n   * @param offset - Vertex data byte offset\n   * @param format - Vertex data format\n   * @param bindingIndex - Vertex buffer binding index\n   * @param instanceStepRate - Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.\n   */\n  constructor(\n    semantic: string,\n    offset: number,\n    format: VertexElementFormat,\n    bindingIndex: number,\n    instanceStepRate: number = 0\n  ) {\n    this._semantic = semantic;\n    this._offset = offset;\n    this._format = format;\n    this._bindingIndex = bindingIndex;\n    this._glElementInfo = BufferUtil._getElementInfo(this.format);\n    this._instanceStepRate = Math.floor(instanceStepRate);\n  }\n\n  /**\n   * @deprecated\n   */\n  get elementInfo(): ElementInfo {\n    return this._glElementInfo;\n  }\n}\n", "import { PrimitiveTopology } from \"./enums/PrimitiveTopology\";\n\n/**\n * Sub primitive.\n */\nexport class SubPrimitive {\n  /** Start drawing offset */\n  start: number;\n  /** Drawing count */\n  count: number;\n  /** Drawing topology */\n  topology: PrimitiveTopology;\n\n  /**\n   * Create sub primitive.\n   * @param start - Start drawing offset\n   * @param count - Drawing count\n   * @param topology - Drawing topology\n   */\n  constructor(start: number = 0, count: number = 0, topology: PrimitiveTopology = PrimitiveTopology.Triangles) {\n    this.start = start;\n    this.count = count;\n    this.topology = topology;\n  }\n}\n", "import { Matrix, Quaternion, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { Entity } from \"../Entity\";\nimport { Renderer } from \"../Renderer\";\nimport { Texture2D } from \"../texture/Texture2D\";\n\ninterface IUvRect {\n  u: number;\n  v: number;\n  width: number;\n  height: number;\n}\n\ninterface IRect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\ninterface IPositionQuad {\n  leftTop: Vector3;\n  leftBottom: Vector3;\n  rightTop: Vector3;\n  rightBottom: Vector3;\n}\n\n/**\n * Sprite renderer.\n * @class\n */\nexport class SpriteRenderer extends Renderer {\n  private static _tempVec40: Vector4 = new Vector4();\n  private static _tempVec41: Vector4 = new Vector4();\n  private static _tempVec42: Vector4 = new Vector4();\n  private static _tempVec43: Vector4 = new Vector4();\n\n  private _uvRect: IUvRect;\n  private _worldSize: number[] = [];\n  private _positionQuad: IPositionQuad;\n  private _rotationAngle: number = 0;\n  private _anchor: number[];\n  protected _texture: Texture2D;\n  protected _rect: IRect;\n  private _worldSizeFactor: number;\n\n  /**\n   * Render mode: 2D or 3D, default is 2D.\n   */\n  renderMode: string = \"2D\";\n  /**\n   * Rendering color for the Sprite graphic.\n   */\n  public tintColor: Vector4 = new Vector4(1, 1, 1, 1);\n  public transformMatrix: Matrix;\n\n  /**\n   * Constructor of SpriteRenderer.\n   * @param {Entity} entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._worldSizeFactor = 100;\n\n    this.setTexture(undefined);\n    this.setRect(undefined);\n    this.setAnchor(undefined);\n    this.setUvRect();\n    this.setWorldSize();\n\n    this._positionQuad = {\n      leftTop: new Vector3(),\n      leftBottom: new Vector3(),\n      rightTop: new Vector3(),\n      rightBottom: new Vector3()\n    };\n  }\n\n  set texture(v) {\n    this.setTexture(v);\n    this.setRect();\n    this.setUvRect();\n    this.setWorldSize();\n  }\n\n  get texture() {\n    return this._texture;\n  }\n\n  set anchor(v) {\n    this._anchor = v || [0.5, 0.5];\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  set rect(v) {\n    this.setRect(v);\n    this.setUvRect();\n    this.setWorldSize();\n  }\n\n  get rect() {\n    return this._rect;\n  }\n\n  protected setTexture(texture) {\n    // TODO: compatible resource\n    if (texture && texture.asset) {\n      texture = texture.asset;\n    }\n\n    this._texture = texture;\n  }\n\n  /**\n   * Angle of rotation.\n   * @member {Vector4}\n   */\n  get rotationAngle() {\n    return this._rotationAngle;\n  }\n\n  set rotationAngle(v) {\n    this._rotationAngle = v;\n  }\n\n  protected setRect(rect?) {\n    let rectObject;\n    try {\n      if (rect) {\n        rectObject = JSON.parse(rect);\n      }\n    } catch (error) {\n      Logger.warn(\"Rect is not valid JSON format\");\n    }\n\n    this._rect = rect || {\n      x: 0,\n      y: 0,\n      width: this._texture?.width ?? 0,\n      height: this._texture?.height ?? 0\n    };\n  }\n\n  protected setAnchor(anchor) {\n    this._anchor = anchor || [0.5, 0.5];\n  }\n\n  protected setWorldSize() {\n    const { _worldSizeFactor } = this;\n    this._worldSize = [this._rect.width / _worldSizeFactor, this._rect.height / _worldSizeFactor];\n  }\n\n  protected setUvRect() {\n    let w, h;\n\n    if (this._texture) {\n      w = this._texture.width;\n      h = this._texture.height;\n    } else {\n      w = this._rect.width;\n      h = this._rect.height;\n    }\n    this._uvRect = {\n      u: this._rect.x / w,\n      v: this._rect.y / h,\n      width: this._rect.width / w,\n      height: this._rect.height / h\n    };\n  }\n\n  /**\n   * Refresh render data and push to pipeline.\n   * @param {Camera} camera\n   */\n  render(camera: Camera) {\n    this._updatePositionQuad(camera);\n    this._transformByMatrix();\n    camera._renderPipeline.pushSprite(\n      this,\n      this._positionQuad,\n      this._uvRect,\n      this.tintColor,\n      this.texture,\n      this.renderMode,\n      camera\n    );\n  }\n\n  _transformByMatrix() {\n    if (!this.transformMatrix) return;\n    const matrix = this.transformMatrix;\n\n    let temp: Vector3 = this._positionQuad.leftTop;\n    const leftTop: Vector4 = SpriteRenderer._tempVec40;\n    leftTop.setValue(temp.x, temp.y, temp.z, 1);\n\n    temp = this._positionQuad.leftBottom;\n    const leftBottom: Vector4 = SpriteRenderer._tempVec41;\n    leftBottom.setValue(temp.x, temp.y, temp.z, 1);\n\n    temp = this._positionQuad.rightTop;\n    const rightTop: Vector4 = SpriteRenderer._tempVec42;\n    rightTop.setValue(temp.x, temp.y, temp.z, 1);\n\n    temp = this._positionQuad.rightBottom;\n    const rightBottom: Vector4 = SpriteRenderer._tempVec43;\n    rightBottom.setValue(temp.x, temp.y, temp.z, 1);\n\n    Vector4.transform(leftTop, matrix, leftTop);\n    Vector4.transform(leftBottom, matrix, leftBottom);\n    Vector4.transform(rightTop, matrix, rightTop);\n    Vector4.transform(rightBottom, matrix, rightBottom);\n\n    this._positionQuad.leftTop.setValue(leftTop.x, leftTop.y, leftTop.z);\n    this._positionQuad.leftBottom.setValue(leftBottom.x, leftBottom.y, leftBottom.z);\n    this._positionQuad.rightTop.setValue(rightTop.x, rightTop.y, rightTop.z);\n    this._positionQuad.rightBottom.setValue(rightBottom.x, rightBottom.y, rightBottom.z);\n  }\n\n  /**\n   * Update position.\n   * @param {Camera} camera\n   * @private\n   */\n  _updatePositionQuad(camera: Camera) {\n    if (this.renderMode === \"2D\") {\n      const m = camera.viewMatrix.elements;\n      const vx = new Vector3(m[0], m[4], m[8]);\n      const vy = new Vector3(m[1], m[5], m[9]);\n      //-- center pos\n      const c: Vector3 = this.entity.worldPosition.clone();\n      const s = this._worldSize;\n      const ns = this.entity.scale;\n\n      vx.scale(s[0] * ns.x);\n      vy.scale(s[1] * ns.y);\n\n      if (this._rotationAngle !== 0) {\n        const vz = new Vector3(m[2], m[6], m[10]);\n\n        const rotation: Quaternion = new Quaternion();\n        Quaternion.rotationAxisAngle(vz, this._rotationAngle, rotation);\n\n        Vector3.transformByQuat(vx, rotation, vx);\n        Vector3.transformByQuat(vy, rotation, vy);\n      }\n\n      const cx: Vector3 = new Vector3();\n      const cy: Vector3 = new Vector3();\n      Vector3.scale(vx, (this.anchor[0] - 0.5) * 2, cx);\n      Vector3.scale(vy, (this.anchor[1] - 0.5) * 2, cy);\n\n      c.subtract(cx).add(cy);\n\n      //-- quad pos\n      const leftTop: Vector3 = this._positionQuad.leftTop;\n      Vector3.subtract(c, vx, leftTop);\n      leftTop.add(vy);\n\n      const leftBottom: Vector3 = this._positionQuad.leftBottom;\n      Vector3.subtract(c, vx, leftBottom);\n      leftBottom.subtract(vy);\n\n      const rightBottom: Vector3 = this._positionQuad.rightBottom;\n      Vector3.add(c, vx, rightBottom);\n      rightBottom.subtract(vy);\n\n      const rightTop: Vector3 = this._positionQuad.rightTop;\n      Vector3.add(c, vx, rightTop);\n      rightTop.add(vy);\n    } else {\n      // TODO: 3D\n    }\n  }\n}\n", "/**\n * Animation wrap mode.\n * @readonly\n */\nexport enum WrapMode {\n  /** Play once */\n  ONCE = 0,\n  /** Loop play */\n  LOOP = 1\n  // FOREVER: 2,\n  // PINGPONG: 3\n}\n\n/**\n * Animation event type.\n * @readonly\n */\nexport enum AnimationEventType {\n  /** Triggered when the animation over if the wrapMode === WrapMode.ONCE */\n  FINISHED = 0,\n  /** Triggered when the animation over if the wrapMode === WrapMode.LOOP */\n  LOOP_END = 1,\n  /** Triggered when the animation plays to the frame */\n  FRAME_EVENT = 2\n}\n\n/**\n * Animation interpolation method.\n * @readonly\n */\nexport enum InterpolationType {\n  /** Linear interpolation */\n  LINEAR = 0,\n  /** Cubic spline interpolation */\n  CUBICSPLINE = 1,\n  /** Stepped interpolation */\n  STEP = 2\n}\n", "import { EngineObject } from \"../base/EngineObject\";\nimport { InterpolationType } from \"./AnimationConst\";\nimport { IChannel, ISample, List, Value } from \"./types\";\n\nexport enum TagetType {\n  position = 0,\n  rotation = 1,\n  scale = 2,\n  other = 3\n}\n\n/**\n * Data for an animation, set of Samples and Channels.\n * @extends AssetObject\n */\nexport class AnimationClip extends EngineObject {\n  private static _tagetTypeMap: Object = {\n    position: TagetType.position,\n    rotation: TagetType.rotation,\n    scale: TagetType.scale\n  };\n\n  public duration: number;\n\n  public durationIndex: number;\n\n  public samplers: ISample[];\n\n  public channels: IChannel[];\n  /**\n   * @constructor\n   * @param name - The AnimationClip's name.\n   */\n  constructor(public readonly name: string) {\n    super(null);\n\n    this.samplers = [];\n\n    this.channels = [];\n  }\n\n  /**\n   * Add sampler to samplers of the AnimationClip.\n   * @param _input - The index of an accessor containing keyframe input values.\n   * @param _output - The index of an accessor containing keyframe output values.\n   * @param _outputSize - The length of the output values.\n   * @param _interpolation - Interpolation algorithm.\t\n   */\n  public addSampler(\n    _input: List,\n    _output: List,\n    _outputSize: number,\n    _interpolation: InterpolationType = InterpolationType.LINEAR\n  ) {\n    // FIXME - adapt old error animation export file\n    if (_interpolation === InterpolationType.CUBICSPLINE) {\n      if (_outputSize <= 4) {\n        _interpolation = InterpolationType.LINEAR;\n      } else {\n        _outputSize /= 3;\n      }\n    }\n\n    // The sampler object, defines an curve\n    const sampler = {\n      input: _input,\n      output: _output,\n      outputSize: _outputSize,\n      interpolation: _interpolation\n    };\n    this.samplers.push(sampler);\n  }\n\n  /**\n   * Add channel to channels of the AnimationClip.\n   * @param samplerIndex - The sampler's index in channel's sampler property.\n   * @param targetID - Entity name.\n   * @param targetPath - Transform property name: position, rotation, scale.\n   */\n  public addChannel(samplerIndex: number, targetID: string, targetPath: string) {\n    const bindSampler = this.samplers[samplerIndex];\n\n    let tagetType: TagetType = AnimationClip._tagetTypeMap[targetPath];\n    // The channel object, bind a Sample to an Object property.\n    const channel = {\n      sampler: bindSampler,\n      target: {\n        id: targetID,\n        path: targetPath,\n        pathType: tagetType ?? TagetType.other\n      }\n    };\n\n    this.channels.push(channel);\n  }\n\n  /**\n   * Get length of the channel.\n   * @return {number} Number of channels.\n   */\n  public getChannelCount(): number {\n    return this.channels.length;\n  }\n\n  /**\n   * Get the object which the channel acting on.\n   * @return Channel objects.\n   * @param channelIndex - The channel's index in AnimationClip's channels property.\n   */\n  public getChannelObject(channelIndex: number) {\n    return this.channels[channelIndex];\n  }\n\n  /**\n   * Get frame count of the channel.\n   * @return Channel frame count.\n   * @param channelIndex - The channel's index in AnimationClip's channels property.\n   */\n  public getFrameCount(channelIndex: number): number {\n    const sampler = this.channels[channelIndex].sampler;\n    return sampler.input.length;\n  }\n\n  /**\n   * Get frame time of the channel by channelIndex and frameIndex.\n   * @return channel frame time\n   * @param channelIndex - The channel's index in AnimationClip's channels property.\n   * @param frameIndex - The keyframe's index in sampler.input.\n   */\n  public getFrameTime(channelIndex: number, frameIndex: number): number {\n    const sampler = this.channels[channelIndex].sampler;\n    return sampler.input[frameIndex];\n  }\n\n  /**\n   * Get length of the channel.\n   * @return channel time length\n   * @param channelIndex - The channel's index in AnimationClip's channels property.\n   */\n  public getChannelTimeLength(channelIndex: number): number {\n    const sampler = this.channels[channelIndex].sampler;\n    const frameCount = sampler.input.length;\n    return sampler.input[frameCount - 1];\n  }\n\n  /**\n   * Get the channel value.\n   * @return channel value\n   * @param channelIndex - The channel's index in AnimationClip's channels property.\n   */\n  public createChannelValue(channelIndex: number): number | Float32Array | number[] {\n    const sampler = this.channels[channelIndex].sampler;\n\n    return new Float32Array(sampler.outputSize);\n  }\n\n  /**\n   * @private\n   * @param outValue - The output value after interpolation.\n   * @param channelIndex - The channel's index in AnimationClip's channels property.\n   * @param frameIndex - The keyframe's index in sampler.input.\n   * @param nextFrameIndex - The next keyframe's index in sampler.input.\n   * @param alpha - The weight of the next keyframe in interpolation algorithm.\n   */\n  public evaluate(\n    outValue: Value,\n    channelIndex: number,\n    frameIndex: number,\n    nextFrameIndex: number,\n    alpha: number\n  ): Value {\n    const channel = this.channels[channelIndex];\n    const output = channel.sampler.output;\n    const outputSize = channel.sampler.outputSize;\n\n    switch (channel.sampler.interpolation) {\n      case InterpolationType.CUBICSPLINE:\n        this.evaluateCubicSpline(outValue, output, outputSize, frameIndex, nextFrameIndex, alpha);\n        break;\n      case InterpolationType.LINEAR:\n        this.evaluateLinear(outValue, output, outputSize, frameIndex, nextFrameIndex, alpha);\n        break;\n    }\n\n    return outValue;\n  }\n\n  public evaluateCubicSpline(\n    outValue: Value,\n    output: List,\n    outputSize: number,\n    frameIndex: number,\n    nextFrameIndex: number,\n    alpha: number\n  ) {\n    const squared = alpha * alpha;\n    const cubed = alpha * squared;\n    const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    const part2 = -2.0 * cubed + 3.0 * squared;\n    const part3 = cubed - 2.0 * squared + alpha;\n    const part4 = cubed - squared;\n\n    for (let i = outputSize; i >= 0; i--) {\n      const t1 = output[frameIndex * outputSize * 3 + i];\n      const v1 = output[frameIndex * outputSize * 3 + outputSize + i];\n      const t2 = output[frameIndex * outputSize * 3 + outputSize * 2 + i];\n      const v2 = output[nextFrameIndex * outputSize * 3 + outputSize + i];\n\n      outValue[i] = v1 * part1 + v2 * part2 + t1 * part3 + t2 * part4;\n    }\n  }\n\n  public evaluateLinear(\n    outValue: Value,\n    output: List,\n    outputSize: number,\n    frameIndex: number,\n    nextFrameIndex: number,\n    alpha: number\n  ) {\n    switch (outputSize) {\n      case 1:\n        outValue[0] = output[frameIndex] * (1 - alpha) + output[nextFrameIndex] * alpha;\n        break;\n      case 4:\n        // const start = new Quaternion(\n        //   output[frameIndex * outputSize],\n        //   output[frameIndex * outputSize + 1],\n        //   output[frameIndex * outputSize + 2],\n        //   output[frameIndex * outputSize + 3]\n        // );\n        // const end = new Quaternion(\n        //   output[nextFrameIndex * outputSize],\n        //   output[nextFrameIndex * outputSize + 1],\n        //   output[nextFrameIndex * outputSize + 2],\n        //   output[nextFrameIndex * outputSize + 3]\n        // );\n        // Quaternion.slerp(start, end, alpha, <Quaternion>outValue);\n        this._quaSlerp(outValue, output, frameIndex * outputSize, output, nextFrameIndex * outputSize, alpha);\n        break;\n      default:\n        for (let i = outputSize; i >= 0; i--) {\n          outValue[i] =\n            output[frameIndex * outputSize + i] * (1 - alpha) + output[nextFrameIndex * outputSize + i] * alpha;\n        }\n        break;\n    } // End of switch\n  }\n\n  private _quaSlerp(out, a, aIndex, b, bIndex, t) {\n    // Benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0 + aIndex],\n      ay = a[1 + aIndex],\n      az = a[2 + aIndex],\n      aw = a[3 + aIndex];\n    let bx = b[0 + bIndex],\n      by = b[1 + bIndex],\n      bz = b[2 + bIndex],\n      bw = b[3 + bIndex];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // Calc cosine.\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // Adjust signs (if necessary).\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    }\n    // Calculate coefficients.\n    if (1.0 - cosom > 0.000001) {\n      // Standard case (slerp)\n      omega = Math.acos(cosom);\n      sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // The \"from\" quaternions and the \"to\" quaternions are very close, so we can do a linear interpolation.\n      scale0 = 1.0 - t;\n      scale1 = t;\n    }\n    // Calculate final values.\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n  }\n}\n", "import { Event } from \"../base/Event\";\nimport { EventDispatcher } from \"../base/EventDispatcher\";\nimport { Logger } from \"../base/Logger\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { SkinnedMeshRenderer } from \"../mesh/SkinnedMeshRenderer\";\nimport { AnimationClip } from \"./AnimationClip\";\nimport { AnimationEventType, WrapMode } from \"./AnimationConst\";\nimport { AnimationOptions, IChannelState, IChannelTarget } from \"./types\";\n\n/**\n * AnimationClip playback.\n * @extends EventDispatcher\n * @see class AnimationClip\n * @private\n */\nexport class AnimationLayer extends EventDispatcher {\n  /**\n   * @return Whether the AnimationClip is playing.\n   */\n  get isPlaying(): boolean {\n    return this._animClip && this._isPlaying;\n  }\n\n  public layerWeight: number;\n\n  public mixTagetLayer: AnimationLayer;\n\n  public isFading: number;\n\n  public fadeDeltaTime: number;\n\n  public crossFadeDuration: number;\n\n  public fadeDuration: number;\n\n  public crossFadeDeltaTime: number;\n\n  public isMixLayer: boolean;\n\n  public hasMixLayer: boolean;\n\n  public mixEntity: Entity;\n\n  private _activedEvents: Event[];\n\n  private _animClip: AnimationClip;\n\n  private _isPlaying: boolean;\n\n  private _wrapMode: WrapMode;\n\n  private _channelStates: IChannelState[];\n\n  private _animClipLength: number;\n\n  private _frameEvents: any[];\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null);\n\n    this.layerWeight = 1.0;\n\n    this._activedEvents = [];\n  }\n\n  /**\n   * @param nextAnimClip - anim clip to playback next.\n   * @param rootEntity - The root entity of the skeleton animation.\n   * @return Whether can mix with current AnimationClip.\n   */\n  public canMix(nextAnimClip: AnimationClip, rootEntity: Entity): boolean {\n    if (!this._animClip || !this._isPlaying || this.isMixLayer || this.isFading) {\n      return false;\n    }\n\n    if (this._animClip.getChannelCount() !== nextAnimClip.getChannelCount()) {\n      return false;\n    }\n\n    const count = this._animClip.getChannelCount();\n    for (let i = count - 1; i >= 0; i--) {\n      const curChannel = this._animClip.getChannelObject(i);\n      const curTargetObject = this._findChannelTarget(rootEntity, curChannel.target);\n\n      const nextChannel = nextAnimClip.getChannelObject(i);\n      const nextTargetObject = this._findChannelTarget(rootEntity, nextChannel.target);\n\n      if (curTargetObject !== nextTargetObject) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Mix animClip with target animationLayer.\n   * @param animClip - AnimationClip to be mixed.\n   * @param targetLayer - Target animationLayer.\n   * @param rootEntity - The root entity of the skeleton animation.\n   * @param mixEntity - The entiity to be mixed.\n   * @param options - The play options when playing AnimationClip.\n   */\n  public mix(\n    animClip: AnimationClip,\n    targetLayer: AnimationLayer,\n    rootEntity: Entity,\n    mixEntity: Entity,\n    options: { wrapMode?: WrapMode } = {}\n  ) {\n    this._isPlaying = targetLayer.isPlaying;\n    this._animClip = animClip;\n    this._wrapMode = typeof options.wrapMode !== \"undefined\" ? options.wrapMode : targetLayer._wrapMode;\n\n    this._addEvents(options);\n\n    this._channelStates = [];\n    this._animClipLength = 0;\n\n    // -- Create new state object.\n    if (this._isPlaying) {\n      const targetChannelStates = targetLayer._channelStates;\n      const count = this._animClip.getChannelCount();\n      for (let i = count - 1; i >= 0; i--) {\n        const channel = this._animClip.getChannelObject(i);\n        const targetObject = this._findChannelTarget(mixEntity, channel.target);\n        this._channelStates[i] = {\n          frameTime: 0.0,\n          currentFrame: 0,\n          currentValue: this._animClip.createChannelValue(i),\n          mixWeight: targetObject ? 1 : 0\n        };\n\n        targetChannelStates[i].mixWeight =\n          targetChannelStates[i].mixWeight === undefined ? 1 : targetChannelStates[i].mixWeight;\n        if (targetChannelStates[i].mixWeight === 1) {\n          targetChannelStates[i].mixWeight = targetObject ? 0 : 1;\n        }\n\n        const channelTimeLength = this._animClip.getChannelTimeLength(i);\n        this._animClipLength = this._animClipLength > channelTimeLength ? this._animClipLength : channelTimeLength;\n      } // End of for.\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public removeMixWeight() {\n    const count = this._channelStates.length;\n    for (let i = count - 1; i >= 0; i--) {\n      if (this._channelStates[i].mixWeight === 1) {\n        this.mixTagetLayer._channelStates[i].mixWeight = 1;\n      }\n    }\n  }\n\n  /**\n   * Play the specify AnimationClip.\n   * @param animClip - The AnimationClip to be played.\n   * @param rootEntity - The root entity of the skeleton animation.\n   * @param options - The play options when playing AnimationClip.\n   */\n  public play(\n    animClip: AnimationClip,\n    rootEntity: Entity,\n    options: AnimationOptions = { wrapMode: WrapMode.LOOP }\n  ): false | IChannelTarget[] {\n    this._isPlaying = !!animClip;\n    this._animClip = animClip;\n    this._wrapMode = typeof options.wrapMode !== \"undefined\" ? options.wrapMode : WrapMode.LOOP;\n\n    this._addEvents(options);\n\n    this._channelStates = [];\n    this._animClipLength = 0;\n\n    // Create new state object.\n    if (this._isPlaying) {\n      const count = this._animClip.getChannelCount();\n      const channelTargets: IChannelTarget[] = [];\n      for (let i = count - 1; i >= 0; i--) {\n        const channel = this._animClip.getChannelObject(i);\n        const targetObject = this._findChannelTarget(rootEntity, channel.target);\n        if (!targetObject) {\n          Logger.warn(\"Can not find channel target:\" + channel.target.id);\n        }\n        this._channelStates[i] = {\n          frameTime: 0.0,\n          currentFrame: 0,\n          currentValue: this._animClip.createChannelValue(i)\n        };\n\n        channelTargets[i] = {\n          targetObject,\n          path: channel.target.path,\n          pathType: channel.target.pathType,\n          outputSize: channel.sampler.outputSize\n        };\n\n        const channelTimeLength = this._animClip.getChannelTimeLength(i);\n        this._animClipLength = this._animClipLength > channelTimeLength ? this._animClipLength : channelTimeLength;\n      } // End of for.\n\n      return channelTargets;\n    }\n\n    return false;\n  }\n\n  /**\n   * Stop play AnimationClip.\n   * @param rightnow - Stop it immediately, or it will stop at the end of the clip.\n   */\n  public stop(rightnow: boolean) {\n    if (!this._animClip || !this._isPlaying) {\n      return;\n    }\n\n    if (rightnow) {\n      this._isPlaying = false;\n    } else {\n      this._wrapMode = WrapMode.ONCE;\n    }\n  }\n\n  /**\n   * Update animation states only.\n   * @param deltaTime - The deltaTime when the animation update.\n   */\n  public updateState(deltaTime: number) {\n    if (!this._animClip || !this._isPlaying) {\n      return;\n    }\n\n    // Update the weight of the Animation Layer.\n    if (this.isFading) {\n      this.fadeDeltaTime += deltaTime;\n      this.layerWeight = 1.0 - this.fadeDeltaTime / this.fadeDuration;\n      if (this.layerWeight <= 0) {\n        this._isPlaying = false;\n      }\n    } else if (this.crossFadeDuration) {\n      this.crossFadeDeltaTime += deltaTime;\n      this.layerWeight = this.crossFadeDeltaTime / this.crossFadeDuration;\n      if (this.layerWeight >= 1.0) {\n        this.layerWeight = 1.0;\n        delete this.crossFadeDuration;\n      }\n    }\n\n    deltaTime = deltaTime / 1000;\n    this._activeEvents(deltaTime);\n\n    // Update channelStates.\n    const count = this._animClip.getChannelCount();\n    let playingCount = 0;\n    for (let i = count - 1; i >= 0; i--) {\n      if (this._updateChannelState(deltaTime, i)) {\n        playingCount++;\n      }\n    }\n\n    if (playingCount === 0) {\n      this._isPlaying = false;\n\n      if (this.isMixLayer) {\n        this.removeMixWeight();\n      }\n    }\n  }\n\n  /**\n   * Get the weight of the Animation Layer.\n   * @return Channel layer weight.\n   * @param channelIndex - The channel's index in AnimationClip's channels property.\n   */\n  public getChannelLayerWeight(channelIndex: number): number {\n    if ((this.hasMixLayer || this.isMixLayer) && channelIndex < this._channelStates.length) {\n      const mixWeight = this._channelStates[channelIndex].mixWeight;\n      const layerWeight = this.isMixLayer ? this.mixTagetLayer.layerWeight : this.layerWeight;\n      return mixWeight * layerWeight;\n    }\n    return this.layerWeight;\n  }\n\n  /**\n   * @return Channel value.\n   * @param channelIndexchannelIndex - The channel's index in AnimationClip's channels property.\n   */\n  public getChannelValue(channelIndex: number) {\n    return this._channelStates[channelIndex].currentValue;\n  }\n\n  /**\n   * Trigger the animation events.\n   */\n  public triggerEvents() {\n    this._activedEvents &&\n      this._activedEvents.forEach((event) => {\n        this.trigger(event);\n      });\n\n    this._activedEvents.length = 0;\n  }\n\n  /**\n   * Jump to a frame of the AnimationClip, take effect immediately.\n   * @param frameTime - The time which the animation will jump to.\n   */\n  public jumpToFrame(frameTime: number) {\n    const count = this._animClip.getChannelCount();\n    for (let i = count - 1; i >= 0; i--) {\n      // 1. Clear pre frameTime.\n      const channelState = this._channelStates[i];\n      channelState.frameTime = 0;\n\n      // 2. Update new frameTime.\n      this._updateChannelState(frameTime, i);\n    }\n  }\n\n  /**\n   * Update state and value of channel.\n   * @param deltaTime - The deltaTime when the animation update.\n   * @param channelIndex - The channel's index in AnimationClip's channels property.\n   * @private\n   */\n  public _updateChannelState(deltaTime, channelIndex) {\n    const animClip = this._animClip;\n    const channelState = this._channelStates[channelIndex];\n    const animClipLength = animClip.getChannelTimeLength(channelIndex);\n\n    channelState.frameTime += deltaTime;\n    if (channelState.frameTime > animClipLength) {\n      switch (this._wrapMode) {\n        case WrapMode.ONCE:\n          channelState.frameTime = animClipLength;\n          break;\n        case WrapMode.LOOP:\n          channelState.frameTime = channelState.frameTime % this._animClipLength;\n          break;\n        default:\n          Logger.error(\"Unknown Anim wrap Mode: \" + this._wrapMode);\n      }\n    } // End of if.\n\n    if (channelState.mixWeight && channelState.mixWeight === 0) {\n      return true;\n    }\n\n    const frameTime = Math.min(channelState.frameTime, animClipLength);\n    const lerpState = this._getKeyAndAlpha(animClip.getChannelObject(channelIndex), frameTime);\n    channelState.currentValue = animClip.evaluate(\n      channelState.currentValue,\n      channelIndex,\n      lerpState.currentKey,\n      lerpState.nextKey,\n      lerpState.alpha\n    );\n\n    if (this._wrapMode === WrapMode.ONCE && channelState.frameTime >= animClipLength) {\n      return false;\n    }\n    return true;\n  }\n  // -- private ----------------------------------------------------------\n  /**\n   * @param options - The AnimationEvent's option.\n   * @private\n   */\n  private _addEvents(options: any) {\n    this.removeAllEventListeners();\n\n    this._frameEvents = [];\n    if (options.events) {\n      let frameEventIndex = 0;\n      for (let i = options.events.length - 1; i >= 0; i--) {\n        const event = options.events[i];\n        let eventType = event.type;\n        if (event.type === AnimationEventType.FRAME_EVENT) {\n          eventType = \"frameEvent\" + frameEventIndex;\n          frameEventIndex++;\n          this._frameEvents.push({\n            eventType,\n            triggerTime: event.triggerTime,\n            triggered: false\n          });\n        }\n        this.addEventListener(eventType, (e) => {\n          event.callback();\n        });\n      } // End of for.\n    } // End of if.\n  }\n\n  /**\n   * Activate the AnimationEvent.\n   * @param deltaTime - The deltaTime when the animation update.\n   * @private\n   */\n  private _activeEvents(deltaTime: number) {\n    // Trigger Frame Event.\n    const index = this._animClip.durationIndex;\n\n    if (this._frameEvents.length > 0 && this._channelStates.length > 0) {\n      const curFrameTime = this._channelStates[index].frameTime + deltaTime;\n      for (let i = this._frameEvents.length - 1; i >= 0; i--) {\n        const frameEvent = this._frameEvents[i];\n        if (!frameEvent.triggered && curFrameTime > frameEvent.triggerTime) {\n          this._activedEvents.push(new Event(frameEvent.eventType, this));\n          frameEvent.triggered = true;\n        }\n      }\n    }\n\n    if (this._channelStates.length > 0 && this._channelStates[index].frameTime + deltaTime >= this._animClip.duration) {\n      if (this._wrapMode === WrapMode.LOOP) {\n        // Reset Frame Event status.\n        if (this._frameEvents.length > 0) {\n          for (let i = this._frameEvents.length - 1; i >= 0; i--) {\n            this._frameEvents[i].triggered = false;\n          }\n        }\n        // Trigger Loop End Event.\n        // @ts-ignore\n        if (this.hasEvent(AnimationEventType.LOOP_END)) {\n          this._activedEvents.push(new Event(AnimationEventType.LOOP_END, this));\n        }\n        // @ts-ignore\n      } else if (this.hasEvent(AnimationEventType.FINISHED)) {\n        // Trigger Finish Event.\n        this._activedEvents.push(new Event(AnimationEventType.FINISHED, this));\n      }\n    }\n  }\n\n  /**\n   * Find the target the channel belongs to.\n   * @param rootNode - The root entity of the skeleton animation.\n   * @param target - The target to be finded.\n   * @private\n   */\n  private _findChannelTarget(rootNode: Entity, target: any): Entity | Component {\n    const targetID = target.id;\n    let targetSceneObject: Entity = null;\n    if (rootNode.name === targetID) {\n      targetSceneObject = rootNode;\n    } else {\n      targetSceneObject = rootNode.findByName(targetID);\n    }\n\n    if (target.path === \"weights\") {\n      return targetSceneObject.getComponent(SkinnedMeshRenderer);\n    } else {\n      return targetSceneObject;\n    }\n  }\n\n  /**\n   * @return Current and next key id, current alpha.\n   * @param channel - The channle which the key and alpha in.\n   * @param time - The frame time.\n   * @private\n   */\n  private _getKeyAndAlpha(channel, time: number) {\n    let keyTime = 0;\n    let currentKey = 0;\n    let nextKey = 0;\n\n    const timeKeys = channel.sampler.input;\n    const numKeys = timeKeys.length;\n    for (let i = numKeys - 1; i >= 0; i--) {\n      if (time > timeKeys[i]) {\n        keyTime = time - timeKeys[i];\n        currentKey = i;\n        break;\n      }\n    }\n\n    nextKey = currentKey + 1;\n    if (nextKey >= numKeys) {\n      switch (this._wrapMode) {\n        case WrapMode.ONCE:\n          nextKey = numKeys - 1;\n          break;\n        case WrapMode.LOOP:\n          nextKey = 0;\n          break;\n      }\n    }\n\n    const keyLength = timeKeys[nextKey] - timeKeys[currentKey];\n    const alpha = nextKey === currentKey || keyLength < 0.00001 ? 1 : keyTime / keyLength;\n\n    return {\n      currentKey,\n      nextKey,\n      alpha\n    };\n  }\n}\n", "import { Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { ignoreClone, shallowClone } from \"../clone/CloneManager\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { SkinnedMeshRenderer } from \"../mesh/SkinnedMeshRenderer\";\nimport { AnimationClip, TagetType } from \"./AnimationClip\";\nimport { AnimationLayer } from \"./AnimationLayer\";\nimport { AnimationOptions, IChannelTarget } from \"./types\";\n/**\n * Animation Component, the AnimationClip player with crossFade and mix abilities.\n */\nexport class Animation extends Component {\n  /**\n   * The timeScale getter, timeScale which used for scale the animation time to speed up or slow down the animation.\n   */\n  get timeScale(): number {\n    return this._timeScale;\n  }\n\n  /**\n   * The timeScale setter, timeScale which used for scale the animation time to speed up or slow down the animation.\n   */\n  set timeScale(val: number) {\n    if (val > 0) {\n      this._timeScale = val;\n    }\n  }\n\n  /**\n   * Linearly interpolates between two values.\n   * @param outValue - The output value after interpolation.\n   * @param startValue - The start value before interpolation.\n   * @param endValue - The end value after interpolation.\n   * @param outputSize - The length of the output values.\n   * @param alpha - The weight of the endValue in interpolation algorithm.\n   * @private\n   */\n  public static lerp(\n    outValue: number | Float32Array,\n    startValue: number | Float32Array,\n    endValue: number | Float32Array,\n    alpha: number,\n    outputSize: number\n  ): number | Float32Array {\n    switch (outputSize) {\n      case 1:\n        outValue = <number>startValue * (1 - alpha) + <number>endValue * alpha;\n        break;\n      case 4:\n        const start = new Quaternion(...(startValue as Float32Array));\n        const end = new Quaternion(...(endValue as Float32Array));\n        const quat = new Quaternion();\n        Quaternion.slerp(start, end, alpha, quat);\n        outValue[0] = quat.x;\n        outValue[1] = quat.y;\n        outValue[2] = quat.z;\n        outValue[3] = quat.w;\n        break;\n      default:\n        for (let i = outputSize; i >= 0; i--) {\n          outValue[i] = startValue[i] * (1 - alpha) + endValue[i] * alpha;\n        }\n        break;\n    } // End of switch.\n\n    return outValue;\n  }\n\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n\n  @shallowClone\n  private _animSet = {};\n\n  @ignoreClone\n  private _animLayers: AnimationLayer[] = [new AnimationLayer()];\n  @ignoreClone\n  private _timeScale: number = 1.0;\n  @ignoreClone\n  private _channelTargets: IChannelTarget[] | false;\n\n  /**\n   * @param entity - The entitiy which the animation component belongs to.\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  /**\n   * Evaluates the animation component based on deltaTime.\n   * @param deltaTime - The deltaTime when the animation update.\n   * @private\n   */\n  public update(deltaTime: number) {\n    if (!this.isPlaying()) {\n      return;\n    }\n\n    deltaTime = deltaTime * this._timeScale;\n\n    // Update state.\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      const animLayer = this._animLayers[i];\n      animLayer.updateState(deltaTime);\n    }\n\n    // Update value.\n    this._updateValues();\n\n    // Trigger events and destroy no use layer.\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      const animLayer = this._animLayers[i];\n      animLayer.triggerEvents();\n      if (!animLayer.isPlaying && (animLayer.isFading || animLayer.isMixLayer)) {\n        this._animLayers.splice(i, 1);\n        this._removeRefMixLayers(animLayer);\n      }\n    }\n  }\n\n  /**\n   * Add a AnimationClip to the animation with the name.\n   * @param animClip - The AnimationClip which you want to be added.\n   * @param name - The name of the AnimationClip.\n   */\n  public addAnimationClip(animClip: AnimationClip, name: string) {\n    this._animSet[name] = animClip;\n  }\n\n  /**\n   * Remove clip from the animation.\n   * @param name - The name of the AnimationClip.\n   */\n  public removeAnimationClip(name: string) {\n    const animClip = this._animSet[name];\n    if (animClip) {\n      delete this._animSet[name];\n    }\n  }\n\n  /**\n   * Get length of the AnimationClip By the name.\n   * @param name - The name of the AnimationClip.\n   * @return The AnimationClip length.\n   */\n  public getAnimationClipLength(name: string): number {\n    const animClip = this._animSet[name];\n    if (animClip) {\n      return animClip.getChannelTimeLength(0);\n    } else {\n      return 0.0;\n    }\n  }\n\n  /**\n   * Get the AnimationClip By name.\n   * @param name - The name of the AnimationClip.\n   * @return The AnimationClip which match the name.\n   */\n  public getAnimationClip(name: string): AnimationClip {\n    return this._animSet[name] || null;\n  }\n\n  /**\n   * Return whether is playing.\n   * @return {boolean}\n   */\n  public isPlaying(): boolean {\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (this._animLayers[i].isPlaying) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Play the AnimationClip by name.\n   * @param name - The AnimatioinClip's name.\n   * @param options - The play options when playing AnimationClip.\n   */\n  public playAnimationClip(name: string, options?: AnimationOptions) {\n    const animClip = this._animSet[name];\n    if (!animClip) {\n      Logger.error(\"can not find anim clip: \" + name);\n      return;\n    }\n\n    let animLayer: AnimationLayer = null;\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (!this._animLayers[i].isFading && !this._animLayers[i].isMixLayer) {\n        animLayer = this._animLayers[i];\n        break;\n      }\n    }\n\n    if (!animLayer) {\n      animLayer = new AnimationLayer();\n      this._animLayers.push(animLayer);\n    }\n    this._removeRefMixLayers(animLayer);\n    this._channelTargets = animLayer.play(animClip, this.entity, options);\n  }\n\n  /**\n   * CrossFade to the AnimationClip by name.\n   * @param name - The AnimatioinClip's name.\n   * @param crossFadeDuration - The milliseconds of the crossFade's duration.\n   * @param options - The play options when playing AnimationClip.\n   */\n  public CrossFade(name: string, crossFadeDuration: number, options: AnimationOptions) {\n    const animClip = this._animSet[name];\n    if (!animClip) {\n      Logger.error(\"can not find anim clip: \" + name);\n      return;\n    }\n\n    if (!crossFadeDuration || crossFadeDuration < 0) {\n      Logger.error(\"crossFadeDuration can not less than 0!\");\n      return;\n    }\n\n    // Look for targets that can be mixed.\n    let targetAnimLayer = null;\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (this._animLayers[i].canMix(animClip, this.entity)) {\n        targetAnimLayer = this._animLayers[i];\n        break;\n      }\n    }\n\n    if (targetAnimLayer) {\n      // Clear the unfinished crossFading action\n      for (let i = this._animLayers.length - 1; i >= 0; i--) {\n        if (this._animLayers[i].isFading) {\n          this._animLayers.splice(i, 1);\n        }\n      }\n\n      targetAnimLayer.isFading = true;\n      targetAnimLayer.fadeDuration = crossFadeDuration;\n      targetAnimLayer.fadeDeltaTime = 0;\n\n      const animLayer = new AnimationLayer();\n      animLayer.crossFadeDuration = crossFadeDuration;\n      animLayer.crossFadeDeltaTime = 0;\n      animLayer.play(animClip, this.entity, options);\n      this._animLayers.push(animLayer);\n    } else {\n      this.playAnimationClip(name, options);\n    }\n  }\n\n  /**\n   * Mix the AnimationClip by name.\n   * @param name - The AnimatioinClip's name.\n   * @param mixBoneName - Takes effect on the bone named mixBoneName and the child bones attached to it.\n   * @param options - The play options when playing AnimationClip.\n   */\n  public mix(name: string, mixBoneName: string, options: AnimationOptions) {\n    const animClip = this._animSet[name];\n    if (!animClip) {\n      Logger.error(\"can not find anim clip: \" + name);\n      return;\n    }\n\n    const mixNode = this.entity.findByName(mixBoneName);\n    if (!mixNode) {\n      Logger.error(\"can not find mix bone!\");\n      return;\n    }\n\n    // Look for targets that can be mixed.\n    let targetAnimLayer = null;\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (this._animLayers[i].canMix(animClip, this.entity)) {\n        targetAnimLayer = this._animLayers[i];\n        break;\n      }\n    }\n\n    if (targetAnimLayer) {\n      this._removeRefMixLayers(null, mixNode);\n\n      targetAnimLayer.hasMixLayer = true;\n\n      const animLayer = new AnimationLayer();\n      animLayer.isMixLayer = true;\n      animLayer.mixTagetLayer = targetAnimLayer;\n      animLayer.mixEntity = mixNode;\n      animLayer.mix(animClip, targetAnimLayer, this.entity, mixNode, options);\n      this._animLayers.push(animLayer);\n    }\n  }\n\n  /**\n   * Stop play\n   * @param rightnow - Stop it immediately, or it will stop at the end of the clip\n   */\n  public stop(rightnow: boolean) {\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (this._animLayers[i].isFading) {\n        this._animLayers.splice(i, 1);\n      } else {\n        this._animLayers[i].stop(rightnow);\n      }\n    }\n  }\n\n  /**\n   * Jump to a frame of the animation, take effect immediately.\n   * @param frameTime - The time which the animation will jump to.\n   */\n  public jumpToFrame(frameTime: number) {\n    frameTime = frameTime / 1000;\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      this._animLayers[i].jumpToFrame(frameTime);\n    }\n\n    this._updateValues();\n  }\n\n  // -- private ----------------------------------------------------------\n  /**\n   * Remove the mixed animation associated with targetLayer.\n   * @param targetLayer - The mixed AnimatioinLayer which will be removed.\n   * @private\n   */\n  public _removeRefMixLayers(targetLayer: AnimationLayer, mixNode?) {\n    if (targetLayer && targetLayer.hasMixLayer) {\n      for (let i = this._animLayers.length - 1; i >= 0; i--) {\n        const animLayer = this._animLayers[i];\n        if (animLayer.isMixLayer && animLayer.mixTagetLayer === targetLayer) {\n          animLayer.removeMixWeight();\n          this._animLayers.splice(i, 1);\n        }\n      }\n    }\n\n    if (mixNode) {\n      for (let i = this._animLayers.length - 1; i >= 0; i--) {\n        const animLayer = this._animLayers[i];\n        if (\n          animLayer.isMixLayer &&\n          (animLayer.mixEntity === mixNode ||\n            animLayer.mixEntity.findByName(mixNode) ||\n            mixNode.findByName(animLayer.mixEntity))\n        ) {\n          animLayer.removeMixWeight();\n          this._animLayers.splice(i, 1);\n        }\n      }\n    }\n  }\n\n  /**\n   * Update animation value.\n   * @private\n   */\n  public _updateValues() {\n    if (this._animLayers.length === 0 || !this._channelTargets) {\n      return;\n    }\n\n    for (let i = this._channelTargets.length - 1; i >= 0; i--) {\n      const channelTarget = this._channelTargets[i];\n      const val = this._getChannelValue(i, channelTarget.outputSize);\n      const targetObject = channelTarget.targetObject;\n      const path = channelTarget.path;\n\n      if (path === \"weights\") {\n        // SkinnedMeshRenderer.\n        (targetObject as SkinnedMeshRenderer).setWeights(val as any);\n      } else {\n        const v = val as Float32Array;\n        //CM: Temporary optimization val should be Vector3/Quaternion type to avoid conversion overhead\n        //CM: In the future, after Animation unifies all animation systems, it will use pathType as other and continue to use reflection.\n        //CM: Due to the relatively small number of pathTypes, pre-classification can be used to avoid switch overhead in the future, such as three types of skeletal animation\n        const transform = (<Entity>targetObject).transform;\n        switch (channelTarget.pathType) {\n          case TagetType.position:\n            const position: Vector3 = transform.position;\n            position.setValue(v[0], v[1], v[2]);\n            transform.position = position;\n            break;\n          case TagetType.rotation:\n            const rotation: Quaternion = transform.rotationQuaternion;\n            rotation.setValue(v[0], v[1], v[2], v[3]);\n            transform.rotationQuaternion = rotation;\n            break;\n          case TagetType.scale:\n            const scale: Vector3 = transform.scale;\n            scale.setValue(v[0], v[1], v[2]);\n            transform.scale = scale;\n            break;\n          default:\n            targetObject[path] = val;\n        }\n      }\n    } // End of for\n  }\n\n  /**\n   * @return Channel value.\n   * @param channelIndex - The channel's index in AnimationClip's channels property.\n   * @param outputSize - The length of the output values.\n   * @private\n   */\n  public _getChannelValue(channelIndex: number, outputSize: number): number | boolean | Float32Array {\n    const weights = [];\n    const values = [];\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      const weight = this._animLayers[i].getChannelLayerWeight(channelIndex);\n      if (weight > 0) {\n        weights.push(weight);\n        values.push(this._animLayers[i].getChannelValue(channelIndex));\n      }\n    }\n    /**\n     * When values.length === 1, return the value directly.\n     * When values.length === 2, return the lerp from value[0] and value[1].\n     **/\n    if (values.length === 1) {\n      return values[0];\n    } else if (values.length === 2) {\n      return Animation.lerp(values[0], values[0], values[1], weights[1], outputSize);\n    }\n\n    // Other case can't be handled.\n    Logger.error(\"Can not get channel value!\");\n    return false;\n  }\n\n  /**\n   * Be called when this instance be enabled.\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    this.engine._componentsManager.addOnUpdateAnimations(this);\n  }\n\n  /**\n   * Be called when this instance be disabled or it's entity be inActiveInHierarchy or before this instance be destroyed.\n   * @override\n   * @internal\n   */\n  _onDisable(): void {\n    this.engine._componentsManager.removeOnUpdateAnimations(this);\n  }\n}\n", "import { BoundingBox, Vector3 } from \"@oasis-engine/math\";\nimport { EngineObject } from \"../base\";\nimport { Engine } from \"../Engine\";\nimport { PrimitiveTopology, SubPrimitive } from \"../graphic\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { IndexBufferBinding } from \"../graphic/IndexBufferBinding\";\nimport { Primitive } from \"../graphic/Primitive\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\n\n/**\n * BufferGeometry.\n */\nexport class BufferGeometry extends EngineObject {\n  /** Geometry name */\n  name: string;\n\n  /** @internal */\n  _primitive: Primitive;\n\n  readonly bounds: BoundingBox = new BoundingBox();\n  private _subGeometries: SubPrimitive[] = [];\n\n  /**\n   * Vertex buffer binding collection.\n   */\n  get vertexBufferBindings(): Readonly<VertexBufferBinding[]> {\n    return this._primitive.vertexBufferBindings;\n  }\n\n  /**\n   * Index buffer binding.\n   */\n  get indexBufferBinding(): IndexBufferBinding {\n    return this._primitive.indexBufferBinding;\n  }\n\n  /**\n   * Vertex element collection.\n   */\n  get vertexElements(): Readonly<VertexElement[]> {\n    return this._primitive.vertexElements;\n  }\n\n  /**\n   * First sub-geometry. Rendered using the first material. For more details, please refer to the subGeometrys property.\n   */\n  get subGeometry(): SubPrimitive | null {\n    return this._subGeometries[0] || null;\n  }\n\n  /**\n   * A collection of sub-geometry, each sub-geometry can be rendered with an independent material.\n   */\n  get subGeometries(): Readonly<SubPrimitive[]> {\n    return this._subGeometries;\n  }\n\n  /**\n   * Instanced count, 0 means disable.\n   */\n  get instanceCount(): number {\n    return this._primitive.instanceCount;\n  }\n\n  set instanceCount(count: number) {\n    this._primitive.instanceCount = count;\n  }\n\n  /**\n   * Create buffer geometry.\n   * @param engine - Engine\n   * @param name - Geometry name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this._primitive = new Primitive(engine);\n    this.name = name;\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param firstIndex - First vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBufferBindings: VertexBufferBinding, firstIndex?: number): void;\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBuffer - Vertex buffer\n   * @param stride - Vertex buffer data stride\n   * @param firstIndex - First vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBuffer: Buffer, stride: number, firstIndex?: number): void;\n\n  setVertexBufferBinding(\n    bufferOrBinding: Buffer | VertexBufferBinding,\n    stride: number = 0,\n    firstIndex: number = 0\n  ): void {\n    this._primitive.setVertexBufferBinding(<Buffer>bufferOrBinding, stride, firstIndex);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param firstIndex - First vertex buffer index, the default value is 0\n   */\n  setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[], firstIndex: number = 0): void {\n    this._primitive.setVertexBufferBindings(vertexBufferBindings, firstIndex);\n  }\n\n  /**\n   * Set index buffer binding.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  setIndexBufferBinding(buffer: Buffer, format: IndexFormat): void;\n\n  /**\n   * Set index buffer binding.\n   * @param bufferBinding - Index buffer binding\n   */\n  setIndexBufferBinding(bufferBinding: IndexBufferBinding): void;\n\n  setIndexBufferBinding(bufferOrBinding: Buffer | IndexBufferBinding, format?: IndexFormat): void {\n    this._primitive.setIndexBufferBinding(<Buffer>bufferOrBinding, format);\n  }\n\n  /**\n   * Set vertex elements.\n   * @param elements - Vertex element collection\n   */\n  setVertexElements(elements: VertexElement[]): void {\n    this._primitive.setVertexElements(elements);\n  }\n\n  /**\n   * Add sub-geometry, each sub-geometry can correspond to an independent material.\n   * @param start - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer\n   * @param count - Drawing count, if the index buffer is set, it means the count in the index buffer, if not set, it means the count in the vertex buffer\n   * @param topology - Drawing topology, default is PrimitiveTopology.Triangles\n   */\n  addSubGeometry(\n    start: number,\n    count: number,\n    topology: PrimitiveTopology = PrimitiveTopology.Triangles\n  ): SubPrimitive {\n    const subGeometry = new SubPrimitive(start, count, topology);\n    this._subGeometries.push(subGeometry);\n    return subGeometry;\n  }\n\n  /**\n   * Remove sub geometry.\n   * @param subGeometry - SubGeometry needs to be removed\n   */\n  removeSubGeometry(subGeometry: SubPrimitive): void {\n    const subGeometries = this._subGeometries;\n    const index = subGeometries.indexOf(subGeometry);\n    if (index !== -1) {\n      subGeometries.splice(index, 1);\n    }\n  }\n\n  /**\n   * Clear all sub geometries\n   */\n  clearSubGeometry(): void {\n    this._subGeometries.length = 0;\n  }\n\n  /**\n   * Destroy.\n   */\n  destroy(): void {\n    if (this._primitive) {\n      this._primitive.destroy();\n      this._primitive = null;\n    }\n  }\n}\n", "import { BoundingBox } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { RenderElement } from \"../RenderPipeline/RenderElement\";\nimport { BufferGeometry } from \"./BufferGeometry\";\n\n/**\n * Geometry renderer\n */\nexport class GeometryRenderer extends Renderer {\n  _material: Material;\n\n  /** Buffer geometry */\n  private _geometry: BufferGeometry;\n\n  /**\n   * Set buffer geometry\n   */\n  set geometry(value: BufferGeometry) {\n    if (this._geometry) {\n      this._geometry._primitive._addRefCount(-1);\n    }\n    value._primitive._addRefCount(1);\n    this._geometry = value;\n  }\n\n  get geometry(): BufferGeometry {\n    return this._geometry;\n  }\n\n  /**\n   * Material.\n   */\n  set material(value: Material) {\n    if (this._material) {\n      this._material._addRefCount(-1);\n    }\n    value._addRefCount(1);\n    this._material = value;\n  }\n\n  get material(): Material {\n    return this._material;\n  }\n\n  render(camera: Camera) {\n    const geometry = this.geometry;\n    if (geometry) {\n      const subGeometries = geometry.subGeometries;\n      const renderPipeline = camera._renderPipeline;\n      const material = this._material;\n      for (let i = 0, n = subGeometries.length; i < n; i++) {\n        if (material) {\n          const element = RenderElement.getFromPool();\n          element.setValue(this, geometry._primitive, subGeometries[i], material); // CM: need to support multi material\n          renderPipeline.pushPrimitive(element);\n        }\n      }\n    } else {\n      Logger.error(\"geometry is null.\");\n    }\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    const geometry = this._geometry;\n    if (geometry) {\n      const localBounds = geometry.bounds;\n      const worldMatrix = this._entity.transform.worldMatrix;\n      BoundingBox.transform(localBounds, worldMatrix, worldBounds);\n    } else {\n      worldBounds.min.setValue(0, 0, 0);\n      worldBounds.max.setValue(0, 0, 0);\n    }\n  }\n}\n", "import { Vector3 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { BufferGeometry } from \"../geometry/BufferGeometry\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\n\n/**\n * Basic shape geometry.\n */\nexport class ShapeGeometry extends BufferGeometry {\n  /**\n   * @internal\n   */\n  _initialize(engine: Engine, vertices: Float32Array, indices: Uint16Array) {\n    const vertexStride = 32;\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"NORMAL\", 12, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 24, VertexElementFormat.Vector2, 0)\n    ];\n\n    this._initBuffer(engine, vertices, indices, vertexStride, vertexElements);\n  }\n\n  _initBuffer(\n    engine: Engine,\n    vertices: Float32Array,\n    indices: Uint16Array,\n    vertexStride: number,\n    vertexElements: VertexElement[]\n  ) {\n    const positionElement = vertexElements[0];\n    const vertexBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, vertices, BufferUsage.Static);\n    const indexBuffer = new Buffer(engine, BufferBindFlag.IndexBuffer, indices, BufferUsage.Static);\n\n    this.setVertexBufferBinding(vertexBuffer, vertexStride);\n    this.setIndexBufferBinding(indexBuffer, IndexFormat.UInt16);\n    this.setVertexElements(vertexElements);\n    this.addSubGeometry(0, indices.length);\n\n    this._computeBounds(positionElement, vertices);\n  }\n\n  private _computeBounds(positionElement: VertexElement, vertices: ArrayBuffer | Float32Array): void {\n    const vertexElement = positionElement;\n    const bufferIndex = vertexElement.bindingIndex;\n    const vertexBufferBinding = this._primitive.vertexBufferBindings[bufferIndex];\n    const stride = vertexBufferBinding.stride;\n    const offset = vertexElement.offset;\n    const vertexCount = vertexBufferBinding.buffer.byteLength / stride;\n    let arrayBuffer: ArrayBuffer = vertices;\n    if (!(arrayBuffer instanceof ArrayBuffer)) {\n      arrayBuffer = (<Float32Array>arrayBuffer).buffer;\n    }\n    const dataView = new DataView(arrayBuffer, offset);\n\n    let min = new Vector3(Infinity, Infinity, Infinity);\n    let max = new Vector3(-Infinity, -Infinity, -Infinity);\n    for (let i = 0; i < vertexCount; i++) {\n      const base = offset + stride * i;\n      const position = new Vector3(\n        dataView.getFloat32(base, true),\n        dataView.getFloat32(base + 4, true),\n        dataView.getFloat32(base + 8, true)\n      );\n      Vector3.min(min, position, min);\n      Vector3.max(max, position, max);\n    }\n\n    const bounds = this.bounds;\n    min.cloneTo(bounds.min);\n    max.cloneTo(bounds.max);\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { ShapeGeometry } from \"./ShapeGeometry\";\n\n/**\n * CuboidGeometry.\n */\nexport class CuboidGeometry extends ShapeGeometry {\n  /**\n   * Create a cuboid geometry.\n   * @param engine - Engine\n   * @param width - Cuboid width\n   * @param height - Cuboid height\n   * @param depth - Cuboid depth\n   */\n  constructor(engine: Engine, width: number = 1, height: number = 1, depth: number = 1) {\n    super(engine);\n\n    const halfWidth: number = width / 2;\n    const halfHeight: number = height / 2;\n    const halfDepth: number = depth / 2;\n\n    // prettier-ignore\n    const vertices: Float32Array = new Float32Array([\n    \t// up\n    \t-halfWidth, halfHeight, -halfDepth, 0, 1, 0, 0, 0, halfWidth, halfHeight, -halfDepth, 0, 1, 0, 1, 0, halfWidth, halfHeight, halfDepth, 0, 1, 0, 1, 1, -halfWidth, halfHeight, halfDepth, 0, 1, 0, 0, 1,\n    \t// down\n    \t-halfWidth, -halfHeight, -halfDepth, 0, -1, 0, 0, 1, halfWidth, -halfHeight, -halfDepth, 0, -1, 0, 1, 1, halfWidth, -halfHeight, halfDepth, 0, -1, 0, 1, 0, -halfWidth, -halfHeight, halfDepth, 0, -1, 0, 0, 0,\n    \t// left\n    \t-halfWidth, halfHeight, -halfDepth, -1, 0, 0, 0, 0, -halfWidth, halfHeight, halfDepth, -1, 0, 0, 1, 0, -halfWidth, -halfHeight, halfDepth, -1, 0, 0, 1, 1, -halfWidth, -halfHeight, -halfDepth, -1, 0, 0, 0, 1,\n    \t// right\n    \thalfWidth, halfHeight, -halfDepth, 1, 0, 0, 1, 0, halfWidth, halfHeight, halfDepth, 1, 0, 0, 0, 0, halfWidth, -halfHeight, halfDepth, 1, 0, 0, 0, 1, halfWidth, -halfHeight, -halfDepth, 1, 0, 0, 1, 1,\n    \t// fornt\n    \t-halfWidth, halfHeight, halfDepth, 0, 0, 1, 0, 0, halfWidth, halfHeight, halfDepth, 0, 0, 1, 1, 0, halfWidth, -halfHeight, halfDepth, 0, 0, 1, 1, 1, -halfWidth, -halfHeight, halfDepth, 0, 0, 1, 0, 1,\n    \t// back\n    \t-halfWidth, halfHeight, -halfDepth, 0, 0, -1, 1, 0, halfWidth, halfHeight, -halfDepth, 0, 0, -1, 0, 0, halfWidth, -halfHeight, -halfDepth, 0, 0, -1, 0, 1, -halfWidth, -halfHeight, -halfDepth, 0, 0, -1, 1, 1]);\n\n    // prettier-ignore\n    const indices: Uint16Array = new Uint16Array([\n    \t// up\n    \t0, 2, 1, 2, 0, 3,\n    \t// donw\n    \t4, 6, 7, 6, 4, 5,\n    \t// left\n    \t8, 10, 9, 10, 8, 11,\n    \t// right\n    \t12, 14, 15, 14, 12, 13,\n    \t// fornt\n    \t16, 18, 17, 18, 16, 19,\n    \t// back\n    \t20, 22, 23, 22, 20, 21]);\n    this._initialize(engine, vertices, indices);\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { ShapeGeometry } from \"./ShapeGeometry\";\n\n/**\n * SphereGeometry.\n */\nexport class SphereGeometry extends ShapeGeometry {\n  private _parameters;\n  private _thetaEnd;\n\n  /**\n   * @param  radius - Sphere radius.\n   * @param  horizontalSegments - Number of horizontal segments\n   * @param  verticalSegments - Number of vertical segments\n   * @param  alphaStart - Specify horizontal starting angle\n   * @param  alphaRange - Specify horizontal sweep angle size\n   * @param  thetaStart - Specify vertical starting angle\n   * @param  thetaRange - Specify vertical sweep angle size\n   */\n  constructor(\n    engine: Engine,\n    radius: number = 1,\n    horizontalSegments: number = 8,\n    verticalSegments: number = 6,\n    alphaStart: number = 0,\n    alphaRange: number = Math.PI * 2,\n    thetaStart: number = 0,\n    thetaRange: number = Math.PI\n  ) {\n    super(engine);\n    this._parameters = {\n      radius: radius || 1,\n      horizontalSegments: Math.max(3, Math.floor(horizontalSegments)),\n      verticalSegments: Math.max(2, Math.floor(verticalSegments)),\n      alphaStart: alphaStart,\n      alphaRange: alphaRange,\n      thetaStart: thetaStart,\n      thetaRange: thetaRange\n    };\n    this._thetaEnd = this._parameters.thetaStart + this._parameters.thetaRange;\n    this.initialize(engine);\n  }\n\n  /**\n   * Generate sphere vertices data.\n   * @private\n   */\n  initialize(engine: Engine) {\n    const { verticalSegments, horizontalSegments } = this._parameters;\n    // Generate data of geometric vertices on the latitude and longitude lines\n    let index = 0;\n    const grid = [];\n    const vertices: Float32Array = new Float32Array((verticalSegments + 1) * (horizontalSegments + 1) * 8);\n    const indices = [];\n    // const positions = [];\n    for (let iy = 0; iy <= verticalSegments; iy++) {\n      const verticesRow = [];\n      const v = iy / verticalSegments;\n      for (let ix = 0; ix <= horizontalSegments; ix++) {\n        const u = ix / horizontalSegments;\n        let posX =\n          -this._parameters.radius *\n          Math.cos(this._parameters.alphaStart + u * this._parameters.alphaRange) *\n          Math.sin(this._parameters.thetaStart + v * this._parameters.thetaRange);\n        let posY = this._parameters.radius * Math.cos(this._parameters.thetaStart + v * this._parameters.thetaRange);\n        let posZ =\n          this._parameters.radius *\n          Math.sin(this._parameters.alphaStart + u * this._parameters.alphaRange) *\n          Math.sin(this._parameters.thetaStart + v * this._parameters.thetaRange);\n        posX = Math.abs(posX) < 1e-6 ? 0 : posX;\n        posY = Math.abs(posY) < 1e-6 ? 0 : posY;\n        posZ = Math.abs(posZ) < 1e-6 ? 0 : posZ;\n\n        const offset = index * 8;\n        // POSITION\n        vertices[offset] = posX;\n        vertices[offset + 1] = posY;\n        vertices[offset + 2] = posZ;\n        // NORMAL\n        vertices[offset + 3] = posX;\n        vertices[offset + 4] = posY;\n        vertices[offset + 5] = posZ;\n        // TEXCOORD_0\n        vertices[offset + 6] = u;\n        vertices[offset + 7] = 1 - v;\n\n        verticesRow.push(index++);\n      }\n      grid.push(verticesRow);\n    }\n\n    // Generate indices\n    for (let iy = 0; iy < verticalSegments; iy++) {\n      for (let ix = 0; ix < horizontalSegments; ix++) {\n        const a = grid[iy][ix + 1];\n        const b = grid[iy][ix];\n        const c = grid[iy + 1][ix];\n        const d = grid[iy + 1][ix + 1];\n\n        if (iy !== 0 || this._parameters.thetaStart > 0) indices.push(a, b, d);\n        if (iy !== verticalSegments - 1 || this._thetaEnd < Math.PI) indices.push(b, c, d);\n      }\n    }\n\n    this._initialize(engine, vertices, Uint16Array.from(indices));\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { ShapeGeometry } from \"./ShapeGeometry\";\n\n/**\n * CubeGeometry.\n */\nexport class PlaneGeometry extends ShapeGeometry {\n  private _parameters;\n  private halfWidth;\n  private halfHeight;\n\n  /**\n   * @param engine - Engine\n   * @param width - Plane width\n   * @param height - Plane height\n   * @param horizontalSegments - Plane horizontal segments\n   * @param verticalSegments - Plane verticle segments\n   */\n  constructor(\n    engine: Engine,\n    width: number = 1,\n    height: number = 1,\n    horizontalSegments: number = 1,\n    verticalSegments: number = 1\n  ) {\n    super(engine);\n    this._parameters = {\n      width: width,\n      height: height,\n      horizontalSegments: Math.floor(horizontalSegments),\n      verticalSegments: Math.floor(verticalSegments)\n    };\n\n    this.halfWidth = this._parameters.width / 2;\n    this.halfHeight = this._parameters.height / 2;\n    this.initialize(engine);\n  }\n\n  initialize(engine: Engine) {\n    const { verticalSegments, horizontalSegments } = this._parameters;\n    // Generate data of geometric vertices on the latitude and longitude lines\n    let index = 0;\n    let offset = 0;\n    const grid = [];\n    const vertices: Float32Array = new Float32Array((verticalSegments + 1) * (horizontalSegments + 1) * 8);\n    const indices: Uint16Array = new Uint16Array(verticalSegments * horizontalSegments * 6);\n\n    for (let iy = 0; iy <= verticalSegments; iy++) {\n      const verticesRow = [];\n      const v = iy / verticalSegments;\n      for (let ix = 0; ix <= horizontalSegments; ix++) {\n        const u = ix / horizontalSegments;\n        const posX = u * this._parameters.width - this.halfWidth;\n        const posY = v * this._parameters.height - this.halfHeight;\n\n        // POSITION\n        vertices[offset++] = posX;\n        vertices[offset++] = posY;\n        vertices[offset++] = 0;\n        // NORMAL\n        vertices[offset++] = 0;\n        vertices[offset++] = 0;\n        vertices[offset++] = 1;\n        // TEXCOORD_0\n        vertices[offset++] = u;\n        vertices[offset++] = 1 - v;\n\n        verticesRow.push(index++);\n      }\n      grid.push(verticesRow);\n    }\n\n    // Generate indices\n    index = 0;\n    for (let iy = 0; iy < verticalSegments; iy++) {\n      for (let ix = 0; ix < horizontalSegments; ix++) {\n        const a = grid[iy][ix + 1];\n        const b = grid[iy][ix];\n        const c = grid[iy + 1][ix];\n        const d = grid[iy + 1][ix + 1];\n\n        indices[index++] = a;\n        indices[index++] = c;\n        indices[index++] = b;\n        indices[index++] = a;\n        indices[index++] = d;\n        indices[index++] = c;\n      }\n    }\n\n    this._initialize(engine, vertices, indices);\n  }\n}\n", "import { Vector3 } from \"@oasis-engine/math\";\nimport { FrontFace } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { ShapeGeometry } from \"./ShapeGeometry\";\n\n/**\n * SphereGeometry.\n */\nexport class CylinderGeometry extends ShapeGeometry {\n  public FrontFace;\n  public index;\n  public indexArray;\n  public halfHeight;\n  private _parameters;\n  private _vertices;\n  private _indices;\n\n  /**\n   * @param  engine - Engine\n   * @param  radiusTop - Cylinder top radius, default is 1.\n   * @param  radiusBottom - Cylinder bottom radius, default is 1.\n   * @param  height - Cylinder height, default is 1.\n   * @param  radialSegments - Number of segmented faces around the circumference of the cylinder. Default is 8\n   * @param  heightSegments - Number of rows of faces along the height of the cylinder. Default is 1.\n   * @param  openEnded - A boolean indicating whether the ends of the cylinder are open or capped. Default is false, meaning capped.\n   * @param  thetaStart - Start angle for first segment, default = 0 (three o'clock position).\n   * @param  thetaLength - The central angle, often called theta, of the circular sector. The default is 2*Pi, which makes for a complete cylinder.\n   */\n  constructor(\n    engine: Engine,\n    radiusTop: number = 1,\n    radiusBottom: number = 1,\n    height: number = 1,\n    radialSegments: number = 8,\n    heightSegments: number = 1,\n    openEnded: boolean = false,\n    thetaStart: number = 0,\n    thetaLength: number = 2 * Math.PI,\n    frontFace: FrontFace = FrontFace.CCW\n  ) {\n    super(engine);\n    this.FrontFace = frontFace;\n    this._parameters = {\n      radiusTop: radiusTop,\n      radiusBottom: radiusBottom,\n      height: height,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments,\n      openEnded: openEnded,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n\n    this._vertices = [];\n    this._indices = [];\n\n    this.index = 0;\n    this.indexArray = [];\n    this.halfHeight = this._parameters.height / 2;\n\n    this.generateTorso();\n\n    if (this._parameters.openEnded === false) {\n      if (this._parameters.radiusTop > 0) this.generateCap(true);\n      if (this._parameters.radiusBottom > 0) this.generateCap(false);\n    }\n\n    this._initialize(engine, Float32Array.from(this._vertices), Uint16Array.from(this._indices));\n  }\n\n  generateTorso() {\n    const { radialSegments, heightSegments, radiusBottom, radiusTop, height } = this._parameters;\n    let x, y;\n    const normal: Vector3 = new Vector3();\n    const slope = (radiusBottom - radiusTop) / height;\n    for (y = 0; y <= heightSegments; y++) {\n      const indexRow = [];\n      const v = y / heightSegments;\n      const radius = v * (radiusBottom - radiusTop) + radiusTop;\n      for (x = 0; x <= radialSegments; x++) {\n        const u = x / radialSegments;\n        const theta = u * this._parameters.thetaLength + this._parameters.thetaStart;\n        const sinTheta = Math.sin(theta);\n        const cosTheta = Math.cos(theta);\n\n        // vertex\n        const vertX = radius * sinTheta;\n        const vertY = -v * height + this.halfHeight;\n        const vertZ = radius * cosTheta;\n        this._vertices.push(vertX, vertY, vertZ);\n\n        // normal\n        normal.setValue(sinTheta, slope, cosTheta);\n        normal.normalize();\n        this._vertices.push(normal.x, normal.y, normal.z);\n\n        // uv\n        if (this.FrontFace === FrontFace.CCW) {\n          this._vertices.push(u, v);\n        } else {\n          this._vertices.push(1 - u, v);\n        }\n\n        indexRow.push(this.index++);\n      }\n\n      this.indexArray.push(indexRow);\n    }\n\n    for (x = 0; x < radialSegments; x++) {\n      for (y = 0; y < heightSegments; y++) {\n        var a = this.indexArray[y][x];\n        var b = this.indexArray[y + 1][x];\n        var c = this.indexArray[y + 1][x + 1];\n        var d = this.indexArray[y][x + 1];\n\n        // faces\n        this._indices.push(a, b, d);\n        this._indices.push(b, c, d);\n      }\n    }\n  }\n\n  generateCap(isTop) {\n    const { radialSegments } = this._parameters;\n    let x;\n    const radius = isTop === true ? this._parameters.radiusTop : this._parameters.radiusBottom;\n    const sign = isTop === true ? 1 : -1;\n    const centerIndexStart = this.index;\n\n    for (x = 1; x <= radialSegments; x++) {\n      // vertex\n      this._vertices.push(0, this.halfHeight * sign, 0);\n\n      // normal\n      this._vertices.push(0, sign, 0);\n\n      // uv\n      this._vertices.push(0.5, 0.5);\n\n      // increase index\n      this.index++;\n    }\n    const centerIndexEnd = this.index;\n\n    for (x = 0; x <= radialSegments; x++) {\n      const u = x / radialSegments;\n      const theta = u * this._parameters.thetaLength + this._parameters.thetaStart;\n      const cosTheta = Math.cos(theta);\n      const sinTheta = Math.sin(theta);\n\n      // vertex\n      const vertexX = radius * sinTheta;\n      const vertexY = this.halfHeight * sign;\n      const vertexZ = radius * cosTheta;\n      this._vertices.push(vertexX, vertexY, vertexZ);\n\n      // normal\n      this._vertices.push(0, sign, 0);\n\n      // uv\n      const uvX = cosTheta * 0.5 + 0.5;\n      const uvY = sinTheta * 0.5 * sign + 0.5;\n      this._vertices.push(uvX, uvY);\n\n      // increase index\n      this.index++;\n    }\n\n    for (x = 0; x < radialSegments; x++) {\n      var c = centerIndexStart + x;\n      var i = centerIndexEnd + x;\n      if (isTop === true) {\n        // face top\n        this._indices.push(i, i + 1, c);\n      } else {\n        // face bottom\n        this._indices.push(i + 1, i, c);\n      }\n    }\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { ShapeGeometry } from \"./ShapeGeometry\";\n\ninterface CircleGeometryOptions {\n  radius?: number;\n  segments?: number;\n  thetaStart?: number;\n  thetaLength?: number;\n}\n/**\n * CircleGeometry.\n */\nexport class CircleGeometry extends ShapeGeometry {\n  private radius: number = 1;\n  private segments: number = 16;\n  private thetaStart: number = 0;\n  private thetaLength: number = Math.PI * 2;\n\n  /**\n   * @param engine - Engine\n   * @param radius - Circle radius\n   */\n  constructor(engine: Engine, options: CircleGeometryOptions = {}) {\n    super(engine);\n\n    this.radius = options.radius || this.radius;\n    this.segments = options.segments || this.segments;\n    this.thetaStart = options.thetaStart || this.thetaStart;\n    this.thetaLength = options.thetaLength || this.thetaLength;\n    const { segments, radius } = this;\n\n    // init with center point\n    const vertices: Float32Array = new Float32Array((segments + 2) * 8);\n    // POSITION NORMAL TEXCOORD_0\n    vertices.set([0, 0, 0, 0, 0, 1, 0.5, 0.5]);\n\n    let index = 8;\n    for (let s = 0; s <= segments; s++) {\n      let segment = this.thetaStart + (s / segments) * this.thetaLength;\n      const x = radius * Math.cos(segment);\n      const y = radius * Math.sin(segment);\n\n      // POSITION\n      vertices[index++] = x;\n      vertices[index++] = y;\n      vertices[index++] = 0;\n      // NORMAL\n      vertices[index++] = 0;\n      vertices[index++] = 0;\n      vertices[index++] = 1;\n      // TEXCOORD_0\n      vertices[index++] = (x / radius + 1) * 0.5;\n      vertices[index++] = (y / radius + 1) * 0.5;\n    }\n\n    const indices: Uint16Array = new Uint16Array(segments * 3);\n    index = 0;\n    for (let i = 1; i <= segments; i++) {\n      indices[index++] = i;\n      indices[index++] = i + 1;\n      indices[index++] = 0;\n    }\n\n    this._initialize(engine, vertices, indices);\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { PrimitiveTopology } from \"../graphic/enums/PrimitiveTopology\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { ShapeGeometry } from \"./ShapeGeometry\";\n\n/**\n * A rectangle covering the entire screen.\n * @private\n */\nexport class ScreenQuadGeometry extends ShapeGeometry {\n  constructor(engine: Engine) {\n    super(engine);\n    const vertices: Float32Array = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\n\n    const indices: Uint16Array = new Uint16Array([0, 1, 2, 3]);\n\n    this._initialize(engine, vertices, indices);\n    this.subGeometry.topology = PrimitiveTopology.TriangleFan;\n  }\n\n  _initialize(engine: Engine, vertices: Float32Array, indices: Uint16Array) {\n    const vertexStride = 20;\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0)\n    ];\n    this._initBuffer(engine, vertices, indices, vertexStride, vertexElements);\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { ShapeGeometry } from \"./ShapeGeometry\";\n\n/**\n * TorusGeometry.\n */\nexport class TorusGeometry extends ShapeGeometry {\n  constructor(\n    private parameters: {\n      radius?: number;\n      tube?: number;\n      radialSegments?: number;\n      tubularSegments?: number;\n      arc?: number;\n    } = {},\n    engine: Engine\n  ) {\n    super(engine);\n\n    const radius = this.parameters.radius || 1;\n    const tube = this.parameters.tube || 0.4;\n    const radialSegments = Math.floor(this.parameters.radialSegments) || 8;\n    const tubularSegments = Math.floor(this.parameters.tubularSegments) || 6;\n    const arc = this.parameters.arc || Math.PI * 2;\n\n    // buffers\n    const vertices: Float32Array = new Float32Array((radialSegments + 1) * (tubularSegments + 1) * 3);\n    const indices: Uint16Array = new Uint16Array(radialSegments * tubularSegments * 6);\n\n    // generate vertices, normals and uvs\n    let index = 0;\n    for (let j = 0; j <= radialSegments; j++) {\n      for (let i = 0; i <= tubularSegments; i++) {\n        const u = (i / tubularSegments) * arc;\n        const v = (j / radialSegments) * Math.PI * 2;\n\n        // POSITION\n        vertices[index++] = (radius + tube * Math.cos(v)) * Math.cos(u);\n        vertices[index++] = (radius + tube * Math.cos(v)) * Math.sin(u);\n        vertices[index++] = tube * Math.sin(v);\n      }\n    }\n\n    // generate indices\n    index = 0;\n    for (let j = 1; j <= radialSegments; j++) {\n      for (let i = 1; i <= tubularSegments; i++) {\n        // indices\n        const a = (tubularSegments + 1) * j + i - 1;\n        const b = (tubularSegments + 1) * (j - 1) + i - 1;\n        const c = (tubularSegments + 1) * (j - 1) + i;\n        const d = (tubularSegments + 1) * j + i;\n\n        // faces\n        indices[index++] = a;\n        indices[index++] = b;\n        indices[index++] = d;\n        indices[index++] = b;\n        indices[index++] = c;\n        indices[index++] = d;\n      }\n    }\n    this._initialize(engine, vertices, indices);\n  }\n\n  _initialize(engine: Engine, vertices: Float32Array, indices: Uint16Array) {\n    const vertexStride = 12;\n    const vertexElements = [new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0)];\n\n    this._initBuffer(engine, vertices, indices, vertexStride, vertexElements);\n  }\n}\n", "import { Entity } from \"../Entity\";\nimport { GeometryRenderer } from \"../geometry/GeometryRenderer\";\nimport { BlinnPhongMaterial } from \"../material/BlinnPhongMaterial\";\nimport { CuboidGeometry } from \"./CuboidGeometry\";\nimport { CylinderGeometry } from \"./CylinderGeometry\";\nimport { PlaneGeometry } from \"./PlaneGeometry\";\nimport { SphereGeometry } from \"./SphereGeometry\";\n\n// Only for editor\nexport class Model extends GeometryRenderer {\n  private _props: any;\n  private _geometryType: GeometryType;\n\n  set geometryType(value: GeometryType) {\n    switch (value) {\n      case \"Sphere\":\n        const {\n          sphereRadius,\n          sphereHorizontalSegments,\n          sphereVerticalSegments,\n          sphereAlphaStart,\n          sphereAlphaRange,\n          sphereThetaStart,\n          sphereThetaRange\n        } = this._props as any;\n        this.geometry = new SphereGeometry(\n          this.engine,\n          sphereRadius,\n          sphereHorizontalSegments,\n          sphereVerticalSegments,\n          sphereAlphaStart,\n          sphereAlphaRange,\n          sphereThetaStart,\n          sphereThetaRange\n        );\n        break;\n\n      case \"Cylinder\":\n        const {\n          cylinderRadiusTop,\n          cylinderRadiusBottom,\n          cylinderHeight,\n          cylinderRadialSegments,\n          cylinderHeightSegments,\n          cylinderOpenEnded\n        } = this._props as any;\n        this.geometry = new CylinderGeometry(\n          this.engine,\n          cylinderRadiusTop,\n          cylinderRadiusBottom,\n          cylinderHeight,\n          cylinderRadialSegments,\n          cylinderHeightSegments,\n          cylinderOpenEnded,\n          undefined,\n          undefined,\n          undefined\n        );\n        break;\n\n      case \"Plane\":\n        const { planeWidth, planeHeight, planeHorizontalSegments, planeVerticalSegments } = this._props as any;\n        this.geometry = new PlaneGeometry(\n          this.engine,\n          planeWidth,\n          planeHeight,\n          planeHorizontalSegments,\n          planeVerticalSegments\n        );\n        break;\n\n      case \"Box\":\n        var { boxWidth, boxHeight, boxDepth } = this._props as any;\n        this.geometry = new CuboidGeometry(this.engine, boxWidth, boxHeight, boxDepth);\n        break;\n    }\n\n    this._geometryType = value;\n  }\n\n  get geometryType() {\n    return this._geometryType;\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  get material(): any {\n    return this._material;\n  }\n\n  set material(mtl: any) {\n    if (!mtl) {\n      this._material = new BlinnPhongMaterial(this.engine);\n    } else {\n      this._material = mtl;\n    }\n  }\n\n  init(props: any) {\n    this._props = props;\n\n    const { geometryType = GeometryType.Box } = props;\n    this.material = props.material;\n    this.geometryType = geometryType;\n  }\n\n  setProp(key: string, value: any) {\n    this._props[key] = value;\n\n    if (key === \"material\") {\n      this.material = value;\n    } else {\n      this.geometryType = this._props.geometryType;\n    }\n  }\n}\n\nenum GeometryType {\n  Box = \"Box\",\n  Cylinder = \"Cylinder\",\n  Plane = \"Plane\",\n  Sphere = \"Sphere\"\n}\n", "import { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { CompareFunction } from \"../shader/enums/CompareFunction\";\nimport { CullMode } from \"../shader/enums/CullMode\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * SkyboxMaterial\n */\nexport class SkyBoxMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"skybox\"));\n\n    this.renderState.rasterState.cullMode = CullMode.Off;\n    this.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n  }\n}\n", "import { BoundingBox, Matrix } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Entity } from \"../Entity\";\nimport { CuboidGeometry } from \"../geometry-shape/CuboidGeometry\";\nimport { GeometryRenderer } from \"../geometry/GeometryRenderer\";\nimport { TextureCubeMap } from \"../texture/TextureCubeMap\";\nimport { SkyBoxMaterial } from \"./SkyBoxMaterial\";\n\n/**\n * Skybox Component\n */\nexport class SkyBox extends GeometryRenderer {\n  private _skyBoxMap: TextureCubeMap;\n  private _matrix: Matrix = new Matrix();\n  private _initBounds: boolean = false;\n\n  /**\n   * Contructor of skybox\n   * @param - Entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this.geometry = new CuboidGeometry(this.engine, 2, 2, 2);\n    this.material = new SkyBoxMaterial(this.engine);\n  }\n\n  /**\n   * @internal\n   * @param camera\n   */\n  render(camera: Camera) {\n    if (!this._skyBoxMap) return;\n\n    const modelMatrix = this.entity.transform.worldMatrix;\n    const view = camera.viewMatrix;\n    const proj = camera.projectionMatrix;\n    const matrix = this._matrix;\n\n    Matrix.multiply(view, modelMatrix, matrix);\n    const e = matrix.elements;\n    e[12] = e[13] = e[14] = 0;\n    Matrix.multiply(proj, matrix, matrix);\n    this.shaderData.setMatrix(\"u_mvpNoscale\", matrix);\n\n    super.render(camera);\n  }\n\n  /**\n   * CubeMap of current skybox.\n   */\n  get skyBoxMap(): TextureCubeMap {\n    return this._skyBoxMap;\n  }\n\n  set skyBoxMap(v: TextureCubeMap) {\n    this._skyBoxMap = v;\n    v && this.material.shaderData.setTexture(\"u_cube\", v);\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    if (!this._initBounds) {\n      worldBounds.min.setValue(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n      worldBounds.max.setValue(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n      this._initBounds = true;\n    }\n  }\n}\n", "import { MathUtil, Vector3, Color } from \"@oasis-engine/math\";\nimport { BufferGeometry, GeometryRenderer } from \"../geometry\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor } from \"../shader/enums/BlendFactor\";\nimport { RenderQueueType } from \"../material/enums/RenderQueueType\";\nimport { Shader, CullMode } from \"../shader\";\nimport { Texture } from \"../texture\";\n\nenum DirtyFlagType {\n  Position = 0x1,\n  Velocity = 0x2,\n  Acceleration = 0x4,\n  Color = 0x8,\n  Apha = 0x10,\n  Size = 0x20,\n  StartAngle = 0x40,\n  StartTime = 0x80,\n  LifeTime = 0x100,\n  RotateVelocity = 0x200,\n  Scale = 0x400,\n  Everything = 0xffffffff\n}\n\n/**\n * Blend mode enums of the particle renderer's material.\n */\nexport enum ParticleRendererBlendMode {\n  Transparent = 0,\n  Additive = 1\n}\n\n/**\n * Particle Renderer Component.\n */\nexport class ParticleRenderer extends GeometryRenderer {\n  private static _getRandom(): number {\n    return Math.random() - 0.5;\n  }\n\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _maxCount: number = 1000;\n  private _position: Vector3 = new Vector3();\n  private _positionRandomness: Vector3 = new Vector3();\n  private _positionArray: Vector3[];\n  private _velocity: Vector3 = new Vector3();\n  private _velocityRandomness: Vector3 = new Vector3();\n  private _acceleration: Vector3 = new Vector3();\n  private _accelerationRandomness: Vector3 = new Vector3();\n  private _color: Color = new Color(1, 1, 1, 1);\n  private _colorRandomness: number = 0;\n  private _size: number = 1;\n  private _sizeRandomness: number = 0;\n  private _alpha: number = 1;\n  private _alphaRandomness: number = 0;\n  private _startAngle: number = 0;\n  private _startAngleRandomness: number = 0;\n  private _rotateVelocity: number = 0;\n  private _rotateVelocityRandomness: number = 0;\n  private _lifetime: number = 5;\n  private _startTimeRandomness: number = 0;\n  private _scale: number = 1;\n  private _isOnce: boolean = false;\n  private _time: number = 0;\n  private _isInit: boolean = false;\n  private _isStart: boolean = false;\n  private _updateDirtyFlag: number = DirtyFlagType.Everything;\n  private _isRotateToVelocity: boolean = false;\n  private _isUseOriginColor: boolean = false;\n  private _isScaleByLifetime: boolean = false;\n  private _is2d: boolean = true;\n  private _isFadeIn: boolean = false;\n  private _isFadeOut: boolean = false;\n  private _playOnEnable: boolean = true;\n  private _blendMode: ParticleRendererBlendMode = ParticleRendererBlendMode.Transparent;\n\n  /**\n   * Sprite sheet of texture.\n   */\n  public spriteSheet: { x: number; y: number; w: number; h: number }[];\n\n  /**\n   * Texture of particle.\n   */\n  get texture(): Texture {\n    return this.material.shaderData.getTexture('u_texture');\n  }\n\n  set texture(texture: Texture) {\n    if (texture) {\n      this.shaderData.enableMacro('particleTexture');\n      this.material.shaderData.setTexture('u_texture', texture);\n    } else {\n      this.shaderData.disableMacro('particleTexture');\n    }\n  }\n\n  /**\n   * Position of particles.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._position = value;\n  }\n\n  /**\n   * Random range of positions.\n   */\n  get positionRandomness(): Vector3 {\n    return this._positionRandomness;\n  }\n\n  set positionRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._positionRandomness = value;\n  }\n\n  /**\n   * Array of fixed positions.\n   */\n  get positionArray(): Vector3[] {\n    return this._positionArray;\n  }\n\n  set positionArray(value: Vector3[]) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._positionArray = value;\n  }\n\n  /**\n   * Velocity of particles.\n   */\n  get velocity(): Vector3 {\n    return this._velocity;\n  }\n\n  set velocity(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Velocity;\n    this._velocity = value;\n  }\n\n  /**\n   * Random range of velocity.\n   */\n  get velocityRandomness(): Vector3 {\n    return this._velocityRandomness;\n  }\n\n  set velocityRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Velocity;\n    this._velocityRandomness = value;\n  }\n\n  /**\n   * Acceleration of particles.\n   */\n  get acceleration(): Vector3 {\n    return this._acceleration;\n  }\n\n  set acceleration(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Acceleration;\n    this._acceleration = value;\n  }\n\n  /**\n   * Random range of acceleration.\n   */\n  get accelerationRandomness(): Vector3 {\n    return this._accelerationRandomness;\n  }\n\n  set accelerationRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Acceleration;\n    this._accelerationRandomness = value;\n  }\n\n  /**\n   * Color of particles.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    this._updateDirtyFlag |= DirtyFlagType.Color;\n    this._color = value;\n  }\n\n  /**\n   * Random range of color.\n   */\n  get colorRandomness(): number {\n    return this._colorRandomness;\n  }\n\n  set colorRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Color;\n    this._colorRandomness = value;\n  }\n\n  /**\n   * Size of particles.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  set size(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Size;\n    this._size = value;\n  }\n\n  /**\n   * Random range of size.\n   */\n  get sizeRandomness(): number {\n    return this._sizeRandomness;\n  }\n\n  set sizeRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Size;\n    this._sizeRandomness = value;\n  }\n\n  /**\n   * Alpha of particles.\n   */\n  get alpha(): number {\n    return this._alpha;\n  }\n\n  set alpha(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Apha;\n    this._alpha = value;\n  }\n\n  /**\n   * Random range of alpha.\n   */\n  get alphaRandomness(): number {\n    return this._alphaRandomness;\n  }\n\n  set alphaRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Apha;\n    this._alphaRandomness = value;\n  }\n\n  /**\n   * Angle of particles.\n   */\n  get angle(): number {\n    return this._startAngle;\n  }\n\n  set angle(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartAngle;\n    this._startAngle = value;\n  }\n\n  /**\n   * Random range of angle.\n   */\n  get angleRandomness(): number {\n    return this._startAngleRandomness;\n  }\n\n  set angleRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartAngle;\n    this._startAngleRandomness = value;\n  }\n\n  /**\n   * Rotate velocity of particles.\n   */\n  get rotateVelocity(): number {\n    return this._rotateVelocity;\n  }\n\n  set rotateVelocity(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.RotateVelocity;\n    this._rotateVelocity = value;\n  }\n\n  /**\n   * Random range of rotate velocity.\n   */\n  get rotateVelocityRandomness(): number {\n    return this._rotateVelocityRandomness;\n  }\n\n  set rotateVelocityRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.RotateVelocity;\n    this._rotateVelocityRandomness = value;\n  }\n\n  /**\n   * Lifetime of particles.\n   */\n  get lifetime(): number {\n    return this._lifetime;\n  }\n\n  set lifetime(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.LifeTime;\n    this._lifetime = value;\n  }\n\n  /**\n   * Random range of start time.\n   */\n  get startTimeRandomness(): number {\n    return this._startTimeRandomness;\n  }\n\n  set startTimeRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartTime;\n    this._startTimeRandomness = value;\n  }\n\n  /**\n   * Scale factor of particles.\n   */\n  get scale(): number {\n    return this._scale;\n  }\n\n  set scale(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Scale;\n    this._scale = value;\n  }\n\n  /**\n   * Max count of particles.\n   */\n  get maxCount(): number {\n    return this._maxCount;\n  }\n\n  set maxCount(value: number) {\n    this._isStart = false;\n    this._isInit = false;\n    this._maxCount = value;\n    this._updateDirtyFlag = DirtyFlagType.Everything;\n    this.geometry = this._createGeometry();\n\n    this._updateBuffer();\n\n    this._isInit = true;\n\n  }\n\n  /**\n   * Whether play once.\n   */\n  get isOnce(): boolean {\n    return this._isOnce;\n  }\n\n  set isOnce(value: boolean) {\n    this._time = 0;\n    this.shaderData.setInt(\"u_once\", value ? 1 : 0);\n    this._isOnce = value;\n  }\n\n  /**\n   * Whether follow the direction of velocity.\n   */\n  get isRotateToVelocity(): boolean {\n    return this._isRotateToVelocity;\n  }\n\n  set isRotateToVelocity(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"rotateToVelocity\");\n    } else {\n      this.shaderData.disableMacro(\"rotateToVelocity\");\n    }\n\n    this._isRotateToVelocity = value;\n  }\n\n  /**\n   * Whether use origin color.\n   */\n  get isUseOriginColor(): boolean {\n    return this._isUseOriginColor;\n  }\n\n  set isUseOriginColor(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"useOriginColor\");\n    } else {\n      this.shaderData.disableMacro(\"useOriginColor\");\n    }\n\n    this._isUseOriginColor = value;\n  }\n\n  /**\n   * Whether scale by lifetime.\n   */\n  get isScaleByLifetime(): boolean {\n    return this._isScaleByLifetime;\n  }\n\n  set isScaleByLifetime(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"isScaleByLifetime\");\n    } else {\n      this.shaderData.disableMacro(\"isScaleByLifetime\");\n    }\n\n    this._isScaleByLifetime = value;\n  }\n\n  /**\n   * Whether 2D rendering.\n   */\n  get is2d(): boolean {\n    return this._is2d;\n  }\n\n  set is2d(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"is2d\");\n    } else {\n      this.shaderData.disableMacro(\"is2d\");\n      this.material.renderState.rasterState.cullMode = CullMode.Off;\n    }\n\n    this._is2d = value;\n  }\n\n  /**\n   * Whether fade in.\n   */\n  get isFadeIn(): boolean {\n    return this._isFadeIn;\n  }\n\n  set isFadeIn(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"fadeIn\");\n    } else {\n      this.shaderData.disableMacro(\"fadeIn\");\n    }\n\n    this._isFadeIn = value;\n  }\n\n  /**\n   * Whether fade out.\n   */\n  get isFadeOut(): boolean {\n    return this._isFadeOut;\n  }\n\n  set isFadeOut(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"fadeOut\");\n    } else {\n      this.shaderData.disableMacro(\"fadeOut\");\n    }\n\n    this._isFadeOut = value;\n  }\n\n  /**\n   * Whether play on enable.\n   */\n  get playOnEnable(): boolean {\n    return this._playOnEnable;\n  }\n\n  set playOnEnable(value: boolean) {\n    this._playOnEnable = value;\n\n    if (value) {\n      this.start();\n    }\n    else {\n      this.stop();\n    }\n  }\n\n  /**\n   * Blend mode of the particle renderer's material.\n   */\n  get blendMode(): ParticleRendererBlendMode {\n    return this._blendMode;\n  }\n\n  set blendMode(value: ParticleRendererBlendMode) {\n    const blendState = this.material.renderState.blendState;\n    const target = blendState.targetBlendState;\n\n    if (value === ParticleRendererBlendMode.Transparent) {\n      target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;\n      target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    }\n    else if (value === ParticleRendererBlendMode.Additive) {\n      target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;\n      target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.One;\n    }\n\n    this._blendMode = value;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this._material = this._createMaterial();\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  update(deltaTime: number): void {\n    if (!this._isInit || !this._isStart) {\n      return;\n    }\n\n    if (this._updateDirtyFlag) {\n      this._updateBuffer();\n      this._updateDirtyFlag = 0;\n    }\n\n    this._time += deltaTime / 1000;\n    this.shaderData.setFloat(\"u_time\", this._time);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    super._onEnable();\n\n    if (this._playOnEnable) {\n      this.start();\n    }\n  }\n\n  /**\n   * Start emitting.\n   */\n  start(): void {\n    this._isStart = true;\n    this._time = 0;\n    this.shaderData.setInt(\"u_active\", 1);\n  }\n\n  /**\n   * Stop emitting.\n   */\n  stop(): void {\n    this.shaderData.setInt(\"u_active\", 0);\n  }\n\n  private _createMaterial(): Material {\n    const material = new Material(this.engine, Shader.find(\"particle-shader\"));\n    const { renderState } = material;\n    const target = renderState.blendState.targetBlendState;\n\n    target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n\n    renderState.depthState.writeEnabled = false;\n\n    material.renderQueueType = RenderQueueType.Transparent;\n\n    this.isUseOriginColor = true;\n    this.is2d = true;\n    this.isFadeOut = true;\n\n    return material;\n  }\n\n  private _createGeometry(): BufferGeometry {\n    const geometry = new BufferGeometry(this._entity.engine, \"particleGeometry\");\n    const vertexStride = 96;\n    const vertexFloatCount = this._maxCount * 4 * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    const indices = new Uint16Array(6 * this._maxCount);\n\n    for (let i = 0, idx = 0; i < this._maxCount; ++i) {\n      let startIndex = i * 4;\n      indices[idx++] = startIndex + 0;\n      indices[idx++] = startIndex + 1;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex + 0;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex + 3;\n    }\n\n    const vertexElements = [\n      new VertexElement(\"a_position\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_velocity\", 12, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_acceleration\", 24, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_color\", 36, VertexElementFormat.Vector4, 0),\n      new VertexElement(\"a_lifeAndSize\", 52, VertexElementFormat.Vector4, 0),\n      new VertexElement(\"a_rotation\", 68, VertexElementFormat.Vector2, 0),\n      new VertexElement(\"a_uv\", 76, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_normalizedUv\", 88, VertexElementFormat.Vector2, 0)\n    ];\n\n    const vertexBuffer = new Buffer(\n      this.engine,\n      BufferBindFlag.VertexBuffer,\n      vertexFloatCount * 4,\n      BufferUsage.Dynamic\n    );\n\n    const indexBuffer = new Buffer(this.engine, BufferBindFlag.IndexBuffer, indices, BufferUsage.Dynamic);\n\n    geometry.setVertexBufferBinding(vertexBuffer, vertexStride);\n    geometry.setIndexBufferBinding(indexBuffer, IndexFormat.UInt16);\n    geometry.setVertexElements(vertexElements);\n    geometry.addSubGeometry(0, indices.length);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride / 4;\n    this._vertices = vertices;\n    return geometry;\n  }\n\n  private _updateBuffer(): void {\n    for (let x = 0; x < this._maxCount; x++) {\n      this._updateSingleBuffer(x);\n    }\n\n    this._vertexBuffer.setData(this._vertices);\n  }\n\n  private _updateSingleBuffer(i: number): void {\n    const { _updateDirtyFlag, _vertices: vertices, _vertexStride: vertexStride } = this;\n    const { _getRandom: getRandom } = ParticleRenderer;\n    const offset = i * 4;\n\n    const k0 = offset * vertexStride;\n    const k1 = (offset + 1) * vertexStride;\n    const k2 = (offset + 2) * vertexStride;\n    const k3 = (offset + 3) * vertexStride;\n\n    if (_updateDirtyFlag & DirtyFlagType.Position) {\n      let { x, y, z } = this._position;\n      const { _positionArray, _positionRandomness } = this;\n\n      if (_positionArray) {\n        if (_positionArray.length !== this._maxCount) {\n          throw Error(\"The length of positionArray must be equal to maxCount.\");\n        }\n        const pos = _positionArray[i];\n\n        x += pos.x;\n        y += pos.y;\n        z += pos.z;\n      } else {\n        x += getRandom() * _positionRandomness.x;\n        y += getRandom() * _positionRandomness.y;\n        z += getRandom() * _positionRandomness.z;\n      }\n\n      vertices[k0] = vertices[k1] = vertices[k2] = vertices[k3] = x;\n      vertices[k0 + 1] = vertices[k1 + 1] = vertices[k2 + 1] = vertices[k3 + 1] = y;\n      vertices[k0 + 2] = vertices[k1 + 2] = vertices[k2 + 2] = vertices[k3 + 2] = z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Velocity) {\n      const { _velocity, _velocityRandomness } = this;\n\n      vertices[k0 + 3] = vertices[k1 + 3] = vertices[k2 + 3] = vertices[k3 + 3] =\n        _velocity.x + getRandom() * _velocityRandomness.x;\n      vertices[k0 + 4] = vertices[k1 + 4] = vertices[k2 + 4] = vertices[k3 + 4] =\n        _velocity.y + getRandom() * _velocityRandomness.y;\n      vertices[k0 + 5] = vertices[k1 + 5] = vertices[k2 + 5] = vertices[k3 + 5] =\n        _velocity.z + getRandom() * _velocityRandomness.z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Acceleration) {\n      const { _acceleration, _accelerationRandomness } = this;\n\n      vertices[k0 + 6] = vertices[k1 + 6] = vertices[k2 + 6] = vertices[k3 + 6] =\n        _acceleration.x + getRandom() * _accelerationRandomness.x;\n      vertices[k0 + 7] = vertices[k1 + 7] = vertices[k2 + 7] = vertices[k3 + 7] =\n        _acceleration.y + getRandom() * _accelerationRandomness.y;\n      vertices[k0 + 8] = vertices[k1 + 8] = vertices[k2 + 8] = vertices[k3 + 8] =\n        _acceleration.z + getRandom() * _accelerationRandomness.z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Color) {\n      const { _color, _colorRandomness } = this;\n\n      vertices[k0 + 9] = vertices[k1 + 9] = vertices[k2 + 9] = vertices[k3 + 9] = MathUtil.clamp(\n        _color.r + getRandom() * _colorRandomness,\n        0,\n        1\n      );\n\n      vertices[k0 + 10] = vertices[k1 + 10] = vertices[k2 + 10] = vertices[k3 + 10] = MathUtil.clamp(\n        _color.g + getRandom() * _colorRandomness,\n        0,\n        1\n      );\n      vertices[k0 + 11] = vertices[k1 + 11] = vertices[k2 + 11] = vertices[k3 + 11] = MathUtil.clamp(\n        _color.b + getRandom() * _colorRandomness,\n        0,\n        1\n      );\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Apha) {\n      vertices[k0 + 12] = vertices[k1 + 12] = vertices[k2 + 12] = vertices[k3 + 12] = MathUtil.clamp(\n        this._alpha + getRandom() * this._alphaRandomness,\n        0,\n        1\n      );\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.StartTime) {\n      vertices[k0 + 13] = vertices[k1 + 13] = vertices[k2 + 13] = vertices[k3 + 13] =\n        Math.random() * this._startTimeRandomness;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.LifeTime) {\n      const { _lifetime } = this;\n\n      vertices[k0 + 14] = vertices[k1 + 14] = vertices[k2 + 14] = vertices[k3 + 14] =\n        _lifetime + getRandom() * _lifetime;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Size) {\n      const { _size } = this;\n\n      vertices[k0 + 15] = vertices[k1 + 15] = vertices[k2 + 15] = vertices[k3 + 15] = Math.max(\n        _size + getRandom() * this._sizeRandomness * _size * 2,\n        0\n      );\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Scale) {\n      vertices[k0 + 16] = vertices[k1 + 16] = vertices[k2 + 16] = vertices[k3 + 16] = this._scale;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.StartAngle) {\n      vertices[k0 + 17] = vertices[k1 + 17] = vertices[k2 + 17] = vertices[k3 + 17] =\n        this._startAngle + getRandom() * Math.PI * this._startAngleRandomness * 2;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.RotateVelocity) {\n      vertices[k0 + 18] = vertices[k1 + 18] = vertices[k2 + 18] = vertices[k3 + 18] =\n        this._rotateVelocity + getRandom() * this._rotateVelocityRandomness;\n    }\n\n    this._updateSingleUv(i, k0, k1, k2, k3);\n  }\n\n  private _updateSingleUv(i: number, k0: number, k1: number, k2: number, k3: number): void {\n    const { spriteSheet } = this;\n    const texture = this._material.shaderData.getTexture(\"u_texture\");\n    const vertices = this._vertices;\n\n    if (texture) {\n      const width = texture.width;\n      const height = texture.height;\n\n      if (spriteSheet) {\n        const { x, y, w, h } = spriteSheet[i % spriteSheet.length];\n\n        const u = x / width;\n        const v = y / height;\n        const p = u + w / width;\n        const q = v + h / height;\n        const ratio = h / w;\n\n        // left bottom\n        vertices[k0 + 19] = u;\n        vertices[k0 + 20] = q;\n        vertices[k0 + 21] = ratio;\n\n        // right bottom\n        vertices[k1 + 19] = p;\n        vertices[k1 + 20] = q;\n        vertices[k1 + 21] = ratio;\n\n        // right top\n        vertices[k2 + 19] = p;\n        vertices[k2 + 20] = v;\n        vertices[k2 + 21] = ratio;\n\n        // left top\n        vertices[k3 + 19] = u;\n        vertices[k3 + 20] = v;\n        vertices[k3 + 21] = ratio;\n      } else {\n        const ratio = height / width;\n\n        // left bottom\n        vertices[k0 + 19] = 0;\n        vertices[k0 + 20] = 1;\n        vertices[k0 + 21] = ratio;\n\n        // right bottom\n        vertices[k1 + 19] = 1;\n        vertices[k1 + 20] = 1;\n        vertices[k1 + 21] = ratio;\n\n        // right top\n        vertices[k2 + 19] = 1;\n        vertices[k2 + 20] = 0;\n        vertices[k2 + 21] = ratio;\n\n        // left top\n        vertices[k3 + 19] = 0;\n        vertices[k3 + 20] = 0;\n        vertices[k3 + 21] = ratio;\n      }\n    } else {\n      // left bottom\n      vertices[k0 + 19] = 0;\n      vertices[k0 + 20] = 0;\n      vertices[k0 + 21] = 1;\n\n      // right bottom\n      vertices[k1 + 19] = 1;\n      vertices[k1 + 20] = 0;\n      vertices[k1 + 21] = 1;\n\n      // right top\n      vertices[k2 + 19] = 1;\n      vertices[k2 + 20] = 1;\n      vertices[k2 + 21] = 1;\n\n      // left top\n      vertices[k3 + 19] = 0;\n      vertices[k3 + 20] = 1;\n      vertices[k3 + 21] = 1;\n    }\n\n    vertices[k0 + 22] = -0.5;\n    vertices[k0 + 23] = -0.5;\n    vertices[k1 + 22] = 0.5;\n    vertices[k1 + 23] = -0.5;\n    vertices[k2 + 22] = 0.5;\n    vertices[k2 + 23] = 0.5;\n    vertices[k3 + 22] = -0.5;\n    vertices[k3 + 23] = 0.5;\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor, Shader } from \"../shader\";\nimport FRAG_SHADER from \"./trail.fs.glsl\";\nimport VERT_SHADER from \"./trail.vs.glsl\";\n\nShader.create(\"trail\", VERT_SHADER, FRAG_SHADER);\n\nexport class TrailMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"trail\"));\n\n    const target = this.renderState.blendState.targetBlendState;\n    target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.One;\n\n    this.renderState.depthState.writeEnabled = false;\n  }\n}\n", "import { Matrix, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Entity } from \"../Entity\";\nimport { BufferGeometry, GeometryRenderer } from \"../geometry\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { PrimitiveTopology } from \"../graphic/enums/PrimitiveTopology\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Texture2D } from \"../texture\";\nimport { TrailMaterial } from \"./TrailMaterial\";\n\nconst _tempVector3 = new Vector3();\n\n/**\n * @deprecated\n */\nexport class TrailRenderer extends GeometryRenderer {\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _stroke;\n  private _minSeg;\n  private _lifetime;\n  private _maxPointNum;\n  private _points: Array<Vector3>;\n  private _pointStates: Array<number>;\n  private _strapPoints: Array<Vector3>;\n  private _curPointNum;\n  private _prePointsNum;\n  /**\n   * @deprecated\n   */\n  constructor(entity: Entity, props: any) {\n    super(entity);\n\n    this._stroke = props.stroke || 0.2;\n    this._minSeg = props.minSeg || 0.02;\n    this._lifetime = props.lifetime || 1000;\n    this._maxPointNum = (this._lifetime / 1000.0) * entity.engine.targetFrameRate;\n\n    this._points = [];\n    this._pointStates = [];\n    this._strapPoints = [];\n    for (let i = 0; i < this._maxPointNum; i++) {\n      this._points.push(new Vector3());\n      this._pointStates.push(this._lifetime);\n\n      this._strapPoints.push(new Vector3());\n      this._strapPoints.push(new Vector3());\n    }\n    this._curPointNum = 0;\n\n    const mtl = props.material || new TrailMaterial(this.engine);\n    this.material = mtl;\n\n    this.setTexture(props.texture);\n    this._initGeometry();\n  }\n\n  /**\n   * @internal\n   */\n  update(deltaTime: number) {\n    let mov = 0,\n      newIdx = 0;\n    for (let i = 0; i < this._curPointNum; i++) {\n      this._pointStates[i] -= deltaTime;\n      if (this._pointStates[i] < 0) {\n        mov++;\n      } else if (mov > 0) {\n        newIdx = i - mov;\n\n        // Move data\n        this._pointStates[newIdx] = this._pointStates[i];\n\n        // Move point\n        this._points[i].cloneTo(this._points[newIdx]);\n      }\n    }\n    this._curPointNum -= mov;\n\n    let appendNewPoint = true;\n    if (this._curPointNum === this._maxPointNum) {\n      appendNewPoint = false;\n    } else if (this._curPointNum > 0) {\n      const lastPoint = this._points[this._points.length - 1];\n      if (Vector3.distance(this.entity.worldPosition, lastPoint) < this._minSeg) {\n        appendNewPoint = false;\n      } else {\n        // debugger\n      }\n    }\n\n    if (appendNewPoint) {\n      this._pointStates[this._curPointNum] = this._lifetime;\n      this.entity.worldPosition.cloneTo(this._points[this._curPointNum]);\n\n      this._curPointNum++;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  render(camera: Camera) {\n    this._updateStrapVertices(camera, this._points);\n    this._updateStrapCoords();\n    this._vertexBuffer.setData(this._vertices);\n\n    super.render(camera);\n  }\n\n  /**\n   * @deprecated\n   * Set trail texture.\n   * @param texture\n   */\n  setTexture(texture: Texture2D) {\n    if (texture) {\n      this.material.shaderData.setTexture(\"u_texture\", texture);\n    }\n  }\n\n  private _initGeometry() {\n    const geometry = new BufferGeometry(this._entity.engine);\n\n    const vertexStride = 20;\n    const vertexCount = this._maxPointNum * 2;\n    const vertexFloatCount = vertexCount * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0)\n    ];\n    const vertexBuffer = new Buffer(this.engine, vertexFloatCount * 4, BufferUsage.Dynamic);\n\n    geometry.setVertexBufferBinding(vertexBuffer, vertexStride);\n    geometry.setVertexElements(vertexElements);\n    geometry.addSubGeometry(0, vertexCount, PrimitiveTopology.TriangleStrip);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride;\n    this._vertices = vertices;\n    this.geometry = geometry;\n  }\n\n  private _updateStrapVertices(camera, points: Array<Vector3>) {\n    const m: Matrix = camera.viewMatrix;\n    const e = m.elements;\n    const vx = new Vector3(e[0], e[4], e[8]);\n    const vy = new Vector3(e[1], e[5], e[9]);\n    const vz = new Vector3(e[2], e[6], e[10]);\n    const s = this._stroke;\n\n    vy.scale(s);\n\n    const up = new Vector3();\n    const down = new Vector3();\n\n    const rotation = new Quaternion();\n\n    Vector3.transformByQuat(vx, rotation, vx);\n    Vector3.transformByQuat(vy, rotation, vy);\n\n    const dy = new Vector3();\n    const cross = new Vector3();\n    const perpVector = new Vector3();\n\n    vx.normalize();\n\n    const vertieces = this._vertices;\n    //-- quad pos\n    for (let i = 0; i < this._maxPointNum; i++) {\n      //-- center pos\n      if (i < this._curPointNum) {\n        const p = points[i];\n\n        if (i === this._curPointNum - 1 && i !== 0) {\n          Vector3.subtract(p, points[i - 1], perpVector);\n        } else {\n          Vector3.subtract(points[i + 1], p, perpVector);\n        }\n\n        this._projectOnPlane(perpVector, vz, perpVector);\n        perpVector.normalize();\n\n        // Calculate angle between vectors\n        let angle = Math.acos(Vector3.dot(vx, perpVector));\n        Vector3.cross(vx, perpVector, cross);\n        if (Vector3.dot(cross, vz) <= 0) {\n          angle = Math.PI * 2 - angle;\n        }\n        Quaternion.rotationAxisAngle(vz, angle, rotation);\n        Vector3.transformByQuat(vy, rotation, dy);\n\n        Vector3.add(p, dy, up);\n        Vector3.subtract(p, dy, down);\n      }\n\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n      vertieces[p0] = up.x;\n      vertieces[p0 + 1] = up.y;\n      vertieces[p0 + 2] = up.z;\n\n      vertieces[p1] = down.x;\n      vertieces[p1 + 1] = down.y;\n      vertieces[p1 + 2] = down.z;\n    }\n  }\n\n  private _updateStrapCoords() {\n    if (this._prePointsNum === this._curPointNum) {\n      return;\n    }\n\n    this._prePointsNum = this._curPointNum;\n\n    const count = this._curPointNum;\n    const texDelta = 1.0 / count;\n    const vertieces = this._vertices;\n    for (let i = 0; i < count; i++) {\n      const d = 1.0 - i * texDelta;\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n\n      vertieces[p0] = 0;\n      vertieces[p0 + 1] = d;\n\n      vertieces[p1] = 1.0;\n      vertieces[p1 + 1] = d;\n    }\n  }\n\n  private _projectOnVector(a: Vector3, p: Vector3, out: Vector3): void {\n    const n_p = p.clone();\n    Vector3.normalize(n_p, n_p);\n    const cosine = Vector3.dot(a, n_p);\n    out.x = n_p.x * cosine;\n    out.y = n_p.y * cosine;\n    out.z = n_p.z * cosine;\n  }\n\n  private _projectOnPlane(a: Vector3, n: Vector3, out: Vector3) {\n    this._projectOnVector(a, n, _tempVector3);\n    Vector3.subtract(a, _tempVector3, out);\n  }\n}\n", "import { Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { ABoxCollider } from \"./ABoxCollider\";\n\nexport class BoxCollider extends ABoxCollider {\n  private _center: Vector3 = new Vector3();\n  private _size: Vector3 = new Vector3();\n  private isShowCollider: boolean = true;\n\n  get center(): Vector3 {\n    return this._center;\n  }\n\n  set center(value: Vector3) {\n    this._center = value;\n    this.setBoxCenterSize(this._center, this._size);\n  }\n\n  get size(): Vector3 {\n    return this._size;\n  }\n\n  set size(value: Vector3) {\n    this._size = value;\n    this.setBoxCenterSize(this._center, this._size);\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.center = this.center;\n    this.size = this.size;\n    this.isShowCollider = this.isShowCollider;\n  }\n}\n", "import { Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { ASphereCollider } from \"./ASphereCollider\";\n\nexport class SphereCollider extends ASphereCollider {\n  private __center: Vector3 = new Vector3();\n  private __radius: number = 1.0;\n  private isShowCollider: boolean = true;\n\n  get _center(): Vector3 {\n    return this.__center;\n  }\n\n  set _center(value: Vector3) {\n    this.__center = value;\n    this.setSphere(this.__center, this.__radius);\n  }\n\n  get _radius() {\n    return this.__radius;\n  }\n\n  set _radius(value: number) {\n    this.__radius = value;\n    this.setSphere(this.__center, this.__radius);\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n\n    this._center = this._center;\n    this._radius = this._radius;\n    this.isShowCollider = this.isShowCollider;\n  }\n}\n", "import { ColliderFeature } from \"./ColliderFeature\";\nimport { Scene } from \"../Scene\";\nScene.registerFeature(ColliderFeature);\n\n//-- colliders\nexport { ColliderFeature };\nexport { Collider as ACollider } from \"./Collider\";\nexport { ABoxCollider } from \"./ABoxCollider\";\nexport { PlaneCollider } from \"./PlaneCollider\";\nexport { ASphereCollider } from \"./ASphereCollider\";\nexport { BoxCollider } from \"./BoxCollider\";\nexport { SphereCollider } from \"./SphereCollider\";\n", "import { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * AABBox = {\n *  min: [-1,-1,-1],\n *  max: [1,1,1]\n * };\n *\n * Sphere = {\n *  center: [0,0,0],\n *  radius: 1\n * };\n */\n\n/**\n * Check whether the boxes intersect.\n * @param boxA - The first box to check\n * @param boxB - The second box to check\n * @returns True if the boxes intersect, false otherwise\n */\nexport function intersectBox2Box(boxA, boxB) {\n  return (\n    boxA.min.x <= boxB.max.x &&\n    boxA.max.x >= boxB.min.x &&\n    boxA.min.y <= boxB.max.y &&\n    boxA.max.y >= boxB.min.y &&\n    boxA.min.z <= boxB.max.z &&\n    boxA.max.z >= boxB.min.z\n  );\n}\n\n/**\n * Check whether the spheres intersect.\n * @param sphereA - The first sphere to check\n * @param sphereB - The second sphere to check\n * @returns True if the spheres intersect, false otherwise\n */\nexport function intersectSphere2Sphere(sphereA, sphereB) {\n  const distance = Vector3.distance(sphereA.center, sphereB.center);\n  return distance < sphereA.radius + sphereA.radius;\n}\n\n/**\n * Check whether the sphere and the box intersect.\n * @param sphere - The sphere to check\n * @param box - The box to check\n * @returns True if the sphere and the box intersect, false otherwise\n */\nexport function intersectSphere2Box(sphere, box) {\n  const center: Vector3 = sphere.center;\n\n  const closestPoint: Vector3 = new Vector3(\n    Math.max(box.min.x, Math.min(center.x, box.max.x)),\n    Math.max(box.min.y, Math.min(center.y, box.max.y)),\n    Math.max(box.min.z, Math.min(center.z, box.max.z))\n  );\n\n  const distance = Vector3.distance(center, closestPoint);\n  return distance < sphere.radius;\n}\n", "import { BoundingBox, Vector3 } from \"@oasis-engine/math\";\nimport { Event } from \"../base/Event\";\nimport { EventDispatcher } from \"../base/EventDispatcher\";\nimport { ACollider } from \"../collider\";\nimport { ABoxCollider } from \"../collider/ABoxCollider\";\nimport { ASphereCollider } from \"../collider/ASphereCollider\";\nimport { ColliderFeature } from \"../collider/ColliderFeature\";\nimport { Script } from \"../Script\";\nimport { intersectBox2Box, intersectSphere2Box, intersectSphere2Sphere } from \"./intersect\";\n\n/**\n * Detect collisions between the Collider on the current entity and other Colliders in the scene.\n */\nexport class CollisionDetection extends Script {\n  private static _tempVec3: Vector3 = new Vector3();\n  private static _tempBox1: BoundingBox = new BoundingBox();\n  private static _tempBox2: BoundingBox = new BoundingBox();\n\n  private _colliderManager;\n  private _myCollider;\n  private _overlopCollider;\n  private _sphere;\n  private _box: BoundingBox = new BoundingBox();\n\n  /**\n   * Constructor of the colliseion detection.\n   * @param entity - Entity to which the colliseion detection belong\n   */\n  constructor(entity) {\n    super(entity);\n  }\n\n  /**\n   * The collider that intersects with the collider on the current Entity.\n   */\n  get overlopCollider() {\n    return this._overlopCollider;\n  }\n\n  /**\n   * When every frame is updated, calculate the collision with other collider.\n   */\n  onUpdate(deltaTime) {\n    super.onUpdate(deltaTime);\n\n    let overlopCollider = null;\n\n    if (this._colliderManager && this._myCollider) {\n      const colliders = this._colliderManager.colliders;\n\n      if (this._myCollider instanceof ABoxCollider) {\n        this._updateWorldBox(this._myCollider, this._box);\n        for (let i = 0, len = colliders.length; i < len; i++) {\n          const collider = colliders[i];\n          if (collider != this._myCollider && this._boxCollision(collider)) {\n            overlopCollider = collider;\n            this.dispatch(\"collision\", { collider });\n          }\n        } // end of for\n      } else if (this._myCollider instanceof ASphereCollider) {\n        this._sphere = this._getWorldSphere(this._myCollider);\n        for (let i = 0, len = colliders.length; i < len; i++) {\n          const collider = colliders[i];\n          if (collider != this._myCollider && this._sphereCollision(collider)) {\n            overlopCollider = collider;\n            this.dispatch(\"collision\", { collider });\n          }\n        } // end of for\n      }\n    } // end of if\n\n    //-- overlop events\n    if (overlopCollider != null && this._overlopCollider != overlopCollider) {\n      this.dispatch(\"begin_overlop\", { collider: overlopCollider });\n    }\n\n    if (this._overlopCollider != null && this._overlopCollider != overlopCollider) {\n      const e = this._overlopCollider;\n      this.dispatch(\"end_overlop\", { collider: e });\n    }\n\n    this._overlopCollider = overlopCollider;\n  }\n\n  /**\n   * Calculate the boundingbox in world space from boxCollider.\n   * @param boxCollider - The boxCollider to calculate\n   * @param out - The caclulated boundingBox\n   */\n  _updateWorldBox(boxCollider, out: BoundingBox): void {\n    const mat = boxCollider.entity.transform.worldMatrix;\n    const source = CollisionDetection._tempBox1;\n    boxCollider.boxMax.cloneTo(source.max);\n    boxCollider.boxMin.cloneTo(source.min);\n    BoundingBox.transform(source, mat, out);\n  }\n\n  /**\n   * Get the sphere info of the given sphere collider in world space.\n   * @param sphereCollider - The given sphere collider\n   */\n  _getWorldSphere(sphereCollider) {\n    const center: Vector3 = new Vector3();\n    Vector3.transformCoordinate(sphereCollider.center, sphereCollider.entity.transform.worldMatrix, center);\n    return {\n      radius: sphereCollider.radius,\n      center\n    };\n  }\n\n  /**\n   * Collider and another collider do collision detection.\n   * @param other - The another collider to collision detection\n   */\n  _boxCollision(other) {\n    if (other instanceof ABoxCollider) {\n      const box = CollisionDetection._tempBox2;\n      this._updateWorldBox(other, box);\n      return intersectBox2Box(box, this._box);\n    } else if (other instanceof ASphereCollider) {\n      const sphere = this._getWorldSphere(other);\n      return intersectSphere2Box(sphere, this._box);\n    }\n    return false;\n  }\n\n  /**\n   * Collider and another collider do collision detection.\n   * @param other - The another collider to collision detection\n   */\n  _sphereCollision(other) {\n    if (other instanceof ABoxCollider) {\n      const box = CollisionDetection._tempBox2;\n      this._updateWorldBox(other, box);\n      return intersectSphere2Box(this._sphere, box);\n    } else if (other instanceof ASphereCollider) {\n      const sphere = this._getWorldSphere(other);\n      return intersectSphere2Sphere(sphere, this._sphere);\n    }\n    return false;\n  }\n\n  onAwake() {\n    this._colliderManager = this.scene.findFeature(ColliderFeature);\n    this._myCollider = this.entity.getComponent(ACollider);\n  }\n\n  //----------- EventDispatcher Interface ---------------;\n\n  // _evts: object;\n  // _evtCount: number;\n\n  /**\n   * Determine whether there is event monitoring.\n   * @param event - The event name\n   * @returns True if there is event monitoring, false otherwise\n   */\n  hasEvent: (event: string) => boolean;\n  /**\n   * Return all registered event names.\n   * @returns all registered event names\n   */\n  eventNames: () => string[];\n\n  /**\n   * Returns the number of listener functions with the specified event name.\n   * @param event - The event name\n   * @returns the number of listener functions with the specified event name\n   */\n  listenerCount: (event: string) => number;\n\n  /**\n   * Dispatch the event with the specified event name.\n   * @param event - The event name\n   * @param data - The data to dispatch\n   * @returns True if the dispatch is success, false otherwise\n   */\n  dispatch: (event: string, data?: any) => boolean;\n\n  /**\n   * Add a listener function.\n   * @param event - The event name\n   * @param fn - The function to add\n   * @returns This\n   */\n  on: (event: string, fn: Function) => EventDispatcher;\n\n  /**\n   * Add a listener function that just call once.\n   * @param event - The event name\n   * @param fn - The function to add\n   * @returns This\n   */\n  once: (event: string, fn: Function) => EventDispatcher;\n\n  /**\n   * @deprecated Replace with on/once.\n   */\n  addEventListener: (event: string, fn: Function, once?: boolean) => EventDispatcher;\n\n  off: (event: string, fn?: Function) => EventDispatcher;\n\n  /**\n   * @deprecated Replace with off.\n   */\n  removeEventListener: (event: string, fn?: Function) => EventDispatcher;\n\n  /**\n   * Remove all event listeners.\n   * @param event - The event name, delete all events if not passed\n   */\n  removeAllEventListeners: (event?: string) => void;\n\n  /**\n   * @deprecated Replace with dispatch.\n   */\n  trigger: (e: Event) => void;\n\n  _clearEvent: (event: string) => void;\n}\napplyMixins(CollisionDetection, [EventDispatcher]);\nfunction applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    });\n  });\n}\n", "import { Color } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Fog.\n */\nexport class Fog extends Component {\n  protected static _colorProperty = Shader.getPropertyByName(\"u_fogColor\");\n\n  /**\n   * Fog color.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    this._color = value;\n    this.scene.shaderData.setColor(Fog._colorProperty, value);\n  }\n\n  private _color: Color = new Color(1, 0, 0, 1);\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.color = this._color;\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.shaderData.enableMacro(\"O3_HAS_FOG\");\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.shaderData.disableMacro(\"O3_HAS_FOG\");\n  }\n}\n", "import { Entity } from \"../Entity\";\nimport { Shader } from \"../shader\";\nimport { Fog } from \"./Fog\";\n\n/**\n * Exponential fog.\n */\nexport class EXP2Fog extends Fog {\n  private static _densityProperty = Shader.getPropertyByName(\"u_fogDensity\");\n\n  /**\n   * Density of fog.\n   */\n  get density(): number {\n    return this._density;\n  }\n\n  set density(value: number) {\n    this._density = value;\n    this.scene.shaderData.setFloat(EXP2Fog._densityProperty, value);\n  }\n\n  private _density: number = 0.0025;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.density = this._density;\n  }\n  /**\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.shaderData.enableMacro(\"O3_FOG_EXP2\");\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.shaderData.disableMacro(\"O3_FOG_EXP2\");\n  }\n}\n", "import { Entity } from \"../Entity\";\nimport { Shader } from \"../shader\";\nimport { Fog } from \"./Fog\";\n\n/**\n * Linear fog, according to the distance of the camera linear difference fog density.\n */\nexport class LinearFog extends Fog {\n  private static _nearProperty = Shader.getPropertyByName(\"u_fogNear\");\n  private static _farProperty = Shader.getPropertyByName(\"u_fogFar\");\n\n  /**\n   * Start of fog.\n   */\n  get near(): number {\n    return this._near;\n  }\n\n  set near(value: number) {\n    this._near = value;\n    this.scene.shaderData.setFloat(LinearFog._nearProperty, value);\n  }\n\n  /**\n   * End of fog.\n   */\n  get far(): number {\n    return this._far;\n  }\n\n  set far(value: number) {\n    this._far = value;\n    this.scene.shaderData.setFloat(LinearFog._farProperty, value);\n  }\n\n  private _near: number = 1;\n  private _far: number = 1000;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.near = this._near;\n    this.far = this._far;\n  }\n}\n", "import { Camera } from \"../Camera\";\nimport { Layer } from \"../Layer\";\nimport { Script } from \"../Script\";\nimport { RenderBufferDepthFormat } from \"../texture/enums/RenderBufferDepthFormat\";\nimport { RenderColorTexture } from \"../texture/RenderColorTexture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * Environmental probes, providing necessary capabilities such as reflection and refraction.\n * @example\n * ```ts\n * const probe = cameraEntity.addComponent( CubeProbe )\n * probe.onTextureChange = cubeTexture => {\n *   envLight.specularTexture = cubeTexture;\n *   skybox.specularTexture = cubeTexture;\n * }\n * ```\n */\nexport abstract class Probe extends Script {\n  /**\n   * Probe's layer, render everything by default.\n   */\n  probeLayer: Layer = Layer.Everything;\n\n  /**\n   * The width of the probe rendering target.\n   */\n  width: number = 1024;\n\n  /**\n   * The height of the probe rendering target.\n   */\n  height: number = 1024;\n\n  /**\n   * When using WebGL2, you can turn on MSAA at the hardware layer.\n   */\n  antiAliasing: number = 1;\n\n  /**\n   * Whether the probe is rendered to the cube color texture.\n   */\n  protected readonly _isCube: boolean = false;\n\n  private _oriCameraRenderTarget: RenderTarget;\n  private _renderTarget: RenderTarget;\n  private _renderTargetSwap: RenderTarget;\n  private _activeRenderTarget: RenderTarget;\n  private _camera: Camera;\n  private _oriCameraCullingMask: Layer;\n\n  private get _texture(): RenderColorTexture {\n    return this._activeRenderTarget?.getColorTexture();\n  }\n\n  /**\n   * Provide hooks for users to exchange Texture.\n   * @remarks Prevent issue: Feedback Loops Between Textures and the Framebuffer.\n   */\n  onTextureChange(renderColorTexture: RenderColorTexture) {}\n\n  /**\n   * @override\n   */\n  onBeginRender(camera: Camera): void {\n    if (!this.enabled) return;\n    this._camera = camera;\n    this._oriCameraCullingMask = camera.cullingMask;\n    camera.cullingMask = this.probeLayer;\n    if (\n      !this._activeRenderTarget ||\n      this._activeRenderTarget.width !== this.width ||\n      this._activeRenderTarget.height !== this.height ||\n      this._activeRenderTarget.antiAliasing !== this.antiAliasing\n    ) {\n      this._renderTarget = new RenderTarget(\n        this.engine,\n        this.width,\n        this.height,\n        new RenderColorTexture(this.engine, this.width, this.height, undefined, undefined, this._isCube),\n        RenderBufferDepthFormat.Depth,\n        this.antiAliasing\n      );\n\n      this._renderTargetSwap = new RenderTarget(\n        this.engine,\n        this.width,\n        this.height,\n        new RenderColorTexture(this.engine, this.width, this.height, undefined, undefined, this._isCube),\n        RenderBufferDepthFormat.Depth,\n        this.antiAliasing\n      );\n\n      this._activeRenderTarget = this._renderTarget;\n    }\n\n    this._oriCameraRenderTarget = camera.renderTarget;\n    camera.renderTarget = this._activeRenderTarget;\n  }\n\n  /**\n   * @override\n   */\n  onEndRender(camera: Camera): void {\n    if (!this.enabled) return;\n\n    this.onTextureChange && this.onTextureChange(this._texture);\n\n    this._activeRenderTarget =\n      this._activeRenderTarget === this._renderTarget ? this._renderTargetSwap : this._renderTarget;\n  }\n\n  protected _reset(): void {\n    if (!this.enabled) return;\n    this._camera.renderTarget = this._oriCameraRenderTarget;\n    this._camera.cullingMask = this._oriCameraCullingMask;\n  }\n}\n", "import { Matrix, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { TextureCubeFace } from \"../texture\";\nimport { Probe } from \"./Probe\";\n\nconst cacheTarget: Vector3 = new Vector3();\nconst cacheUp: Vector3 = new Vector3();\nconst cacheDir: Vector3 = new Vector3();\n\n/**\n * Cube probe, generate cubeTexture, used for dynamic environment reflection and other effects.\n */\nexport class CubeProbe extends Probe {\n  /**\n   * The position of the probe can be set, the default is the origin [0,0,0].\n   */\n  position: Vector3 = new Vector3(0, 0, 0);\n\n  /**\n   * @override\n   */\n  protected readonly _isCube: boolean = true;\n\n  private oriViewMatrix = new Matrix();\n  private _oriFieldOfView: number;\n\n  /**\n   * @override\n   */\n  onBeginRender(camera: Camera): void {\n    if (!this.enabled) return;\n    super.onBeginRender(camera);\n    this._storeCamera(camera);\n\n    // Render 6 faces\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      // Change camera parameters\n      this._setCamera(faceIndex, camera);\n      camera.render(TextureCubeFace.PositiveX + faceIndex);\n    }\n\n    this._restoreCamera(camera);\n    super._reset();\n  }\n\n  /**\n   * Store original camera parameters.\n   */\n  private _storeCamera(camera: Camera) {\n    camera.viewMatrix.cloneTo(this.oriViewMatrix);\n    this._oriFieldOfView = camera.fieldOfView;\n  }\n\n  /**\n   * Restore camera parameters.\n   */\n  private _restoreCamera(camera: Camera) {\n    this.oriViewMatrix.cloneTo(camera.viewMatrix);\n    camera.fieldOfView = this._oriFieldOfView;\n  }\n\n  /**\n   * Set camera parameters according to the rendering surface.\n   */\n  private _setCamera(faceIndex: number, camera: Camera) {\n    switch (faceIndex) {\n      // positive_x\n      case 0:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(1, 0, 0);\n        break;\n      // negative_x\n      case 1:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(-1, 0, 0);\n        break;\n      // positive_y\n      case 2:\n        cacheUp.setValue(0, 0, 1);\n        cacheDir.setValue(0, 1, 0);\n        break;\n      // negative_y\n      case 3:\n        cacheUp.setValue(0, 0, -1);\n        cacheDir.setValue(0, -1, 0);\n        break;\n      // positive_z\n      case 4:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(0, 0, 1);\n        break;\n      // negative_z\n      case 5:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(0, 0, -1);\n        break;\n    }\n\n    Vector3.add(this.position, cacheDir, cacheTarget);\n    Matrix.lookAt(this.position, cacheTarget, cacheUp, camera.viewMatrix);\n    camera.fieldOfView = 90;\n  }\n}\n", "import { MathUtil, Matrix, Vector2 } from \"@oasis-engine/math\";\nimport { DirectLight } from \"../lighting/DirectLight\";\nimport { Light } from \"../lighting/Light\";\nimport { PointLight } from \"../lighting/PointLight\";\nimport { SpotLight } from \"../lighting/SpotLight\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { RenderColorTexture } from \"../texture/RenderColorTexture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * Shadow manager.\n */\nexport class LightShadow {\n  private static _viewMatFromLightProperty = Shader.getPropertyByName(\"u_viewMatFromLight\");\n  private static _projMatFromLightProperty = Shader.getPropertyByName(\"u_projMatFromLight\");\n  private static _shadowBiasProperty = Shader.getPropertyByName(\"u_shadowBias\");\n  private static _shadowIntensityProperty = Shader.getPropertyByName(\"u_shadowIntensity\");\n  private static _shadowRadiusProperty = Shader.getPropertyByName(\"u_shadowRadius\");\n  private static _shadowMapSizeProperty = Shader.getPropertyByName(\"u_shadowMapSize\");\n  private static _shadowMapsProperty = Shader.getPropertyByName(\"u_shadowMaps\");\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData) {\n    const data = LightShadow._combinedData;\n\n    shaderData.setFloatArray(LightShadow._viewMatFromLightProperty, data.viewMatrix);\n    shaderData.setFloatArray(LightShadow._projMatFromLightProperty, data.projectionMatrix);\n    shaderData.setFloatArray(LightShadow._shadowBiasProperty, data.bias);\n    shaderData.setFloatArray(LightShadow._shadowIntensityProperty, data.intensity);\n    shaderData.setFloatArray(LightShadow._shadowRadiusProperty, data.radius);\n    shaderData.setFloatArray(LightShadow._shadowMapSizeProperty, data.mapSize);\n    shaderData.setTextureArray(LightShadow._shadowMapsProperty, data.map);\n  }\n\n  /**\n   * Clear all shadow maps.\n   */\n  static clearMap() {\n    LightShadow._combinedData.map.length = 0;\n  }\n\n  private static _maxLight = 3;\n\n  private static _combinedData = {\n    viewMatrix: new Float32Array(16 * LightShadow._maxLight),\n    projectionMatrix: new Float32Array(16 * LightShadow._maxLight),\n    bias: new Float32Array(LightShadow._maxLight),\n    intensity: new Float32Array(LightShadow._maxLight),\n    radius: new Float32Array(LightShadow._maxLight),\n    mapSize: new Float32Array(2 * LightShadow._maxLight),\n    map: []\n  };\n\n  private _mapSize: Vector2;\n  private _renderTarget: RenderTarget;\n\n  /**\n   * Shadow's light.\n   */\n  readonly light: Light;\n\n  /**\n   * Shadow bias.\n   */\n  bias: number = 0.005;\n\n  /**\n   * Shadow intensity, the larger the value, the clearer and darker the shadow.\n   */\n  intensity: number = 0.2;\n\n  /**\n   * Pixel range used for shadow PCF interpolation.\n   */\n  radius: number = 1;\n\n  /**\n   * Generate the projection matrix used by the shadow map.\n   */\n  projectionMatrix: Matrix = new Matrix();\n\n  constructor(light: Light, props = { engine: null, width: 512, height: 512 }) {\n    this.light = light;\n    const { engine, width, height } = props;\n\n    this._mapSize = new Vector2(width, height);\n    this._renderTarget = new RenderTarget(engine, width, height, new RenderColorTexture(engine, width, height));\n  }\n\n  /**\n   * The RenderTarget corresponding to the shadow map.\n   * @readonly\n   */\n  get renderTarget(): RenderTarget {\n    return this._renderTarget;\n  }\n\n  /**\n   * Shadow map's color render texture.\n   * @readonly\n   */\n  get map(): RenderColorTexture {\n    return this._renderTarget.getColorTexture();\n  }\n\n  /**\n   * Shadow map size.\n   * @readonly\n   */\n  get mapSize(): Vector2 {\n    return this._mapSize;\n  }\n\n  /**\n   * Initialize the projection matrix for lighting.\n   * @param light - The light to generate shadow\n   */\n  initShadowProjectionMatrix(light: Light) {\n    /**\n     * Directional light projection matrix, the default coverage area is left: -5, right: 5, bottom: -5, up: 5, near: 0.5, far: 50.\n     */\n    if (light instanceof DirectLight) {\n      Matrix.ortho(-5, 5, -5, 5, 0.1, 50, this.projectionMatrix);\n    }\n\n    /**\n     * Point light projection matrix, default configuration: fov: 50, aspect: 1, near: 0.5, far: 50.\n     */\n    if (light instanceof PointLight) {\n      Matrix.perspective(MathUtil.degreeToRadian(50), 1, 0.5, 50, this.projectionMatrix);\n    }\n\n    /**\n     * Spotlight projection matrix, the default configuration: fov: this.angle * 2 * Math.sqrt(2), aspect: 1, near: 0.1, far: this.distance + 5\n     */\n    if (light instanceof SpotLight) {\n      const fov = Math.min(Math.PI / 2, light.angle * 2 * Math.sqrt(2));\n      Matrix.perspective(fov, 1, 0.1, light.distance + 5, this.projectionMatrix);\n    }\n  }\n\n  appendData(lightIndex: number): void {\n    const viewStart = lightIndex * 16;\n    const projectionStart = lightIndex * 16;\n    const biasStart = lightIndex;\n    const intensityStart = lightIndex;\n    const radiusStart = lightIndex;\n    const mapSizeStart = lightIndex * 2;\n    const mapStart = lightIndex;\n\n    const data = LightShadow._combinedData;\n\n    data.viewMatrix.set(this.light.viewMatrix.elements, viewStart);\n    data.projectionMatrix.set(this.projectionMatrix.elements, projectionStart);\n    data.bias[biasStart] = this.bias;\n    data.intensity[intensityStart] = this.intensity;\n    data.radius[radiusStart] = this.radius;\n    data.mapSize[mapSizeStart] = this.mapSize.x;\n    data.mapSize[mapSizeStart + 1] = this.mapSize.y;\n    data.map[mapStart] = this.map;\n  }\n}\n", "import { Logger } from \"../base/Logger\";\nimport { AmbientLight } from \"../lighting/AmbientLight\";\nimport { Light } from \"../lighting/Light\";\nimport { LightShadow } from \"./LightShadow\";\nimport { Component } from \"../Component\";\n\n/**\n * Set whether the light to generate shadows.\n */\nObject.defineProperty(Light.prototype, \"enableShadow\", {\n  get: function () {\n    return this._enableShadow;\n  },\n  set: function (enabled) {\n    this._enableShadow = enabled;\n\n    if (this._enableShadow) {\n      if (this instanceof AmbientLight) {\n        this._enableShadow = false;\n        Logger.warn(\"Has no shadow!\");\n        return;\n      }\n\n      this.shadow = this.shadow || new LightShadow(this, { engine: this.engine, width: 512, height: 512 });\n      this.shadow.initShadowProjectionMatrix(this);\n    }\n  }\n});\n\n/**\n * Set whether the renderer to receive shadows.\n */\nObject.defineProperty(Component.prototype, \"recieveShadow\", {\n  get: function () {\n    return this._recieveShadow;\n  },\n  set: function (enabled) {\n    this._recieveShadow = enabled;\n  }\n});\n\n/**\n * Set whether the renderer to cast shadows.\n */\nObject.defineProperty(Component.prototype, \"castShadow\", {\n  get: function () {\n    return this._castShadow;\n  },\n  set: function (enabled) {\n    this._castShadow = enabled;\n  }\n});\n", "import { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Shadow Map material.\n */\nexport class ShadowMapMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"shadow-map\"));\n    this.shaderData.enableMacro(\"O3_GENERATE_SHADOW_MAP\");\n  }\n}\n", "import { Vector4 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Layer } from \"../Layer\";\nimport { Light } from \"../lighting/Light\";\nimport { Material } from \"../material/Material\";\nimport { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { Shader } from \"../shader/Shader\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * RenderPass for rendering shadow map.\n */\nexport class ShadowMapPass extends RenderPass {\n  private static _viewMatFromLightProperty = Shader.getPropertyByName(\"u_viewMatFromLight\");\n  private static _projMatFromLightProperty = Shader.getPropertyByName(\"u_projMatFromLight\");\n\n  readonly light: Light;\n\n  /**\n   * Constructor.\n   * @param light  - The light that the shadow belongs to\n   */\n  constructor(\n    name: string,\n    priority: number,\n    renderTarget: RenderTarget,\n    replaceMaterial: Material,\n    mask: Layer,\n    light: Light\n  ) {\n    super(name, priority, renderTarget, replaceMaterial, mask, new Vector4(1, 1, 1, 1));\n    this.light = light;\n  }\n\n  /**\n   * @override\n   */\n  preRender(camera: Camera, queue: RenderQueue) {\n    // The viewProjection matrix from the light.\n    const shaderData = this.replaceMaterial.shaderData;\n    shaderData.setMatrix(ShadowMapPass._viewMatFromLightProperty, this.light.viewMatrix);\n    shaderData.setMatrix(ShadowMapPass._projMatFromLightProperty, (this.light as any).shadow.projectionMatrix);\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { RenderQueueType } from \"../material\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor } from \"../shader/enums/BlendFactor\";\nimport { CompareFunction } from \"../shader/enums/CompareFunction\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Shadow material.\n */\nexport class ShadowMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"shadow\"));\n\n    const targetBlendState = this.renderState.blendState.targetBlendState;\n\n    targetBlendState.sourceColorBlendFactor = targetBlendState.sourceAlphaBlendFactor = BlendFactor.DestinationColor;\n    targetBlendState.destinationColorBlendFactor = targetBlendState.destinationAlphaBlendFactor = BlendFactor.Zero;\n    this.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n\n    this.renderQueueType = RenderQueueType.Transparent;\n  }\n}\n", "import { ClearMode } from \"../base/Constant\";\nimport { Camera } from \"../Camera\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { LightShadow } from \"./LightShadow\";\n\n/**\n * RenderPass for rendering shadow.\n */\nexport class ShadowPass extends RenderPass {\n  constructor(...args) {\n    super(...args);\n    this.clearMode = ClearMode.DONT_CLEAR;\n  }\n\n  /**\n   * @override\n   */\n  preRender(camera: Camera, queue: RenderQueue) {\n    this.enabled = false;\n    const lightMgr = camera.scene.findFeature(LightFeature);\n    const lights = lightMgr.visibleLights;\n    const shaderData = this.replaceMaterial.shaderData;\n\n    // keep render based on default render pass\n    const pass = camera._renderPipeline.defaultRenderPass;\n    this.renderTarget = pass.renderTarget;\n\n    let shadowMapCount = 0;\n\n    LightShadow.clearMap();\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const lgt: any = lights[i];\n      if (lgt.enableShadow) {\n        lgt.shadow.appendData(shadowMapCount++);\n      }\n    }\n\n    if (shadowMapCount) {\n      this.enabled = true;\n      LightShadow._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_SHADOW_MAP_COUNT\", shadowMapCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_SHADOW_MAP_COUNT\");\n    }\n  }\n}\n", "import { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { Layer } from \"../Layer\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { Scene } from \"../Scene\";\nimport { SceneFeature } from \"../SceneFeature\";\nimport { ShadowMapMaterial } from \"./ShadowMapMaterial\";\nimport { ShadowMapPass } from \"./ShadowMapPass\";\nimport { ShadowMaterial } from \"./ShadowMaterial\";\nimport { ShadowPass } from \"./ShadowPass\";\n\n/**\n * Shadow plug-in.\n */\nexport class ShadowFeature extends SceneFeature {\n  private _shadowPass: ShadowPass;\n  private _shadowMapMaterial: ShadowMapMaterial;\n\n  /**\n   * @override\n   */\n  preRender(scene: Scene, camera: Camera) {\n    const lights = scene.findFeature(LightFeature).visibleLights;\n\n    if (lights.length > 0) {\n      // Check RenderPass for rendering shadows.\n      if (!this._shadowPass) {\n        this.addShadowPass(camera);\n      }\n\n      // Check RenderPass for rendering shadow map.\n      const renderPipeline = camera._renderPipeline;\n\n      for (let i = 0, len = lights.length; i < len; i++) {\n        const lgt: any = lights[i];\n        if (lgt.enableShadow && !lgt.shadowMapPass) {\n          lgt.shadowMapPass = this.addShadowMapPass(camera, lgt);\n        } else if (!lgt.enableShadow && lgt.shadowMapPass) {\n          renderPipeline.removeRenderPass(lgt.shadowMapPass);\n          lgt.shadowMapPass = null;\n        }\n      }\n\n      this.updatePassRenderFlag(renderPipeline.queue);\n    }\n  }\n\n  /**\n   * Add RenderPass for rendering shadows.\n   * @param camera - The camera for rendering\n   */\n  addShadowPass(camera: Camera) {\n    const shadowMaterial = new ShadowMaterial(camera.engine);\n    this._shadowPass = new ShadowPass(\"ShadowPass\", 1, null, shadowMaterial, Layer.Layer30); // SHADOW\n    const renderer = camera._renderPipeline;\n    renderer.addRenderPass(this._shadowPass);\n  }\n\n  /**\n   * Add RenderPass for rendering shadow map.\n   * @param camera - The camera for rendering\n   * @param light - The light that the shadow belongs to\n   */\n  addShadowMapPass(camera: Camera, light) {\n    // Share shadow map material.\n    this._shadowMapMaterial = this._shadowMapMaterial || new ShadowMapMaterial(camera.engine);\n\n    const shadowMapPass = new ShadowMapPass(\n      \"ShadowMapPass\",\n      -1,\n      light.shadow.renderTarget,\n      this._shadowMapMaterial,\n      Layer.Layer31, // SHADOW_MAP\n      light\n    );\n    const renderer = camera._renderPipeline;\n    renderer.addRenderPass(shadowMapPass);\n\n    return shadowMapPass;\n  }\n\n  /**\n   * Update the renderPassFlag state of renderers in the scene.\n   * @param renderQueue - Render queue\n   */\n  updatePassRenderFlag(renderQueue: RenderQueue) {\n    const items = renderQueue.items;\n    for (let i = 0, len = items.length; i < len; i++) {\n      const item = items[i];\n      const ability: Component = item.component;\n\n      const recieveShadow = (ability as any).recieveShadow;\n      const castShadow = (ability as any).castShadow;\n      if (recieveShadow === true) {\n        ability.entity.layer |= Layer.Layer30; //SHADOW;\n      } else if (recieveShadow === false) {\n        ability.entity.layer &= ~Layer.Layer30; //SHADOW;\n      }\n\n      if (castShadow === true) {\n        ability.entity.layer |= Layer.Layer31; //SHADOW_MAP;\n      } else if (castShadow === false) {\n        ability.entity.layer &= ~Layer.Layer31; //SHADOW_MAP;\n      }\n    }\n  }\n}\n", "import \"./Extension\";\nimport { ShadowFeature } from \"./ShadowFeature\";\nimport { Scene } from \"../Scene\";\n\nScene.registerFeature(ShadowFeature);\n", "export { Engine } from \"./Engine\";\nexport { SystemInfo } from \"./SystemInfo\";\nexport type { HardwareRenderer } from \"./HardwareRenderer\";\nexport type { Canvas } from \"./Canvas\";\nexport { EngineFeature } from \"./EngineFeature\";\n\nexport { Scene } from \"./Scene\";\nexport { SceneFeature } from \"./SceneFeature\";\n\nexport { Entity } from \"./Entity\";\nexport { Component } from \"./Component\";\nexport { Script } from \"./Script\";\nexport { Renderer } from \"./Renderer\";\nexport { dependencies } from \"./ComponentsDependencies\";\n\nexport { Camera } from \"./Camera\";\nexport { Transform } from \"./Transform\";\nexport { UpdateFlag } from \"./UpdateFlag\";\nexport { request } from \"./asset/request\";\nexport { Loader } from \"./asset/Loader\";\nexport { ResourceManager, resourceLoader } from \"./asset/ResourceManager\";\nexport { AssetPromise, AssetPromiseStatus } from \"./asset/AssetPromise\";\nexport type { LoadItem } from \"./asset/LoadItem\";\nexport { AssetType } from \"./asset/AssetType\";\nexport { RefObject } from \"./asset/RefObject\";\n\nexport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nexport { RenderQueue } from \"./RenderPipeline/RenderQueue\";\nexport { RenderPass } from \"./RenderPipeline/RenderPass\";\nexport { RenderElement } from \"./RenderPipeline/RenderElement\";\nexport * from \"./base\";\n\n// Lighting\nimport { LightFeature, hasLight } from \"./lighting/LightFeature\";\nimport { Scene } from \"./Scene\";\nScene.registerFeature(LightFeature);\n(Scene.prototype as any).hasLight = hasLight;\n// Quote raycast\nimport \"./raycast\";\n\nexport { LightFeature };\nexport { AmbientLight } from \"./lighting/AmbientLight\";\nexport { DirectLight } from \"./lighting/DirectLight\";\nexport { PointLight } from \"./lighting/PointLight\";\nexport { SpotLight } from \"./lighting/SpotLight\";\nexport { EnvironmentMapLight } from \"./lighting/EnvironmentMapLight\";\nexport { Light } from \"./lighting/Light\";\n// Mesh\nexport { Mesh } from \"./mesh/Mesh\";\nexport { Skin } from \"./mesh/Skin\";\nexport { MeshRenderer } from \"./mesh/MeshRenderer\";\nexport { SkinnedMeshRenderer } from \"./mesh/SkinnedMeshRenderer\";\nexport { LODGroup } from \"./mesh/LODGroup\";\n\n// Material\nexport * from \"./material/index\";\nexport * from \"./texture/index\";\nexport * from \"./graphic/index\";\nexport * from \"./2d/index\";\nexport * from \"./shaderlib/index\";\nexport * from \"./animation/index\";\nexport * from \"./geometry/index\";\nexport * from \"./geometry-shape/index\";\nexport * from \"./skybox/index\";\nexport * from \"./particle/index\";\nexport * from \"./trail/index\";\nexport * from \"./collider/index\";\nexport * from \"./collision/index\";\nexport * from \"./fog/index\";\nexport * from \"./env-probe/index\";\nexport * from \"./shadow/index\";\nexport * from \"./shader/index\";\nexport * from \"./Layer\";\n", "import { Logger } from \"@oasis-engine/core\";\n\nexport class DRACOWorker {\n  // Worker instance.\n  private _worker: Worker;\n  // Record byteLength of each task.\n  private _costs: { [taskId: number]: number } = {};\n  // The sum of bytelength that the worker is currently dealing with, in order to sort the workers.\n  private _currentLoad: number = 0;\n  private _callbacks: { [taskId: number]: IResolveReject } = {};\n  get currentLoad(): number {\n    return this._currentLoad;\n  }\n\n  constructor(workerSourceURL: string, decoderWASMBinary?: ArrayBuffer) {\n    this._worker = new Worker(workerSourceURL);\n    this._worker.onmessage = (e) => {\n      const message = e.data;\n      switch (message.type) {\n        case \"decode\":\n          this._callbacks[message.id].resolve(message.geometry);\n          break;\n\n        case \"error\":\n          this._callbacks[message.id].reject(message);\n          break;\n        default:\n          Logger.error('DRACOWorker: Unexpected message, \"' + message.type + '\"');\n      }\n    };\n    if (decoderWASMBinary) {\n      this._worker.postMessage({ type: \"init\", decoderConfig: { wasmBinary: decoderWASMBinary } });\n    } else {\n      this._worker.postMessage({ type: \"init\", decoderConfig: {} });\n    }\n  }\n\n  setCosts(taskId: number, cost: number) {\n    this._costs[taskId] = cost;\n  }\n\n  addCurrentLoad(cost: number) {\n    this._currentLoad += cost;\n  }\n\n  setCallback(taskId: number, resolve: (any) => void, reject: (any) => void) {\n    this._callbacks[taskId] = { resolve, reject };\n  }\n\n  decode(taskId: number, taskConfig: ITaskConfig, buffer: ArrayBuffer) {\n    this._worker.postMessage({ type: \"decode\", id: taskId, taskConfig, buffer }, [buffer]);\n  }\n\n  releaseTask(taskId: number) {\n    this._currentLoad -= this._costs[taskId];\n    delete this._callbacks[taskId];\n    delete this._costs[taskId];\n  }\n}\n\ninterface IResolveReject {\n  resolve: (any) => void;\n  reject: (any) => void;\n}\n\nexport interface ITaskConfig {\n  attributeIDs: { [attribute: string]: number };\n  attributeTypes: { [attribute: string]: string };\n  useUniqueIDs: boolean;\n  indexType: string;\n}\n", "import { Logger, request } from \"@oasis-engine/core\";\n\nimport { DRACOWorker, ITaskConfig } from \"./DRACOWorker\";\n\nimport workerString from \"./worker/worker.js\";\n\nconst LIB_PATH = \"https://gw.alipayobjects.com/os/lib/alipay/draco-javascript/1.3.6/lib/\";\nconst JS_FILE = \"draco_decoder_gltf.js\";\n\nconst WASM_FILE = \"draco_decoder_gltf.r3bin\";\nconst WASM_WRAPPER_FILE = \"draco_wasm_wrapper_gltf.js\";\n\nexport class DRACODecoder {\n  private pool: DRACOWorker[] = [];\n  private workerLimit = Math.min(navigator.hardwareConcurrency || 4, 4);\n  private useJS: boolean;\n  private currentTaskId: number = 1;\n  private taskCache = new WeakMap();\n  private loadLibPromise: Promise<any>;\n\n  constructor(config: IDecoderConfig = { type: \"wasm\", workerLimit: 4 }) {\n    if (config.workerLimit > this.workerLimit) {\n      Logger.warn(\"DRACOWorkerPool: Can not initialize worker pool with limit:\" + config.workerLimit);\n    } else {\n      this.workerLimit = config.workerLimit ?? 4;\n    }\n    this.useJS = typeof WebAssembly !== \"object\" || config.type === \"js\";\n    this.loadLibPromise = this.preloadLib();\n  }\n\n  private preloadLib(): Promise<any> {\n    if (this.loadLibPromise) {\n      return this.loadLibPromise;\n    }\n\n    return new Promise((resolve, reject) => {\n      if (this.useJS) {\n        request(`${LIB_PATH}${JS_FILE}`, { type: \"text\" })\n          .then((jsSource) => {\n            const body = [jsSource, workerString].join(\"\\n\");\n            const workerSourceURL = URL.createObjectURL(new Blob([body]));\n            resolve({ workerSourceURL, decoderWASMBinary: null });\n          })\n          .catch((reason) => {\n            reject(reason);\n          });\n      } else {\n        Promise.all([\n          request(`${LIB_PATH}${WASM_WRAPPER_FILE}`, { type: \"text\" }),\n          request(`${LIB_PATH}${WASM_FILE}`, { type: \"arraybuffer\" })\n        ])\n          .then((resources) => {\n            const [wrapperSource, decoderWASMBinary] = resources;\n            const body = [wrapperSource, workerString].join(\"\\n\");\n            const workerSourceURL = URL.createObjectURL(new Blob([body]));\n            resolve({ workerSourceURL, decoderWASMBinary });\n          })\n          .catch((reason) => {\n            reject(reason);\n          });\n      }\n    });\n  }\n\n  private getWorker(): Promise<DRACOWorker> {\n    return this.preloadLib().then((worderResources) => {\n      if (this.pool.length < this.workerLimit) {\n        const dracoWorker = new DRACOWorker(worderResources.workerSourceURL, worderResources.decoderWASMBinary);\n        this.pool.push(dracoWorker);\n      } else {\n        this.pool.sort(function (a, b) {\n          return a.currentLoad > b.currentLoad ? -1 : 1;\n        });\n      }\n      return this.pool[this.pool.length - 1];\n    });\n  }\n\n  decode(buffer: ArrayBuffer, taskConfig: ITaskConfig): Promise<any> {\n    const taskKey = JSON.stringify(taskConfig);\n\n    // Check for an existing task using this buffer. A transferred buffer cannot be transferred.\n    // again from this thread.\n    if (this.taskCache.has(buffer)) {\n      const cachedTask = this.taskCache.get(buffer);\n      if (cachedTask.key === taskKey) {\n        return cachedTask.promise;\n      } else if (buffer.byteLength === 0) {\n        // After using transferable to transfer data, the data in the original environment will be cleared, so it is judged that byteLength is 0, which means it has been transferred.\n        // Technically, it would be possible to wait for the previous task to complete,\n        // transfer the buffer back, and decode again with the second configuration. That\n        // is complex, and I don't know of any reason to decode a Draco buffer twice in\n        // different ways, so this is left unimplemented.\n        throw new Error(\n          \"DRACODecoder: Unable to re-decode a buffer with different \" +\n            \"settings. Buffer has already been transferred.\"\n        );\n      }\n    }\n\n    const taskId = this.currentTaskId++;\n    const cost = buffer.byteLength;\n    let taskWorker;\n    const task = new Promise((resolve, reject) => {\n      this.getWorker()\n        .then((worker) => {\n          taskWorker = worker;\n          worker.setCosts(taskId, cost);\n          worker.addCurrentLoad(cost);\n\n          worker.setCallback(taskId, resolve, reject);\n          worker.decode(taskId, taskConfig, buffer);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n    task.finally(() => {\n      if (taskWorker && taskId) {\n        taskWorker.releaseTask(taskId);\n      }\n    });\n\n    this.taskCache.set(buffer, {\n      key: taskKey,\n      promise: task\n    });\n    return task;\n  }\n}\n\ninterface IDecoderConfig {\n  type?: \"js\" | \"wasm\";\n  workerLimit?: number;\n}\n", "import { resourceLoader, Loader, AssetPromise, AssetType, LoadItem } from \"@oasis-engine/core\";\n\nfunction isBase64(url) {\n  return /^data:(.+?);base64,/.test(url);\n}\n@resourceLoader(AssetType.Buffer, [\"bin\", \"r3bin\"], false)\nclass BufferLoader extends Loader<ArrayBuffer> {\n  load(item: LoadItem): AssetPromise<ArrayBuffer> {\n    const url = item.url;\n    if (isBase64(url)) {\n      return new AssetPromise((resolve) => {\n        const base64Str = url.slice(13 + RegExp.$1.length);\n        const result = Uint8Array.from(atob(base64Str), (c) => c.charCodeAt(0));\n        resolve(result.buffer);\n      });\n    }\n    return this.request(url, {\n      ...item,\n      type: \"arraybuffer\"\n    });\n  }\n}\n", "import { DataType, IndexFormat, VertexElement, VertexElementFormat } from \"@oasis-engine/core\";\n\nconst WEBGL_COMPONENT_TYPES = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\n\n/**\n * Parse binary text for glb loader.\n * @param array\n * @returns String\n * @private\n */\nexport function decodeText(array) {\n  if (typeof TextDecoder !== \"undefined\") {\n    return new TextDecoder().decode(array);\n  }\n\n  // TextDecoder polyfill\n  let s = \"\";\n\n  for (let i = 0, il = array.length; i < il; i++) {\n    s += String.fromCharCode(array[i]);\n  }\n\n  return decodeURIComponent(encodeURIComponent(s));\n}\n\n/**\n * Find uniform object according to paramters[name] in glTF.\n * @param obj\n * @param key\n * @param value\n * @returns {object}\n * @private\n */\nexport function findByKeyValue(obj, key, value) {\n  for (const name in obj) {\n    if (obj[name][key] === value) {\n      return obj[name];\n    }\n  }\n  return null;\n}\n\n/** Get the number of bytes occupied by accessor type.\n * @return {number}\n * @param {string} accessorType\n * @private\n */\nexport function getAccessorTypeSize(accessorType) {\n  const ACCESSOR_TYPE_SIZE = {\n    SCALAR: 1,\n    VEC2: 2,\n    VEC3: 3,\n    VEC4: 4,\n    MAT2: 4,\n    MAT3: 9,\n    MAT4: 16\n  };\n  return ACCESSOR_TYPE_SIZE[accessorType];\n}\n\n/** Get the TypedArray corresponding to the component type.\n * @return {function}\n * @param {string} componentType\n */\nexport function getComponentType(componentType) {\n  return WEBGL_COMPONENT_TYPES[componentType];\n}\n\n/**\n * Get accessor data.\n * @param gltf\n * @param accessor\n * @param buffers\n * @private\n */\nexport function getAccessorData(gltf, accessor, buffers) {\n  const bufferView = gltf.bufferViews[accessor.bufferView];\n  const arrayBuffer = buffers[bufferView.buffer];\n  const accessorByteOffset = accessor.hasOwnProperty(\"byteOffset\") ? accessor.byteOffset : 0;\n  const bufferViewByteOffset = bufferView.hasOwnProperty(\"byteOffset\") ? bufferView.byteOffset : 0;\n  const byteOffset = accessorByteOffset + bufferViewByteOffset;\n  const accessorTypeSize = getAccessorTypeSize(accessor.type);\n  const length = accessorTypeSize * accessor.count;\n  const byteStride = bufferView.byteStride ?? 0;\n\n  const arrayType = getComponentType(accessor.componentType);\n  let uint8Array;\n  if (byteStride) {\n    uint8Array = new Uint8Array(length * arrayType.BYTES_PER_ELEMENT);\n    const originalBufferView = new Uint8Array(arrayBuffer, bufferViewByteOffset, bufferView.byteLength);\n    let viewAccessor = 0;\n    const accessorByteSize = accessorTypeSize * arrayType.BYTES_PER_ELEMENT;\n    for (let i = 0; i < accessor.count; i++) {\n      viewAccessor = i * byteStride + accessorByteOffset;\n      for (let j = 0; j < accessorByteSize; j++) {\n        uint8Array[i * accessorByteSize + j] = originalBufferView[viewAccessor + j];\n      }\n    }\n  } else {\n    uint8Array = new Uint8Array(arrayBuffer, byteOffset, length * arrayType.BYTES_PER_ELEMENT);\n    uint8Array = new Uint8Array(uint8Array);\n  }\n\n  return new arrayType(uint8Array.buffer);\n}\n\n/**\n * Get buffer data\n * @param bufferView\n * @param buffers\n * @returns {Blob|ArrayBuffer|Array.<T>|string}\n * @private\n */\nexport function getBufferData(bufferView, buffers) {\n  // get bufferView\n  const arrayBuffer = buffers[bufferView.buffer];\n  const byteOffset = bufferView.byteOffset || 0;\n  return arrayBuffer.slice(byteOffset, byteOffset + bufferView.byteLength);\n}\n\nexport function getVertexStride(accessor): number {\n  const size = getAccessorTypeSize(accessor.type);\n  const componentType = getComponentType(accessor.componentType);\n  return size * componentType.BYTES_PER_ELEMENT;\n}\n\nexport function createVertexElement(gltf, semantic, accessor, index: number): VertexElement {\n  const size = getAccessorTypeSize(accessor.type);\n  return new VertexElement(semantic, 0, getElementFormat(accessor.componentType, size), index);\n}\n\nexport function getIndexFormat(type: number): IndexFormat {\n  switch (type) {\n    case DataType.UNSIGNED_BYTE:\n      return IndexFormat.UInt8;\n    case DataType.UNSIGNED_SHORT:\n      return IndexFormat.UInt16;\n    case DataType.UNSIGNED_INT:\n      return IndexFormat.UInt32;\n  }\n}\n\nexport function getElementFormat(type: number, size: number): VertexElementFormat {\n  if (type == DataType.FLOAT) {\n    switch (size) {\n      case 1:\n        return VertexElementFormat.Float;\n      case 2:\n        return VertexElementFormat.Vector2;\n      case 3:\n        return VertexElementFormat.Vector3;\n      case 4:\n        return VertexElementFormat.Vector4;\n    }\n  }\n  if (type == DataType.UNSIGNED_SHORT) {\n    switch (size) {\n      case 2:\n        return VertexElementFormat.UShort2;\n      case 4:\n        return VertexElementFormat.UShort4;\n    }\n  }\n}\n\n/**\n * Load image buffer\n * @param imageBuffer\n * @param type\n * @param callback\n */\nexport function loadImageBuffer(imageBuffer: ArrayBuffer, type: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const blob = new window.Blob([imageBuffer], { type });\n    const img = new Image();\n    img.src = URL.createObjectURL(blob);\n\n    img.crossOrigin = \"anonymous\";\n    img.onerror = function () {\n      reject(new Error(\"Failed to load image buffer\"));\n    };\n    img.onload = function () {\n      // Call requestAnimationFrame to avoid iOS's bug.\n      requestAnimationFrame(() => {\n        resolve(img);\n      });\n    };\n  });\n}\n\nfunction isRelativeUrl(url: string): boolean {\n  // 47 is /\n  return url.charCodeAt(0) !== 47 && url.match(/:\\/\\//) === null;\n}\n\nfunction isAbsoluteUrl(url: string): boolean {\n  return /^(?:http|blob|data:|\\/)/.test(url);\n}\n\nexport function parseRelativeUrl(baseUrl: string, relativeUrl: string): string {\n  if (isAbsoluteUrl(relativeUrl)) {\n    return relativeUrl;\n  }\n  // TODO: implement ../path\n  return baseUrl.substring(0, baseUrl.lastIndexOf(\"/\") + 1) + relativeUrl;\n}\n", "import { DRACODecoder } from \"@oasis-engine/draco\";\nimport { getComponentType, getBufferData } from \"./Util\";\n\nlet decoder;\n\nexport const glTFDracoMeshCompression = {\n  init() {\n    if (!decoder) {\n      decoder = new DRACODecoder();\n    }\n  },\n  parse(extension, gltfPrimitive, gltf, buffers) {\n    const { bufferViews, accessors } = gltf;\n    const bufferViewIndex = extension.bufferView;\n    const gltfAttributeMap = extension.attributes;\n    const attributeMap = {};\n    const attributeTypeMap = {};\n\n    for (let attributeName in gltfAttributeMap) {\n      attributeMap[attributeName] = gltfAttributeMap[attributeName];\n    }\n\n    for (let attributeName in gltfPrimitive.attributes) {\n      if (gltfAttributeMap[attributeName] !== undefined) {\n        const accessorDef = accessors[gltfPrimitive.attributes[attributeName]];\n        attributeTypeMap[attributeName] = getComponentType(accessorDef.componentType).name;\n      }\n    }\n    const indexAccessor = accessors[gltfPrimitive.indices];\n    const indexType = getComponentType(indexAccessor.componentType).name;\n    const taskConfig = {\n      attributeIDs: attributeMap,\n      attributeTypes: attributeTypeMap,\n      useUniqueIDs: true,\n      indexType\n    };\n    const buffer = getBufferData(bufferViews[bufferViewIndex], buffers);\n\n    return decoder.decode(buffer, taskConfig).then((parsedGeometry) => parsedGeometry);\n  }\n};\n", "import {\n  AlphaMode,\n  Animation,\n  AnimationClip,\n  BlinnPhongMaterial,\n  Buffer,\n  BufferBindFlag,\n  BufferUsage,\n  Camera,\n  Engine,\n  EngineObject,\n  Entity,\n  IndexBufferBinding,\n  IndexFormat,\n  InterpolationType,\n  Logger,\n  Material,\n  Mesh,\n  MeshRenderer,\n  PBRMaterial,\n  PBRSpecularMaterial,\n  Primitive,\n  PrimitiveTopology,\n  Scene,\n  Skin,\n  SkinnedMeshRenderer,\n  SubPrimitive,\n  Texture2D,\n  TypedArray,\n  UnlitMaterial,\n  VertexElement\n} from \"@oasis-engine/core\";\nimport { Color, Matrix, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { LoadedGLTFResource } from \"../GLTF\";\nimport { glTFDracoMeshCompression } from \"./glTFDracoMeshCompression\";\nimport { createVertexElement, getAccessorData, getAccessorTypeSize, getIndexFormat, getVertexStride } from \"./Util\";\n\n// KHR_lights:  https://github.com/MiiBond/glTF/tree/khr_lights_v1/extensions/2.0/Khronos/KHR_lights\n//              https://github.com/KhronosGroup/glTF/pull/1223\n//              https://github.com/KhronosGroup/glTF/issues/945\n// KHR_materials_common:  https://github.com/donmccurdy/glTF/tree/donmccurdy-KHR_materials_common/extensions/Khronos/KHR_materials_common_v2\n//                        https://github.com/KhronosGroup/glTF/pull/1150\n//                        https://github.com/KhronosGroup/glTF/issues/947\n\nconst TARGET_PATH_MAP = {\n  translation: \"position\",\n  rotation: \"rotation\",\n  scale: \"scale\",\n  weights: \"weights\"\n};\n\nlet nodeCount = 0;\n\nconst RegistedObjs = {};\nconst RegistedCustomMaterials = {};\n\nconst getDefaultMaterial = (function () {\n  // let defaultMateril: BlinnPhongMaterial;\n  return (engine: Engine) => {\n    // if (!defaultMateril) {\n    let defaultMateril: BlinnPhongMaterial = new BlinnPhongMaterial(engine);\n    defaultMateril.emissiveColor = new Color(0.749, 0.749, 0.749, 1);\n    // }\n    return defaultMateril;\n  };\n})();\n\n/**\n * Extension dedicated registration key.\n */\nexport const HandledExtensions = {\n  PBRMaterial: \"PBRMaterial\",\n  KHR_lights: \"KHR_lights\",\n  KHR_materials_unlit: \"KHR_materials_unlit\",\n  KHR_materials_pbrSpecularGlossiness: \"KHR_materials_pbrSpecularGlossiness\",\n  KHR_techniques_webgl: \"KHR_techniques_webgl\",\n  KHR_draco_mesh_compression: \"KHR_draco_mesh_compression\"\n};\n\nlet KHR_lights = null;\n\nconst extensionParsers = {\n  KHR_lights: KHR_lights,\n  KHR_materials_unlit: UnlitMaterial,\n  KHR_materials_pbrSpecularGlossiness: PBRSpecularMaterial,\n  KHR_techniques_webgl: Material,\n  KHR_draco_mesh_compression: glTFDracoMeshCompression\n};\n\n/**\n * Register extension components to glTF loader.\n * @param extobj - Need to add extensions\n */\nexport function RegistExtension(extobj) {\n  Object.keys(extobj).forEach((name) => {\n    if (RegistedObjs[name] === undefined) {\n      RegistedObjs[name] = extobj[name];\n\n      switch (name) {\n        case HandledExtensions.KHR_lights:\n          KHR_lights = extobj[name];\n          extensionParsers.KHR_lights = KHR_lights;\n          break;\n        default:\n          if (Material.isPrototypeOf(extobj[name]) && extobj[name].TECH_NAME)\n            RegistedCustomMaterials[extobj[name].TECH_NAME] = extobj[name];\n          break;\n      }\n    }\n  });\n}\n\nexport interface GLTFParsed extends LoadedGLTFResource {\n  asset: Partial<GLTFResource>;\n  engine?: Engine;\n}\n\nexport class GLTFResource extends EngineObject {\n  defaultSceneRoot: Entity;\n  defaultScene: Scene;\n  scenes: Scene[];\n  textures?: Texture2D[];\n  animations?: AnimationClip[];\n  materials?: Material[];\n  meshes?: Mesh[];\n  skins?: Skin[];\n  cameras?: Camera[];\n  meta: any;\n}\n\n/**\n * Parse the glTF structure.\n * @param resource\n * @returns {*}\n * @private\n */\nexport function parseGLTF(data: LoadedGLTFResource, engine: Engine): Promise<GLTFResource> {\n  // Start processing glTF data.\n  const resources: GLTFParsed = {\n    engine,\n    gltf: data.gltf,\n    buffers: data.buffers,\n    asset: new GLTFResource(engine)\n  };\n  resources.asset.textures = data.textures;\n  resources.asset.meta = data.gltf;\n\n  if (resources.gltf.asset && resources.gltf.asset.version) {\n    resources.gltf.version = Number(resources.gltf.asset.version);\n    resources.gltf.isGltf2 = resources.gltf.version >= 2 && resources.gltf.version <= 3;\n  }\n\n  parseExtensions(resources);\n  // parse all related resources\n  return (\n    parseResources(resources, \"materials\", parseMaterial)\n      .then(() => parseResources(resources, \"meshes\", parseMesh))\n      // .then(() => parseResources(resources, \"cameras\", parseCamera))\n      .then(() => parseResources(resources, \"nodes\", parseNode))\n      .then(() => parseResources(resources, \"scenes\", parseScene))\n      .then(() => parseResources(resources, \"skins\", parseSkin))\n      .then(() => parseResources(resources, \"animations\", parseAnimation))\n      .then(() => buildSceneGraph(resources))\n  );\n}\n\nfunction parseExtensions(resources) {\n  const { gltf, asset } = resources;\n  const { extensions, extensionsUsed, extensionsRequired } = gltf;\n  if (extensionsUsed) {\n    Logger.info(\"extensionsUsed: \", extensionsUsed);\n    for (let i = 0; i < extensionsUsed.length; i++) {\n      if (Object.keys(extensionParsers).indexOf(extensionsUsed[i]) > -1) {\n        if (!extensionParsers[extensionsUsed[i]]) {\n          Logger.warn(\"extension \" + extensionsUsed[i] + \" is used, you can add this extension into gltf\");\n        }\n      } else {\n        Logger.warn(\"extensionsUsed has unsupported extension \" + extensionsUsed[i]);\n      }\n    }\n  }\n\n  if (extensionsRequired) {\n    Logger.info(`extensionsRequired: ${extensionsRequired}`);\n    for (let i = 0; i < extensionsRequired.length; i++) {\n      if (\n        Object.keys(extensionParsers).indexOf(extensionsRequired[i]) < 0 ||\n        !extensionParsers[extensionsRequired[i]]\n      ) {\n        Logger.error(`model has not supported required extension ${extensionsRequired[i]}`);\n      }\n      if (extensionsRequired[i] === HandledExtensions.KHR_draco_mesh_compression) {\n        extensionParsers.KHR_draco_mesh_compression.init();\n      }\n    }\n  }\n\n  if (extensions) {\n    if (KHR_lights && extensions.KHR_lights) {\n      asset.lights = KHR_lights.parseLights(extensions.KHR_lights.lights);\n    }\n  }\n}\n\n/**\n * General resource analysis method.\n * @param resources - Existing resources\n * @param name - Name\n * @param handler - Resource resolver\n * @private\n */\nfunction parseResources(resources: GLTFParsed, name: string, handler) {\n  const { gltf, asset } = resources;\n  if (!asset[name]) {\n    asset[name] = [];\n  }\n  if (gltf.hasOwnProperty(name)) {\n    const entities = gltf[name] || [];\n    Logger.debug(name + \":\", entities);\n    const promises = [];\n    for (let i = entities.length - 1; i >= 0; i--) {\n      promises.push(handler(entities[i], resources));\n    }\n    return Promise.all(promises).then((results) => {\n      for (let i = 0; i < results.length; i++) {\n        asset[name].push(results[i]);\n      }\n    });\n  }\n  return Promise.resolve();\n}\n\n/**\n * Parse material.\n * @param gltfMaterial\n * @param resources\n * @private\n */\nexport function parseMaterial(gltfMaterial, resources) {\n  const { gltf, engine } = resources;\n  if (gltf.isGltf2 && typeof gltfMaterial.technique === \"undefined\") {\n    const {\n      extensions = {},\n      pbrMetallicRoughness,\n      normalTexture,\n      emissiveTexture,\n      emissiveFactor,\n      occlusionTexture,\n      alphaMode,\n      alphaCutoff,\n      doubleSided\n    } = gltfMaterial;\n\n    const isUnlit = extensions.KHR_materials_unlit;\n    const isSpecular = extensions.KHR_materials_pbrSpecularGlossiness;\n\n    let material: UnlitMaterial | PBRMaterial | PBRSpecularMaterial = null;\n    if (isUnlit) {\n      material = new UnlitMaterial(engine);\n    } else if (isSpecular) {\n      material = new PBRSpecularMaterial(engine);\n    } else {\n      material = new PBRMaterial(engine);\n    }\n\n    // render states\n    material.doubleSided = doubleSided;\n    switch (alphaMode) {\n      case \"OPAQUE\":\n        material.alphaMode = AlphaMode.Opaque;\n        break;\n      case \"BLEND\":\n        material.alphaMode = AlphaMode.Blend;\n        break;\n      case \"MASK\":\n        material.alphaMode = AlphaMode.CutOff;\n        (material as PBRMaterial | PBRSpecularMaterial).alphaCutoff = alphaCutoff === undefined ? 0.5 : alphaCutoff;\n        break;\n    }\n\n    // may be applied to unlit too.\n    if (pbrMetallicRoughness) {\n      const {\n        baseColorFactor,\n        baseColorTexture,\n        metallicFactor,\n        roughnessFactor,\n        metallicRoughnessTexture\n      } = pbrMetallicRoughness;\n      if (baseColorTexture) {\n        material.baseColorTexture = getItemByIdx(\"textures\", baseColorTexture.index || 0, resources, false);\n      }\n      if (baseColorFactor) {\n        material.baseColor = new Color(...baseColorFactor);\n      }\n      if (!isUnlit) {\n        material = material as PBRMaterial;\n        material.metallicFactor = metallicFactor !== undefined ? metallicFactor : 1;\n        material.roughnessFactor = roughnessFactor !== undefined ? roughnessFactor : 1;\n        if (metallicRoughnessTexture) {\n          material.metallicRoughnessTexture = getItemByIdx(\n            \"textures\",\n            metallicRoughnessTexture.index || 0,\n            resources,\n            false\n          );\n        }\n      }\n    }\n\n    // break unlit at here, unlit don't need to process the next code\n    if (isUnlit) {\n      return Promise.resolve(material);\n    }\n    material = material as PBRMaterial | PBRSpecularMaterial;\n\n    if (emissiveTexture) {\n      material.emissiveTexture = getItemByIdx(\"textures\", emissiveTexture.index || 0, resources, false);\n    }\n\n    if (emissiveFactor) {\n      material.emissiveColor = new Color(...emissiveFactor);\n    }\n\n    if (normalTexture) {\n      const { index, texCoord, scale } = normalTexture;\n      material = material as PBRMaterial | PBRSpecularMaterial;\n      material.normalTexture = getItemByIdx(\"textures\", index || 0, resources, false);\n\n      if (typeof scale !== undefined) {\n        material.normalScale = scale;\n      }\n    }\n\n    if (occlusionTexture) {\n      material = material as PBRMaterial | PBRSpecularMaterial;\n      material.occlusionTexture = getItemByIdx(\"textures\", occlusionTexture.index || 0, resources, false);\n\n      if (occlusionTexture.strength !== undefined) {\n        material.occlusionStrength = occlusionTexture.strength;\n      }\n    }\n\n    if (isSpecular) {\n      const {\n        diffuseFactor,\n        diffuseTexture,\n        specularFactor,\n        glossinessFactor,\n        specularGlossinessTexture\n      } = extensions.KHR_materials_pbrSpecularGlossiness;\n      material = material as PBRSpecularMaterial;\n      if (diffuseFactor) {\n        material.baseColor = new Color(...diffuseFactor);\n      }\n      if (diffuseTexture) {\n        material.baseColorTexture = getItemByIdx(\"textures\", diffuseTexture.index || 0, resources, false);\n      }\n      if (specularFactor) {\n        material.specularColor = new Color(...specularFactor);\n      }\n      if (glossinessFactor !== undefined) {\n        material.glossinessFactor = glossinessFactor;\n      }\n      if (specularGlossinessTexture) {\n        material.specularGlossinessTexture = getItemByIdx(\n          \"textures\",\n          specularGlossinessTexture.index || 0,\n          resources,\n          false\n        );\n      }\n    }\n    return Promise.resolve(material);\n  } else {\n    const techniqueName = gltfMaterial.technique;\n    Logger.warn(\"Deprecated: Please use a model that meets the glTF 2.0 specification\");\n    // TODO: support KHR_UNLIT_MATERIAL in the future.\n    if (techniqueName === \"Texture\") {\n      const material = new UnlitMaterial(engine);\n      const index = gltfMaterial.values._MainTex[0];\n      material.baseColorTexture = getItemByIdx(\"textures\", index || 0, resources, false);\n      return Promise.resolve(material);\n    }\n  }\n  return Promise.resolve();\n}\n\n/**\n * Parse skin.\n * @param gltfSkin\n * @param resources\n * @private\n */\nexport function parseSkin(gltfSkin, resources) {\n  const { gltf, buffers } = resources;\n\n  const jointCount = gltfSkin.joints.length;\n\n  // FIXME: name is null\n  const skin = new Skin(gltfSkin.name);\n  // parse IBM\n  const accessor = gltf.accessors[gltfSkin.inverseBindMatrices];\n  const buffer = getAccessorData(gltf, accessor, buffers);\n  const MAT4_LENGTH = 16;\n\n  for (let i = 0; i < jointCount; i++) {\n    const startIdx = MAT4_LENGTH * i;\n    const endIdx = startIdx + MAT4_LENGTH;\n    skin.inverseBindMatrices[i] = new Matrix(...buffer.subarray(startIdx, endIdx));\n  }\n\n  // get joints\n  for (let i = 0; i < jointCount; i++) {\n    const node = getItemByIdx(\"nodes\", gltfSkin.joints[i], resources);\n    skin.joints[i] = node.name;\n  }\n\n  // get skeleton\n  const node = getItemByIdx(\"nodes\", gltfSkin.skeleton == null ? gltfSkin.joints[0] : gltfSkin.skeleton, resources);\n  skin.skeleton = node.name;\n\n  return Promise.resolve(skin);\n}\n\nfunction parsePrimitiveVertex(\n  mesh: Mesh,\n  primitive: Primitive,\n  primitiveGroup: SubPrimitive,\n  gltfPrimitive,\n  gltf,\n  getVertexBufferData: (string) => TypedArray,\n  getIndexBufferData: () => TypedArray,\n  engine\n) {\n  // load vertices\n  let i = 0;\n  const vertexElements: VertexElement[] = [];\n  for (const attributeSemantic in gltfPrimitive.attributes) {\n    const accessorIdx = gltfPrimitive.attributes[attributeSemantic];\n    const accessor = gltf.accessors[accessorIdx];\n    const stride = getVertexStride(accessor);\n    const vertexELement = createVertexElement(gltf, attributeSemantic, accessor, i);\n\n    vertexElements.push(vertexELement);\n    const bufferData = getVertexBufferData(attributeSemantic);\n    const vertexBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, bufferData.byteLength, BufferUsage.Static);\n    vertexBuffer.setData(bufferData);\n    primitive.setVertexBufferBinding(vertexBuffer, stride, i++);\n\n    // compute bounds\n    if (vertexELement.semantic == \"POSITION\") {\n      const position = new Vector3();\n      const vertexCount = bufferData.length / 3;\n      const { min, max } = mesh.bounds;\n      for (let i = 0; i < vertexCount; i++) {\n        const offset = i * 3;\n        position.setValue(bufferData[offset], bufferData[offset + 1], bufferData[offset + 2]);\n        Vector3.min(min, position, min);\n        Vector3.max(max, position, max);\n      }\n    }\n  }\n  primitive.setVertexElements(vertexElements);\n\n  // load indices\n  const indexAccessor = gltf.accessors[gltfPrimitive.indices];\n  const indexData = getIndexBufferData();\n\n  const indexCount = indexAccessor.count;\n  const indexFormat = getIndexFormat(indexAccessor.componentType);\n  const indexByteSize = indexFormat == IndexFormat.UInt32 ? 4 : indexFormat == IndexFormat.UInt16 ? 2 : 1;\n  const indexBuffer = new Buffer(engine, BufferBindFlag.IndexBuffer, indexCount * indexByteSize, BufferUsage.Static);\n\n  indexBuffer.setData(indexData);\n  primitive.setIndexBufferBinding(new IndexBufferBinding(indexBuffer, indexFormat));\n  primitiveGroup.start = 0;\n  primitiveGroup.count = indexCount;\n  return Promise.resolve(primitive);\n}\n\nfunction parserPrimitiveTarget(primitive, gltfPrimitive, gltf, buffers) {}\n\n/**\n * Parse Mesh\n * @param gltfMesh\n * @param resources\n * @private\n */\nexport function parseMesh(gltfMesh, resources) {\n  const { gltf, buffers, engine } = resources;\n\n  const mesh = new Mesh(gltfMesh.name);\n  // mesh.type = resources.assetType;\n  // parse all primitives then link to mesh\n  // TODO: use hash cached primitives\n  const primitivePromises = [];\n  const groups = [];\n  for (let i = 0; i < gltfMesh.primitives.length; i++) {\n    primitivePromises.push(\n      new Promise((resolve, reject) => {\n        const gltfPrimitive = gltfMesh.primitives[i];\n        // FIXME: use index as primitive's name\n        const primitive = new Primitive(engine, gltfPrimitive.name || gltfMesh.name || i);\n        const subPrimitive = new SubPrimitive();\n        groups.push(subPrimitive);\n        // primitive.type = resources.assetType;\n        subPrimitive.topology = gltfPrimitive.mode == null ? PrimitiveTopology.Triangles : gltfPrimitive.mode;\n        if (gltfPrimitive.hasOwnProperty(\"targets\")) {\n          primitive.targets = [];\n          (mesh as any).weights = gltfMesh.weights || new Array(gltfPrimitive.targets.length).fill(0);\n        }\n        let vertexPromise;\n        if (gltfPrimitive.extensions && gltfPrimitive.extensions[HandledExtensions.KHR_draco_mesh_compression]) {\n          const extensionParser = extensionParsers.KHR_draco_mesh_compression;\n          const extension = gltfPrimitive.extensions[HandledExtensions.KHR_draco_mesh_compression];\n          vertexPromise = extensionParser.parse(extension, gltfPrimitive, gltf, buffers).then((decodedGeometry) => {\n            return parsePrimitiveVertex(\n              mesh,\n              primitive,\n              subPrimitive,\n              gltfPrimitive,\n              gltf,\n              (attributeSemantic) => {\n                for (let i = 0; i < decodedGeometry.attributes.length; i++) {\n                  if (decodedGeometry.attributes[i].name === attributeSemantic) {\n                    return decodedGeometry.attributes[i].array;\n                  }\n                }\n                return null;\n              },\n              () => {\n                return decodedGeometry.index.array;\n              },\n              resources.engine\n            );\n          });\n        } else {\n          vertexPromise = parsePrimitiveVertex(\n            mesh,\n            primitive,\n            subPrimitive,\n            gltfPrimitive,\n            gltf,\n            (attributeSemantic) => {\n              const accessorIdx = gltfPrimitive.attributes[attributeSemantic];\n              const accessor = gltf.accessors[accessorIdx];\n              return getAccessorData(gltf, accessor, buffers);\n            },\n            () => {\n              const indexAccessor = gltf.accessors[gltfPrimitive.indices];\n              return getAccessorData(gltf, indexAccessor, buffers);\n            },\n            resources.engine\n          );\n        }\n        vertexPromise\n          .then((processedPrimitive) => {\n            parserPrimitiveTarget(processedPrimitive, gltfPrimitive, gltf, buffers);\n            resolve(processedPrimitive);\n          })\n          .catch((e) => {\n            reject(e);\n          });\n      })\n    );\n  }\n  return Promise.all(primitivePromises).then((primitives: Primitive[]) => {\n    for (let i = 0; i < primitives.length; i++) {\n      mesh.primitives.push(primitives[i]);\n      mesh.groups.push(groups[i]);\n    }\n    return mesh;\n  });\n}\n\n/**\n * Parse Animation.\n * @param gltfAnimation\n * @param resources\n * @returns {*}\n * @private\n */\nexport function parseAnimation(gltfAnimation, resources) {\n  const { gltf, buffers } = resources;\n  const gltfSamplers = gltfAnimation.samplers || [];\n  const gltfChannels = gltfAnimation.channels || [];\n\n  const animationIdx = gltf.animations.indexOf(gltfAnimation);\n  const animationClip = new AnimationClip(gltfAnimation.name || `Animation${animationIdx}`);\n\n  let duration = -1;\n  let durationIndex = -1;\n  // parse samplers\n  for (let i = 0; i < gltfSamplers.length; i++) {\n    const gltfSampler = gltfSamplers[i];\n    // input\n    const inputAccessor = gltf.accessors[gltfSampler.input];\n    const outputAccessor = gltf.accessors[gltfSampler.output];\n    const input = getAccessorData(gltf, inputAccessor, buffers);\n    const output = getAccessorData(gltf, outputAccessor, buffers);\n    let outputAccessorSize = getAccessorTypeSize(outputAccessor.type);\n    if (outputAccessorSize * input.length !== output.length) outputAccessorSize = output.length / input.length;\n\n    // TODO: support\n    // LINEAR, STEP, CUBICSPLINE\n    let samplerInterpolation = InterpolationType.LINEAR;\n    switch (gltfSampler.interpolation) {\n      case \"CUBICSPLINE\":\n        samplerInterpolation = InterpolationType.CUBICSPLINE;\n        break;\n      case \"STEP\":\n        samplerInterpolation = InterpolationType.STEP;\n        break;\n    }\n    const maxTime = input[input.length - 1];\n    if (maxTime > duration) {\n      duration = maxTime;\n      durationIndex = i;\n    }\n    animationClip.addSampler(input, output, outputAccessorSize, samplerInterpolation);\n  }\n\n  animationClip.durationIndex = durationIndex;\n  animationClip.duration = duration;\n\n  for (let i = 0; i < gltfChannels.length; i++) {\n    const gltfChannel = gltfChannels[i];\n    const target = gltfChannel.target;\n    const samplerIndex = gltfChannel.sampler;\n    const targetNode = getItemByIdx(\"nodes\", target.node, resources);\n    const targetPath = TARGET_PATH_MAP[target.path];\n\n    animationClip.addChannel(samplerIndex, targetNode.name, targetPath);\n  }\n\n  return Promise.resolve(animationClip);\n}\n\n/**\n * Parse the node of glTF.\n * @param gltfNode\n * @param resources\n * @private\n */\nexport function parseNode(gltfNode, resources: GLTFParsed) {\n  // TODO: undefined name?\n  const entity = new Entity(resources.engine, gltfNode.name || `GLTF_NODE_${nodeCount++}`);\n\n  if (gltfNode.hasOwnProperty(\"matrix\")) {\n    const m = gltfNode.matrix;\n    const mat = new Matrix();\n    mat.setValueByArray(m);\n    const pos = new Vector3();\n    const scale = new Vector3(1, 1, 1);\n    const rot = new Quaternion();\n    mat.decompose(pos, rot, scale);\n\n    entity.transform.position = pos;\n    entity.transform.rotationQuaternion = rot;\n    entity.transform.scale = scale;\n  } else {\n    for (const key in TARGET_PATH_MAP) {\n      if (gltfNode.hasOwnProperty(key)) {\n        const mapKey = TARGET_PATH_MAP[key];\n        if (mapKey === \"weights\") {\n          entity[mapKey] = gltfNode[key];\n        } else {\n          const arr = gltfNode[key];\n          const len = arr.length;\n          const obj = entity[mapKey];\n          if (len === 2) {\n            obj.setValue(arr[0], arr[1]);\n          } else if (len === 3) {\n            obj.setValue(arr[0], arr[1], arr[2]);\n          } else if (len === 4) {\n            obj.setValue(arr[0], arr[1], arr[2], arr[3]);\n          }\n          entity[mapKey] = obj;\n        }\n      }\n    }\n  }\n\n  if (gltfNode.camera !== undefined) {\n    const cameraOptions = resources.gltf.cameras[gltfNode.camera];\n    const camera = entity.addComponent(Camera);\n    if (cameraOptions.type === \"orthographic\") {\n      camera.isOrthographic = true;\n      let { ymag, xmag, zfar, znear } = cameraOptions.orthographic;\n      if (znear !== undefined) {\n        camera.nearClipPlane = znear;\n      }\n      if (zfar !== undefined) {\n        camera.farClipPlane = zfar;\n      }\n      if (ymag && xmag) {\n        camera.orthographicSize = Math.max(ymag, xmag) / 2;\n      }\n      if (ymag !== undefined && xmag) {\n        camera.orthographicSize = xmag / 2;\n      }\n      if (xmag !== undefined && ymag) {\n        camera.orthographicSize = ymag / 2;\n      }\n    } else {\n      const { aspectRatio, yfov, zfar, znear } = cameraOptions.perspective;\n      if (aspectRatio !== undefined) {\n        camera.aspectRatio = aspectRatio;\n      }\n      if (yfov !== undefined) {\n        camera.fieldOfView = yfov;\n      }\n      if (zfar !== undefined) {\n        camera.farClipPlane = zfar;\n      }\n      if (znear !== undefined) {\n        camera.nearClipPlane = znear;\n      }\n    }\n  }\n\n  if (gltfNode.extensions) {\n    if (KHR_lights && gltfNode.extensions.KHR_lights) {\n      const lightIdx = gltfNode.extensions.KHR_lights.light;\n      if (lightIdx !== undefined) {\n        const light = getItemByIdx(\"lights\", lightIdx, resources);\n        if (light) {\n          const lightCon = entity.addComponent(light.ability);\n          Object.assign(lightCon, light.props);\n        }\n      }\n    }\n  }\n\n  return Promise.resolve(entity);\n}\n\n/**\n * parse the scene of glTF.\n * @param gltfScene\n * @param resources\n * @returns {{nodes: Array}}\n * @private\n */\nexport function parseScene(gltfScene, resources) {\n  const sceneNodes = [];\n  for (let i = 0; i < gltfScene.nodes.length; i++) {\n    const node = getItemByIdx(\"nodes\", gltfScene.nodes[i], resources);\n    sceneNodes.push(node);\n  }\n\n  if (gltfScene.extensions) {\n    if (KHR_lights && gltfScene.extensions.KHR_lights) {\n      const lightIdx = gltfScene.extensions.KHR_lights.light;\n      if (lightIdx !== undefined) {\n        const light = getItemByIdx(\"lights\", lightIdx, resources);\n        if (light) sceneNodes[0].addComponent(light.ability, light.props);\n      }\n    }\n  }\n\n  return Promise.resolve({\n    nodes: sceneNodes\n  });\n}\n\n/**\n * Get content through index.\n * @param name\n * @param idx\n * @param resources\n * @returns {*}\n * @private\n */\nexport function getItemByIdx(name, idx, resources, inverse: boolean = true) {\n  const { asset } = resources;\n\n  const itemIdx = inverse ? asset[name].length - idx - 1 : idx;\n  return asset[name][itemIdx];\n}\n\n/**\n * Construct scene graph and create Ability according to node configuration.\n * @param resources\n * @private\n */\nexport function buildSceneGraph(resources: GLTFParsed): GLTFResource {\n  const { asset, gltf } = resources;\n\n  const gltfNodes = gltf.nodes || [];\n  const gltfMeshes = gltf.meshes;\n\n  asset.defaultScene = getItemByIdx(\"scenes\", gltf.scene ?? 0, resources);\n\n  for (let i = gltfNodes.length - 1; i >= 0; i--) {\n    const gltfNode = gltfNodes[i];\n    const node = getItemByIdx(\"nodes\", i, resources);\n\n    if (gltfNode.hasOwnProperty(\"children\")) {\n      const children = gltfNode.children || [];\n      for (let j = children.length - 1; j >= 0; j--) {\n        const childNode = getItemByIdx(\"nodes\", children[j], resources);\n\n        node.addChild(childNode);\n      }\n    }\n\n    // link mesh\n    if (gltfNode.hasOwnProperty(\"mesh\")) {\n      const meshIndex = gltfNode.mesh;\n      node.meshIndex = meshIndex;\n      const gltfMeshPrimitives = gltfMeshes[meshIndex].primitives;\n      const mesh = getItemByIdx(\"meshes\", meshIndex, resources);\n\n      let renderer: MeshRenderer;\n      if (gltfNode.hasOwnProperty(\"skin\") || mesh.hasOwnProperty(\"weights\")) {\n        const skin = getItemByIdx(\"skins\", gltfNode.skin, resources);\n        const weights = mesh.weights;\n        const skinRenderer: SkinnedMeshRenderer = node.addComponent(SkinnedMeshRenderer);\n        skinRenderer.mesh = mesh;\n        skinRenderer.skin = skin;\n        skinRenderer.setWeights(weights);\n        renderer = skinRenderer;\n      } else {\n        renderer = node.addComponent(MeshRenderer);\n        renderer.mesh = mesh;\n      }\n      for (let j = 0, m = gltfMeshPrimitives.length; j < m; j++) {\n        const materialIndex = gltfMeshPrimitives[j].material;\n        mesh.primitives[j].materialIndex = materialIndex;\n        const material =\n          materialIndex !== undefined\n            ? getItemByIdx(\"materials\", materialIndex, resources)\n            : getDefaultMaterial(node.engine);\n        renderer.setSharedMaterial(j, material);\n      }\n    }\n  }\n\n  //@ts-ignore\n  const nodes = asset.defaultScene.nodes;\n  if (nodes.length === 1) {\n    asset.defaultSceneRoot = nodes[0];\n  } else {\n    const rootNode = new Entity(resources.engine);\n    for (let i = 0; i < nodes.length; i++) {\n      rootNode.addChild(nodes[i]);\n    }\n    asset.defaultSceneRoot = rootNode;\n  }\n\n  const animator = asset.defaultSceneRoot.addComponent(Animation);\n  const animations = asset.animations;\n  if (animations) {\n    animations.forEach((clip: AnimationClip) => {\n      animator.addAnimationClip(clip, clip.name);\n    });\n  }\n  return resources.asset as GLTFResource;\n}\n", "import { decodeText } from \"./Util\";\n\n/**\n * Parse the glb format.\n * @param glb - Binary data\n * @returns GlTF information and bin information in Object glb.\n * @private\n */\nexport function parseGLB(glb) {\n  const UINT32_LENGTH = 4;\n  const GLB_HEADER_MAGIC = 0x46546c67; // 'glTF'\n  const GLB_HEADER_LENGTH = 12;\n  const GLB_CHUNK_TYPES = { JSON: 0x4e4f534a, BIN: 0x004e4942 };\n\n  const dataView = new DataView(glb);\n\n  // read header\n  const header = {\n    magic: dataView.getUint32(0, true),\n    version: dataView.getUint32(UINT32_LENGTH, true),\n    length: dataView.getUint32(2 * UINT32_LENGTH, true)\n  };\n\n  if (header.magic !== GLB_HEADER_MAGIC) {\n    console.error(\"Invalid glb magic number. Expected 0x46546C67, found 0x\" + header.magic.toString(16));\n    return null;\n  }\n\n  // read main data\n  let chunkLength = dataView.getUint32(GLB_HEADER_LENGTH, true);\n  let chunkType = dataView.getUint32(GLB_HEADER_LENGTH + UINT32_LENGTH, true);\n\n  // read glTF json\n  if (chunkType !== GLB_CHUNK_TYPES.JSON) {\n    console.error(\"Invalid glb chunk type. Expected 0x004E4942, found 0x\" + chunkType.toString(16));\n    return null;\n  }\n\n  const glTFData = new Uint8Array(glb, GLB_HEADER_LENGTH + 2 * UINT32_LENGTH, chunkLength);\n  const gltf = JSON.parse(decodeText(glTFData));\n\n  // read all buffers\n  const buffers = [];\n  let byteOffset = GLB_HEADER_LENGTH + 2 * UINT32_LENGTH + chunkLength;\n\n  while (byteOffset < header.length) {\n    chunkLength = dataView.getUint32(byteOffset, true);\n    chunkType = dataView.getUint32(byteOffset + UINT32_LENGTH, true);\n\n    if (chunkType !== GLB_CHUNK_TYPES.BIN) {\n      console.error(\"Invalid glb chunk type. Expected 0x004E4942, found 0x\" + chunkType.toString(16));\n      return null;\n    }\n\n    const currentOffset = byteOffset + 2 * UINT32_LENGTH;\n    const buffer = glb.slice(currentOffset, currentOffset + chunkLength);\n    buffers.push(buffer);\n\n    byteOffset += chunkLength + 2 * UINT32_LENGTH;\n  }\n\n  // start parse glTF\n  return {\n    gltf,\n    buffers\n  };\n}\n", "import {\n  resourceLoader,\n  Loader,\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  ResourceManager,\n  Texture2D\n} from \"@oasis-engine/core\";\nimport { GlTf, LoadedGLTFResource } from \"./GLTF\";\nimport { parseGLTF, GLTFResource } from \"./gltf/glTF\";\nimport { parseGLB } from \"./gltf/glb\";\nimport { loadImageBuffer, getBufferData, parseRelativeUrl } from \"./gltf/Util\";\n\n@resourceLoader(AssetType.Perfab, [\"gltf\", \"glb\"])\nexport class GLTFLoader extends Loader<GLTFResource> {\n  private baseUrl: string;\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<GLTFResource> {\n    return new AssetPromise((resolve, reject) => {\n      const requestGLTFResource = this.isGLB(item.url) ? this.requestGLB : this.requestGLTF;\n      requestGLTFResource(item, resourceManager)\n        .then((res) => {\n          parseGLTF(res, resourceManager.engine).then((gltf) => {\n            resolve(gltf);\n          });\n        })\n        .catch((e) => {\n          console.error(e);\n          reject(\"Error loading glTF JSON from \" + item.url);\n        });\n    });\n  }\n\n  private requestGLTF = (item: LoadItem, resourceManager: ResourceManager): Promise<LoadedGLTFResource> => {\n    return this.request<GlTf>(item.url, {\n      ...item,\n      type: \"json\"\n    }).then((res) => this._loadGLTFResources(item, res, resourceManager));\n  };\n\n  private requestGLB = (item: LoadItem, resourceManager: ResourceManager): Promise<LoadedGLTFResource> => {\n    return this.request<GlTf>(item.url, {\n      ...item,\n      type: \"arraybuffer\"\n    })\n      .then(parseGLB)\n      .then((res) => {\n        return { ...res, baseUrl: item.url, resourceManager };\n      })\n      .then(this._loadImages);\n  };\n\n  private isGLB(url: string): boolean {\n    return url.substring(url.lastIndexOf(\".\") + 1) === \"glb\";\n  }\n\n  /**\n   * Load resources in gltf.\n   * @param gltf\n   * @param resourceManager\n   */\n  private _loadGLTFResources(\n    item: LoadItem,\n    gltf: GlTf,\n    resourceManager: ResourceManager\n  ): Promise<LoadedGLTFResource> {\n    // Buffer must be loaded first, then image.\n    return this._loadBuffers(item.url, gltf, resourceManager).then(this._loadImages);\n  }\n\n  private _loadBuffers(baseUrl: string, gltf: GlTf, resourceManager: ResourceManager): Promise<LoadedGLTFResource> {\n    if (gltf.buffers) {\n      return Promise.all(\n        gltf.buffers.map((item) => {\n          if (item instanceof ArrayBuffer) {\n            return Promise.resolve(item);\n          }\n          return resourceManager.load<ArrayBuffer>({\n            url: parseRelativeUrl(baseUrl, item.uri),\n            type: AssetType.Buffer\n          });\n        })\n      ).then((buffers) => {\n        return { buffers, gltf, baseUrl, resourceManager };\n      });\n    }\n    return Promise.resolve({ baseUrl, gltf, resourceManager });\n  }\n\n  private _loadImages = ({\n    gltf,\n    buffers,\n    baseUrl,\n    resourceManager\n  }: LoadedGLTFResource & { baseUrl: string; resourceManager: ResourceManager }): Promise<any> => {\n    if (gltf.images) {\n      return Promise.all(\n        gltf.images.map(({ uri, bufferView: bufferViewIndex, mimeType }) => {\n          if (uri) {\n            // Use base64 or url.\n            return resourceManager.load({ url: parseRelativeUrl(baseUrl, uri), type: AssetType.Texture2D });\n          } else {\n            // Use bufferView.\n            const bufferView = gltf.bufferViews[bufferViewIndex];\n            const bufferData = getBufferData(bufferView, buffers);\n            return loadImageBuffer(bufferData, mimeType).then((image) => {\n              const tex = new Texture2D(resourceManager.engine, image.width, image.height);\n              tex.setImageSource(image);\n              tex.generateMipmaps();\n              return tex;\n            });\n          }\n        })\n      ).then((textures) => {\n        return { gltf, buffers, textures };\n      });\n    }\n    return Promise.resolve({ gltf, buffers });\n  };\n}\n", "import { resourceLoader, Loader, AssetPromise, AssetType, LoadItem } from \"@oasis-engine/core\";\n\n@resourceLoader(AssetType.JSON, [\"json\"], false)\nclass JSONLoader extends Loader<string> {\n  load(item: LoadItem): AssetPromise<string> {\n    return this.request(item.url, {\n      ...item,\n      type: \"json\"\n    });\n  }\n}\n", "/**\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\n\nimport { Mipmap, KTXContainer } from \"./type\";\nimport { GLCompressedTextureInternalFormat, TextureFormat } from \"@oasis-engine/core\";\n\nconst HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n\n// load types\nconst COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\nconst COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\nconst TEX_2D = 2; // uses a gl.texImage2D()\nconst TEX_3D = 3; // uses a gl.texImage3D()\n\nfunction getMipmaps(ktxContainer: KTXContainer, loadMipmaps: boolean): Mipmap[] {\n  const mipmaps = [];\n\n  // initialize width & height for level 1\n  var dataOffset = HEADER_LEN + ktxContainer.bytesOfKeyValueData;\n  var width = ktxContainer.pixelWidth;\n  var height = ktxContainer.pixelHeight;\n  var mipmapCount = loadMipmaps ? ktxContainer.numberOfMipmapLevels : 1;\n\n  for (var level = 0; level < mipmapCount; level++) {\n    var imageSize = new Int32Array(ktxContainer.buffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n    dataOffset += 4; // size of the image + 4 for the imageSize field\n\n    for (var face = 0; face < ktxContainer.numberOfFaces; face++) {\n      var byteArray = new Uint8Array(ktxContainer.buffer, dataOffset, imageSize);\n\n      mipmaps.push({ data: byteArray, width: width, height: height });\n\n      dataOffset += imageSize;\n      dataOffset += 3 - ((imageSize + 3) % 4); // add padding for odd sized image\n    }\n    width = Math.max(1.0, width * 0.5);\n    height = Math.max(1.0, height * 0.5);\n  }\n\n  return mipmaps;\n}\n\n/**\n * Checks if the given data starts with a KTX file identifier.\n * @param data the data to check\n * @returns true if the data is a KTX file or false otherwise\n */\nfunction isValid(data: ArrayBuffer): boolean {\n  if (data.byteLength >= 12) {\n    // '\u00AB', 'K', 'T', 'X', ' ', '1', '1', '\u00BB', '\\r', '\\n', '\\x1A', '\\n'\n    const identifier = new Uint8Array(data, 0, 12);\n    if (\n      identifier[0] === 0xab &&\n      identifier[1] === 0x4b &&\n      identifier[2] === 0x54 &&\n      identifier[3] === 0x58 &&\n      identifier[4] === 0x20 &&\n      identifier[5] === 0x31 &&\n      identifier[6] === 0x31 &&\n      identifier[7] === 0xbb &&\n      identifier[8] === 0x0d &&\n      identifier[9] === 0x0a &&\n      identifier[10] === 0x1a &&\n      identifier[11] === 0x0a\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getEngineFormat(internalFormat: GLint): TextureFormat {\n  switch (internalFormat) {\n    // case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT3_EXT:\n    // case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT:\n    // break;\n    case GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT:\n      return TextureFormat.DXT1;\n    case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT:\n      return TextureFormat.DXT5;\n    case GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL:\n      return TextureFormat.ETC1_RGB;\n    case GLCompressedTextureInternalFormat.RGB8_ETC2:\n      return TextureFormat.ETC2_RGB;\n    case GLCompressedTextureInternalFormat.RGB8_PUNCHTHROUGH_ALPHA1_ETC2:\n      return TextureFormat.ETC2_RGBA5;\n    case GLCompressedTextureInternalFormat.RGBA8_ETC2_EAC:\n      return TextureFormat.ETC2_RGBA8;\n    case GLCompressedTextureInternalFormat.RGB_PVRTC_2BPPV1_IMG:\n      return TextureFormat.PVRTC_RGB2;\n    case GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG:\n      return TextureFormat.PVRTC_RGBA2;\n    case GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG:\n      return TextureFormat.PVRTC_RGB4;\n    case GLCompressedTextureInternalFormat.RGBA_PVRTC_4BPPV1_IMG:\n      return TextureFormat.PVRTC_RGBA4;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR:\n      return TextureFormat.ASTC_4x4;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_5X5_KHR:\n      return TextureFormat.ASTC_5x5;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_6X6_KHR:\n      return TextureFormat.ASTC_6x6;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_8X8_KHR:\n      return TextureFormat.ASTC_8x8;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_10X10_KHR:\n      return TextureFormat.ASTC_10x10;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR:\n      return TextureFormat.ASTC_12x12;\n    default:\n      const formatName: any = GLCompressedTextureInternalFormat[internalFormat];\n      throw new Error(`this format is not supported in Oasis Engine: ${formatName}`);\n  }\n}\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n */\nexport const khronosTextureContainerParser = {\n  /**\n   *\n   * @param buffer contents of the KTX container file\n   * @param facesExpected should be either 1 or 6, based whether a cube texture or or\n   * @param threeDExpected provision for indicating that data should be a 3D texture, not implemented\n   * @param textureArrayExpected provision for indicating that data should be a texture array, not implemented\n   * @param mapEngineFormat get Oasis Engine native TextureFormat?\n   */\n  parse(\n    buffer: ArrayBuffer,\n    facesExpected: number,\n    withMipmaps: boolean,\n    mapEngineFormat: boolean = false\n  ): KTXContainer {\n    if (!isValid(buffer)) {\n      throw new Error(\"khronosTextureContainerParser: invalid KTX file, texture missing KTX identifier\");\n    }\n\n    // load the reset of the header in native 32 bit uint\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    const headerDataView = new DataView(buffer, 12, 13 * dataSize);\n    const endianness = headerDataView.getUint32(0, true);\n    const littleEndian = endianness === 0x04030201;\n\n    const parsedResult: KTXContainer = {\n      buffer: buffer,\n      glType: headerDataView.getUint32(1 * dataSize, littleEndian), // must be 0 for compressed textures\n      glTypeSize: headerDataView.getUint32(2 * dataSize, littleEndian), // must be 1 for compressed textures\n      glFormat: headerDataView.getUint32(3 * dataSize, littleEndian), // must be 0 for compressed textures\n      glInternalFormat: headerDataView.getUint32(4 * dataSize, littleEndian), // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n      glBaseInternalFormat: headerDataView.getUint32(5 * dataSize, littleEndian), // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n      pixelWidth: headerDataView.getUint32(6 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n      pixelHeight: headerDataView.getUint32(7 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n      pixelDepth: headerDataView.getUint32(8 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n      numberOfArrayElements: headerDataView.getUint32(9 * dataSize, littleEndian), // used for texture arrays\n      numberOfFaces: headerDataView.getUint32(10 * dataSize, littleEndian), // used for cubemap textures, should either be 1 or 6\n      numberOfMipmapLevels: headerDataView.getUint32(11 * dataSize, littleEndian), // number of levels; disregard possibility of 0 for compressed textures\n      bytesOfKeyValueData: headerDataView.getUint32(12 * dataSize, littleEndian), // the amount of space after the header for meta-data\n      // would need to make this more elaborate & adjust checks above to support more than one load type\n      loadType: COMPRESSED_2D\n    };\n\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n    if (parsedResult.glType !== 0) {\n      throw new Error(\"only compressed formats currently supported\");\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      parsedResult.numberOfMipmapLevels = Math.max(1, parsedResult.numberOfMipmapLevels);\n    }\n\n    if (parsedResult.pixelHeight === 0 || parsedResult.pixelDepth !== 0) {\n      throw new Error(\"only 2D textures currently supported\");\n    }\n\n    if (parsedResult.numberOfArrayElements !== 0) {\n      throw new Error(\"texture arrays not currently supported\");\n    }\n\n    if (parsedResult.numberOfFaces !== facesExpected) {\n      throw new Error(\"number of faces expected\" + facesExpected + \", but found \" + parsedResult.numberOfFaces);\n    }\n\n    if (withMipmaps) {\n      parsedResult.mipmaps = getMipmaps(parsedResult, true);\n    }\n\n    if (mapEngineFormat) {\n      parsedResult.engineFormat = getEngineFormat(parsedResult.glInternalFormat);\n    }\n    return parsedResult;\n  }\n};\n", "import { CompressedTextureData, CompressedCubeData } from \"./type\";\nimport { khronosTextureContainerParser } from \"./KhronosTextureContainer\";\nimport { TextureFormat } from \"@oasis-engine/core\";\n\nexport function parseSingleKTX(data: ArrayBuffer): CompressedTextureData {\n  const ktx = khronosTextureContainerParser.parse(data, 1, true, true);\n  return {\n    mipmaps: ktx.mipmaps,\n    engineFormat: ktx.engineFormat,\n    internalFormat: ktx.glInternalFormat,\n    width: ktx.pixelWidth,\n    height: ktx.pixelHeight\n  };\n}\n\nexport function parseCubeKTX(dataArray: ArrayBuffer[]): CompressedCubeData {\n  const mipmapsFaces = [];\n  let internalFormat: number;\n  let engineFormat: TextureFormat;\n  let width: number;\n  let height: number;\n  for (let i = 0; i < dataArray.length; i++) {\n    const ktx = khronosTextureContainerParser.parse(dataArray[i], 1, true, true);\n    mipmapsFaces.push(ktx.mipmaps);\n    if (i === 0) {\n      width = ktx.pixelWidth;\n      height = ktx.pixelHeight;\n      internalFormat = ktx.glInternalFormat;\n      engineFormat = ktx.engineFormat;\n    }\n  }\n  return {\n    mipmapsFaces,\n    engineFormat,\n    internalFormat,\n    width,\n    height\n  };\n}\n", "import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCubeFace,\n  TextureCubeMap\n} from \"@oasis-engine/core\";\nimport { parseCubeKTX } from \"./compressed-texture\";\n\n@resourceLoader(AssetType.KTXCube, [])\nclass KTXCubeLoader extends Loader<TextureCubeMap> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCubeMap> {\n    return new AssetPromise((resolve, reject) => {\n      Promise.all(\n        item.urls.map((url) =>\n          this.request<ArrayBuffer>(url, {\n            ...item,\n            type: \"arraybuffer\"\n          })\n        )\n      )\n        .then((data) => {\n          const parsedData = parseCubeKTX(data);\n          const { width, mipmapsFaces, engineFormat } = parsedData;\n          const mipmap = mipmapsFaces[0].length > 1;\n          const texture = new TextureCubeMap(resourceManager.engine, width, engineFormat, mipmap);\n\n          for (let face = 0; face < 6; face++) {\n            const length = mipmapsFaces[face].length;\n\n            for (let miplevel = 0; miplevel < length; miplevel++) {\n              const { data, width, height } = mipmapsFaces[face][miplevel];\n\n              texture.setPixelBuffer(TextureCubeFace.PositiveX + face, data, miplevel, 0, 0, width, height);\n            }\n          }\n\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n", "import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Texture2D\n} from \"@oasis-engine/core\";\nimport { parseSingleKTX } from \"./compressed-texture\";\n\n@resourceLoader(AssetType.KTX, [\"ktx\"])\nexport class KTXLoader extends Loader<Texture2D> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<ArrayBuffer>(item.url, {\n        ...item,\n        type: \"arraybuffer\"\n      })\n        .then((bin) => {\n          const parsedData = parseSingleKTX(bin);\n          const { width, height, mipmaps, engineFormat } = parsedData;\n          const mipmap = mipmaps.length > 1;\n          const texture = new Texture2D(resourceManager.engine, width, height, engineFormat, mipmap);\n\n          for (let miplevel = 0; miplevel < mipmaps.length; miplevel++) {\n            const { width, height, data } = mipmaps[miplevel];\n            texture.setPixelBuffer(data, miplevel, 0, 0, width, height);\n          }\n\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n", "import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Texture2D\n} from \"@oasis-engine/core\";\n\n@resourceLoader(AssetType.Texture2D, [\"png\", \"jpg\", \"webp\", \"jpeg\"])\nclass Texture2DLoader extends Loader<Texture2D> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<HTMLImageElement>(item.url, {\n        ...item,\n        type: \"image\"\n      })\n        .then((image) => {\n          const texture = new Texture2D(resourceManager.engine, image.width, image.height);\n          if (!texture._glTexture) return;\n          texture.setImageSource(image);\n          texture.generateMipmaps();\n\n          if (item.url.indexOf(\"data:\") !== 0) {\n            const splitPath = item.url.split(\"/\");\n            texture.name = splitPath[splitPath.length - 1];\n          }\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n", "import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCubeFace,\n  TextureCubeMap\n} from \"@oasis-engine/core\";\n\n@resourceLoader(AssetType.TextureCube, [\"\"])\nclass TextureCubeLoader extends Loader<TextureCubeMap> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCubeMap> {\n    return new AssetPromise((resolve, reject) => {\n      Promise.all(\n        item.urls.map((url) =>\n          this.request<HTMLImageElement>(url, {\n            ...item,\n            type: \"image\"\n          })\n        )\n      )\n        .then((images) => {\n          const { width, height } = images[0];\n\n          if (width !== height) {\n            console.error(\"The cube texture must have the same width and height\");\n            return;\n          }\n\n          const tex = new TextureCubeMap(resourceManager.engine, width);\n\n          if (!tex._glTexture) return;\n\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            tex.setImageSource(TextureCubeFace.PositiveX + faceIndex, images[faceIndex], 0);\n          }\n\n          tex.generateMipmaps();\n          resolve(tex);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n", "import { Component, Entity, WrapMode, Animation } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"./gltf/glTF\";\n\n/**\n * @deprecated\n * Temporarily only for editor use.\n * Remove when editor finish change from gltf to prefab.\n */\nexport class GLTFModel extends Component {\n  get asset() {\n    return this._asset;\n  }\n\n  set asset(value: GLTFResource) {\n    if (value && value.defaultSceneRoot === this.GLTFNode) {\n      return;\n    }\n    if (!this._hasBuiltNode) {\n      (this.GLTFNode as any).clearChildren();\n      if (value !== null) {\n        if (this.GLTFNode) {\n          this.GLTFNode.destroy();\n        }\n        this.GLTFNode = value.defaultSceneRoot.clone();\n        this._animator = this.GLTFNode.getComponent(Animation);\n        this.entity.addChild(this.GLTFNode);\n      }\n    }\n    this._asset = value;\n  }\n\n  get animator() {\n    return this._animator;\n  }\n\n  get autoPlay() {\n    return this._autoPlay;\n  }\n\n  set autoPlay(value: string) {\n    if (this._animator) {\n      // Play bone animation.\n      if (value) {\n        this._animator.playAnimationClip(value, {\n          wrapMode: this._loop\n        });\n      } else {\n        this._animator.stop(false);\n      }\n    }\n    this._autoPlay = value;\n  }\n\n  get loop() {\n    return this._loop;\n  }\n\n  set loop(value: WrapMode) {\n    if (this._animator && this.autoPlay) {\n      // Play bone animation\n      this._animator.playAnimationClip(this._autoPlay, {\n        wrapMode: value\n      });\n    }\n    this._loop = value;\n  }\n\n  public _animator: Animation;\n  public animationsNames: String[];\n\n  private _asset: GLTFResource;\n  private GLTFNode: Entity;\n  private _loop: number;\n  private _autoPlay: string;\n  private _hasBuiltNode: boolean = false;\n\n  constructor(entity) {\n    super(entity);\n  }\n\n  /**\n   * Init.\n   * @param props - Init props\n   */\n  init(props): void {\n    const { asset = null, autoPlay, loop, isClone } = props;\n    if (isClone) {\n      const rootName = (props as any).gltfRootName;\n      if (rootName) {\n        this.GLTFNode = this.entity.findByName(rootName);\n      }\n    }\n    if (!this.GLTFNode) {\n      const rootName = `GLTF-${Date.now()}`;\n      (props as any).gltfRootName = rootName;\n      this.GLTFNode = this.entity.createChild(rootName);\n      this._hasBuiltNode = false;\n    } else {\n      this._hasBuiltNode = true;\n    }\n\n    this.asset = asset;\n    this.loop = loop;\n    this.autoPlay = autoPlay;\n  }\n\n  /**\n   * @override\n   */\n  _onEnable(): void {\n    this.GLTFNode && (this.GLTFNode.isActive = true);\n  }\n\n  /**\n   * @override\n   */\n  _onDisable(): void {\n    this.GLTFNode && (this.GLTFNode.isActive = false);\n  }\n}\n", "import { Component, Entity } from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { SchemaResource } from \"../resources\";\nimport { Plugin } from \"./Plugin\";\nexport class PluginManager implements PluginHook {\n  private registeredPlugins: Set<Plugin> = new Set();\n  private plugins: PluginHook[] = [];\n\n  register(plugin: Plugin) {\n    this.registeredPlugins.add(plugin);\n  }\n\n  boot(oasis: Oasis) {\n    for (let plugin of this.registeredPlugins.values()) {\n      if (typeof plugin === \"function\") {\n        plugin = plugin(oasis);\n      }\n      this.plugins.push(plugin);\n    }\n  }\n\n  reset() {\n    this.registeredPlugins.clear();\n    this.plugins = [];\n  }\n\n  nodeAdded(entity: Entity) {\n    this.delegateMethod(\"nodeAdded\", entity);\n  }\n\n  private delegateMethod(name: keyof PluginHook, ...args) {\n    this.plugins.forEach((plugin) => plugin[name] && (plugin[name] as any)(...args));\n  }\n}\n\nexport interface PluginHook {\n  oasis?: Oasis;\n  nodeAdded?(entity: Entity): any;\n  beforeNodeUpdated?(id: string, key: string, value: any): any;\n  nodeUpdated?(updateConfig?: { id: string; key: string; value: any }): any;\n  abilityAdded?(ability: Component): any;\n  beforeAbilityAdded?(config: any): any;\n  beforeAbilityUpdated?(id: string, key: string, value: any): any;\n  abilityUpdated?(updateConfig?: { id: string; key: string; value: any }): any;\n  schemaParsed?(): any;\n  abilityDeleted?(id: string): any;\n  beforeAbilityDeleted?(id: string): any;\n  beforeNodeDeleted?(config: any): any;\n  beforeResourceRemove?(id: string): any;\n  resourceUpdated?(info: { resource: SchemaResource; id: string; key: string; value: any }): any;\n  beforeResourceUpdate?(id: string, key: string, value: any): any;\n  // todo type\n  beforeResourceAdd?(resource: any): any;\n  resourceAdded?(resource: any): any;\n}\n\nexport function pluginHook(options: Partial<{ before: keyof PluginHook; after: keyof PluginHook }>): MethodDecorator {\n  return function (target: any, propertyName: string, descriptor: TypedPropertyDescriptor<any>) {\n    const method = descriptor.value;\n\n    descriptor.value = function (...args: any[]) {\n      options.before && this.oasis.pluginManager.delegateMethod(options.before, ...args);\n      return Promise.resolve(method.apply(this, arguments)).then((returnObj) => {\n        options.after && this.oasis.pluginManager.delegateMethod(options.after, returnObj);\n        return returnObj;\n      });\n    };\n  };\n}\n", "export function switchElementsIndex(elements: any[], currentIndex: number, targetIndex: number) {\n  if (currentIndex === targetIndex || targetIndex === null || targetIndex === undefined) {\n    return;\n  }\n  [elements[currentIndex], elements[targetIndex]] = [elements[targetIndex], elements[currentIndex]];\n}\n\nexport function isAsset(config: any): boolean {\n  return config && config.type === \"asset\";\n}\n\nexport function getAllGetters(obj: any): Array<string> {\n  const result = [];\n  const prototype = Object.getPrototypeOf(obj);\n  const prototype_property_descriptors = Object.getOwnPropertyDescriptors(prototype);\n  for (const [property, descriptor] of Object.entries(prototype_property_descriptors)) {\n    if (typeof descriptor.get === \"function\") {\n      result.push(property);\n    }\n  }\n  return result;\n}\n\nexport function union(arr1: Array<any>, arr2: Array<any>): Array<any> {\n  return arr1.concat(arr2.filter((v) => !(arr1.indexOf(v) > -1)));\n}\n\n// https://github.com/BabylonJS/Babylon.js/blob/d780145531ac1b1cee85cbfba4d836dcc24ab58e/src/Engines/Extensions/engine.textureSelector.ts#L70\n// Intelligently add supported compressed formats in order to check for.\n// Check for ASTC support first as it is most powerful and to be very cross platform.\n// Next PVRTC & DXT, which are probably superior to ETC1/2.\n// Likely no hardware which supports both PVR & DXT, so order matters little.\n// ETC2 is newer and handles ETC1 (no alpha capability), so check for first.\nexport const compressedTextureLoadOrder = {\n  astc: 1,\n  s3tc: 2,\n  pvrtc: 3,\n  etc: 4,\n  etc1: 5\n};\n", "import { Logger, ResourceManager } from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { SchemaResourceManager } from \"../ResourceManager\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { isAsset } from \"../utils\";\n\ninterface IResourceMeta {\n  name?: string;\n  url?: string;\n  size?: number;\n  source?: string;\n}\n\nexport abstract class SchemaResource {\n  protected _meta: IResourceMeta = {};\n  protected _attachedResources: Array<SchemaResource> = [];\n\n  /**\n   * Resource\n   */\n  get resource() {\n    return this._resource;\n  }\n\n  get meta(): IResourceMeta {\n    return this._meta;\n  }\n\n  get attachedResources() {\n    return this._attachedResources;\n  }\n\n  protected setMeta() {}\n\n  constructor(protected resourceManager: SchemaResourceManager, protected _resource?: any) {\n    this.setMeta();\n  }\n\n  abstract load(resourceManager: ResourceManager, assetConfig: AssetConfig, oasis: Oasis): Promise<SchemaResource>;\n  loadWithAttachedResources(\n    resourceLoader: any,\n    assetConfig: AssetConfig,\n    oasis: Oasis\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      this.load(resourceLoader, assetConfig, oasis)\n        .then(() => {\n          resolve({\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          });\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  getProps(): any {\n    return {};\n  }\n\n  bind(): void {}\n  attach(): void {}\n\n  update(key: string, value: any) {\n    if (isAsset(value)) {\n      const resource = this.resourceManager.get(value.id);\n      if (resource) {\n        this._resource[key] = resource.resource;\n      } else {\n        Logger.warn(`SchemaResource: ${this.meta.name} can't find asset, which id is: ${value.id}`);\n      }\n    } else {\n      this._resource[key] = value;\n    }\n  }\n\n  updateMeta(key: string, value: any) {\n    this._meta[key] = value;\n  }\n\n  onDestroy() {}\n}\n", "import { AssetType, GLCapabilityType, ResourceManager } from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { AssetConfig } from \"../types\";\nimport { SchemaResource } from \"./SchemaResource\";\n\nexport class TextureResource extends SchemaResource {\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig, oasis: Oasis): Promise<TextureResource> {\n    return new Promise((resolve, reject) => {\n      let url: string;\n      let assetType = AssetType.Texture2D;\n      if (this.resourceManager.useCompressedTexture && assetConfig?.props?.compression?.compressions.length) {\n        const rhi = oasis.engine._hardwareRenderer;\n        const compressions = assetConfig.props.compression.compressions;\n        for (let i = 0; i < compressions.length; i++) {\n          const compression = compressions[i];\n          if (compression.container === \"ktx\" && rhi.canIUse(GLCapabilityType[compression.type])) {\n            url = compression.url;\n            assetType = AssetType.KTX;\n            break;\n          }\n        }\n      }\n\n      url = url ?? assetConfig.url;\n\n      resourceManager\n        .load({ url, type: assetType })\n        .then((res) => {\n          this._resource = res;\n          resolve(this);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this._meta.name = this.resource.name;\n      if (this.resource.image) {\n        this._meta.url = this.resource.image.src;\n      }\n    }\n  }\n}\n", "import { BlinnPhongMaterial, Logger, ResourceManager, Texture } from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { getAllGetters, isAsset } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { TextureResource } from \"./TextureResource\";\n\nexport class BlinnPhongMaterialResource extends SchemaResource {\n  private configProps;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<BlinnPhongMaterialResource> {\n    return new Promise((resolve) => {\n      const assetObj = new BlinnPhongMaterial(resourceManager.engine);\n      this.configProps = assetConfig.props;\n      this._resource = assetObj;\n\n      for (let k in this.configProps) {\n        if (!isAsset(this.configProps[k])) {\n          assetObj[k] = this.configProps[k];\n        }\n      }\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.resource instanceof BlinnPhongMaterial) {\n        loadPromise = new Promise((resolve) => {\n          this._resource = assetConfig.resource;\n          this.setMeta();\n          resolve(this);\n        });\n      } else if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load BlinnPhongMaterial Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n\n          const material = this._resource;\n          getAllGetters(this._resource).forEach((attr) => {\n            if (!(material[attr] instanceof Texture)) return;\n            const textureResource = new TextureResource(this.resourceManager, material[attr]);\n            this.attachedResources.push(textureResource);\n            result.resources.push(textureResource);\n            result.structure.props[attr] = {\n              index: result.resources.length - 1\n            };\n          });\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  bind() {\n    const resource = this._resource;\n    Object.keys(this.configProps).forEach((attr) => {\n      const value = this.configProps[attr];\n      if (isAsset(value)) {\n        const textureResource = this.resourceManager.get(value.id);\n        if (textureResource && textureResource instanceof TextureResource) {\n          resource[attr] = textureResource.resource;\n          this._attachedResources.push(textureResource);\n        } else {\n          resource[attr] = null;\n          Logger.warn(\n            `BlinnPhongMaterialResource: ${this.meta.name} can't find asset \"${attr}\", which id is: ${value.id}`\n          );\n        }\n      } else {\n        resource[attr] = value;\n      }\n    });\n  }\n}\n", "import { Logger, PBRMaterial, ResourceManager, Texture } from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { getAllGetters, isAsset } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { TextureResource } from \"./TextureResource\";\n\nexport class PBRMaterialResource extends SchemaResource {\n  private configProps;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<PBRMaterialResource> {\n    return new Promise((resolve) => {\n      const assetObj = new PBRMaterial(resourceManager.engine);\n      this.configProps = assetConfig.props;\n\n      for (let k in this.configProps) {\n        if (!isAsset(this.configProps[k])) {\n          assetObj[k] = this.configProps[k];\n        }\n      }\n      this._resource = assetObj;\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.resource instanceof PBRMaterial) {\n        loadPromise = new Promise((resolve) => {\n          this._resource = assetConfig.resource;\n          this.setMeta();\n          resolve(this);\n        });\n      } else if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load PBRMaterial Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n\n          const material = this._resource;\n          getAllGetters(this._resource).forEach((attr) => {\n            if (!(material[attr] instanceof Texture)) return;\n            const textureResource = new TextureResource(this.resourceManager, material[attr]);\n            this.attachedResources.push(textureResource);\n            result.resources.push(textureResource);\n            result.structure.props[attr] = {\n              index: result.resources.length - 1\n            };\n          });\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    const result = {};\n    const props = getAllGetters(this.resource);\n    props.forEach((prop) => (result[prop] = this.resource[prop]));\n    return result;\n  }\n\n  bind() {\n    const resource = this._resource;\n    Object.keys(this.configProps).forEach((attr) => {\n      const value = this.configProps[attr];\n      if (isAsset(value)) {\n        const textureResource = this.resourceManager.get(value.id);\n        if (textureResource && textureResource instanceof TextureResource) {\n          resource[attr] = textureResource.resource;\n          this._attachedResources.push(textureResource);\n        } else {\n          resource[attr] = null;\n          Logger.warn(`PBRMaterialResource: ${this.meta.name} can't find asset \"${attr}\", which id is: ${value.id}`);\n        }\n      } else {\n        resource[attr] = value;\n      }\n    });\n  }\n}\n", "import { Logger, PBRSpecularMaterial, ResourceManager, Texture } from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { getAllGetters, isAsset } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { TextureResource } from \"./TextureResource\";\n\nexport class PBRSpecularMaterialResource extends SchemaResource {\n  private configProps;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<PBRSpecularMaterialResource> {\n    return new Promise((resolve) => {\n      const assetObj = new PBRSpecularMaterial(resourceManager.engine);\n      this.configProps = assetConfig.props;\n      this._resource = assetObj;\n\n      for (let k in this.configProps) {\n        if (!isAsset(this.configProps[k])) {\n          assetObj[k] = this.configProps[k];\n        }\n      }\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.resource instanceof PBRSpecularMaterial) {\n        loadPromise = new Promise((resolve) => {\n          this._resource = assetConfig.resource;\n          this.setMeta();\n          resolve(this);\n        });\n      } else if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load PBRSpecularMaterial Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n\n          const material = this._resource;\n          getAllGetters(this._resource).forEach((attr) => {\n            if (!(material[attr] instanceof Texture)) return;\n            const textureResource = new TextureResource(this.resourceManager, material[attr]);\n            this.attachedResources.push(textureResource);\n            result.resources.push(textureResource);\n            result.structure.props[attr] = {\n              index: result.resources.length - 1\n            };\n          });\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    const result = {};\n    const props = getAllGetters(this.resource);\n    props.forEach((prop) => (result[prop] = this.resource[prop]));\n    return result;\n  }\n\n  bind() {\n    const resource = this._resource;\n    Object.keys(this.configProps).forEach((attr) => {\n      const value = this.configProps[attr];\n      if (isAsset(value)) {\n        const textureResource = this.resourceManager.get(value.id);\n        if (textureResource && textureResource instanceof TextureResource) {\n          resource[attr] = textureResource.resource;\n          this._attachedResources.push(textureResource);\n        } else {\n          resource[attr] = null;\n          Logger.warn(\n            `PBRSpecularMaterialResource: ${this.meta.name} can't find asset \"${attr}\", which id is: ${value.id}`\n          );\n        }\n      } else {\n        resource[attr] = value;\n      }\n    });\n  }\n}\n", "import { Logger, UnlitMaterial, ResourceManager, Texture } from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { getAllGetters, isAsset } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { TextureResource } from \"./TextureResource\";\n\nexport class UnlitMaterialResource extends SchemaResource {\n  private configProps;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<UnlitMaterialResource> {\n    return new Promise((resolve) => {\n      const assetObj = new UnlitMaterial(resourceManager.engine);\n      this.configProps = assetConfig.props;\n\n      for (let k in this.configProps) {\n        if (!isAsset(this.configProps[k])) {\n          assetObj[k] = this.configProps[k];\n        }\n      }\n      this._resource = assetObj;\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.resource instanceof UnlitMaterial) {\n        loadPromise = new Promise((resolve) => {\n          this._resource = assetConfig.resource;\n          this.setMeta();\n          resolve(this);\n        });\n      } else if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load PBRMaterial Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n\n          const material = this._resource;\n          getAllGetters(this._resource).forEach((attr) => {\n            if (!(material[attr] instanceof Texture)) return;\n            const textureResource = new TextureResource(this.resourceManager, material[attr]);\n            this.attachedResources.push(textureResource);\n            result.resources.push(textureResource);\n            result.structure.props[attr] = {\n              index: result.resources.length - 1\n            };\n          });\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    const result = {};\n    const props = getAllGetters(this.resource);\n    props.forEach((prop) => (result[prop] = this.resource[prop]));\n    return result;\n  }\n\n  bind() {\n    const resource = this._resource;\n    Object.keys(this.configProps).forEach((attr) => {\n      const value = this.configProps[attr];\n      if (isAsset(value)) {\n        const textureResource = this.resourceManager.get(value.id);\n        if (textureResource && textureResource instanceof TextureResource) {\n          resource[attr] = textureResource.resource;\n          this._attachedResources.push(textureResource);\n        } else {\n          resource[attr] = null;\n          Logger.warn(`PBRMaterialResource: ${this.meta.name} can't find asset \"${attr}\", which id is: ${value.id}`);\n        }\n      } else {\n        resource[attr] = value;\n      }\n    });\n  }\n}\n", "import {\n  AssetType,\n  Logger,\n  Material,\n  MeshRenderer,\n  PBRMaterial,\n  PBRSpecularMaterial,\n  ResourceManager,\n  UnlitMaterial\n} from \"@oasis-engine/core\";\nimport { glTFDracoMeshCompression } from \"../../gltf/glTFDracoMeshCompression\";\nimport { Oasis } from \"../Oasis\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { BlinnPhongMaterialResource } from \"./BlinnPhongMaterialResource\";\nimport { PBRMaterialResource } from \"./PBRMaterialResource\";\nimport { PBRSpecularMaterialResource } from \"./PBRSpecularMaterialResource\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { UnlitMaterialResource } from \"./UnlitMaterialResource\";\n\nexport class GLTFResource extends SchemaResource {\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig, oasis: Oasis): Promise<any> {\n    if (!!assetConfig.props?.compression) {\n      glTFDracoMeshCompression.init();\n    }\n    return resourceManager\n      .load<any>({ url: assetConfig.url, type: AssetType.Perfab })\n      .then((res) => {\n        const gltf = res;\n        if (assetConfig.props) {\n          gltf.newMaterial = (assetConfig.props as any).newMaterial;\n        }\n        this._resource = gltf;\n      });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig,\n    oasis: Oasis\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve) => {\n      this.load(resourceManager, assetConfig, oasis).then(() => {\n        const gltf = this.resource;\n        const { materials } = gltf;\n        const loadPromises = [];\n        const result = {\n          resources: [this],\n          structure: {\n            index: 0,\n            props: {\n              newMaterial: []\n            }\n          }\n        };\n        for (let i = 0; i < materials.length; i++) {\n          const material = materials[i];\n          let materialResource = null;\n          let type = \"\";\n\n          if (material instanceof PBRMaterial) {\n            materialResource = new PBRMaterialResource(this.resourceManager);\n            type = \"PBRMaterial\";\n          } else if (material instanceof UnlitMaterial) {\n            materialResource = new UnlitMaterialResource(this.resourceManager);\n            type = \"UnlitMaterial\";\n          } else if (material instanceof PBRSpecularMaterial) {\n            materialResource = new PBRSpecularMaterialResource(this.resourceManager);\n            type = \"PBRSpecularMaterial\";\n          } else {\n            materialResource = new BlinnPhongMaterialResource(this.resourceManager);\n            type = \"BlinnPhongMaterial\";\n          }\n\n          this._attachedResources.push(materialResource);\n          loadPromises.push(\n            materialResource.loadWithAttachedResources(resourceManager, {\n              type,\n              name: material.name,\n              resource: material\n            })\n          );\n        }\n        Promise.all(loadPromises).then((res) => {\n          const newMaterial = result.structure.props.newMaterial;\n          res.forEach((mat) => {\n            const matStructure = mat.structure;\n            const matResource = mat.resources[matStructure.index];\n            result.resources.push(matResource);\n            matStructure.index = result.resources.length - 1;\n            for (const key in matStructure.props) {\n              if (matStructure.props.hasOwnProperty(key)) {\n                const textureStructure = matStructure.props[key];\n                const textureResource = mat.resources[textureStructure.index];\n                result.resources.push(textureResource);\n                textureStructure.index = result.resources.length - 1;\n              }\n            }\n            newMaterial.push(matStructure);\n          });\n          resolve(result);\n        });\n      });\n    });\n  }\n\n  setMeta(assetConfig?: AssetConfig) {\n    if (assetConfig) {\n      this.meta.name = assetConfig.name;\n    }\n  }\n\n  bind() {\n    const resource = this._resource;\n    this.bindMaterials(resource.newMaterial);\n  }\n\n  update(key: string, value: any) {\n    if (key === \"newMaterial\") {\n      this.bindMaterials(value);\n    } else {\n      this._resource[key] = value;\n    }\n  }\n\n  private bindMaterials(materials) {\n    if (!materials || !materials.length) {\n      return;\n    }\n    const gltf = this._resource;\n    const meshes = gltf.meshes;\n\n    for (let i = 0; i < materials.length; i++) {\n      const mtlResource = this.resourceManager.get(materials[i].id);\n      if (mtlResource) {\n        this._attachedResources.push(mtlResource);\n        gltf.materials[i] = mtlResource.resource;\n      } else {\n        Logger.warn(`GLTFResource: ${this.meta.name} can't find asset \"material\", which id is: ${materials[i].id}`);\n      }\n    }\n    for (let j = 0; j < meshes.length; j++) {\n      const node = this.getNodeByMeshIndex(gltf.nodes, meshes.length - 1 - j);\n      if (node) {\n        for (let k = 0; k < meshes[j].primitives.length; k++) {\n          const primitive = meshes[j].primitives[k];\n          const meshRenderer = node.getComponent(MeshRenderer);\n          const material = gltf.materials[gltf.materials.length - 1 - primitive.materialIndex];\n          if (meshRenderer && material && material instanceof Material) {\n            meshRenderer.setSharedMaterial(k, material);\n          }\n        }\n      }\n    }\n  }\n\n  private getNodeByMeshIndex(nodes, index) {\n    for (let i = 0; i <= nodes.length; i++) {\n      const node = nodes[i];\n      if (node.meshIndex === index) {\n        return node;\n      }\n    }\n    return null;\n  }\n}\n", "import { SchemaResource } from \"./SchemaResource\";\nimport { AssetConfig } from \"../types\";\nimport { Oasis } from \"../Oasis\";\nimport { Parser } from \"../Parser\";\n\nexport const scriptAbility = {};\nexport function script(name: string) {\n  return (target: any) => {\n    scriptAbility[name] = target;\n  };\n}\nexport class ScriptResource extends SchemaResource {\n  private isInit = false;\n\n  private initScriptContext() {\n    if (this.isInit) {\n      return;\n    }\n    this.isInit = true;\n    (window as any).__o3_script_context__ = {\n      o3: Parser._components[\"o3\"],\n      script: (name: string) => {\n        return (target: any) => {\n          scriptAbility[name] = target;\n        };\n      }\n    };\n  }\n\n  load(resourceLoader, assetConfig: AssetConfig, oasis: Oasis): Promise<ScriptResource> {\n    this.initScriptContext();\n    return new Promise((resolve) => {\n      const config = assetConfig as any;\n      const scripts = config.props.scripts;\n\n      if (!this.resourceManager.isLocal) {\n        const scriptDom = document.createElement(\"script\");\n        scriptDom.crossOrigin = \"anonymous\";\n        this.setMeta(assetConfig);\n        scriptDom.onload = () => {\n          const o3Scripts = (window as any).o3Scripts;\n          for (let i = 0; i < scripts.length; i++) {\n            const name = scripts[i].name;\n            this._resource = o3Scripts && o3Scripts[name];\n            scriptAbility[name] = this._resource;\n          }\n          resolve(this);\n        };\n        scriptDom.src = assetConfig.url;\n        document.body.appendChild(scriptDom);\n      } else {\n        for (let i = 0; i < scripts.length; i++) {\n          const name = scripts[i].name;\n          scriptAbility[name] = oasis.options?.scripts[name];\n        }\n        resolve(this);\n      }\n    });\n  }\n\n  setMeta(assetConfig?: AssetConfig) {\n    if (assetConfig) {\n      this._meta.name = assetConfig.name;\n      this._meta.url = assetConfig.url;\n      this._meta.source = assetConfig.source;\n    }\n  }\n}\n", "import { AssetType, GLCapabilityType, ResourceManager } from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { AssetConfig } from \"../types\";\nimport { SchemaResource } from \"./SchemaResource\";\n\nconst imageOrderMap = {\n  px: 0,\n  nx: 1,\n  py: 2,\n  ny: 3,\n  pz: 4,\n  nz: 5\n};\n\nexport class TextureCubeMapResource extends SchemaResource {\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig, oasis: Oasis): Promise<TextureCubeMapResource> {\n    return new Promise((resolve, reject) => {\n      const imageUrls = [];\n      let type = AssetType.TextureCube;\n      if (this.resourceManager.useCompressedTexture && assetConfig?.props?.compression?.compressions.length) {\n        const rhi = oasis.engine._hardwareRenderer;\n        const compressions = assetConfig.props.compression.compressions;\n        for (let i = 0; i < compressions.length; i++) {\n          const compression = compressions[i];\n          if (compression.container === \"ktx\" && rhi.canIUse(GLCapabilityType[compression.type])) {\n            for (const key in compression.files) {\n              if (compression.files.hasOwnProperty(key)) {\n                const image = compression.files[key];\n                imageUrls[imageOrderMap[key]] = image.url;\n              }\n            }\n            console.warn(compression.type);\n            type = AssetType.KTXCube;\n            break;\n          }\n        }\n      }\n\n      if (type === AssetType.TextureCube) {\n        for (const key in assetConfig.props.images) {\n          if (assetConfig.props.images.hasOwnProperty(key)) {\n            const image = assetConfig.props.images[key];\n            imageUrls[imageOrderMap[key]] = image.url;\n          }\n        }\n      }\n\n      resourceManager\n        .load({\n          urls: imageUrls,\n          type: type\n        })\n        .then((res) => {\n          this._resource = res;\n          resolve(this);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n}\n", "import { SchemaResource } from \"./SchemaResource\";\nimport { AssetConfig } from \"../types\";\n\nexport class BaseResource extends SchemaResource {\n  load(resourceLoader, assetConfig: AssetConfig): Promise<BaseResource> {\n    return new Promise((resolve) => {\n      this._resource = assetConfig;\n      this.setMetaData(\"name\", this.resource.name);\n      this.setMetaData(\"url\", this.resource.url);\n      resolve(this);\n    });\n  }\n\n  setMetaData(key, value) {\n    this._meta[key] = value;\n  }\n}\n", "import { Component, Logger } from \"@oasis-engine/core\";\nimport { Oasis } from \"./Oasis\";\nimport { Parser } from \"./Parser\";\nimport { pluginHook } from \"./plugins/PluginManager\";\nimport { scriptAbility } from \"./resources\";\nimport { ComponentConfig, Props } from \"./types\";\nimport { switchElementsIndex } from \"./utils\";\n\nexport class AbilityManager {\n  private abilityMap: { [id: string]: Component } = {};\n\n  constructor(private oasis: Oasis) {}\n\n  @pluginHook({ after: \"abilityAdded\", before: \"beforeAbilityAdded\" })\n  public add(abilityConfig: ComponentConfig) {\n    const { type, node: nodeId, props, id, index } = abilityConfig;\n\n    const node = this.oasis.nodeManager.get(nodeId);\n    const AbilityConstructor = this.getCompConstructor(type);\n    if (!AbilityConstructor) {\n      Logger.error(`${type} abiltiy is not defined`);\n      return;\n    }\n\n    const abilityProps = this.mixPropsToExplicitProps(props);\n    const ability = node.addComponent(AbilityConstructor);\n    const { enabled } = abilityProps;\n    if (enabled !== undefined) {\n      ability.enabled = enabled;\n    }\n\n    if (type === \"Model\" || type === \"GLTFModel\") {\n      // TODO\n      (ability as any).init(abilityProps);\n    } else {\n      for (let k in abilityProps) {\n        if (abilityProps[k] !== null) {\n          ability[k] = abilityProps[k];\n        }\n      }\n    }\n\n    //@ts-ignore\n    const abilityArray = node._components;\n    const currentIndex = abilityArray.length - 1;\n    switchElementsIndex(abilityArray, currentIndex, index);\n    (ability as any).id = id;\n    this.abilityMap[id] = ability;\n    return ability;\n  }\n\n  @pluginHook({ before: \"beforeAbilityUpdated\", after: \"abilityUpdated\" })\n  public update(id: string, key: string, value: any) {\n    if (this.get(id).constructor.name === \"Model\") {\n      // TODO\n      if (value && this.checkIsAsset(value)) {\n        (this.get(id) as any).setProp(key, this.oasis.resourceManager.get(value.id).resource);\n      } else {\n        (this.get(id) as any).setProp(key, value);\n      }\n    } else {\n      if (value && this.checkIsAsset(value)) {\n        this.get(id)[key] = this.oasis.resourceManager.get(value.id).resource;\n      } else {\n        this.get(id)[key] = value;\n      }\n    }\n\n    return { id, key, value };\n  }\n\n  public get(id: string): Component {\n    return this.abilityMap[id];\n  }\n\n  @pluginHook({ after: \"abilityDeleted\", before: \"beforeAbilityDeleted\" })\n  public delete(id: string) {\n    const ability = this.abilityMap[id];\n    ability.destroy();\n    delete this.abilityMap[id];\n    return id;\n  }\n\n  private getCompConstructor(type: string) {\n    const splits = type.split(\".\");\n    // script\n    if (splits[0] === \"script\") {\n      return scriptAbility[splits[1]];\n    }\n\n    const constructor = Parser._components[\"o3\"][type];\n    if (!constructor) {\n      throw new Error(`${type} is not defined`);\n    }\n    return constructor;\n  }\n\n  private mixPropsToExplicitProps(props: Props) {\n    const explicitProps = { ...props };\n    for (let k in props) {\n      const prop = props[k];\n      if (prop && this.checkIsAsset(prop)) {\n        const res = this.oasis.resourceManager.get(prop.id);\n        if (res) {\n          explicitProps[k] = res.resource;\n        } else {\n          explicitProps[k] = null;\n          Logger.warn(`AbilityManager: can't get asset \"${k}\", which id is ${prop.id}`);\n        }\n      }\n    }\n    return explicitProps;\n  }\n\n  private checkIsAsset(prop: any): boolean {\n    return prop.type === \"asset\";\n  }\n}\n", "import { Entity } from \"@oasis-engine/core\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { Oasis } from \"./Oasis\";\nimport { pluginHook } from \"./plugins/PluginManager\";\nimport { NodeConfig } from \"./types\";\nimport { switchElementsIndex } from \"./utils\";\n\nexport class NodeManager {\n  private nodeMap: { [id: string]: Entity } = {};\n  private readonly root: Entity;\n\n  constructor(private oasis: Oasis) {\n    this.root = new Entity(this.oasis.engine, \"root\");\n  }\n\n  public addRootEntity() {\n    this.oasis.engine.sceneManager.activeScene.addRootEntity(this.root);\n  }\n\n  @pluginHook({ after: \"nodeAdded\" })\n  public add(nodeConfig: NodeConfig) {\n    this.create(nodeConfig);\n    this.append(nodeConfig.id, nodeConfig.parent, nodeConfig.index);\n    return this.get(nodeConfig.id);\n  }\n\n  @pluginHook({ before: \"beforeNodeUpdated\", after: \"nodeUpdated\" })\n  public update(id: string, key: string, value: any) {\n    this.get(id)[key] = value;\n    return { id, key, value };\n  }\n\n  public get(id: string): Entity {\n    return this.nodeMap[id];\n  }\n\n  public reset() {\n    this.nodeMap = {};\n  }\n\n  @pluginHook({ before: \"beforeNodeDeleted\" })\n  public delete(id: string) {\n    this.nodeMap[id].destroy();\n    delete this.nodeMap[id];\n  }\n\n  private create(nodeConfig: NodeConfig): Entity {\n    const { isActive, position, rotation, scale, id, name } = nodeConfig;\n    const entity = new Entity(this.oasis.engine, name);\n    entity.isActive = isActive;\n    entity.transform.position = new Vector3(position[0], position[1], position[2]);\n    entity.transform.rotation = new Vector3(rotation[0], rotation[1], rotation[2]);\n    entity.transform.scale = new Vector3(scale[0], scale[1], scale[2]);\n    (entity as any).id = id;\n    this.nodeMap[id] = entity;\n    return entity;\n  }\n\n  private append(childId: string, parentId: string, index: number) {\n    const child = this.nodeMap[childId];\n    const parent = this.nodeMap[parentId] || this.root;\n    parent.addChild(child);\n    //@ts-ignore\n    const children = parent._children;\n    const currentIndex = children.length - 1;\n    switchElementsIndex(children, currentIndex, index);\n  }\n}\n", "import { ResourceManager, ObjectValues } from \"@oasis-engine/core\";\nimport { Oasis } from \"./Oasis\";\nimport { pluginHook } from \"./plugins/PluginManager\";\nimport {\n  BaseResource,\n  BlinnPhongMaterialResource,\n  GLTFResource,\n  PBRMaterialResource,\n  PBRSpecularMaterialResource,\n  UnlitMaterialResource,\n  SchemaResource,\n  ScriptResource,\n  TextureCubeMapResource,\n  TextureResource\n} from \"./resources\";\nimport { AssetConfig } from \"./types\";\n\nexport const RESOURCE_CLASS = {\n  script: ScriptResource,\n  gltf: GLTFResource,\n  texture: TextureResource,\n  // 'image': TextureResource,\n  cubeTexture: TextureCubeMapResource,\n  PBRMaterial: PBRMaterialResource,\n  PBRSpecularMaterial: PBRSpecularMaterialResource,\n  UnlitMaterial: UnlitMaterialResource,\n  BlinnPhongMaterial: BlinnPhongMaterialResource,\n  // Animation: Animation,\n  base: BaseResource\n};\n\nconst RESOURCE_TYPE: Map<SchemaResource, string> = new Map();\nfor (const key in RESOURCE_CLASS) {\n  if (RESOURCE_CLASS.hasOwnProperty(key)) {\n    const element = RESOURCE_CLASS[key];\n    RESOURCE_TYPE.set(element, key);\n  }\n}\n\nconst resourceFactory = {\n  createResource(resourceManager: SchemaResourceManager, type: string): SchemaResource {\n    return new RESOURCE_CLASS[type](resourceManager);\n  }\n};\n\nexport function registerResource(type: string, resource: any) {\n  if (!RESOURCE_CLASS.hasOwnProperty(type)) {\n    RESOURCE_CLASS[type] = resource;\n    RESOURCE_TYPE.set(resource, type);\n  }\n}\n\nexport class SchemaResourceManager {\n  private resourceMap: { [id: string]: SchemaResource } = {};\n  private resourceIdMap: WeakMap<SchemaResource, string> = new WeakMap();\n  private maxId = 0;\n  private readonly engineResourceManager: ResourceManager;\n\n  constructor(private oasis: Oasis) {\n    this.engineResourceManager = this.oasis.engine.resourceManager;\n  }\n\n  load(asset: AssetConfig): Promise<SchemaResource> {\n    const resource = resourceFactory.createResource(this, asset.type);\n    const loadPromise = resource.load(this.oasis.engine.resourceManager, asset, this.oasis);\n    this.maxId = Math.max(+asset.id, this.maxId);\n    loadPromise.then(() => {\n      this.resourceMap[asset.id] = resource;\n      this.resourceIdMap.set(resource, asset.id);\n    });\n    return loadPromise;\n  }\n\n  add(asset: AssetConfig): Promise<any> {\n    const resource = resourceFactory.createResource(this, asset.type);\n    return new Promise((resolve) => {\n      resource.loadWithAttachedResources(this.oasis.engine.resourceManager, asset, this.oasis).then((result) => {\n        resolve(this.getAddResourceResult(result.resources, result.structure));\n      });\n    });\n  }\n\n  @pluginHook({ before: \"beforeResourceRemove\" })\n  remove(id: string): Promise<Array<string>> {\n    return new Promise((resolve) => {\n      const resource = this.resourceMap[id];\n      const result = [id];\n      let hasAttachedResource = false;\n      delete this.resourceMap[id];\n      if (resource) {\n        const attached = resource.attachedResources;\n        for (let index = 0; index < attached.length; index++) {\n          const attachedResource = attached[index];\n          const attachedResourceId = this.resourceIdMap.get(attachedResource);\n          if (attachedResourceId) {\n            hasAttachedResource = true;\n            this.remove(attachedResourceId).then((attachedResourceRemoveResult) => {\n              result.push(...attachedResourceRemoveResult);\n              resolve(result);\n            });\n          }\n        }\n      }\n      if (!hasAttachedResource) {\n        resolve(result);\n      }\n    });\n  }\n\n  @pluginHook({ after: \"resourceUpdated\", before: \"beforeResourceUpdate\" })\n  update(id: string, key: string, value: any) {\n    const resource = this.get(id);\n    if (resource) {\n      resource.update(key, value);\n    }\n    return {\n      resource,\n      id,\n      key,\n      value\n    };\n  }\n\n  updateMeta(id: string, key: string, value: any) {\n    const resource = this.get(id);\n    if (resource) {\n      resource.updateMeta(key, value);\n    }\n  }\n\n  get(id: string): SchemaResource {\n    return this.resourceMap[id];\n  }\n\n  getAll(): Array<SchemaResource> {\n    return ObjectValues(this.resourceMap);\n  }\n\n  private getAddResourceResult(resources, structure) {\n    const addResourceResult: any = {};\n    const resource = resources[structure.index];\n    const id = `${++this.maxId}`;\n    this.resourceMap[id] = resource;\n    this.resourceIdMap.set(resource, id);\n\n    addResourceResult.id = this.maxId;\n    addResourceResult.type = RESOURCE_TYPE.get(resource.constructor);\n    addResourceResult.meta = resource.meta;\n    addResourceResult.props = {};\n    for (const key in structure.props) {\n      if (structure.props.hasOwnProperty(key)) {\n        const element = structure.props[key];\n        if (element) {\n          if (Array.isArray(element)) {\n            addResourceResult.props[key] = element.map((child) => this.getAddResourceResult(resources, child));\n          } else {\n            addResourceResult.props[key] = this.getAddResourceResult(resources, element);\n          }\n        }\n      }\n    }\n    return addResourceResult;\n  }\n\n  get isLocal(): boolean {\n    return this.oasis.options.local;\n  }\n\n  get useCompressedTexture(): boolean {\n    return this.oasis.options.useCompressedTexture ?? true;\n  }\n}\n", "import { Engine, EventDispatcher, ObjectValues } from \"@oasis-engine/core\";\nimport { AbilityManager } from \"./AbilityManager\";\nimport { NodeManager } from \"./NodeManager\";\nimport { pluginHook, PluginManager } from \"./plugins/PluginManager\";\nimport { RESOURCE_CLASS, SchemaResourceManager } from \"./ResourceManager\";\nimport { Options, Schema } from \"./types\";\n\nexport class Oasis extends EventDispatcher {\n  public readonly engine: Engine = null;\n  public readonly nodeManager: NodeManager;\n  public readonly abilityManager: AbilityManager;\n  public resourceManager: SchemaResourceManager;\n  public _canvas: HTMLCanvasElement;\n  private schema: Schema;\n  public timeout: number;\n  private oasis = this;\n\n  private constructor(private _options: Options, public readonly pluginManager: PluginManager) {\n    super(_options.engine);\n    this.engine = _options.engine;\n    this.schema = _options.config;\n    this.timeout = _options.timeout;\n    _options.scripts = _options.scripts ?? {};\n    this.nodeManager = new NodeManager(this);\n    this.abilityManager = new AbilityManager(this);\n    this.nodeManager.add = this.nodeManager.add.bind(this.nodeManager);\n    this.abilityManager.add = this.abilityManager.add.bind(this.abilityManager);\n    this.resourceManager = new SchemaResourceManager(this);\n    if (_options.fps) {\n      this.engine.targetFrameRate = _options.fps;\n      this.engine.vSyncCount = 0;\n    }\n  }\n\n  public get canvas(): HTMLCanvasElement {\n    return this._options.canvas;\n  }\n\n  public get options(): Readonly<Options> {\n    return this._options;\n  }\n\n  public updateConfig(config: Schema): void {\n    this.schema = config;\n\n    this.init();\n  }\n\n  @pluginHook({ after: \"schemaParsed\" })\n  private init(): Promise<any> {\n    return this.loadResources().then(() => {\n      this.bindResources();\n      this.parseEntities();\n      this.attach();\n      this.nodeManager.addRootEntity();\n      this.parseNodeAbilities();\n      this.pluginManager.boot(this);\n    });\n  }\n\n  private loadResources(): Promise<any> {\n    const { assets = {} } = this.schema;\n\n    const loadingPromises = ObjectValues(assets)\n      .filter((asset) => {\n        if (RESOURCE_CLASS[asset.type]) {\n          return true;\n        }\n        console.warn(`${asset.type} loader is not defined. the ${asset.type} type will be ignored.`);\n        return false;\n      })\n      .map((asset) => this.resourceManager.load(asset));\n\n    return Promise.all(loadingPromises);\n  }\n\n  private bindResources() {\n    this.resourceManager.getAll().forEach((resource) => {\n      resource.bind();\n    });\n  }\n\n  private parseEntities(): void {\n    const { nodes } = this.schema;\n    const indices = this.bfsNodes();\n    indices.map((index) => nodes[index]).forEach(this.nodeManager.add);\n  }\n\n  private parseNodeAbilities(): void {\n    const { abilities } = this.schema;\n    Object.keys(abilities)\n      .map((id) => ({ id, ...abilities[id] }))\n      .forEach(this.abilityManager.add);\n  }\n\n  private bfsNodes(): number[] {\n    const { nodes } = this.schema;\n    const roots = ObjectValues(nodes)\n      .filter((node) => !nodes[node.parent])\n      .map((node) => node.id);\n\n    let result = [];\n    const traverseChildren = (roots: string[]) => {\n      result = result.concat(roots);\n      roots.forEach((id) => {\n        const children = nodes[id].children;\n        children && traverseChildren(children);\n      });\n    };\n    traverseChildren(roots);\n    return result;\n  }\n\n  private attach() {\n    this.resourceManager.getAll().forEach((resource) => {\n      resource.attach();\n    });\n  }\n\n  static create(options: Options, pluginManager: PluginManager): Promise<Oasis> {\n    const oasis = new Oasis(options, pluginManager);\n    return oasis.init().then(() => {\n      options.autoPlay && oasis.engine.run();\n      return oasis;\n    });\n  }\n}\n", "import { Color, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\n\n/**\n * temp compa\n * @param config\n */\nexport function compatibleToV2(config) {\n  const { abilities = {}, assets = {} } = config;\n  const ids = Object.keys(abilities);\n  const assetKeys = Object.keys(assets);\n\n  for (let i = 0, l = ids.length; i < l; ++i) {\n    handleComponents(abilities[ids[i]].props);\n  }\n\n  for (let i = 0, l = assetKeys.length; i < l; ++i) {\n    handleAssets(assets[assetKeys[i]].props);\n  }\n\n  return config;\n}\n\n// TODO temp\nfunction handleComponents(props) {\n  const keys = Object.keys(props);\n  for (let i = 0, l = keys.length; i < l; ++i) {\n    const k = keys[i];\n    const v = props[k];\n\n    if (Array.isArray(v)) {\n      if ([\"color\", \"diffuseColor\", \"specularColor\"].indexOf(k) !== -1) {\n        props[k] = new Color(v[0], v[1], v[2], v[3]);\n      } else if (v.length === 4) {\n        props[k] = new Vector4(v[0], v[1], v[2], v[3]);\n      } else if (v.length === 3) {\n        props[k] = new Vector3(v[0], v[1], v[2]);\n      } else if (v.length === 2) {\n        props[k] = new Vector2(v[0], v[1]);\n      }\n    }\n  }\n}\n\nfunction handleAssets(props: any = {}) {\n  if (!props) {\n    return;\n  }\n  const keys = Object.keys(props);\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i];\n    const value = props[key];\n\n    if (key === \"newMaterial\" || key === \"scripts\") {\n      continue;\n    }\n\n    if (Array.isArray(value)) {\n      if ([\"emissiveColor\", \"diffuseColor\", \"specularColor\", \"baseColor\"].indexOf(key) !== -1) {\n        props[key] = new Color(value[0], value[1], value[2], value[3]);\n      } else if (value.length === 4) {\n        props[key] = new Vector4(value[0], value[1], value[2], value[3]);\n      } else if (value.length === 3) {\n        props[key] = new Vector3(value[0], value[1], value[2]);\n      } else if (value.length === 2) {\n        props[key] = new Vector2(value[0], value[1]);\n      }\n    }\n  }\n}\n", "import { Component } from \"@oasis-engine/core\";\nimport { Oasis } from \"./Oasis\";\nimport { Plugin } from \"./plugins/Plugin\";\nimport { PluginManager } from \"./plugins/PluginManager\";\nimport { Options } from \"./types\";\nimport { compatibleToV2 } from \"./temp.compatible\";\n\nconst CURRENT_SCHEMA_VERSION = 3;\n\nexport class Parser {\n  private pluginManager: PluginManager = new PluginManager();\n  /**\n   * Parse a scene config.\n   * @param options - Options of scene\n   */\n  public parse(options: Options): Promise<Oasis> {\n    if (options?.config?.version !== CURRENT_SCHEMA_VERSION) {\n      console.warn(\n        `schema-parser: schema version \"${options?.config?.version}\" is out of date, please re-pull the latest version (version ${CURRENT_SCHEMA_VERSION}) of the schema`\n      );\n    }\n    compatibleToV2(options.config);\n    return Oasis.create(options, this.pluginManager);\n  }\n\n  register(plugin: Plugin) {\n    this.pluginManager.register(plugin);\n  }\n\n  resetPlugins() {\n    this.pluginManager.reset();\n  }\n\n  private constructor() {}\n\n  static create(): Parser {\n    const parser = new Parser();\n    return parser;\n  }\n\n  /** @internal */\n  public static _components: { [namespace: string]: { [compName: string]: Component } } = {};\n  /**\n   * Register parsing component\n   * @param namespace - Namespace\n   * @param components - Components\n   */\n  static registerComponents(namespace: string, components: { [key: string]: any }) {\n    if (!this._components[namespace]) {\n      this._components[namespace] = {};\n    }\n    Object.assign(this._components[namespace], components);\n  }\n}\n\nexport const parser = Parser.create();\n", "import { Canvas } from \"@oasis-engine/core\";\nimport { Vector2 } from \"@oasis-engine/math\";\n\n/**\n * The canvas used on the web, which can support HTMLCanvasElement and OffscreenCanvas.\n */\nexport class WebCanvas implements Canvas {\n  _webCanvas: HTMLCanvasElement | OffscreenCanvas;\n\n  private _width: number;\n  private _height: number;\n  private _scale: Vector2 = new Vector2();\n\n  /**\n   * @inheritdoc\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  set width(value: number) {\n    if (this._width !== value) {\n      this._webCanvas.width = value;\n      this._width = value;\n    }\n  }\n\n  /**\n   * @inheritdoc\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  set height(value: number) {\n    if (this._height !== value) {\n      this._webCanvas.height = value;\n      this._height = value;\n    }\n  }\n\n  /**\n   * The scale of canvas, the value is visible width/height divide the render width/height.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get scale(): Vector2 {\n    const webCanvas = this._webCanvas;\n    if (webCanvas instanceof HTMLCanvasElement) {\n      this._scale.setValue(\n        (webCanvas.clientWidth * devicePixelRatio) / webCanvas.width,\n        (webCanvas.clientHeight * devicePixelRatio) / webCanvas.height\n      );\n    }\n    return this._scale;\n  }\n\n  set scale(value: Vector2) {\n    const webCanvas = this._webCanvas;\n    if (webCanvas instanceof HTMLCanvasElement) {\n      webCanvas.style.transformOrigin = `left top`;\n      webCanvas.style.transform = `scale(${value.x}, ${value.y})`;\n    }\n  }\n\n  /**\n   * Resize the rendering size according to the clientWidth and clientHeight of the canvas.\n   * @param pixelRatio - Pixel ratio\n   */\n  resizeByClientSize(pixelRatio: number = window.devicePixelRatio): void {\n    const webCanvas = this._webCanvas;\n    if (webCanvas instanceof HTMLCanvasElement) {\n      const width = webCanvas.clientWidth;\n      const height = webCanvas.clientHeight;\n      this.width = width * pixelRatio;\n      this.height = height * pixelRatio;\n    }\n  }\n\n  /**\n   * Create a web canvas.\n   * @param webCanvas - Web native canvas\n   */\n  constructor(webCanvas: HTMLCanvasElement | OffscreenCanvas) {\n    const width = webCanvas.width;\n    const height = webCanvas.height;\n    this._webCanvas = webCanvas;\n    this._width = width;\n    this._height = height;\n  }\n\n  /**\n   * Set scale.\n   * @param x - Scale along the X axis\n   * @param y - Scale along the Y axis\n   */\n  setScale(x: number, y: number): void {\n    this._scale.setValue(x, y);\n    this.scale = this._scale;\n  }\n}\n", "import { WebGLRenderer } from \"./WebGLRenderer\";\nimport { GLCapabilityType, GLCompressedTextureInternalFormat } from \"@oasis-engine/core\";\n\ntype extensionKey = string;\n\n/**\n * GL capability.\n */\nexport class GLCapability {\n  private _maxDrawBuffers: number;\n  private _maxAnisoLevel: number;\n  private _maxAntiAliasing: number;\n\n  _rhi: WebGLRenderer;\n  capabilityList: Map<GLCapabilityType, boolean>;\n\n  get maxDrawBuffers() {\n    if (!this._maxDrawBuffers) {\n      if (this.canIUse(GLCapabilityType.drawBuffers)) {\n        this._maxDrawBuffers = this._rhi.gl.getParameter(this._rhi.gl.MAX_DRAW_BUFFERS);\n      } else {\n        this._maxDrawBuffers = 1;\n      }\n    }\n    return this._maxDrawBuffers;\n  }\n\n  /**\n   * Max anisoLevel.\n   */\n  get maxAnisoLevel(): number {\n    if (!this._maxAnisoLevel) {\n      const ext = this._rhi.requireExtension(GLCapabilityType.textureFilterAnisotropic);\n      this._maxAnisoLevel = ext ? this._rhi.gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1;\n    }\n    return this._maxAnisoLevel;\n  }\n\n  /**\n   * Max MSAA count.\n   */\n  get maxAntiAliasing(): number {\n    if (!this._maxAntiAliasing) {\n      const gl = this._rhi.gl;\n      const canMSAA = this.canIUse(GLCapabilityType.multipleSample);\n\n      this._maxAntiAliasing = canMSAA ? gl.getParameter(gl.MAX_SAMPLES) : 1;\n    }\n    return this._maxAntiAliasing;\n  }\n\n  get rhi() {\n    return this._rhi;\n  }\n\n  constructor(rhi: WebGLRenderer) {\n    this._rhi = rhi;\n    this.capabilityList = new Map();\n\n    this.init();\n    this.compatibleAllInterface();\n  }\n\n  /**\n   * Check device capabilities.\n   */\n  public canIUse(capabilityType: GLCapabilityType): boolean {\n    return this.capabilityList.get(capabilityType);\n  }\n\n  /**\n   * Check if can use some compressed texture format.\n   */\n  public canIUseCompressedTextureInternalFormat(internalType: GLCompressedTextureInternalFormat): boolean {\n    const {\n      // astc\n      RGBA_ASTC_4X4_KHR,\n      RGBA_ASTC_12X12_KHR,\n      SRGB8_ALPHA8_ASTC_4X4_KHR,\n      SRGB8_ALPHA8_ASTC_12X12_KHR,\n      // etc1\n      RGB_ETC1_WEBGL,\n      // etc\n      R11_EAC,\n      SRGB8_ALPHA8_ETC2_EAC,\n      // pvrtc\n      RGB_PVRTC_4BPPV1_IMG,\n      RGBA_PVRTC_2BPPV1_IMG,\n      // s3tc\n      RGB_S3TC_DXT1_EXT,\n      RGBA_S3TC_DXT5_EXT\n    } = GLCompressedTextureInternalFormat;\n    if (\n      (internalType >= RGBA_ASTC_4X4_KHR && RGBA_ASTC_12X12_KHR <= RGBA_ASTC_12X12_KHR) ||\n      (internalType >= SRGB8_ALPHA8_ASTC_4X4_KHR && internalType <= SRGB8_ALPHA8_ASTC_12X12_KHR)\n    ) {\n      return this.canIUse(GLCapabilityType.astc);\n    } else if (internalType === RGB_ETC1_WEBGL) {\n      return this.canIUse(GLCapabilityType.etc1);\n    } else if (internalType >= R11_EAC && internalType <= SRGB8_ALPHA8_ETC2_EAC) {\n      return this.canIUse(GLCapabilityType.etc);\n    } else if (internalType >= RGB_PVRTC_4BPPV1_IMG && internalType <= RGBA_PVRTC_2BPPV1_IMG) {\n      return this.canIUse(GLCapabilityType.pvrtc);\n    } else if (internalType >= RGB_S3TC_DXT1_EXT && internalType <= RGBA_S3TC_DXT5_EXT) {\n      return this.canIUse(GLCapabilityType.s3tc);\n    }\n    return false;\n  }\n\n  /**\n   * If can use more joints.\n   */\n  public get canIUseMoreJoints() {\n    return (\n      this.canIUse(GLCapabilityType.textureFloat) &&\n      this.rhi.renderStates.getParameter(this.rhi.gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0\n    );\n  }\n\n  /**\n   *  Init capabilities.\n   */\n  private init() {\n    const cap = this.capabilityList;\n    const { isWebGL2 } = this.rhi;\n    const requireExtension = this.rhi.requireExtension.bind(this.rhi);\n\n    const {\n      standardDerivatives,\n      shaderTextureLod,\n      elementIndexUint,\n      depthTexture,\n      vertexArrayObject,\n      instancedArrays,\n      multipleSample,\n      drawBuffers,\n\n      astc,\n      astc_webkit,\n      etc,\n      etc_webkit,\n      etc1,\n      etc1_webkit,\n      pvrtc,\n      pvrtc_webkit,\n      s3tc,\n      s3tc_webkit,\n\n      textureFloat,\n      textureHalfFloat,\n      textureFloatLinear,\n      textureHalfFloatLinear,\n      WEBGL_colorBufferFloat,\n      colorBufferFloat,\n      colorBufferHalfFloat,\n      textureFilterAnisotropic\n    } = GLCapabilityType;\n    cap.set(standardDerivatives, isWebGL2 || !!requireExtension(standardDerivatives));\n    cap.set(shaderTextureLod, isWebGL2 || !!requireExtension(shaderTextureLod));\n    cap.set(elementIndexUint, isWebGL2 || !!requireExtension(elementIndexUint));\n    cap.set(depthTexture, isWebGL2 || !!requireExtension(depthTexture));\n    cap.set(vertexArrayObject, isWebGL2 || !!requireExtension(vertexArrayObject));\n    cap.set(instancedArrays, isWebGL2 || !!requireExtension(instancedArrays));\n    cap.set(multipleSample, isWebGL2);\n    cap.set(drawBuffers, isWebGL2 || !!requireExtension(drawBuffers));\n    cap.set(textureFloat, isWebGL2 || !!requireExtension(textureFloat));\n    cap.set(textureHalfFloat, isWebGL2 || !!requireExtension(textureHalfFloat));\n    cap.set(textureFloatLinear, !!requireExtension(textureFloatLinear));\n    cap.set(textureHalfFloatLinear, isWebGL2 || !!requireExtension(textureHalfFloatLinear));\n    cap.set(\n      colorBufferFloat,\n      (isWebGL2 && !!requireExtension(colorBufferFloat)) || !!requireExtension(WEBGL_colorBufferFloat)\n    );\n    cap.set(\n      colorBufferHalfFloat,\n      (isWebGL2 && !!requireExtension(colorBufferFloat)) || !!requireExtension(colorBufferHalfFloat)\n    );\n    cap.set(textureFilterAnisotropic, !!requireExtension(textureFilterAnisotropic));\n\n    cap.set(astc, !!(requireExtension(astc) || requireExtension(astc_webkit)));\n    cap.set(etc, !!(requireExtension(etc) || requireExtension(etc_webkit)));\n    cap.set(etc1, !!(requireExtension(etc1) || requireExtension(etc1_webkit)));\n    cap.set(pvrtc, !!(requireExtension(pvrtc) || requireExtension(pvrtc_webkit)));\n    cap.set(s3tc, !!(requireExtension(s3tc) || requireExtension(s3tc_webkit)));\n  }\n\n  /**\n   * If there are extensions that can supplement this ability, smooth out the difference.\n   * @example\n   * compatible(GLCapabilityType.depthTexture,{\n   *    UNSIGNED_INT_24_8: \"UNSIGNED_INT_24_8_WEBGL\"\n   * })\n   * gl.UNSIGNED_INT_24_8 = ext.UNSIGNED_INT_24_8_WEBGL\n   */\n  private compatibleInterface(capabilityType: GLCapabilityType, flatItem: { [glKey: string]: extensionKey }) {\n    const rhi = this.rhi;\n    const gl = rhi.gl;\n    let ext = null;\n\n    if ((ext = rhi.requireExtension(capabilityType))) {\n      for (let glKey in flatItem) {\n        const extensionKey = flatItem[glKey];\n        const extensionVal = ext[extensionKey];\n\n        // Mini game hack the native function,use \u201C.bind\u201D to smooth out if is \u201CFuncion\u201D.\n        if (extensionVal?.bind) {\n          gl[glKey] = extensionVal.bind(ext);\n        } else {\n          gl[glKey] = extensionVal;\n        }\n      }\n    }\n  }\n\n  private compatibleAllInterface() {\n    const {\n      depthTexture,\n      vertexArrayObject,\n      instancedArrays,\n      drawBuffers,\n      textureFilterAnisotropic,\n      textureHalfFloat,\n      colorBufferHalfFloat,\n      WEBGL_colorBufferFloat\n    } = GLCapabilityType;\n    const { isWebGL2 } = this.rhi;\n\n    if (!isWebGL2) {\n      this.compatibleInterface(depthTexture, {\n        UNSIGNED_INT_24_8: \"UNSIGNED_INT_24_8_WEBGL\"\n      });\n      this.compatibleInterface(vertexArrayObject, {\n        createVertexArray: \"createVertexArrayOES\",\n        deleteVertexArray: \"deleteVertexArrayOES\",\n        isVertexArray: \"isVertexArrayOES\",\n        bindVertexArray: \"bindVertexArrayOES\"\n      });\n      this.compatibleInterface(instancedArrays, {\n        drawArraysInstanced: \"drawArraysInstancedANGLE\",\n        drawElementsInstanced: \"drawElementsInstancedANGLE\",\n        vertexAttribDivisor: \"vertexAttribDivisorANGLE\"\n      });\n      this.compatibleInterface(drawBuffers, {\n        MAX_DRAW_BUFFERS: \"MAX_DRAW_BUFFERS_WEBGL\"\n      });\n      const items = {};\n      if (this.canIUse(GLCapabilityType.drawBuffers)) {\n        const maxDrawBuffers = this.maxDrawBuffers;\n        for (let i = 0; i < maxDrawBuffers; i++) {\n          i != 0 && (items[`COLOR_ATTACHMENT${i}`] = `COLOR_ATTACHMENT${i}_WEBGL`);\n          items[`DRAW_BUFFER${i}`] = `DRAW_BUFFER${i}_WEBGL`;\n        }\n        this.compatibleInterface(drawBuffers, {\n          drawBuffers: \"drawBuffersWEBGL\",\n          ...items\n        });\n      }\n      this.compatibleInterface(textureHalfFloat, {\n        HAFL_FLOAT: \"HALF_FLOAT_OES\"\n      });\n      this.compatibleInterface(colorBufferHalfFloat, {\n        RGBA16F: \"RBGA16F_EXT\"\n      });\n      this.compatibleInterface(WEBGL_colorBufferFloat, {\n        RGBA32F: \"RBGA32F_EXT\"\n      });\n    }\n\n    this.compatibleInterface(textureFilterAnisotropic, {\n      TEXTURE_MAX_ANISOTROPY_EXT: \"TEXTURE_MAX_ANISOTROPY_EXT\"\n    });\n  }\n}\n", "import { WebGLRenderer } from \"./WebGLRenderer\";\nimport { GLCapabilityType } from \"@oasis-engine/core\";\n\n/**\n * GLContext extension.\n */\nexport class GLExtensions {\n  private rhi: WebGLRenderer;\n  private _requireResult;\n\n  constructor(rhi: WebGLRenderer) {\n    this.rhi = rhi;\n    this._requireResult = {};\n  }\n\n  /**\n   * Require an extension.\n   */\n  requireExtension(ext: GLCapabilityType) {\n    if (this._requireResult[ext] !== undefined) {\n      return this._requireResult[ext];\n    }\n\n    this._requireResult[ext] = this.rhi.gl.getExtension(ext);\n    return this._requireResult[ext];\n  }\n}\n", "import { GLCapabilityType, Logger, Primitive } from \"@oasis-engine/core\";\nimport { SubPrimitive } from \"@oasis-engine/core/types/graphic/SubPrimitive\";\nimport { IPlatformPrimitive } from \"@oasis-engine/design\";\nimport { WebGLExtension } from \"./type\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * Improvement of VAO:\n * 1) WebGL2.0 must support VAO, almost all devices support vao extensions in webgl1.0, we can use PollyFill,only keep VAO mode.\n * 2) VAO implementation now has bugs, change IndexBuffer\u3001VertexBuffer\u3001VertexElements need to update VAO.\n */\n\n/**\n * GL platform primtive.\n */\nexport class GLPrimitive implements IPlatformPrimitive {\n  protected readonly _primitive: Primitive;\n  protected attribLocArray: number[];\n  protected readonly canUseInstancedArrays: boolean;\n\n  private gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n  private vao: Map<number, WebGLVertexArrayObject> = new Map();\n  private readonly _useVao: boolean;\n\n  constructor(rhi: WebGLRenderer, primitive: Primitive) {\n    this._primitive = primitive;\n    this.canUseInstancedArrays = rhi.canIUse(GLCapabilityType.instancedArrays);\n    this._useVao = rhi.canIUse(GLCapabilityType.vertexArrayObject);\n    this.gl = rhi.gl;\n  }\n\n  /**\n   * Draw the primitive.\n   */\n  draw(shaderProgram: any, subPrimitive: SubPrimitive) {\n    const gl = this.gl;\n    const primitive = this._primitive;\n\n    if (this._useVao) {\n      if (!this.vao.has(shaderProgram.id)) {\n        this.registerVAO(shaderProgram);\n      }\n      const vao = this.vao.get(shaderProgram.id);\n      gl.bindVertexArray(vao);\n    } else {\n      this.bindBufferAndAttrib(shaderProgram);\n    }\n\n    const { indexBufferBinding, instanceCount, _glIndexType } = primitive;\n    const { topology, start, count } = subPrimitive;\n\n    if (!instanceCount) {\n      if (indexBufferBinding) {\n        if (this._useVao) {\n          gl.drawElements(topology, count, _glIndexType, start);\n        } else {\n          const { _nativeBuffer } = indexBufferBinding.buffer;\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _nativeBuffer);\n          gl.drawElements(topology, count, _glIndexType, start);\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        }\n      } else {\n        gl.drawArrays(topology, start, count);\n      }\n    } else {\n      if (this.canUseInstancedArrays) {\n        if (indexBufferBinding) {\n          if (this._useVao) {\n            gl.drawElementsInstanced(topology, count, _glIndexType, start, instanceCount);\n          } else {\n            const { _nativeBuffer } = indexBufferBinding.buffer;\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _nativeBuffer);\n            gl.drawElementsInstanced(topology, count, _glIndexType, start, instanceCount);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n          }\n        } else {\n          gl.drawArraysInstanced(topology, start, count, instanceCount);\n        }\n      } else {\n        Logger.error(\"ANGLE_instanced_arrays extension is not supported\");\n      }\n    }\n\n    // unbind\n    if (this._useVao) {\n      gl.bindVertexArray(null);\n    } else {\n      this.disableAttrib();\n    }\n  }\n\n  destroy() {\n    if (this._useVao) {\n      const gl = this.gl;\n      this.vao.forEach((vao) => {\n        gl.deleteVertexArray(vao);\n      });\n    }\n  }\n\n  /**\n   * Bind buffer and attribute.\n   */\n  protected bindBufferAndAttrib(shaderProgram: any) {\n    const gl = this.gl;\n    const primitive = this._primitive;\n    const vertexBufferBindings = primitive.vertexBufferBindings;\n\n    this.attribLocArray = [];\n    const attributeLocation = shaderProgram.attributeLocation;\n    const attributes = primitive._vertexElementMap;\n\n    let vbo: WebGLBuffer;\n    let lastBoundVbo: WebGLBuffer;\n\n    for (const name in attributeLocation) {\n      const loc = attributeLocation[name];\n      if (loc === -1) continue;\n\n      const element = attributes[name];\n      if (element) {\n        const { buffer, stride } = vertexBufferBindings[element.bindingIndex];\n        vbo = buffer._nativeBuffer;\n        // prevent binding the vbo which already bound at the last loop, e.g. a buffer with multiple attributes.\n        if (lastBoundVbo !== vbo) {\n          lastBoundVbo = vbo;\n          gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n        }\n\n        gl.enableVertexAttribArray(loc);\n        const { size, type } = element._glElementInfo;\n        gl.vertexAttribPointer(loc, size, type, element.normalized, stride, element.offset);\n        if (this.canUseInstancedArrays) {\n          gl.vertexAttribDivisor(loc, element.instanceDivisor);\n        }\n        this.attribLocArray.push(loc);\n      } else {\n        Logger.warn(\"vertex attribute not found: \" + name);\n      }\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  }\n\n  protected disableAttrib() {\n    const gl = this.gl;\n    for (let i = 0, l = this.attribLocArray.length; i < l; i++) {\n      gl.disableVertexAttribArray(this.attribLocArray[i]);\n    }\n  }\n\n  private registerVAO(shaderProgram: any): void {\n    const gl = this.gl;\n    const vao = gl.createVertexArray();\n\n    /** register VAO */\n    gl.bindVertexArray(vao);\n\n    const { indexBufferBinding } = this._primitive;\n    if (indexBufferBinding) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBufferBinding.buffer._nativeBuffer);\n    }\n    this.bindBufferAndAttrib(shaderProgram);\n\n    /** unbind */\n    gl.bindVertexArray(null);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    this.disableAttrib();\n\n    this.vao.set(shaderProgram.id, vao);\n  }\n}\n", "/**\n * @private\n */\nexport class GLRenderStates {\n  private _gl: WebGLRenderingContext;\n  private _parameters = {};\n  /**\n   * @param {WebGLRenderingContext} gl\n   */\n  constructor(gl: WebGLRenderingContext) {\n    this._gl = gl;\n    this._parameters = {}; // current gl state parameters\n\n    /** cache */\n    this._parameters[gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS] = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this._parameters[gl.MAX_VERTEX_UNIFORM_VECTORS] = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n    this._parameters[gl.MAX_VERTEX_ATTRIBS] = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    this._parameters[gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS] = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n\n    // init blend state same as BlendState default value.\n    gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\n    gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n    gl.colorMask(true, true, true, true);\n    gl.blendColor(0, 0, 0, 0);\n    gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\n    // init depth state same as DpethState default value.\n    gl.enable(gl.DEPTH_TEST);\n    gl.depthFunc(gl.LESS);\n    gl.depthMask(true);\n\n    // init stencil state same as StencilState default value.\n    gl.disable(gl.STENCIL_TEST);\n    gl.stencilFuncSeparate(gl.FRONT, gl.ALWAYS, 0, 0xff);\n    gl.stencilFuncSeparate(gl.BACK, gl.ALWAYS, 0, 0xff);\n    gl.stencilOpSeparate(gl.FRONT, gl.KEEP, gl.KEEP, gl.KEEP);\n    gl.stencilOpSeparate(gl.BACK, gl.KEEP, gl.KEEP, gl.KEEP);\n    gl.stencilMask(0xff);\n\n    // init raster state same as RasterState default value.\n    gl.enable(gl.CULL_FACE);\n    gl.cullFace(gl.BACK);\n    gl.disable(gl.POLYGON_OFFSET_FILL);\n    gl.polygonOffset(0, 0);\n  }\n\n  /**\n   * Get a parameter.\n   */\n  getParameter(pname) {\n    return this._parameters[pname];\n  }\n}\n", "import { Logger } from \"@oasis-engine/core\";\nimport { Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\n\n/**\n * @private\n */\nexport class GLSprite {\n  private gl: WebGLRenderingContext;\n  private _vbo: WebGLBuffer;\n  private _maxBatchCount: number;\n  private _vertBuffer;\n  private _vertCursor: number;\n  private _drawSpriteCount: number;\n  private _vertAttributes;\n  constructor(gl) {\n    this.gl = gl;\n\n    //-- vertex attributes\n    this._initVertexAttributes(gl);\n\n    this._vbo = gl.createBuffer();\n    this._maxBatchCount = 0;\n    this._vertBuffer = null;\n    this._vertCursor = 0;\n    this._drawSpriteCount = 0;\n  }\n\n  setMaxBatchCount(count) {\n    const requireSize = count * 6 * 9;\n    if (this._vertBuffer && this._vertBuffer.length >= requireSize) {\n      return;\n    }\n\n    this._maxBatchCount = count;\n    this._vertBuffer = new Float32Array(requireSize);\n  }\n\n  beginDraw(count) {\n    this._vertCursor = 0;\n    this._drawSpriteCount = 0;\n\n    // Dynamic resize\n    if (count > this._maxBatchCount) {\n      this.setMaxBatchCount(count);\n    }\n  }\n\n  drawSprite(positionQuad, uvRect, tintColor) {\n    this._drawSpriteCount++;\n    if (this._drawSpriteCount > this._maxBatchCount) {\n      Logger.warn(\"Sprite: sprite count overflow\");\n      return;\n    }\n\n    const color = tintColor;\n\n    const u = uvRect.u;\n    const v = uvRect.v;\n    const p = uvRect.u + uvRect.width;\n    const q = uvRect.v + uvRect.height;\n\n    this._pushVertex(positionQuad.leftTop, new Vector2(u, v), color);\n    this._pushVertex(positionQuad.leftBottom, new Vector2(u, q), color);\n    this._pushVertex(positionQuad.rightBottom, new Vector2(p, q), color);\n\n    this._pushVertex(positionQuad.rightBottom, new Vector2(p, q), color);\n    this._pushVertex(positionQuad.rightTop, new Vector2(p, v), color);\n    this._pushVertex(positionQuad.leftTop, new Vector2(u, v), color);\n  }\n\n  endDraw(shaderProgram) {\n    const vertCount = this._vertCursor / 9;\n    if (vertCount <= 0) return;\n\n    var gl = this.gl;\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._vbo);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertBuffer, gl.DYNAMIC_DRAW);\n\n    const attributeLocation = shaderProgram.attributeLocation;\n    for (const k in attributeLocation) {\n      const location = attributeLocation[k];\n      const attrib = this._vertAttributes[k];\n      gl.vertexAttribPointer(location, attrib.size, attrib.type, attrib.normalized, attrib.stride, attrib.offset);\n      gl.enableVertexAttribArray(location);\n    }\n\n    gl.drawArrays(gl.TRIANGLES, 0, vertCount);\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    // disable attributes\n    for (const k in attributeLocation) {\n      gl.disableVertexAttribArray(attributeLocation[k]);\n    }\n  }\n\n  _initVertexAttributes(gl) {\n    const vertexStride = (3 + 2 + 4) * 4;\n    const posAtt: any = {};\n    posAtt.name = \"a_pos\";\n    posAtt.size = 3;\n    posAtt.offset = 0;\n\n    const uvAtt: any = {};\n    uvAtt.name = \"a_uv\";\n    uvAtt.size = 2;\n    uvAtt.offset = 3 * 4;\n\n    const colorAtt: any = {};\n    colorAtt.name = \"a_color\";\n    colorAtt.size = 4;\n    colorAtt.offset = 5 * 4;\n\n    this._vertAttributes = { a_pos: posAtt, a_uv: uvAtt, a_color: colorAtt };\n    for (const k in this._vertAttributes) {\n      const att = this._vertAttributes[k];\n      att.type = gl.FLOAT;\n      att.normalized = false;\n      att.stride = vertexStride;\n    }\n  }\n\n  _pushVertex(pos: Vector3, uv: Vector2, color: Vector4) {\n    const vb = this._vertBuffer;\n    const id = this._vertCursor;\n\n    //-- pos\n    vb[id] = pos.x;\n    vb[id + 1] = pos.y;\n    vb[id + 2] = pos.z;\n\n    //-- uv\n    vb[id + 3] = uv.x;\n    vb[id + 4] = uv.y;\n\n    //-- color\n    vb[id + 5] = color.x;\n    vb[id + 6] = color.y;\n    vb[id + 7] = color.z;\n    vb[id + 8] = color.w;\n\n    //--\n    this._vertCursor += 9;\n  }\n\n  finalize() {\n    if (this._vbo) {\n      this.gl.deleteBuffer(this._vbo);\n      this._vbo = null;\n    }\n  }\n}\n", "\"use strict\";\n\nimport { Shader } from \"@oasis-engine/core\";\n\nconst spriteVertShader = `\nprecision highp float;\n\nuniform mat4 matProjection;\nuniform mat4 matView;\n\nattribute vec3 a_pos;\nattribute vec2 a_uv;\nattribute vec4 a_color;\n\nvarying vec2 v_uv;\nvarying vec4 v_color;\n\nvoid main()\n{\n  gl_Position = matProjection * matView * vec4(a_pos,1.0);\n  v_uv = a_uv;\n  v_color = a_color;\n}\n`;\n\nconst spriteFragmentShader = `\nprecision mediump float;\nprecision mediump int;\n\nuniform sampler2D s_diffuse;\nvarying vec2 v_uv;\nvarying vec4 v_color;\n\nvoid main()\n{\n  // Only use the Alpha of the texture as a mask, so that the tint color can still be controlled to fade out.\n  vec4 baseColor = texture2D(s_diffuse, v_uv);\n  gl_FragColor = baseColor * v_color;\n}\n`;\n\nShader.create(\"Sprite\", spriteVertShader, spriteFragmentShader);\n", "import { Camera, Engine, Logger, Material, RenderQueue } from \"@oasis-engine/core\";\nimport { GLSprite } from \"./GLSprite\";\nimport \"./GLSpriteMaterial\";\n\n/**\n * @private\n */\nexport class GLSpriteBatcher {\n  private _gl: WebGLRenderingContext;\n  private _batchedQueue;\n  private _targetTexture;\n  private _glSprite: GLSprite;\n  private _camera;\n\n  constructor(rhi) {\n    this._gl = rhi.gl;\n\n    this._batchedQueue = [];\n    this._targetTexture = null;\n\n    this._glSprite = new GLSprite(rhi.gl);\n\n    this._camera = null;\n  }\n\n  flush(engine: Engine, material: Material) {\n    if (this._batchedQueue.length === 0) {\n      return;\n    }\n\n    if (!this._targetTexture) {\n      Logger.error(\"No texture!\");\n      return;\n    }\n\n    const materialData = material.shaderData;\n    materialData.setTexture(\"s_diffuse\", this._targetTexture);\n    materialData.setMatrix(\"matView\", this._camera.viewMatrix);\n    materialData.setMatrix(\"matProjection\", this._camera.projectionMatrix);\n\n    //@ts-ignore\n    const compileMacros = RenderQueue.compileMacros;\n    compileMacros.clear();\n\n    //@ts-ignore\n    const program = material.shader._getShaderProgram(engine, compileMacros);\n    if (!program.isValid) {\n      return;\n    }\n\n    program.bind();\n    program.groupingOtherUniformBlock();\n    program.uploadAll(program.materialUniformBlock, materialData);\n\n    //@ts-ignore\n    material.renderState._apply(engine);\n\n    this._glSprite.beginDraw(this._batchedQueue.length);\n    for (let i = 0, len = this._batchedQueue.length; i < len; i++) {\n      const positionQuad = this._batchedQueue[i].positionQuad;\n      const uvRect = this._batchedQueue[i].uvRect;\n      const tintColor = this._batchedQueue[i].tintColor;\n      this._glSprite.drawSprite(positionQuad, uvRect, tintColor);\n    }\n    this._glSprite.endDraw(program);\n\n    this._batchedQueue = [];\n    this._targetTexture = null;\n    this._camera = null;\n  }\n\n  canBatch(texture, renderMode, camera: Camera) {\n    if (this._targetTexture === null) {\n      return true;\n    }\n    return texture === this._targetTexture && camera === this._camera;\n  }\n\n  drawSprite(material: Material, positionQuad, uvRect, tintColor, texture, renderMode, camera: Camera) {\n    if (!this.canBatch(texture, renderMode, camera)) {\n      this.flush(camera.engine, material);\n    }\n\n    this._targetTexture = texture;\n    this._camera = camera;\n    this._batchedQueue.push({ positionQuad, uvRect, tintColor });\n  }\n\n  finalize() {\n    this._glSprite.finalize();\n  }\n}\n", "import {\n  Camera,\n  Canvas,\n  ClearMode,\n  ColorWriteMask,\n  Engine,\n  GLCapabilityType,\n  HardwareRenderer,\n  Logger,\n  Material,\n  Primitive,\n  RenderTarget,\n  SubPrimitive,\n  TextureCubeFace\n} from \"@oasis-engine/core\";\nimport { IPlatformPrimitive } from \"@oasis-engine/design\";\nimport { Vector4 } from \"@oasis-engine/math\";\nimport { GLCapability } from \"./GLCapability\";\nimport { GLExtensions } from \"./GLExtensions\";\nimport { GLPrimitive } from \"./GLPrimitive\";\nimport { GLRenderStates } from \"./GLRenderStates\";\nimport { GLSpriteBatcher } from \"./GLSpriteBatcher\";\nimport { WebGLExtension } from \"./type\";\nimport { WebCanvas } from \"./WebCanvas\";\n\n/**\n * WebGL mode.\n */\nexport enum WebGLMode {\n  /** Auto, use WebGL2.0 if support, or will fallback to WebGL1.0. */\n  Auto = 0,\n  /** WebGL2.0. */\n  WebGL2 = 1,\n  /** WebGL1.0, */\n  WebGL1 = 2\n}\n\n/**\n * WebGL renderer options.\n */\nexport interface WebGLRendererOptions extends WebGLContextAttributes {\n  /** WebGL mode.*/\n  webGLMode?: WebGLMode;\n}\n\n/**\n * WebGL renderer, including WebGL1.0 and WebGL2.0.\n */\nexport class WebGLRenderer implements HardwareRenderer {\n  _currentBind: any;\n\n  private _options: WebGLRendererOptions;\n  private _gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n  private _renderStates;\n  private _extensions;\n  private _spriteBatcher;\n  private _capability: GLCapability;\n  private _isWebGL2: boolean;\n\n  private _activedTextureID: number;\n  private _activeTextures: WebGLTexture[] = new Array(32);\n\n  get isWebGL2() {\n    return this._isWebGL2;\n  }\n\n  constructor(options: WebGLRendererOptions = {}) {\n    this._options = options;\n  }\n\n  init(canvas: Canvas) {\n    const option = this._options;\n    const webCanvas = (canvas as WebCanvas)._webCanvas;\n    const webGLMode = option.webGLMode || WebGLMode.Auto;\n    let gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n\n    if (webGLMode == WebGLMode.Auto || webGLMode == WebGLMode.WebGL2) {\n      gl = webCanvas.getContext(\"webgl2\", option);\n      if (!gl && webCanvas instanceof HTMLCanvasElement) {\n        gl = <WebGL2RenderingContext>webCanvas.getContext(\"experimental-webgl2\", option);\n      }\n      this._isWebGL2 = true;\n    }\n\n    if (!gl) {\n      if (webGLMode == WebGLMode.Auto || webGLMode == WebGLMode.WebGL1) {\n        gl = <WebGLRenderingContext & WebGLExtension>webCanvas.getContext(\"webgl\", option);\n        if (!gl && webCanvas instanceof HTMLCanvasElement) {\n          gl = <WebGLRenderingContext & WebGLExtension>webCanvas.getContext(\"experimental-webgl\", option);\n        }\n        this._isWebGL2 = false;\n      }\n    }\n\n    if (!gl) {\n      throw new Error(\"Get GL Context FAILED.\");\n    }\n\n    this._gl = gl;\n    this._renderStates = new GLRenderStates(gl);\n    this._extensions = new GLExtensions(this);\n    this._capability = new GLCapability(this);\n\n    this._options = null;\n  }\n\n  createPlatformPrimitive(primitive: Primitive): IPlatformPrimitive {\n    return new GLPrimitive(this, primitive);\n  }\n\n  get gl() {\n    return this._gl;\n  }\n\n  get renderStates(): GLRenderStates {\n    return this._renderStates;\n  }\n\n  get capability(): GLCapability {\n    return this._capability;\n  }\n\n  requireExtension(ext) {\n    return this._extensions.requireExtension(ext);\n  }\n\n  canIUse(capabilityType: GLCapabilityType) {\n    return this.capability.canIUse(capabilityType);\n  }\n\n  canIUseCompressedTextureInternalFormat(type: number) {\n    return this.capability.canIUseCompressedTextureInternalFormat(type);\n  }\n\n  public get canIUseMoreJoints() {\n    return this.capability.canIUseMoreJoints;\n  }\n\n  viewport(x, y, width, height) {\n    // gl.enable(gl.SCISSOR_TEST);\n    // gl.scissor(x, transformY, width, height);\n    const gl = this._gl;\n    gl.viewport(x, gl.drawingBufferHeight - y - height, width, height);\n  }\n\n  colorMask(r, g, b, a) {\n    this._gl.colorMask(r, g, b, a);\n  }\n\n  clearRenderTarget(engine: Engine, clearMode: ClearMode, clearParam: Vector4) {\n    const gl = this._gl;\n    const lastRenderState = engine._lastRenderState;\n    const {\n      blendState: {\n        targetBlendState: { colorWriteMask }\n      },\n      depthState: { writeEnabled: depthWriteEnabled },\n      stencilState: { writeMask: stencilWriteMask }\n    } = lastRenderState;\n\n    let clearColor = false;\n    let clearDepth = false;\n    let clearStencil = false;\n\n    switch (clearMode) {\n      case ClearMode.SOLID_COLOR:\n        gl.clearColor(clearParam.x, clearParam.y, clearParam.z, clearParam.w);\n        clearColor = clearDepth = true;\n        break;\n      case ClearMode.DEPTH_ONLY:\n        clearDepth = true;\n        break;\n      case ClearMode.COLOR_ONLY:\n        gl.clearColor(clearParam.x, clearParam.y, clearParam.z, clearParam.w);\n        clearColor = true;\n        break;\n      case ClearMode.STENCIL_ONLY:\n        gl.clear(gl.STENCIL_BUFFER_BIT);\n        clearStencil = true;\n        break;\n      case ClearMode.ALL_CLEAR:\n        gl.clearColor(clearParam.x, clearParam.y, clearParam.z, clearParam.w);\n        clearColor = clearDepth = clearStencil = true;\n        break;\n    }\n\n    if (clearColor && colorWriteMask !== ColorWriteMask.All) {\n      gl.colorMask(true, true, true, true);\n      lastRenderState.blendState.targetBlendState.colorWriteMask = ColorWriteMask.All;\n    }\n\n    if (clearDepth && depthWriteEnabled !== true) {\n      gl.depthMask(true);\n      lastRenderState.depthState.writeEnabled = true;\n    }\n\n    if (clearStencil && stencilWriteMask !== 0xff) {\n      gl.stencilMask(0xff);\n      lastRenderState.stencilState.writeMask = 0xff;\n    }\n\n    gl.clear(\n      (clearColor ? gl.COLOR_BUFFER_BIT : 0) |\n        (clearDepth ? gl.DEPTH_BUFFER_BIT : 0) |\n        (clearStencil ? gl.STENCIL_BUFFER_BIT : 0)\n    );\n  }\n\n  drawPrimitive(primitive: Primitive, subPrimitive: SubPrimitive, shaderProgram: any) {\n    // todo: VAO not support morph animation\n    if (primitive) {\n      //@ts-ignore\n      primitive._draw(shaderProgram, subPrimitive);\n    } else {\n      Logger.error(\"draw primitive failed.\");\n    }\n  }\n\n  drawSprite(material, positionQuad, uvRect, tintColor, texture, renderMode, camera: Camera) {\n    if (!this._spriteBatcher) {\n      this._spriteBatcher = new GLSpriteBatcher(this);\n    }\n\n    this._spriteBatcher.drawSprite(material, positionQuad, uvRect, tintColor, texture, renderMode, camera);\n  }\n\n  flushSprite(engine: Engine, material: Material) {\n    if (this._spriteBatcher) {\n      this._spriteBatcher.flush(engine, material);\n    }\n  }\n\n  activeRenderTarget(renderTarget: RenderTarget, camera: Camera) {\n    const gl = this._gl;\n    if (renderTarget) {\n      renderTarget._activeRenderTarget();\n      const { width, height } = renderTarget;\n      gl.viewport(0.0, 0.0, width, height);\n    } else {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      const viewport = camera.viewport;\n      const width = gl.drawingBufferWidth;\n      const height = gl.drawingBufferHeight;\n      this.viewport(viewport.x * width, viewport.y * height, viewport.z * width, viewport.w * height);\n    }\n  }\n\n  blitRenderTarget(renderTarget: RenderTarget) {\n    if (renderTarget) {\n      if (renderTarget._MSAAFrameBuffer) {\n        renderTarget._blitRenderTarget();\n        return;\n      }\n    }\n  }\n\n  setRenderTargetFace(renderTarget: RenderTarget, cubeFace: TextureCubeFace) {\n    if (renderTarget) {\n      renderTarget._setRenderTargetFace(cubeFace);\n    }\n  }\n\n  destroy() {}\n\n  activeTexture(textureID: number): void {\n    if (this._activedTextureID !== textureID) {\n      this._gl.activeTexture(textureID);\n      this._activedTextureID = textureID;\n    }\n  }\n\n  bindTexture(target: number, texture: WebGLTexture): void {\n    const gl = this._gl;\n    if (this._activeTextures[this._activedTextureID - gl.TEXTURE0] !== texture) {\n      gl.bindTexture(target, texture);\n      this._activeTextures[this._activedTextureID - gl.TEXTURE0] = texture;\n    }\n  }\n}\n", "import { Engine } from \"@oasis-engine/core\";\nimport { WebCanvas } from \"./WebCanvas\";\nimport { WebGLRenderer, WebGLRendererOptions } from \"./WebGLRenderer\";\n\n/**\n * WebGL platform engine,support includes WebGL1.0 and WebGL2.0.\n */\nexport class WebGLEngine extends Engine {\n  /**\n   * Create an engine suitable for the WebGL platform.\n   * @param canvas - Native web canvas\n   * @param webGLRendererOptions - WebGL renderer options\n   */\n  constructor(canvas: string | HTMLCanvasElement | OffscreenCanvas, webGLRendererOptions?: WebGLRendererOptions) {\n    const webCanvas = new WebCanvas(\n      <HTMLCanvasElement | OffscreenCanvas>(typeof canvas === \"string\" ? document.getElementById(canvas) : canvas)\n    );\n    const hardwareRenderer = new WebGLRenderer(webGLRendererOptions);\n\n    super(webCanvas, hardwareRenderer);\n  }\n\n  /**\n   * Web canvas.\n   */\n  get canvas(): WebCanvas {\n    return this._canvas as WebCanvas;\n  }\n}\n", "export * from \"@oasis-engine/core\";\nexport * from \"@oasis-engine/loader\";\nexport * from \"@oasis-engine/math\";\nexport * from \"@oasis-engine/rhi-webgl\";\nimport {\n  BoxCollider,\n  SphereCollider,\n  AmbientLight,\n  Camera,\n  Component,\n  DirectLight,\n  EnvironmentMapLight,\n  GeometryRenderer,\n  ParticleRenderer,\n  PointLight,\n  SkyBox,\n  SpriteRenderer,\n  Model\n} from \"@oasis-engine/core\";\nimport { Parser, GLTFModel } from \"@oasis-engine/loader\";\n\nParser.registerComponents(\"o3\", {\n  GLTFModel,\n  SpriteRenderer,\n  PointLight,\n  AmbientLight,\n  DirectLight,\n  EnvironmentMapLight,\n  ParticleRenderer,\n  SkyBox,\n  BoxCollider,\n  GeometryRenderer,\n  Camera,\n  Component,\n  SphereCollider,\n  Model\n});\n\n//@ts-ignore\nexport const version = `__buildVersion`;\n\nconsole.log(`oasis engine version: ${version}`);\n"],
  "mappings": ";IAGY;UAAA,kBAAA;AAAA,mBAAA,iBAAA,cAAA,KAAA;AAAA,mBAAA,iBAAA,cAAA,KAAA;AAAA,mBAAA,iBAAA,gBAAA,KAAA;GAAA,mBAAA,mBAAA;ICAA;UAAA,wBAAA;AAAA,yBAAA,uBAAA,UAAA,KAAA;AAAA,yBAAA,uBAAA,WAAA,KAAA;AAAA,yBAAA,uBAAA,kBAAA,KAAA;GAAA,yBAAA,yBAAA;ICAC,WAAb,WAAA;AAAA,uBAAA;;AAAA,YAeS,QAAP,eAAa,GAAW,KAAa,KAAqB;AACxD,WAAO,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK;;AAhBvC,YA0BS,SAAP,gBAAc,GAAW,GAAoB;AAC3C,WAAO,KAAK,IAAI,IAAI,MAAM,UAAS;;AA3BvC,YAmCS,aAAP,oBAAkB,GAAoB;AACpC,WAAQ,KAAK,IAAI,OAAQ;;AApC7B,YA4CS,iBAAP,wBAAsB,GAAmB;AACvC,WAAO,IAAI,UAAS;;AA7CxB,YAqDS,iBAAP,wBAAsB,GAAmB;AACvC,WAAO,IAAI,UAAS;;AAtDxB,SAAA;;AAAa,SAEK,gBAAwB;AAF7B,SAIK,oBAA4B,MAAM,KAAK;AAJ5C,SAMK,oBAA4B,KAAK,KAAK;ICA3C,UAAb,WAAA;AAAA,WAcS,MAAP,aAAW,MAAe,OAAgB,KAAoB;AAC5D,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;;AAjB3B,WA0BS,WAAP,kBAAgB,MAAe,OAAgB,KAAoB;AACjE,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;;AA7B3B,WAsCS,WAAP,kBAAgB,MAAe,OAAgB,KAAoB;AACjE,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;;AAzC3B,WAkDS,SAAP,gBAAc,MAAe,OAAgB,KAAoB;AAC/D,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;;AArD3B,WA8DS,MAAP,aAAW,MAAe,OAAwB;AAChD,WAAO,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM;;AA/DhE,WAwES,QAAP,eAAa,MAAe,OAAgB,KAAoB;AAC9D,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,MAAM;AACjB,QAAM,KAAK,MAAM;AACjB,QAAM,KAAK,MAAM;AAEjB,QAAI,IAAI,KAAK,KAAK,KAAK;AACvB,QAAI,IAAI,KAAK,KAAK,KAAK;AACvB,QAAI,IAAI,KAAK,KAAK,KAAK;;AAlF3B,WA2FS,WAAP,kBAAgB,GAAY,GAAoB;AAC9C,QAAM,IAAI,EAAE,IAAI,EAAE;AAClB,QAAM,IAAI,EAAE,IAAI,EAAE;AAClB,QAAM,IAAI,EAAE,IAAI,EAAE;AAClB,WAAO,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI;;AA/FzC,WAwGS,kBAAP,yBAAuB,GAAY,GAAoB;AACrD,QAAM,IAAI,EAAE,IAAI,EAAE;AAClB,QAAM,IAAI,EAAE,IAAI,EAAE;AAClB,QAAM,IAAI,EAAE,IAAI,EAAE;AAClB,WAAO,IAAI,IAAI,IAAI,IAAI,IAAI;;AA5G/B,WAqHS,SAAP,gBAAc,MAAe,OAAyB;AACpD,WAAO,SAAS,OAAO,KAAK,GAAG,MAAM,MAAM,SAAS,OAAO,KAAK,GAAG,MAAM,MAAM,SAAS,OAAO,KAAK,GAAG,MAAM;;AAtHjH,WAgIS,OAAP,cAAY,OAAgB,KAAc,GAAW,KAAoB;AAAA,QAC/D,IAAY,MAAZ,GAAG,IAAS,MAAT,GAAG,IAAM,MAAN;AACd,QAAI,IAAI,IAAK,KAAI,IAAI,KAAK;AAC1B,QAAI,IAAI,IAAK,KAAI,IAAI,KAAK;AAC1B,QAAI,IAAI,IAAK,KAAI,IAAI,KAAK;;AApI9B,WA6IS,MAAP,aAAW,MAAe,OAAgB,KAAoB;AAC5D,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;AAC/B,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;AAC/B,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;;AAhJnC,WAyJS,MAAP,aAAW,MAAe,OAAgB,KAAoB;AAC5D,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;AAC/B,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;AAC/B,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;;AA5JnC,WAoKS,SAAP,gBAAc,GAAY,KAAoB;AAC5C,QAAI,IAAI,CAAC,EAAE;AACX,QAAI,IAAI,CAAC,EAAE;AACX,QAAI,IAAI,CAAC,EAAE;;AAvKf,WA+KS,YAAP,mBAAiB,GAAY,KAAoB;AAAA,QACvC,IAAY,EAAZ,GAAG,IAAS,EAAT,GAAG,IAAM,EAAN;AACd,QAAI,MAAc,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI;AAChD,QAAI,MAAM,GAAG;AAEX,YAAM,IAAI;AACV,UAAI,IAAI,IAAI;AACZ,UAAI,IAAI,IAAI;AACZ,UAAI,IAAI,IAAI;;;AAvLlB,WAiMS,QAAP,eAAa,GAAY,GAAW,KAAoB;AACtD,QAAI,IAAI,EAAE,IAAI;AACd,QAAI,IAAI,EAAE,IAAI;AACd,QAAI,IAAI,EAAE,IAAI;;AApMlB,WAmNS,kBAAP,yBAAuB,GAAY,GAAW,KAAoB;AAAA,QACxD,IAAY,EAAZ,GAAG,IAAS,EAAT,GAAG,IAAM,EAAN;AACd,QAAM,IAAI,EAAE;AACZ,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AACpC,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AACpC,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;;AAxNxC,WAiOS,kBAAP,yBAAuB,GAAY,GAAW,KAAoB;AAAA,QACxD,IAAY,EAAZ,GAAG,IAAS,EAAT,GAAG,IAAM,EAAN;AACd,QAAM,IAAI,EAAE;AAEZ,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,EAAE;AAC3C,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,EAAE;AAC3C,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM,EAAE;;AAvOhD,WAgPS,kBAAP,yBAAuB,GAAY,GAAW,KAAoB;AAAA,QACxD,IAAY,EAAZ,GAAG,IAAS,EAAT,GAAG,IAAM,EAAN;AACd,QAAM,IAAI,EAAE;AAEZ,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,EAAE;AAC3C,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,EAAE;AAC3C,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM,EAAE;AAC5C,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM,EAAE;;AAvPhD,WAuQS,sBAAP,6BAA2B,GAAY,GAAW,KAAoB;AAAA,QAC5D,IAAY,EAAZ,GAAG,IAAS,EAAT,GAAG,IAAM,EAAN;AACd,QAAM,IAAI,EAAE;AACZ,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM,EAAE;AAC5C,QAAI,IAAM;AAEV,QAAI,IAAK,KAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,EAAE,OAAO;AACnD,QAAI,IAAK,KAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,EAAE,OAAO;AACnD,QAAI,IAAK,KAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM,EAAE,OAAO;;AA/QxD,WAwRS,kBAAP,yBAAuB,GAAY,YAAwB,KAAoB;AAAA,QACrE,IAAY,EAAZ,GAAG,IAAS,EAAT,GAAG,IAAM,EAAN;AAD+D,QAElE,KAA4B,WAA/B,GAAU,KAAqB,WAAxB,GAAU,KAAc,WAAjB,GAAU,KAAO,WAAV;AAG7B,QAAM,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAClC,QAAM,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAClC,QAAM,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAClC,QAAM,KAAK,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK;AAGnC,QAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC3C,QAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC3C,QAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;;AAgB7C,oBAAY,GAAe,GAAe,GAAe;AAAA,QAA7C,MAA6C,QAAA;AAA7C,UAAY;;AAAiC,QAA9B,MAA8B,QAAA;AAA9B,UAAY;;AAAkB,QAAf,MAAe,QAAA;AAAf,UAAY;;AAAG,SAZzD,IAYyD;AAAA,SAVzD,IAUyD;AAAA,SARzD,IAQyD;AACvD,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;;AAxTb,MAAA,SAAA,SAAA;AAAA,SAkUE,WAAA,kBAAS,GAAW,GAAW,GAAoB;AACjD,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AACT,WAAO;;AAtUX,SA+UE,kBAAA,yBAAgB,OAA0B,QAA6B;AAAA,QAA7B,WAA6B,QAAA;AAA7B,eAAiB;;AACzD,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM,SAAS;AACxB,SAAK,IAAI,MAAM,SAAS;AACxB,WAAO;;AAnVX,SA2VE,MAAA,aAAI,OAAyB;AAC3B,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,WAAO;;AA/VX,SAuWE,WAAA,kBAAS,OAAyB;AAChC,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,WAAO;;AA3WX,SAmXE,WAAA,kBAAS,OAAyB;AAChC,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,WAAO;;AAvXX,SA+XE,SAAA,gBAAO,OAAyB;AAC9B,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,WAAO;;AAnYX,SA0YE,SAAA,kBAAiB;AAAA,QACP,IAAY,KAAZ,GAAG,IAAS,KAAT,GAAG,IAAM,KAAN;AACd,WAAO,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI;;AA5YzC,SAmZE,gBAAA,yBAAwB;AAAA,QACd,IAAY,KAAZ,GAAG,IAAS,KAAT,GAAG,IAAM,KAAN;AACd,WAAO,IAAI,IAAI,IAAI,IAAI,IAAI;;AArZ/B,SA4ZE,SAAA,kBAAkB;AAChB,SAAK,IAAI,CAAC,KAAK;AACf,SAAK,IAAI,CAAC,KAAK;AACf,SAAK,IAAI,CAAC,KAAK;AACf,WAAO;;AAhaX,SAuaE,YAAA,qBAAqB;AACnB,aAAQ,UAAU,MAAM;AACxB,WAAO;;AAzaX,SAibE,QAAA,eAAM,GAAoB;AACxB,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AACV,WAAO;;AArbX,SA6bE,UAAA,iBAAQ,KAA6C,WAAuB;AAAA,QAAvB,cAAuB,QAAA;AAAvB,kBAAoB;;AACvE,QAAI,aAAa,KAAK;AACtB,QAAI,YAAY,KAAK,KAAK;AAC1B,QAAI,YAAY,KAAK,KAAK;;AAhc9B,SAucE,QAAA,kBAAiB;AACf,WAAO,IAAI,SAAQ,KAAK,GAAG,KAAK,GAAG,KAAK;;AAxc5C,SAgdE,UAAA,iBAAQ,KAAuB;AAC7B,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK;AACb,WAAO;;AApdX,SAkeE,kBAAA,yBAAgB,GAAoB;AAClC,aAAQ,gBAAgB,MAAM,GAAG;AACjC,WAAO;;AApeX,SA4eE,kBAAA,yBAAgB,GAAoB;AAClC,aAAQ,gBAAgB,MAAM,GAAG;AACjC,WAAO;;AA9eX,SA4fE,sBAAA,6BAAoB,GAAoB;AACtC,aAAQ,oBAAoB,MAAM,GAAG;AACrC,WAAO;;AA9fX,SAsgBE,kBAAA,yBAAgB,YAAiC;AAC/C,aAAQ,gBAAgB,MAAM,YAAY;AAC1C,WAAO;;AAxgBX,SAAA;;AAAa,QAEK,QAAQ,IAAI,QAAQ,GAAK,GAAK;AAFnC,QAIK,OAAO,IAAI,QAAQ,GAAK,GAAK;AAJlC,QAMK,eAAe,IAAI;ICRxB,iBAAb,WAAA;AAAA,kBAQS,aAAP,oBAAkB,QAAmB,KAA2B;AAC9D,QAAI,CAAC,UAAU,OAAO,WAAW,GAAG;AAClC,YAAM,IAAI,MAAM;;AAGlB,QAAM,MAAM,OAAO;AACnB,QAAM,SAAS,gBAAe;AAC9B,WAAO,IAAI,OAAO,IAAI,OAAO,IAAI;AAGjC,aAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC5B,cAAQ,IAAI,OAAO,IAAI,QAAQ;;AAIjC,YAAQ,MAAM,QAAQ,IAAI,KAAK,IAAI;AAGnC,QAAI,SAAS;AACb,aAAS,KAAI,GAAG,KAAI,KAAK,EAAE,IAAG;AAC5B,UAAM,WAAW,QAAQ,gBAAgB,QAAQ,OAAO;AACxD,iBAAW,UAAW,UAAS;;AAGjC,QAAI,SAAS,KAAK,KAAK;;AAhC3B,kBAwCS,UAAP,iBAAe,KAAkB,KAA2B;AAAA,QAClD,SAAW,IAAX;AADkD,QAElD,MAAa,IAAb,KAAK,MAAQ,IAAR;AAEb,WAAO,IAAK,KAAI,IAAI,IAAI,KAAK;AAC7B,WAAO,IAAK,KAAI,IAAI,IAAI,KAAK;AAC7B,WAAO,IAAK,KAAI,IAAI,IAAI,KAAK;AAC7B,QAAI,SAAS,QAAQ,SAAS,QAAQ;;AAaxC,2BAAY,QAAwB,QAAoB;AAAA,QAA5C,WAA4C,QAAA;AAA5C,eAAkB;;AAA0B,QAApB,WAAoB,QAAA;AAApB,eAAiB;;AAAG,SATxC,SAAkB,IAAI;AASkB,SAPjD,SAAiB;AAQtB,cAAU,OAAO,QAAQ,KAAK;AAC9B,SAAK,SAAS;;AA9DlB,MAAA,SAAA,gBAAA;AAAA,SAqEE,QAAA,kBAAwB;AACtB,WAAO,IAAI,gBAAe,KAAK,QAAQ,KAAK;;AAtEhD,SA8EE,UAAA,iBAAQ,KAAqC;AAC3C,SAAK,OAAO,QAAQ,IAAI;AACxB,QAAI,SAAS,KAAK;AAClB,WAAO;;AAjFX,SAAA;;AAAa,eACI,aAAsB,IAAI;ICA9B,cAAb,WAAA;AAAA,eAUS,sBAAP,6BAA2B,QAAiB,QAAiB,KAAwB;AACnF,YAAQ,SAAS,QAAQ,QAAQ,IAAI;AACrC,YAAQ,IAAI,QAAQ,QAAQ,IAAI;;AAZpC,eAoBS,aAAP,oBAAkB,QAAmB,KAAwB;AAC3D,QAAI,CAAC,UAAU,OAAO,WAAW,GAAG;AAClC,YAAM,IAAI,MAAM;;AAFyC,QAKnD,MAAa,IAAb,KAAK,MAAQ,IAAR;AACb,QAAI,IAAI,IAAI,IAAI,IAAI,IAAI,OAAO;AAC/B,QAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO;AAEhC,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAI,GAAG,EAAE,GAAG;AAC7C,UAAM,QAAQ,OAAO;AACrB,cAAQ,IAAI,KAAK,OAAO;AACxB,cAAQ,IAAI,KAAK,OAAO;;;AAhC9B,eAyCS,aAAP,oBAAkB,QAAwB,KAAwB;AAAA,QACxD,SAAmB,OAAnB,QAAQ,SAAW,OAAX;AADgD,QAExD,MAAa,IAAb,KAAK,MAAQ,IAAR;AAEb,QAAI,IAAI,OAAO,IAAI;AACnB,QAAI,IAAI,OAAO,IAAI;AACnB,QAAI,IAAI,OAAO,IAAI;AACnB,QAAI,IAAI,OAAO,IAAI;AACnB,QAAI,IAAI,OAAO,IAAI;AACnB,QAAI,IAAI,OAAO,IAAI;;AAlDvB,eA2DS,YAAP,mBAAiB,QAAqB,QAAgB,KAAwB;AAE5E,QAAM,SAAS,aAAY;AAC3B,QAAM,SAAS,aAAY;AAC3B,WAAO,UAAU;AACjB,WAAO,UAAU;AACjB,YAAQ,oBAAoB,QAAQ,QAAQ;AANgC,QAQpE,IAAY,OAAZ,GAAG,IAAS,OAAT,GAAG,IAAM,OAAN;AACd,QAAM,IAAI,OAAO;AACjB,WAAO,IAAI,KAAK,IAAI,IAAI,EAAE,MAAM,KAAK,IAAI,IAAI,EAAE,MAAM,KAAK,IAAI,IAAI,EAAE;AACpE,WAAO,IAAI,KAAK,IAAI,IAAI,EAAE,MAAM,KAAK,IAAI,IAAI,EAAE,MAAM,KAAK,IAAI,IAAI,EAAE;AACpE,WAAO,IAAI,KAAK,IAAI,IAAI,EAAE,MAAM,KAAK,IAAI,IAAI,EAAE,MAAM,KAAK,IAAI,IAAI,EAAE;AAGpE,YAAQ,SAAS,QAAQ,QAAQ,IAAI;AACrC,YAAQ,IAAI,QAAQ,QAAQ,IAAI;;AA3EpC,eAqFS,QAAP,eAAa,MAAmB,MAAmB,KAA+B;AAChF,YAAQ,IAAI,KAAK,KAAK,KAAK,KAAK,IAAI;AACpC,YAAQ,IAAI,KAAK,KAAK,KAAK,KAAK,IAAI;AACpC,WAAO;;AAaT,wBAAY,KAAqB,KAAqB;AAAA,QAA1C,QAA0C,QAAA;AAA1C,YAAe;;AAA2B,QAArB,QAAqB,QAAA;AAArB,YAAe;;AAAM,SATtC,MAAe,IAAI;AASmB,SAPtC,MAAe,IAAI;AAQjC,WAAO,IAAI,QAAQ,KAAK;AACxB,WAAO,IAAI,QAAQ,KAAK;;AAvG5B,MAAA,SAAA,aAAA;AAAA,SA8GE,QAAA,kBAAqB;AACnB,WAAO,IAAI,aAAY,KAAK,KAAK,KAAK;;AA/G1C,SAuHE,UAAA,iBAAQ,KAA+B;AACrC,SAAK,IAAI,QAAQ,IAAI;AACrB,SAAK,IAAI,QAAQ,IAAI;AACrB,WAAO;;AA1HX,SAkIE,YAAA,mBAAU,KAAuB;AAC/B,YAAQ,IAAI,KAAK,KAAK,KAAK,KAAK;AAChC,YAAQ,MAAM,KAAK,KAAK;AACxB,WAAO;;AArIX,SA6IE,YAAA,mBAAU,KAAuB;AAC/B,YAAQ,SAAS,KAAK,KAAK,KAAK,KAAK;AACrC,YAAQ,MAAM,KAAK,KAAK;AACxB,WAAO;;AAhJX,SAwJE,aAAA,oBAAW,KAAgC;AAAA,QAAhC,QAAgC,QAAA;AAAhC,YAAiB;;AAAe,QACjC,MAAa,KAAb,KAAK,MAAQ,KAAR;AACb,QAAM,OAAO,IAAI;AACjB,QAAM,OAAO,IAAI;AACjB,QAAM,OAAO,IAAI;AACjB,QAAM,OAAO,IAAI;AACjB,QAAM,OAAO,IAAI;AACjB,QAAM,OAAO,IAAI;AACjB,QAAM,MAAM,IAAI;AAGhB,QAAI,MAAM,GAAG;AACX,eAAS,IAAI,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,EAAE,GAAG;AACvC,YAAI,MAAM,KAAK,IAAI;;;AAIvB,QAAI,GAAG,SAAS,MAAM,MAAM;AAC5B,QAAI,GAAG,SAAS,MAAM,MAAM;AAC5B,QAAI,GAAG,SAAS,MAAM,MAAM;AAC5B,QAAI,GAAG,SAAS,MAAM,MAAM;AAC5B,QAAI,GAAG,SAAS,MAAM,MAAM;AAC5B,QAAI,GAAG,SAAS,MAAM,MAAM;AAC5B,QAAI,GAAG,SAAS,MAAM,MAAM;AAC5B,QAAI,GAAG,SAAS,MAAM,MAAM;AAE5B,WAAO;;AAlLX,SA0LS,YAAP,mBAAiB,QAA6B;AAC5C,iBAAY,UAAU,MAAM,QAAQ;AACpC,WAAO;;AA5LX,SAAA;;AAAa,YACI,aAAsB,IAAI;AAD9B,YAEI,aAAsB,IAAI;ICG9B,gBAAb,WAAA;AAAA,4BAAA;;AAAA,iBAUS,wBAAP,+BAA6B,OAAc,OAAwB;AACjE,WAAO,QAAQ,IAAI,MAAM,QAAQ,SAAS,MAAM;;AAXpD,iBAoBS,0BAAP,iCAA+B,OAAc,OAAuC;AAClF,QAAM,WAAW,eAAc,sBAAsB,OAAO;AAC5D,QAAI,WAAW,GAAG;AAChB,aAAO,sBAAsB;;AAE/B,QAAI,WAAW,GAAG;AAChB,aAAO,sBAAsB;;AAE/B,WAAO,sBAAsB;;AA5BjC,iBAqCS,wBAAP,+BAA6B,OAAc,KAAyC;AAAA,QAC1E,MAAa,IAAb,KAAK,MAAQ,IAAR;AADqE,QAE1E,SAAW,MAAX;AACR,QAAM,QAAQ,eAAc;AAC5B,QAAM,OAAO,eAAc;AAE3B,QAAI,OAAO,KAAK,GAAG;AACjB,YAAM,IAAI,IAAI;AACd,WAAK,IAAI,IAAI;WACR;AACL,YAAM,IAAI,IAAI;AACd,WAAK,IAAI,IAAI;;AAEf,QAAI,OAAO,KAAK,GAAG;AACjB,YAAM,IAAI,IAAI;AACd,WAAK,IAAI,IAAI;WACR;AACL,YAAM,IAAI,IAAI;AACd,WAAK,IAAI,IAAI;;AAEf,QAAI,OAAO,KAAK,GAAG;AACjB,YAAM,IAAI,IAAI;AACd,WAAK,IAAI,IAAI;WACR;AACL,YAAM,IAAI,IAAI;AACd,WAAK,IAAI,IAAI;;AAGf,QAAI,eAAc,sBAAsB,OAAO,SAAS,GAAG;AACzD,aAAO,sBAAsB;;AAG/B,QAAI,eAAc,sBAAsB,OAAO,QAAQ,GAAG;AACxD,aAAO,sBAAsB;;AAG/B,WAAO,sBAAsB;;AAzEjC,iBAkFS,2BAAP,kCAAgC,OAAc,QAA+C;AAAA,QACnF,SAAmB,OAAnB,QAAQ,SAAW,OAAX;AAChB,QAAM,WAAW,eAAc,sBAAsB,OAAO;AAC5D,QAAI,WAAW,QAAQ;AACrB,aAAO,sBAAsB;;AAE/B,QAAI,WAAW,CAAC,QAAQ;AACtB,aAAO,sBAAsB;;AAE/B,WAAO,sBAAsB;;AA3FjC,iBAoGS,wBAAP,+BAA6B,KAAU,OAAsB;AAAA,QACnD,SAAW,MAAX;AADmD,QAEnD,gBAAkB,SAAlB;AAER,QAAM,MAAM,QAAQ,IAAI,QAAQ,IAAI;AAEpC,QAAI,KAAK,IAAI,OAAO,eAAe;AACjC,aAAO;;AAGT,QAAM,WAAW,QAAQ,IAAI,QAAQ,IAAI;AACzC,QAAI,WAAY,EAAC,MAAM,WAAW,YAAY;AAE9C,QAAI,WAAW,GAAG;AAChB,UAAI,WAAW,CAAC,eAAe;AAC7B,eAAO;;AAGT,iBAAW;;AAGb,WAAO;;AAzHX,iBAkIS,sBAAP,6BAA2B,KAAU,KAA0B;AAAA,QACrD,gBAAkB,SAAlB;AADqD,QAErD,SAAsB,IAAtB,QAAQ,YAAc,IAAd;AAF6C,QAGrD,MAAa,IAAb,KAAK,MAAQ,IAAR;AACb,QAAM,OAAO,UAAU;AACvB,QAAM,OAAO,UAAU;AACvB,QAAM,OAAO,UAAU;AACvB,QAAM,OAAO,OAAO;AACpB,QAAM,OAAO,OAAO;AACpB,QAAM,OAAO,OAAO;AACpB,QAAI,WAAW;AACf,QAAI,OAAO,OAAO;AAElB,QAAI,KAAK,IAAI,QAAQ,eAAe;AAClC,UAAI,OAAO,IAAI,KAAK,OAAO,IAAI,GAAG;AAChC,eAAO;;WAEJ;AACL,UAAM,UAAU,IAAM;AACtB,UAAI,KAAM,KAAI,IAAI,QAAQ;AAC1B,UAAI,KAAM,KAAI,IAAI,QAAQ;AAE1B,UAAI,KAAK,IAAI;AACX,YAAM,OAAO;AACb,aAAK;AACL,aAAK;;AAGP,iBAAW,KAAK,IAAI,IAAI;AACxB,aAAO,KAAK,IAAI,IAAI;AAEpB,UAAI,WAAW,MAAM;AACnB,eAAO;;;AAIX,QAAI,KAAK,IAAI,QAAQ,eAAe;AAClC,UAAI,OAAO,IAAI,KAAK,OAAO,IAAI,GAAG;AAChC,eAAO;;WAEJ;AACL,UAAM,WAAU,IAAM;AACtB,UAAI,KAAM,KAAI,IAAI,QAAQ;AAC1B,UAAI,MAAM,KAAI,IAAI,QAAQ;AAE1B,UAAI,KAAK,KAAI;AACX,YAAM,SAAO;AACb,aAAK;AACL,cAAK;;AAGP,iBAAW,KAAK,IAAI,IAAI;AACxB,aAAO,KAAK,IAAI,KAAI;AAEpB,UAAI,WAAW,MAAM;AACnB,eAAO;;;AAIX,QAAI,KAAK,IAAI,QAAQ,eAAe;AAClC,UAAI,OAAO,IAAI,KAAK,OAAO,IAAI,GAAG;AAChC,eAAO;;WAEJ;AACL,UAAM,YAAU,IAAM;AACtB,UAAI,MAAM,KAAI,IAAI,QAAQ;AAC1B,UAAI,MAAM,KAAI,IAAI,QAAQ;AAE1B,UAAI,MAAK,KAAI;AACX,YAAM,UAAO;AACb,cAAK;AACL,cAAK;;AAGP,iBAAW,KAAK,IAAI,KAAI;AACxB,aAAO,KAAK,IAAI,KAAI;AAEpB,UAAI,WAAW,MAAM;AACnB,eAAO;;;AAIX,WAAO;;AApNX,iBA6NS,yBAAP,gCAA8B,KAAU,QAAgC;AAAA,QAC9D,SAAsB,IAAtB,QAAQ,YAAc,IAAd;AADsD,QAE9D,SAAmB,OAAnB,QAAQ,SAAW,OAAX;AAEhB,QAAM,IAAI,eAAc;AACxB,YAAQ,SAAS,QAAQ,QAAQ;AACjC,QAAM,IAAI,QAAQ,IAAI,GAAG;AACzB,QAAM,IAAI,QAAQ,IAAI,GAAG,KAAK,SAAS;AAEvC,QAAI,IAAI,KAAK,IAAI,GAAG;AAClB,aAAO;;AAGT,QAAI,eAAe,IAAI,IAAI;AAC3B,QAAI,eAAe,GAAG;AACpB,aAAO;;AAGT,QAAI,WAAW,CAAC,IAAI,KAAK,KAAK;AAC9B,QAAI,WAAW,GAAG;AAChB,iBAAW;;AAGb,WAAO;;AApPX,iBA6PS,0BAAP,iCAA+B,SAA0B,KAA2B;AAAA,QAC1E,MAAa,IAAb,KAAK,MAAQ,IAAR;AACb,QAAM,OAAO,eAAc;AAE3B,aAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,UAAM,QAAQ,QAAQ,SAAS;AAC/B,UAAM,SAAS,MAAM;AAErB,WAAK,IAAI,OAAO,KAAK,IAAI,IAAI,IAAI,IAAI;AACrC,WAAK,IAAI,OAAO,KAAK,IAAI,IAAI,IAAI,IAAI;AACrC,WAAK,IAAI,OAAO,KAAK,IAAI,IAAI,IAAI,IAAI;AACrC,UAAI,QAAQ,IAAI,MAAM,QAAQ,QAAQ,CAAC,MAAM,UAAU;AACrD,eAAO;;;AAIX,WAAO;;AA7QX,iBAsRS,qBAAP,4BAA0B,SAA0B,KAAmC;AAAA,QAC7E,MAAa,IAAb,KAAK,MAAQ,IAAR;AACb,QAAM,QAAQ,eAAc;AAC5B,QAAM,OAAO,eAAc;AAC3B,QAAI,SAAS,gBAAgB;AAE7B,aAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,UAAM,QAAQ,QAAQ,SAAS;AAC/B,UAAM,SAAS,MAAM;AAErB,UAAI,OAAO,KAAK,GAAG;AACjB,cAAM,IAAI,IAAI;AACd,aAAK,IAAI,IAAI;aACR;AACL,cAAM,IAAI,IAAI;AACd,aAAK,IAAI,IAAI;;AAEf,UAAI,OAAO,KAAK,GAAG;AACjB,cAAM,IAAI,IAAI;AACd,aAAK,IAAI,IAAI;aACR;AACL,cAAM,IAAI,IAAI;AACd,aAAK,IAAI,IAAI;;AAEf,UAAI,OAAO,KAAK,GAAG;AACjB,cAAM,IAAI,IAAI;AACd,aAAK,IAAI,IAAI;aACR;AACL,cAAM,IAAI,IAAI;AACd,aAAK,IAAI,IAAI;;AAGf,UAAI,eAAc,wBAAwB,OAAO,UAAU,sBAAsB,OAAO;AACtF,eAAO,gBAAgB;;AAGzB,UAAI,eAAc,wBAAwB,OAAO,WAAW,sBAAsB,OAAO;AACvF,iBAAS,gBAAgB;;;AAI7B,WAAO;;AA/TX,iBAwUS,wBAAP,+BAA6B,SAA0B,QAAyC;AAC9F,QAAI,SAAS,gBAAgB;AAE7B,aAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,UAAM,QAAQ,QAAQ,SAAS;AAC/B,UAAM,mBAAmB,eAAc,yBAAyB,OAAO;AACvE,UAAI,qBAAqB,sBAAsB,OAAO;AACpD,eAAO,gBAAgB;iBACd,qBAAqB,sBAAsB,cAAc;AAClE,iBAAS,gBAAgB;AACzB;;;AAIJ,WAAO;;AAtVX,SAAA;;AAAa,cACI,aAAsB,IAAI;AAD9B,cAEI,aAAsB,IAAI;ICT9B,QAAb,WAAA;AAAA,SAMS,YAAP,mBAAiB,GAAU,KAAkB;AAAA,QACnC,SAAW,EAAX;AACR,QAAM,SAAS,IAAM,OAAO;AAE5B,QAAM,YAAY,IAAI;AACtB,cAAU,IAAI,OAAO,IAAI;AACzB,cAAU,IAAI,OAAO,IAAI;AACzB,cAAU,IAAI,OAAO,IAAI;AACzB,QAAI,WAAW,EAAE,WAAW;;AAdhC,SAwBS,aAAP,oBAAkB,QAAiB,QAAiB,QAAiB,KAAkB;AACrF,QAAM,KAAK,OAAO;AAClB,QAAM,KAAK,OAAO;AAClB,QAAM,KAAK,OAAO;AAClB,QAAM,KAAK,OAAO,IAAI;AACtB,QAAM,KAAK,OAAO,IAAI;AACtB,QAAM,KAAK,OAAO,IAAI;AACtB,QAAM,KAAK,OAAO,IAAI;AACtB,QAAM,KAAK,OAAO,IAAI;AACtB,QAAM,KAAK,OAAO,IAAI;AACtB,QAAM,KAAK,KAAK,KAAK,KAAK;AAC1B,QAAM,KAAK,KAAK,KAAK,KAAK;AAC1B,QAAM,KAAK,KAAK,KAAK,KAAK;AAC1B,QAAM,UAAU,IAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAEzD,QAAM,IAAI,KAAK;AACf,QAAM,IAAI,KAAK;AACf,QAAM,IAAI,KAAK;AAjBsE,QAmB7E,SAAW,IAAX;AACR,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AAEX,QAAI,WAAW,CAAE,KAAI,KAAK,IAAI,KAAK,IAAI;;AAazC,kBAAY,QAAwB,UAAsB;AAAA,QAA9C,WAA8C,QAAA;AAA9C,eAAkB;;AAA4B,QAAtB,aAAsB,QAAA;AAAtB,iBAAmB;;AAAG,SAT1C,SAAkB,IAAI;AASoB,SAPnD,WAAmB;AAQxB,cAAU,OAAO,QAAQ,KAAK;AAC9B,SAAK,WAAW;;AA/DpB,MAAA,SAAA,OAAA;AAAA,SAsEE,YAAA,qBAAmB;AACjB,WAAM,UAAU,MAAM;AACtB,WAAO;;AAxEX,SA+EE,QAAA,kBAAe;AACb,QAAM,MAAM,IAAI;AAChB,SAAK,QAAQ;AACb,WAAO;;AAlFX,SA0FE,UAAA,iBAAQ,KAAmB;AACzB,SAAK,OAAO,QAAQ,IAAI;AACxB,QAAI,WAAW,KAAK;AACpB,WAAO;;AA7FX,SAAA;;ICKa,kBAAb,WAAA;AAkBE,4BAAY,QAAuB;AAAA,QAAvB,WAAuB,QAAA;AAAvB,eAAiB;;AAAM,SAhB5B,OAgB4B;AAAA,SAd5B,MAc4B;AAAA,SAZ5B,OAY4B;AAAA,SAV5B,QAU4B;AAAA,SAR5B,MAQ4B;AAAA,SAN5B,SAM4B;AACjC,SAAK,OAAO,IAAI;AAChB,SAAK,MAAM,IAAI;AACf,SAAK,OAAO,IAAI;AAChB,SAAK,QAAQ,IAAI;AACjB,SAAK,MAAM,IAAI;AACf,SAAK,SAAS,IAAI;AAElB,cAAU,KAAK,oBAAoB;;AA1BvC,MAAA,SAAA,iBAAA;AAAA,SAiCE,QAAA,kBAAyB;AACvB,QAAM,KAAK,IAAI;AACf,SAAK,QAAQ;AACb,WAAO;;AApCX,SA4CE,UAAA,iBAAQ,KAAuC;AAC7C,SAAK,KAAK,QAAQ,IAAI;AACtB,SAAK,IAAI,QAAQ,IAAI;AACrB,SAAK,KAAK,QAAQ,IAAI;AACtB,SAAK,MAAM,QAAQ,IAAI;AACvB,SAAK,IAAI,QAAQ,IAAI;AACrB,SAAK,OAAO,QAAQ,IAAI;AACxB,WAAO;;AAnDX,SAiEE,WAAA,kBAAS,OAAsB;AAC7B,YAAQ;WACD;AACH,eAAO,KAAK;WACT;AACH,eAAO,KAAK;WACT;AACH,eAAO,KAAK;WACT;AACH,eAAO,KAAK;WACT;AACH,eAAO,KAAK;WACT;AACH,eAAO,KAAK;;AAEZ,eAAO;;;AAhFf,SAwFS,sBAAP,6BAA2B,QAAsB;AAC/C,QAAM,KAAK,OAAO;AAClB,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AACf,QAAM,MAAM,GAAG;AAGf,QAAM,aAAa,KAAK,KAAK;AAC7B,eAAW,IAAI,CAAC,MAAM;AACtB,eAAW,IAAI,CAAC,MAAM;AACtB,eAAW,IAAI,CAAC,MAAM;AACtB,SAAK,KAAK,WAAW,CAAC,MAAM;AAC5B,SAAK,KAAK;AAGV,QAAM,YAAY,KAAK,IAAI;AAC3B,cAAU,IAAI,MAAM;AACpB,cAAU,IAAI,MAAM;AACpB,cAAU,IAAI,MAAM;AACpB,SAAK,IAAI,WAAW,MAAM;AAE1B,SAAK,IAAI;AAGT,QAAM,aAAa,KAAK,KAAK;AAC7B,eAAW,IAAI,CAAC,MAAM;AACtB,eAAW,IAAI,CAAC,MAAM;AACtB,eAAW,IAAI,CAAC,MAAM;AACtB,SAAK,KAAK,WAAW,CAAC,MAAM;AAC5B,SAAK,KAAK;AAGV,QAAM,cAAc,KAAK,MAAM;AAC/B,gBAAY,IAAI,MAAM;AACtB,gBAAY,IAAI,MAAM;AACtB,gBAAY,IAAI,MAAM;AACtB,SAAK,MAAM,WAAW,MAAM;AAC5B,SAAK,MAAM;AAGX,QAAM,YAAY,KAAK,IAAI;AAC3B,cAAU,IAAI,MAAM;AACpB,cAAU,IAAI,MAAM;AACpB,cAAU,IAAI,MAAM;AACpB,SAAK,IAAI,WAAW,MAAM;AAC1B,SAAK,IAAI;AAGT,QAAM,eAAe,KAAK,OAAO;AACjC,iBAAa,IAAI,CAAC,MAAM;AACxB,iBAAa,IAAI,CAAC,MAAM;AACxB,iBAAa,IAAI,CAAC,MAAM;AACxB,SAAK,OAAO,WAAW,CAAC,MAAM;AAC9B,SAAK,OAAO;;AA1JhB,SAkKS,gBAAP,uBAAqB,KAA2B;AAC9C,WAAO,cAAc,wBAAwB,MAAM;;AAnKvD,SA2KS,mBAAP,0BAAwB,QAAiC;AACvD,WAAO,cAAc,sBAAsB,MAAM,YAAY,gBAAgB;;AA5KjF,SAAA;;ICFa,YAAb,WAAA;AAAA,aAOS,MAAP,aAAW,MAAiB,OAAkB,KAAsB;AAClE,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,MAAM;AACjB,QAAM,KAAK,IAAI;AAEf,OAAG,KAAK,GAAG,KAAK,GAAG;AACnB,OAAG,KAAK,GAAG,KAAK,GAAG;AACnB,OAAG,KAAK,GAAG,KAAK,GAAG;AAEnB,OAAG,KAAK,GAAG,KAAK,GAAG;AACnB,OAAG,KAAK,GAAG,KAAK,GAAG;AACnB,OAAG,KAAK,GAAG,KAAK,GAAG;AAEnB,OAAG,KAAK,GAAG,KAAK,GAAG;AACnB,OAAG,KAAK,GAAG,KAAK,GAAG;AACnB,OAAG,KAAK,GAAG,KAAK,GAAG;;AAtBvB,aA+BS,WAAP,kBAAgB,MAAiB,OAAkB,KAAsB;AACvE,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,MAAM;AACjB,QAAM,KAAK,IAAI;AAEf,OAAG,KAAK,GAAG,KAAK,GAAG;AACnB,OAAG,KAAK,GAAG,KAAK,GAAG;AACnB,OAAG,KAAK,GAAG,KAAK,GAAG;AAEnB,OAAG,KAAK,GAAG,KAAK,GAAG;AACnB,OAAG,KAAK,GAAG,KAAK,GAAG;AACnB,OAAG,KAAK,GAAG,KAAK,GAAG;AAEnB,OAAG,KAAK,GAAG,KAAK,GAAG;AACnB,OAAG,KAAK,GAAG,KAAK,GAAG;AACnB,OAAG,KAAK,GAAG,KAAK,GAAG;;AA9CvB,aAuDS,WAAP,kBAAgB,MAAiB,OAAkB,KAAsB;AACvE,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,MAAM;AACjB,QAAM,KAAK,IAAI;AAEf,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AAEX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AAEX,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AAEtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AAEtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;;AA1F1C,aAmGS,SAAP,gBAAc,MAAiB,OAA2B;AACxD,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,MAAM;AAEjB,WACE,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG;;AAhHhC,aAyHS,qBAAP,4BAA0B,YAAwB,KAAsB;AACtE,QAAM,KAAK,IAAI;AADuD,QAE9D,IAAe,WAAf,GAAG,IAAY,WAAZ,GAAG,IAAS,WAAT,GAAG,IAAM,WAAN;AACjB,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AAEf,OAAG,KAAK,IAAI,KAAK;AACjB,OAAG,KAAK,KAAK;AACb,OAAG,KAAK,KAAK;AAEb,OAAG,KAAK,KAAK;AACb,OAAG,KAAK,IAAI,KAAK;AACjB,OAAG,KAAK,KAAK;AAEb,OAAG,KAAK,KAAK;AACb,OAAG,KAAK,KAAK;AACb,OAAG,KAAK,IAAI,KAAK;;AAnJrB,aA2JS,UAAP,iBAAe,GAAY,KAAsB;AAC/C,QAAM,KAAK,IAAI;AAEf,OAAG,KAAK,EAAE;AACV,OAAG,KAAK;AACR,OAAG,KAAK;AAER,OAAG,KAAK;AACR,OAAG,KAAK,EAAE;AACV,OAAG,KAAK;AAER,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;;AAxKZ,aAgLS,cAAP,qBAAmB,cAAsB,KAAsB;AAC7D,QAAM,KAAK,IAAI;AAEf,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;AAER,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;AAER,OAAG,KAAK,aAAY;AACpB,OAAG,KAAK,aAAY;AACpB,OAAG,KAAK;;AA7LZ,aAqMS,SAAP,gBAAc,GAAc,KAAsB;AAChD,QAAM,KAAK,EAAE;AACb,QAAM,KAAK,IAAI;AAEf,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AAEX,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,CAAC,MAAM,MAAM,MAAM;AAC/B,QAAM,MAAM,MAAM,MAAM,MAAM;AAE9B,QAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AACxC,QAAI,CAAC,KAAK;AACR;;AAEF,UAAM,IAAM;AAEZ,OAAG,KAAK,MAAM;AACd,OAAG,KAAM,EAAC,MAAM,MAAM,MAAM,OAAO;AACnC,OAAG,KAAM,OAAM,MAAM,MAAM,OAAO;AAElC,OAAG,KAAK,MAAM;AACd,OAAG,KAAM,OAAM,MAAM,MAAM,OAAO;AAClC,OAAG,KAAM,EAAC,MAAM,MAAM,MAAM,OAAO;AAEnC,OAAG,KAAK,MAAM;AACd,OAAG,KAAM,EAAC,MAAM,MAAM,MAAM,OAAO;AACnC,OAAG,KAAM,OAAM,MAAM,MAAM,OAAO;;AAvOtC,aAgPS,eAAP,sBAAoB,MAAc,KAAsB;AACtD,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,IAAI;AAEf,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,KACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,KACb,MAAM,GAAG,KACT,MAAM,GAAG,KACT,MAAM,GAAG;AAEX,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAE9B,QAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAC5E,QAAI,CAAC,KAAK;AACR,aAAO;;AAET,UAAM,IAAM;AAEZ,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAE9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAE9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;;AAlSlD,aA2SS,SAAP,gBAAc,GAAc,GAAW,KAAsB;AAC3D,QAAM,KAAK,EAAE;AACb,QAAM,KAAK,IAAI;AACf,QAAM,IAAI,KAAK,IAAI;AACnB,QAAM,IAAI,KAAK,IAAI;AAEnB,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AAEX,OAAG,KAAK,IAAI,MAAM,IAAI;AACtB,OAAG,KAAK,IAAI,MAAM,IAAI;AACtB,OAAG,KAAK,IAAI,MAAM,IAAI;AAEtB,OAAG,KAAK,IAAI,MAAM,IAAI;AACtB,OAAG,KAAK,IAAI,MAAM,IAAI;AACtB,OAAG,KAAK,IAAI,MAAM,IAAI;AAEtB,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;;AArUZ,aA8US,QAAP,eAAa,GAAc,GAAY,KAAsB;AAAA,QACnD,IAAS,EAAT,GAAG,IAAM,EAAN;AACX,QAAM,KAAK,EAAE;AACb,QAAM,KAAK,IAAI;AAEf,OAAG,KAAK,IAAI,GAAG;AACf,OAAG,KAAK,IAAI,GAAG;AACf,OAAG,KAAK,IAAI,GAAG;AAEf,OAAG,KAAK,IAAI,GAAG;AACf,OAAG,KAAK,IAAI,GAAG;AACf,OAAG,KAAK,IAAI,GAAG;AAEf,OAAG,KAAK,GAAG;AACX,OAAG,KAAK,GAAG;AACX,OAAG,KAAK,GAAG;;AA7Vf,aAsWS,YAAP,mBAAiB,GAAc,aAAsB,KAAsB;AAAA,QACjE,IAAS,YAAT,GAAG,IAAM,YAAN;AACX,QAAM,KAAK,EAAE;AACb,QAAM,KAAK,IAAI;AAEf,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AAEX,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;AAER,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;AAER,OAAG,KAAK,IAAI,MAAM,IAAI,MAAM;AAC5B,OAAG,KAAK,IAAI,MAAM,IAAI,MAAM;AAC5B,OAAG,KAAK,IAAI,MAAM,IAAI,MAAM;;AA/XhC,aAuYS,YAAP,mBAAiB,GAAc,KAAsB;AACnD,QAAM,KAAK,EAAE;AACb,QAAM,KAAK,IAAI;AAEf,QAAI,QAAQ,GAAG;AACb,UAAM,MAAM,GAAG;AACf,UAAM,MAAM,GAAG;AACf,UAAM,MAAM,GAAG;AACf,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AACX,SAAG,KAAK;AACR,SAAG,KAAK,GAAG;AACX,SAAG,KAAK;AACR,SAAG,KAAK;WACH;AACL,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AAEX,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AAEX,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;;;AA2Bf,sBACE,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA;AAAA,QATA,QASA,QAAA;AATA,YAAc;;AASd,QARA,QAQA,QAAA;AARA,YAAc;;AAQd,QAPA,QAOA,QAAA;AAPA,YAAc;;AAOd,QANA,QAMA,QAAA;AANA,YAAc;;AAMd,QALA,QAKA,QAAA;AALA,YAAc;;AAKd,QAJA,QAIA,QAAA;AAJA,YAAc;;AAId,QAHA,QAGA,QAAA;AAHA,YAAc;;AAGd,QAFA,QAEA,QAAA;AAFA,YAAc;;AAEd,QADA,QACA,QAAA;AADA,YAAc;;AACd,SAxBF,WAAyB,IAAI,aAAa;AAyBxC,QAAM,IAAkB,KAAK;AAE7B,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AAEP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AAEP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;;AAldX,MAAA,SAAA,WAAA;AAAA,SAkeE,WAAA,kBACE,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACW;AACX,QAAM,IAAkB,KAAK;AAE7B,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AAEP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AAEP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AAEP,WAAO;;AA3fX,SAogBE,kBAAA,yBAAgB,OAA0B,QAA+B;AAAA,QAA/B,WAA+B,QAAA;AAA/B,eAAiB;;AACzD,QAAM,OAAO,KAAK;AAClB,aAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,WAAK,KAAK,MAAM,IAAI;;AAEtB,WAAO;;AAzgBX,SAkhBE,mBAAA,0BAAiB,GAAsB;AACrC,QAAM,KAAK,EAAE;AACb,QAAM,IAAI,KAAK;AAEf,MAAE,KAAK,GAAG;AACV,MAAE,KAAK,GAAG;AACV,MAAE,KAAK,GAAG;AAEV,MAAE,KAAK,GAAG;AACV,MAAE,KAAK,GAAG;AACV,MAAE,KAAK,GAAG;AAEV,MAAE,KAAK,GAAG;AACV,MAAE,KAAK,GAAG;AACV,MAAE,KAAK,GAAG;AAEV,WAAO;;AAliBX,SA0iBE,UAAA,iBAAQ,KAA6C,WAAuB;AAAA,QAAvB,cAAuB,QAAA;AAAvB,kBAAoB;;AACvE,QAAM,IAAI,KAAK;AAEf,QAAI,aAAa,EAAE;AACnB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;;AArjB3B,SA4jBE,QAAA,kBAAmB;AACjB,QAAM,IAAI,KAAK;AACf,QAAI,MAAM,IAAI,WAAU,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAC1E,WAAO;;AA/jBX,SAukBE,UAAA,iBAAQ,KAA2B;AACjC,QAAM,IAAI,KAAK;AACf,QAAM,KAAK,IAAI;AAEf,OAAG,KAAK,EAAE;AACV,OAAG,KAAK,EAAE;AACV,OAAG,KAAK,EAAE;AAEV,OAAG,KAAK,EAAE;AACV,OAAG,KAAK,EAAE;AACV,OAAG,KAAK,EAAE;AAEV,OAAG,KAAK,EAAE;AACV,OAAG,KAAK,EAAE;AACV,OAAG,KAAK,EAAE;AAEV,WAAO;;AAvlBX,SA+lBE,MAAA,aAAI,OAA6B;AAC/B,eAAU,IAAI,MAAM,OAAO;AAC3B,WAAO;;AAjmBX,SAymBE,WAAA,kBAAS,OAA6B;AACpC,eAAU,SAAS,MAAM,OAAO;AAChC,WAAO;;AA3mBX,SAmnBE,WAAA,kBAAS,OAA6B;AACpC,eAAU,SAAS,MAAM,OAAO;AAChC,WAAO;;AArnBX,SA4nBE,cAAA,uBAAsB;AACpB,QAAM,IAAI,KAAK;AAEf,QAAM,MAAM,EAAE,IACZ,MAAM,EAAE,IACR,MAAM,EAAE;AACV,QAAM,MAAM,EAAE,IACZ,MAAM,EAAE,IACR,MAAM,EAAE;AACV,QAAM,MAAM,EAAE,IACZ,MAAM,EAAE,IACR,MAAM,EAAE;AAEV,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,CAAC,MAAM,MAAM,MAAM;AAC/B,QAAM,MAAM,MAAM,MAAM,MAAM;AAE9B,WAAO,MAAM,MAAM,MAAM,MAAM,MAAM;;AA7oBzC,SAopBE,WAAA,oBAAsB;AACpB,QAAM,IAAI,KAAK;AAEf,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AAEP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AAEP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AAEP,WAAO;;AAnqBX,SA0qBE,SAAA,kBAAoB;AAClB,eAAU,OAAO,MAAM;AACvB,WAAO;;AA5qBX,SAorBE,SAAA,gBAAO,GAAsB;AAC3B,eAAU,OAAO,MAAM,GAAG;AAC1B,WAAO;;AAtrBX,SA8rBE,QAAA,eAAM,GAAuB;AAC3B,eAAU,MAAM,MAAM,GAAG;AACzB,WAAO;;AAhsBX,SAwsBE,YAAA,mBAAU,aAAiC;AACzC,eAAU,UAAU,MAAM,aAAa;AACvC,WAAO;;AA1sBX,SAitBE,YAAA,qBAAuB;AACrB,eAAU,UAAU,MAAM;AAC1B,WAAO;;AAntBX,SAAA;;ICDa,aAAb,WAAA;AAAA,cAUS,MAAP,aAAW,MAAkB,OAAmB,KAAuB;AACrE,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;;AAd3B,cAuBS,WAAP,kBAAgB,MAAkB,OAAmB,KAAuB;AAC1E,QAAM,KAAK,KAAK,GACd,KAAK,KAAK,GACV,KAAK,KAAK,GACV,KAAK,KAAK;AACZ,QAAM,KAAK,MAAM,GACf,KAAK,MAAM,GACX,KAAK,MAAM,GACX,KAAK,MAAM;AAEb,QAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC3C,QAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC3C,QAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC3C,QAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;;AApC/C,cA4CS,YAAP,mBAAiB,GAAe,KAAuB;AACrD,QAAI,IAAI,CAAC,EAAE;AACX,QAAI,IAAI,CAAC,EAAE;AACX,QAAI,IAAI,CAAC,EAAE;AACX,QAAI,IAAI,EAAE;;AAhDd,cAyDS,MAAP,aAAW,MAAkB,OAA2B;AACtD,WAAO,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM;;AA1DnF,cAmES,SAAP,gBAAc,MAAkB,OAA4B;AAC1D,WACE,SAAS,OAAO,KAAK,GAAG,MAAM,MAC9B,SAAS,OAAO,KAAK,GAAG,MAAM,MAC9B,SAAS,OAAO,KAAK,GAAG,MAAM,MAC9B,SAAS,OAAO,KAAK,GAAG,MAAM;;AAxEpC,cAkFS,oBAAP,2BAAyB,MAAe,KAAa,KAAuB;AAC1E,QAAM,aAAa,YAAW;AAC9B,YAAQ,UAAU,MAAM;AACxB,WAAO;AACP,QAAM,IAAI,KAAK,IAAI;AACnB,QAAI,IAAI,WAAW,IAAI;AACvB,QAAI,IAAI,WAAW,IAAI;AACvB,QAAI,IAAI,WAAW,IAAI;AACvB,QAAI,IAAI,KAAK,IAAI;;AA1FrB,cAoGS,gBAAP,uBAAqB,GAAW,GAAW,GAAW,KAAuB;AAC3E,gBAAW,qBAAqB,GAAG,GAAG,GAAG;;AArG7C,cA+GS,uBAAP,8BAA4B,KAAa,OAAe,MAAc,KAAuB;AAC3F,QAAM,WAAW,OAAO;AACxB,QAAM,YAAY,QAAQ;AAC1B,QAAM,UAAU,MAAM;AAEtB,QAAM,UAAU,KAAK,IAAI;AACzB,QAAM,UAAU,KAAK,IAAI;AACzB,QAAM,WAAW,KAAK,IAAI;AAC1B,QAAM,WAAW,KAAK,IAAI;AAC1B,QAAM,SAAS,KAAK,IAAI;AACxB,QAAM,SAAS,KAAK,IAAI;AAExB,QAAM,cAAc,SAAS;AAC7B,QAAM,cAAc,SAAS;AAE7B,QAAI,IAAI,SAAS,WAAW,UAAU,SAAS,WAAW;AAC1D,QAAI,IAAI,SAAS,WAAW,UAAU,SAAS,WAAW;AAC1D,QAAI,IAAI,cAAc,UAAU,cAAc;AAC9C,QAAI,IAAI,cAAc,UAAU,cAAc;;AAjIlD,cAyIS,oBAAP,2BAAyB,GAAc,KAAuB;AAC5D,QAAM,KAAK,EAAE;AACb,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,QAAQ,MAAM,MAAM;AAC1B,QAAI,MAAM;AAEV,QAAI,QAAQ,GAAG;AACb,aAAO,KAAK,KAAK,QAAQ;AACzB,UAAI,IAAI,OAAO;AACf,aAAO,MAAM;AAEb,UAAI,IAAK,OAAM,OAAO;AACtB,UAAI,IAAK,OAAM,OAAO;AACtB,UAAI,IAAK,OAAM,OAAO;eACb,OAAO,OAAO,OAAO,KAAK;AACnC,aAAO,KAAK,KAAK,IAAM,MAAM,MAAM;AACnC,aAAO,MAAM;AAEb,UAAI,IAAI,MAAM;AACd,UAAI,IAAK,OAAM,OAAO;AACtB,UAAI,IAAK,OAAM,OAAO;AACtB,UAAI,IAAK,OAAM,OAAO;eACb,MAAM,KAAK;AACpB,aAAO,KAAK,KAAK,IAAM,MAAM,MAAM;AACnC,aAAO,MAAM;AAEb,UAAI,IAAK,OAAM,OAAO;AACtB,UAAI,IAAI,MAAM;AACd,UAAI,IAAK,OAAM,OAAO;AACtB,UAAI,IAAK,OAAM,OAAO;WACjB;AACL,aAAO,KAAK,KAAK,IAAM,MAAM,MAAM;AACnC,aAAO,MAAM;AAEb,UAAI,IAAK,OAAM,OAAO;AACtB,UAAI,IAAK,OAAM,OAAO;AACtB,UAAI,IAAI,MAAM;AACd,UAAI,IAAK,OAAM,OAAO;;;AAtL5B,cA+LS,SAAP,gBAAc,GAAe,KAAuB;AAAA,QAC1C,IAAe,EAAf,GAAG,IAAY,EAAZ,GAAG,IAAS,EAAT,GAAG,IAAM,EAAN;AACjB,QAAM,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACxC,QAAI,MAAM,SAAS,eAAe;AAChC,UAAM,SAAS,IAAM;AACrB,UAAI,IAAI,CAAC,IAAI;AACb,UAAI,IAAI,CAAC,IAAI;AACb,UAAI,IAAI,CAAC,IAAI;AACb,UAAI,IAAI,IAAI;;;AAvMlB,cAkNS,OAAP,cAAY,OAAmB,KAAiB,GAAW,KAAuB;AAChF,QAAM,MAAM,IAAM;AAClB,QAAI,YAAW,IAAI,OAAO,QAAQ,GAAG;AACnC,UAAI,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;AAChC,UAAI,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;AAChC,UAAI,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;AAChC,UAAI,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;WAC3B;AACL,UAAI,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;AAChC,UAAI,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;AAChC,UAAI,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;AAChC,UAAI,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;;AAGlC,QAAI;;AAhOR,cA0OS,QAAP,eAAa,OAAmB,KAAiB,GAAW,KAAuB;AACjF,QAAM,KAAK,MAAM;AACjB,QAAM,KAAK,MAAM;AACjB,QAAM,KAAK,MAAM;AACjB,QAAM,KAAK,MAAM;AACjB,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AAEb,QAAI,QAAQ;AAEZ,QAAI,QAAQ,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAE/C,QAAI,QAAQ,GAAK;AACf,cAAQ,CAAC;AACT,WAAK,CAAC;AACN,WAAK,CAAC;AACN,WAAK,CAAC;AACN,WAAK,CAAC;;AAGR,QAAI,IAAM,QAAQ,SAAS,eAAe;AAExC,UAAM,QAAQ,KAAK,KAAK;AACxB,UAAM,QAAQ,KAAK,IAAI;AACvB,eAAS,KAAK,IAAK,KAAM,KAAK,SAAS;AACvC,eAAS,KAAK,IAAI,IAAI,SAAS;WAC1B;AAGL,eAAS,IAAM;AACf,eAAS;;AAGX,QAAI,IAAI,SAAS,KAAK,SAAS;AAC/B,QAAI,IAAI,SAAS,KAAK,SAAS;AAC/B,QAAI,IAAI,SAAS,KAAK,SAAS;AAC/B,QAAI,IAAI,SAAS,KAAK,SAAS;;AAhRnC,cAwRS,YAAP,mBAAiB,GAAe,KAAuB;AAAA,QAC7C,IAAe,EAAf,GAAG,IAAY,EAAZ,GAAG,IAAS,EAAT,GAAG,IAAM,EAAN;AACjB,QAAI,MAAc,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACxD,QAAI,MAAM,SAAS,eAAe;AAChC,YAAM,IAAI;AACV,UAAI,IAAI,IAAI;AACZ,UAAI,IAAI,IAAI;AACZ,UAAI,IAAI,IAAI;AACZ,UAAI,IAAI,IAAI;;;AAhSlB,cAySS,YAAP,mBAAiB,KAAa,KAAuB;AACnD,WAAO;AACP,QAAM,IAAI,KAAK,IAAI;AACnB,QAAM,IAAI,KAAK,IAAI;AAEnB,QAAI,IAAI;AACR,QAAI,IAAI;AACR,QAAI,IAAI;AACR,QAAI,IAAI;;AAjTZ,cAyTS,YAAP,mBAAiB,KAAa,KAAuB;AACnD,WAAO;AACP,QAAM,IAAI,KAAK,IAAI;AACnB,QAAM,IAAI,KAAK,IAAI;AAEnB,QAAI,IAAI;AACR,QAAI,IAAI;AACR,QAAI,IAAI;AACR,QAAI,IAAI;;AAjUZ,cAyUS,YAAP,mBAAiB,KAAa,KAAuB;AACnD,WAAO;AACP,QAAM,IAAI,KAAK,IAAI;AACnB,QAAM,IAAI,KAAK,IAAI;AAEnB,QAAI,IAAI;AACR,QAAI,IAAI;AACR,QAAI,IAAI;AACR,QAAI,IAAI;;AAjVZ,cA0VS,UAAP,iBAAe,YAAwB,KAAa,KAAuB;AAAA,QACjE,IAAe,WAAf,GAAG,IAAY,WAAZ,GAAG,IAAS,WAAT,GAAG,IAAM,WAAN;AACjB,WAAO;AACP,QAAM,KAAK,KAAK,IAAI;AACpB,QAAM,KAAK,KAAK,IAAI;AAEpB,QAAI,IAAI,IAAI,KAAK,IAAI;AACrB,QAAI,IAAI,IAAI,KAAK,IAAI;AACrB,QAAI,IAAI,IAAI,KAAK,IAAI;AACrB,QAAI,IAAI,IAAI,KAAK,IAAI;;AAnWzB,cA4WS,UAAP,iBAAe,YAAwB,KAAa,KAAuB;AAAA,QACjE,IAAe,WAAf,GAAG,IAAY,WAAZ,GAAG,IAAS,WAAT,GAAG,IAAM,WAAN;AACjB,WAAO;AACP,QAAM,KAAK,KAAK,IAAI;AACpB,QAAM,KAAK,KAAK,IAAI;AAEpB,QAAI,IAAI,IAAI,KAAK,IAAI;AACrB,QAAI,IAAI,IAAI,KAAK,IAAI;AACrB,QAAI,IAAI,IAAI,KAAK,IAAI;AACrB,QAAI,IAAI,IAAI,KAAK,IAAI;;AArXzB,cA8XS,UAAP,iBAAe,YAAwB,KAAa,KAAuB;AAAA,QACjE,IAAe,WAAf,GAAG,IAAY,WAAZ,GAAG,IAAS,WAAT,GAAG,IAAM,WAAN;AACjB,WAAO;AACP,QAAM,KAAK,KAAK,IAAI;AACpB,QAAM,KAAK,KAAK,IAAI;AAEpB,QAAI,IAAI,IAAI,KAAK,IAAI;AACrB,QAAI,IAAI,IAAI,KAAK,IAAI;AACrB,QAAI,IAAI,IAAI,KAAK,IAAI;AACrB,QAAI,IAAI,IAAI,KAAK,IAAI;;AAvYzB,cAgZS,QAAP,eAAa,GAAe,GAAW,KAAuB;AAC5D,QAAI,IAAI,EAAE,IAAI;AACd,QAAI,IAAI,EAAE,IAAI;AACd,QAAI,IAAI,EAAE,IAAI;AACd,QAAI,IAAI,EAAE,IAAI;;AAmBhB,uBAAY,GAAe,GAAe,GAAe,GAAe;AAAA,QAA5D,MAA4D,QAAA;AAA5D,UAAY;;AAAgD,QAA7C,MAA6C,QAAA;AAA7C,UAAY;;AAAiC,QAA9B,MAA8B,QAAA;AAA9B,UAAY;;AAAkB,QAAf,MAAe,QAAA;AAAf,UAAY;;AAAG,SAfxE,IAewE;AAAA,SAbxE,IAawE;AAAA,SAXxE,IAWwE;AAAA,SATxE,IASwE;AACtE,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;;AA3ab,MAAA,SAAA,YAAA;AAAA,SAsbE,WAAA,kBAAS,GAAW,GAAW,GAAW,GAAuB;AAC/D,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AAET,WAAO;;AA5bX,SAqcE,kBAAA,yBAAgB,OAA0B,QAAgC;AAAA,QAAhC,WAAgC,QAAA;AAAhC,eAAiB;;AACzD,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM,SAAS;AACxB,SAAK,IAAI,MAAM,SAAS;AACxB,SAAK,IAAI,MAAM,SAAS;AACxB,WAAO;;AA1cX,SAidE,YAAA,qBAAwB;AACtB,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AAEV,WAAO;;AAtdX,SA8dE,eAAA,sBAAa,KAAsB;AAAA,QACzB,IAAY,KAAZ,GAAG,IAAS,KAAT,GAAG,IAAM,KAAN;AACd,QAAM,SAAS,IAAI,IAAI,IAAI,IAAI,IAAI;AAEnC,QAAI,SAAS,SAAS,eAAe;AACnC,UAAI,IAAI;AACR,UAAI,IAAI;AACR,UAAI,IAAI;AAER,aAAO;WACF;AACL,UAAM,MAAM,IAAM;AAClB,UAAI,IAAI,KAAK,IAAI;AACjB,UAAI,IAAI,KAAK,IAAI;AACjB,UAAI,IAAI,KAAK,IAAI;AAEjB,aAAO,KAAK,KAAK,KAAK,KAAK;;;AA9ejC,SAsfE,WAAA,oBAAuB;AACrB,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AACT,WAAO;;AA3fX,SAkgBE,SAAA,kBAAiB;AAAA,QACP,IAAe,KAAf,GAAG,IAAY,KAAZ,GAAG,IAAS,KAAT,GAAG,IAAM,KAAN;AACjB,WAAO,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;;AApgBjD,SA2gBE,gBAAA,yBAAwB;AAAA,QACd,IAAe,KAAf,GAAG,IAAY,KAAZ,GAAG,IAAS,KAAT,GAAG,IAAM,KAAN;AACjB,WAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;;AA7gBvC,SAohBE,YAAA,qBAAwB;AACtB,gBAAW,UAAU,MAAM;AAC3B,WAAO;;AAthBX,SA8hBE,UAAA,iBAAQ,KAAuB;AAC7B,SAAK,eAAe;AACpB,QAAM,IAAI,IAAI;AACd,QAAI,IAAI,IAAI;AACZ,QAAI,IAAI;AACR,WAAO;;AAniBX,SA2iBE,iBAAA,wBAAe,KAAuB;AAAA,QAC5B,IAAe,KAAf,GAAG,IAAY,KAAZ,GAAG,IAAS,KAAT,GAAG,IAAM,KAAN;AACjB,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AAEf,QAAI,IAAI,KAAK,KAAK,IAAO,MAAK;AAC9B,QAAI,KAAK,IAAI,IAAI,KAAK,SAAS,eAAe;AAC5C,UAAI,IAAI,KAAK,MAAM,IAAO,MAAK,KAAK,IAAM,IAAO,MAAK;AACtD,UAAI,IAAI,KAAK,MAAM,IAAO,MAAK,KAAK,IAAM,IAAO,MAAK;WACjD;AACL,UAAI,IAAI,KAAK,MAAM,KAAQ,MAAK,KAAK,IAAM,IAAO,MAAK;AACvD,UAAI,IAAI;;AAGV,WAAO;;AAhkBX,SAwkBE,UAAA,iBAAQ,KAA6C,WAAuB;AAAA,QAAvB,cAAuB,QAAA;AAAvB,kBAAoB;;AACvE,QAAI,aAAa,KAAK;AACtB,QAAI,YAAY,KAAK,KAAK;AAC1B,QAAI,YAAY,KAAK,KAAK;AAC1B,QAAI,YAAY,KAAK,KAAK;;AA5kB9B,SAmlBE,QAAA,kBAAoB;AAClB,WAAO,IAAI,YAAW,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;;AAplBvD,SA4lBE,UAAA,iBAAQ,KAA6B;AACnC,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK;AACb,WAAO;;AAjmBX,SAymBE,UAAA,iBAAQ,KAAyB;AAC/B,gBAAW,QAAQ,MAAM,KAAK;AAC9B,WAAO;;AA3mBX,SAmnBE,UAAA,iBAAQ,KAAyB;AAC/B,gBAAW,QAAQ,MAAM,KAAK;AAC9B,WAAO;;AArnBX,SA6nBE,UAAA,iBAAQ,KAAyB;AAC/B,gBAAW,QAAQ,MAAM,KAAK;AAC9B,WAAO;;AA/nBX,SAwoBE,oBAAA,2BAAkB,MAAe,KAAyB;AACxD,gBAAW,kBAAkB,MAAM,KAAK;AACxC,WAAO;;AA1oBX,SAkpBE,WAAA,kBAAS,MAA8B;AACrC,gBAAW,SAAS,MAAM,MAAM;AAChC,WAAO;;AAppBX,SA2pBE,SAAA,kBAAqB;AACnB,gBAAW,OAAO,MAAM;AACxB,WAAO;;AA7pBX,SAqqBE,MAAA,aAAI,MAA0B;AAC5B,WAAO,YAAW,IAAI,MAAM;;AAtqBhC,SA+qBE,OAAA,cAAK,MAAkB,GAAuB;AAC5C,gBAAW,KAAK,MAAM,MAAM,GAAG;AAC/B,WAAO;;AAjrBX,SAAA;;AAAa,WAEK,eAAe,IAAI;ICDxB,SAAb,WAAA;AAAA,UAgCS,WAAP,kBAAgB,MAAc,OAAe,KAAmB;AAC9D,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,MAAM;AACjB,QAAM,KAAK,IAAI;AAEf,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,KACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,KACb,MAAM,GAAG,KACT,MAAM,GAAG,KACT,MAAM,GAAG;AAEX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,KACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,KACb,MAAM,GAAG,KACT,MAAM,GAAG,KACT,MAAM,GAAG;AAEX,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAClD,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAClD,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAClD,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAElD,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAClD,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAClD,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAClD,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAElD,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAClD,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAClD,OAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AACnD,OAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAEnD,OAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AACnD,OAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AACnD,OAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AACnD,OAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;;AAzFvD,UAkGS,SAAP,gBAAc,MAAc,OAAwB;AAClD,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,MAAM;AAEjB,WACE,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,IAAI,GAAG,OAC1B,SAAS,OAAO,GAAG,KAAK,GAAG,QAC3B,SAAS,OAAO,GAAG,KAAK,GAAG,QAC3B,SAAS,OAAO,GAAG,KAAK,GAAG,QAC3B,SAAS,OAAO,GAAG,KAAK,GAAG,QAC3B,SAAS,OAAO,GAAG,KAAK,GAAG,QAC3B,SAAS,OAAO,GAAG,KAAK,GAAG;;AAtHjC,UA+HS,qBAAP,4BAA0B,YAAwB,KAAmB;AACnE,QAAM,KAAK,IAAI;AADoD,QAE3D,IAAe,WAAf,GAAG,IAAY,WAAZ,GAAG,IAAS,WAAT,GAAG,IAAM,WAAN;AACjB,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AAEb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AAEb,OAAG,KAAK,IAAI,KAAK;AACjB,OAAG,KAAK,KAAK;AACb,OAAG,KAAK,KAAK;AACb,OAAG,KAAK;AAER,OAAG,KAAK,KAAK;AACb,OAAG,KAAK,IAAI,KAAK;AACjB,OAAG,KAAK,KAAK;AACb,OAAG,KAAK;AAER,OAAG,KAAK,KAAK;AACb,OAAG,KAAK,KAAK;AACb,OAAG,MAAM,IAAI,KAAK;AAClB,OAAG,MAAM;AAET,OAAG,MAAM;AACT,OAAG,MAAM;AACT,OAAG,MAAM;AACT,OAAG,MAAM;;AAlKb,UA2KS,oBAAP,2BAAyB,MAAe,GAAW,KAAmB;AACpE,QAAM,KAAK,IAAI;AADqD,QAE9D,IAAY,KAAZ,GAAG,IAAS,KAAT,GAAG,IAAM,KAAN;AACZ,QAAI,MAAM,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI;AACxC,QAAI,GAAG,GAAG;AAEV,QAAI,KAAK,IAAI,OAAO,SAAS,eAAe;AAC1C;;AAGF,UAAM,IAAI;AACV,SAAK;AACL,SAAK;AACL,SAAK;AAEL,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,IAAI;AAGR,OAAG,KAAK,IAAI,IAAI,IAAI;AACpB,OAAG,KAAK,IAAI,IAAI,IAAI,IAAI;AACxB,OAAG,KAAK,IAAI,IAAI,IAAI,IAAI;AACxB,OAAG,KAAK;AAER,OAAG,KAAK,IAAI,IAAI,IAAI,IAAI;AACxB,OAAG,KAAK,IAAI,IAAI,IAAI;AACpB,OAAG,KAAK,IAAI,IAAI,IAAI,IAAI;AACxB,OAAG,KAAK;AAER,OAAG,KAAK,IAAI,IAAI,IAAI,IAAI;AACxB,OAAG,KAAK,IAAI,IAAI,IAAI,IAAI;AACxB,OAAG,MAAM,IAAI,IAAI,IAAI;AACrB,OAAG,MAAM;AAET,OAAG,MAAM;AACT,OAAG,MAAM;AACT,OAAG,MAAM;AACT,OAAG,MAAM;;AAjNb,UA0NS,sBAAP,6BAA2B,YAAwB,aAAsB,KAAmB;AAC1F,YAAO,mBAAmB,YAAY;AAEtC,QAAM,KAAK,IAAI;AACf,OAAG,MAAM,YAAY;AACrB,OAAG,MAAM,YAAY;AACrB,OAAG,MAAM,YAAY;;AAhOzB,UA0OS,uBAAP,8BAA4B,OAAgB,UAAsB,aAAsB,KAAmB;AACzG,QAAM,KAAK,IAAI;AAD0F,QAEjG,IAAe,SAAf,GAAG,IAAY,SAAZ,GAAG,IAAS,SAAT,GAAG,IAAM,SAAN;AACjB,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AAEb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,MAAM;AACf,QAAI,KAAK,MAAM;AACf,QAAI,KAAK,MAAM;AAEf,OAAG,KAAM,KAAK,MAAK,OAAO;AAC1B,OAAG,KAAM,MAAK,MAAM;AACpB,OAAG,KAAM,MAAK,MAAM;AACpB,OAAG,KAAK;AAER,OAAG,KAAM,MAAK,MAAM;AACpB,OAAG,KAAM,KAAK,MAAK,OAAO;AAC1B,OAAG,KAAM,MAAK,MAAM;AACpB,OAAG,KAAK;AAER,OAAG,KAAM,MAAK,MAAM;AACpB,OAAG,KAAM,MAAK,MAAM;AACpB,OAAG,MAAO,KAAK,MAAK,OAAO;AAC3B,OAAG,MAAM;AAET,OAAG,MAAM,YAAY;AACrB,OAAG,MAAM,YAAY;AACrB,OAAG,MAAM,YAAY;AACrB,OAAG,MAAM;;AAhRb,UAwRS,UAAP,iBAAe,GAAY,KAAmB;AAC5C,QAAM,KAAK,IAAI;AACf,OAAG,KAAK,EAAE;AACV,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;AAER,OAAG,KAAK;AACR,OAAG,KAAK,EAAE;AACV,OAAG,KAAK;AACR,OAAG,KAAK;AAER,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,MAAM,EAAE;AACX,OAAG,MAAM;AAET,OAAG,MAAM;AACT,OAAG,MAAM;AACT,OAAG,MAAM;AACT,OAAG,MAAM;;AA5Sb,UAoTS,cAAP,qBAAmB,cAAsB,KAAmB;AAC1D,QAAM,KAAK,IAAI;AACf,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;AAER,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;AAER,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,MAAM;AACT,OAAG,MAAM;AAET,OAAG,MAAM,aAAY;AACrB,OAAG,MAAM,aAAY;AACrB,OAAG,MAAM,aAAY;AACrB,OAAG,MAAM;;AAxUb,UAgVS,SAAP,gBAAc,GAAW,KAAmB;AAC1C,QAAM,KAAK,EAAE;AACb,QAAM,KAAK,IAAI;AAEf,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,KACT,MAAM,GAAG;AACX,QAAM,MAAM,GAAG,KACb,MAAM,GAAG,KACT,MAAM,GAAG,KACT,MAAM,GAAG;AAEX,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAE9B,QAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAC5E,QAAI,CAAC,KAAK;AACR,aAAO;;AAET,UAAM,IAAM;AAEZ,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAE9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAE9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC9C,OAAG,KAAM,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC9C,OAAG,MAAO,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,OAAG,MAAO,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAE/C,OAAG,MAAO,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,OAAG,MAAO,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,OAAG,MAAO,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,OAAG,MAAO,OAAM,MAAM,MAAM,MAAM,MAAM,OAAO;;AA1YnD,UAoZS,SAAP,gBAAc,KAAc,QAAiB,IAAa,KAAmB;AAC3E,QAAM,KAAK,IAAI;AACf,QAAM,QAAiB,QAAO;AAC9B,QAAM,QAAiB,QAAO;AAC9B,QAAM,QAAiB,QAAO;AAE9B,YAAQ,SAAS,KAAK,QAAQ;AAC9B,UAAM;AACN,YAAQ,MAAM,IAAI,OAAO;AACzB,UAAM;AACN,YAAQ,MAAM,OAAO,OAAO;AAE5B,OAAG,KAAK,MAAM;AACd,OAAG,KAAK,MAAM;AACd,OAAG,KAAK,MAAM;AACd,OAAG,KAAK;AAER,OAAG,KAAK,MAAM;AACd,OAAG,KAAK,MAAM;AACd,OAAG,KAAK,MAAM;AACd,OAAG,KAAK;AAER,OAAG,KAAK,MAAM;AACd,OAAG,KAAK,MAAM;AACd,OAAG,MAAM,MAAM;AACf,OAAG,MAAM;AAET,OAAG,MAAM,CAAC,QAAQ,IAAI,OAAO;AAC7B,OAAG,MAAM,CAAC,QAAQ,IAAI,OAAO;AAC7B,OAAG,MAAM,CAAC,QAAQ,IAAI,OAAO;AAC7B,OAAG,MAAM;;AAlbb,UA+bS,QAAP,eAAa,MAAc,OAAe,QAAgB,KAAa,MAAc,KAAa,KAAmB;AACnH,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAK,QAAO;AACvB,QAAM,KAAK,IAAK,UAAS;AACzB,QAAM,KAAK,IAAK,QAAO;AAEvB,OAAG,KAAK,KAAK;AACb,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;AAER,OAAG,KAAK;AACR,OAAG,KAAK,KAAK;AACb,OAAG,KAAK;AACR,OAAG,KAAK;AAER,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,MAAM,IAAI;AACb,OAAG,MAAM;AAET,OAAG,MAAO,QAAO,SAAS;AAC1B,OAAG,MAAO,OAAM,UAAU;AAC1B,OAAG,MAAO,OAAM,QAAQ;AACxB,OAAG,MAAM;;AAvdb,UAkeS,cAAP,qBAAmB,MAAc,QAAgB,MAAc,KAAa,KAAmB;AAC7F,QAAM,KAAK,IAAI;AACf,QAAM,IAAI,IAAM,KAAK,IAAI,OAAO;AAChC,QAAM,KAAK,IAAK,QAAO;AAEvB,OAAG,KAAK,IAAI;AACZ,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;AAER,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,KAAK;AAER,OAAG,KAAK;AACR,OAAG,KAAK;AACR,OAAG,MAAO,OAAM,QAAQ;AACxB,OAAG,MAAM;AAET,OAAG,MAAM;AACT,OAAG,MAAM;AACT,OAAG,MAAM,IAAI,MAAM,OAAO;AAC1B,OAAG,MAAM;;AAzfb,UAmgBS,kBAAP,yBAAuB,GAAW,MAAe,GAAW,KAAmB;AAAA,QACvE,IAAY,KAAZ,GAAG,IAAS,KAAT,GAAG,IAAM,KAAN;AACZ,QAAI,MAAM,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI;AAExC,QAAI,KAAK,IAAI,OAAO,SAAS,eAAe;AAC1C;;AAGF,QAAM,KAAK,EAAE;AACb,QAAM,KAAK,IAAI;AACf,QAAI,GAAG,GAAG;AAEV,UAAM,IAAI;AACV,SAAK;AACL,SAAK;AACL,SAAK;AAEL,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,IAAI;AAER,QAAI,MAAM,GAAG,IACX,MAAM,GAAG,IACT,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAI,MAAM,GAAG,IACX,MAAM,GAAG,IACT,MAAM,GAAG,IACT,MAAM,GAAG;AACX,QAAI,MAAM,GAAG,IACX,MAAM,GAAG,IACT,MAAM,GAAG,KACT,MAAM,GAAG;AAGX,QAAI,MAAM,IAAI,IAAI,IAAI;AACtB,QAAI,MAAM,IAAI,IAAI,IAAI,IAAI;AAC1B,QAAI,MAAM,IAAI,IAAI,IAAI,IAAI;AAC1B,QAAI,MAAM,IAAI,IAAI,IAAI,IAAI;AAC1B,QAAI,MAAM,IAAI,IAAI,IAAI;AACtB,QAAI,MAAM,IAAI,IAAI,IAAI,IAAI;AAC1B,QAAI,MAAM,IAAI,IAAI,IAAI,IAAI;AAC1B,QAAI,MAAM,IAAI,IAAI,IAAI,IAAI;AAC1B,QAAI,MAAM,IAAI,IAAI,IAAI;AAGtB,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AAEtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AAEtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACtC,OAAG,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACtC,OAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,OAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAEvC,QAAI,MAAM,KAAK;AAEb,SAAG,MAAM,GAAG;AACZ,SAAG,MAAM,GAAG;AACZ,SAAG,MAAM,GAAG;AACZ,SAAG,MAAM,GAAG;;;AArkBlB,UA+kBS,QAAP,eAAa,GAAW,GAAY,KAAmB;AACrD,QAAM,KAAK,EAAE;AACb,QAAM,KAAK,IAAI;AAFsC,QAG7C,IAAY,EAAZ,GAAG,IAAS,EAAT,GAAG,IAAM,EAAN;AAEd,OAAG,KAAK,GAAG,KAAK;AAChB,OAAG,KAAK,GAAG,KAAK;AAChB,OAAG,KAAK,GAAG,KAAK;AAChB,OAAG,KAAK,GAAG,KAAK;AAEhB,OAAG,KAAK,GAAG,KAAK;AAChB,OAAG,KAAK,GAAG,KAAK;AAChB,OAAG,KAAK,GAAG,KAAK;AAChB,OAAG,KAAK,GAAG,KAAK;AAEhB,OAAG,KAAK,GAAG,KAAK;AAChB,OAAG,KAAK,GAAG,KAAK;AAChB,OAAG,MAAM,GAAG,MAAM;AAClB,OAAG,MAAM,GAAG,MAAM;AAElB,OAAG,MAAM,GAAG;AACZ,OAAG,MAAM,GAAG;AACZ,OAAG,MAAM,GAAG;AACZ,OAAG,MAAM,GAAG;;AAtmBhB,UA+mBS,YAAP,mBAAiB,GAAW,GAAY,KAAmB;AACzD,QAAM,KAAK,EAAE;AACb,QAAM,KAAK,IAAI;AAF0C,QAGjD,IAAY,EAAZ,GAAG,IAAS,EAAT,GAAG,IAAM,EAAN;AAEd,QAAI,MAAM,KAAK;AACb,SAAG,MAAM,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG;AAChD,SAAG,MAAM,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG;AAChD,SAAG,MAAM,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,MAAM,IAAI,GAAG;AACjD,SAAG,MAAM,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,MAAM,IAAI,GAAG;WAC5C;AACL,UAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,IACT,MAAM,GAAG;AACX,UAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,IACT,MAAM,GAAG;AACX,UAAM,MAAM,GAAG,IACb,MAAM,GAAG,IACT,MAAM,GAAG,KACT,MAAM,GAAG;AAEV,SAAG,KAAK,KAAO,GAAG,KAAK,KAAO,GAAG,KAAK,KAAO,GAAG,KAAK;AACrD,SAAG,KAAK,KAAO,GAAG,KAAK,KAAO,GAAG,KAAK,KAAO,GAAG,KAAK;AACrD,SAAG,KAAK,KAAO,GAAG,KAAK,KAAO,GAAG,MAAM,KAAO,GAAG,MAAM;AAExD,SAAG,MAAM,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,GAAG;AAC1C,SAAG,MAAM,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,GAAG;AAC1C,SAAG,MAAM,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,GAAG;AAC1C,SAAG,MAAM,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,GAAG;;;AA9oBhD,UAupBS,YAAP,mBAAiB,GAAW,KAAmB;AAC7C,QAAM,KAAK,EAAE;AACb,QAAM,KAAK,IAAI;AAEf,QAAI,QAAQ,GAAG;AACb,UAAM,MAAM,GAAG;AACf,UAAM,MAAM,GAAG;AACf,UAAM,MAAM,GAAG;AACf,UAAM,MAAM,GAAG;AACf,UAAM,MAAM,GAAG;AACf,UAAM,MAAM,GAAG;AAEf,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AAEX,SAAG,KAAK;AACR,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AAEX,SAAG,KAAK;AACR,SAAG,KAAK;AACR,SAAG,MAAM,GAAG;AAEZ,SAAG,MAAM;AACT,SAAG,MAAM;AACT,SAAG,MAAM;WACJ;AACL,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AAEX,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AAEX,SAAG,KAAK,GAAG;AACX,SAAG,KAAK,GAAG;AACX,SAAG,MAAM,GAAG;AACZ,SAAG,MAAM,GAAG;AAEZ,SAAG,MAAM,GAAG;AACZ,SAAG,MAAM,GAAG;AACZ,SAAG,MAAM,GAAG;AACZ,SAAG,MAAM,GAAG;;;AAmChB,mBACE,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA;AAAA,QAhBA,QAgBA,QAAA;AAhBA,YAAc;;AAgBd,QAfA,QAeA,QAAA;AAfA,YAAc;;AAed,QAdA,QAcA,QAAA;AAdA,YAAc;;AAcd,QAbA,QAaA,QAAA;AAbA,YAAc;;AAad,QAZA,QAYA,QAAA;AAZA,YAAc;;AAYd,QAXA,QAWA,QAAA;AAXA,YAAc;;AAWd,QAVA,QAUA,QAAA;AAVA,YAAc;;AAUd,QATA,QASA,QAAA;AATA,YAAc;;AASd,QARA,QAQA,QAAA;AARA,YAAc;;AAQd,QAPA,QAOA,QAAA;AAPA,YAAc;;AAOd,QANA,QAMA,QAAA;AANA,YAAc;;AAMd,QALA,QAKA,QAAA;AALA,YAAc;;AAKd,QAJA,QAIA,QAAA;AAJA,YAAc;;AAId,QAHA,QAGA,QAAA;AAHA,YAAc;;AAGd,QAFA,QAEA,QAAA;AAFA,YAAc;;AAEd,QADA,QACA,QAAA;AADA,YAAc;;AACd,SAtCF,WAAyB,IAAI,aAAa;AAuCxC,QAAM,IAAkB,KAAK;AAE7B,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AAEP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AAEP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,MAAM;AACR,MAAE,MAAM;AAER,MAAE,MAAM;AACR,MAAE,MAAM;AACR,MAAE,MAAM;AACR,MAAE,MAAM;;AA9wBZ,MAAA,SAAA,QAAA;AAAA,SAqyBE,WAAA,kBACE,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACQ;AACR,QAAM,IAAI,KAAK;AAEf,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AAEP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AAEP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,MAAM;AACR,MAAE,MAAM;AAER,MAAE,MAAM;AACR,MAAE,MAAM;AACR,MAAE,MAAM;AACR,MAAE,MAAM;AAER,WAAO;;AA70BX,SAs1BE,kBAAA,yBAAgB,OAA0B,QAA4B;AAAA,QAA5B,WAA4B,QAAA;AAA5B,eAAiB;;AACzD,QAAM,OAAO,KAAK;AAClB,aAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,WAAK,KAAK,MAAM,IAAI;;AAEtB,WAAO;;AA31BX,SAm2BE,UAAA,iBAAQ,KAA6C,WAAuB;AAAA,QAAvB,cAAuB,QAAA;AAAvB,kBAAoB;;AACvE,QAAM,IAAI,KAAK;AAEf,QAAI,aAAa,EAAE;AACnB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,KAAK,EAAE;AACvB,QAAI,YAAY,MAAM,EAAE;AACxB,QAAI,YAAY,MAAM,EAAE;AACxB,QAAI,YAAY,MAAM,EAAE;AACxB,QAAI,YAAY,MAAM,EAAE;AACxB,QAAI,YAAY,MAAM,EAAE;AACxB,QAAI,YAAY,MAAM,EAAE;;AAr3B5B,SA43BE,QAAA,kBAAgB;AACd,QAAM,IAAI,KAAK;AACf,QAAI,MAAM,IAAI,QACZ,EAAE,IACF,EAAE,IACF,EAAE,IACF,EAAE,IACF,EAAE,IACF,EAAE,IACF,EAAE,IACF,EAAE,IACF,EAAE,IACF,EAAE,IACF,EAAE,KACF,EAAE,KACF,EAAE,KACF,EAAE,KACF,EAAE,KACF,EAAE;AAEJ,WAAO;;AAh5BX,SAw5BE,UAAA,iBAAQ,KAAqB;AAC3B,QAAM,IAAI,KAAK;AACf,QAAM,KAAK,IAAI;AAEf,OAAG,KAAK,EAAE;AACV,OAAG,KAAK,EAAE;AACV,OAAG,KAAK,EAAE;AACV,OAAG,KAAK,EAAE;AAEV,OAAG,KAAK,EAAE;AACV,OAAG,KAAK,EAAE;AACV,OAAG,KAAK,EAAE;AACV,OAAG,KAAK,EAAE;AAEV,OAAG,KAAK,EAAE;AACV,OAAG,KAAK,EAAE;AACV,OAAG,MAAM,EAAE;AACX,OAAG,MAAM,EAAE;AAEX,OAAG,MAAM,EAAE;AACX,OAAG,MAAM,EAAE;AACX,OAAG,MAAM,EAAE;AACX,OAAG,MAAM,EAAE;AAEX,WAAO;;AAh7BX,SAw7BE,WAAA,kBAAS,OAAuB;AAC9B,YAAO,SAAS,MAAM,OAAO;AAC7B,WAAO;;AA17BX,SAi8BE,cAAA,uBAAsB;AACpB,QAAM,IAAI,KAAK;AAEf,QAAM,MAAM,EAAE,IACZ,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE;AACV,QAAM,MAAM,EAAE,IACZ,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE;AACV,QAAM,MAAM,EAAE,IACZ,MAAM,EAAE,IACR,MAAM,EAAE,KACR,MAAM,EAAE;AACV,QAAM,MAAM,EAAE,KACZ,MAAM,EAAE,KACR,MAAM,EAAE,KACR,MAAM,EAAE;AAEV,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAM,MAAM,MAAM,MAAM,MAAM;AAG9B,WAAO,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;;AAn+B7E,SA6+BE,YAAA,mBAAU,aAAsB,UAAsB,OAAyB;AAC7E,QAAM,KAAgB,QAAO;AAE7B,QAAM,IAAI,KAAK;AACf,QAAM,MAAM,GAAG;AAEf,QAAM,MAAM,EAAE;AACd,QAAM,MAAM,EAAE;AACd,QAAM,MAAM,EAAE;AACd,QAAM,MAAM,EAAE;AACd,QAAM,MAAM,EAAE;AACd,QAAM,MAAM,EAAE;AACd,QAAM,MAAM,EAAE;AACd,QAAM,MAAM,EAAE;AACd,QAAM,MAAM,EAAE;AACd,QAAM,MAAM,EAAE;AACd,QAAM,MAAM,EAAE;AACd,QAAM,MAAM,EAAE;AAEd,gBAAY,IAAI,EAAE;AAClB,gBAAY,IAAI,EAAE;AAClB,gBAAY,IAAI,EAAE;AAElB,QAAM,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,OAAO,IAAI,KAAK;AACvD,QAAM,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,OAAO,IAAI,KAAK;AACvD,QAAM,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,OAAO,IAAI,KAAK;AAEvD,QAAM,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACxD,QAAM,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACxD,QAAM,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AAExD,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AAEV,QACE,KAAK,IAAI,MAAM,SAAS,iBACxB,KAAK,IAAI,MAAM,SAAS,iBACxB,KAAK,IAAI,MAAM,SAAS,eACxB;AACA,eAAS;AACT,aAAO;WACF;AACL,UAAM,QAAQ,IAAI;AAClB,UAAM,QAAQ,IAAI;AAClB,UAAM,QAAQ,IAAI;AAElB,UAAI,KAAK,MAAM;AACf,UAAI,KAAK,MAAM;AACf,UAAI,KAAK,MAAM;AACf,UAAI,KAAK,MAAM;AACf,UAAI,KAAK,MAAM;AACf,UAAI,KAAK,MAAM;AACf,UAAI,KAAK,MAAM;AACf,UAAI,KAAK,MAAM;AACf,UAAI,KAAK,MAAM;AACf,iBAAW,kBAAkB,IAAI;AACjC,aAAO;;;AAtiCb,SA+iCE,cAAA,qBAAY,KAA6B;AACvC,QAAM,IAAI,KAAK;AACf,QAAI,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE;AAE5B,QAAI,QAAQ,SAAS,eAAe;AAClC,UAAI,IAAI,KAAK,KAAK,QAAQ,KAAO;AACjC,UAAI,IAAI,OAAO;AACf,UAAI,IAAK,GAAE,KAAK,EAAE,MAAM;AACxB,UAAI,IAAK,GAAE,KAAK,EAAE,MAAM;AACxB,UAAI,IAAK,GAAE,KAAK,EAAE,MAAM;eACf,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK;AACtC,UAAI,KAAI,KAAK,KAAK,IAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO;AAC/C,UAAI,IAAK,GAAE,KAAK,EAAE,MAAM;AACxB,UAAI,IAAI,OAAO;AACf,UAAI,IAAK,GAAE,KAAK,EAAE,MAAM;AACxB,UAAI,IAAK,GAAE,KAAK,EAAE,MAAM;eACf,EAAE,KAAK,EAAE,KAAK;AACvB,UAAI,MAAI,KAAK,KAAK,IAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO;AAC/C,UAAI,IAAK,GAAE,KAAK,EAAE,MAAM;AACxB,UAAI,IAAK,GAAE,KAAK,EAAE,MAAM;AACxB,UAAI,IAAI,OAAO;AACf,UAAI,IAAK,GAAE,KAAK,EAAE,MAAM;WACnB;AACL,UAAI,MAAI,KAAK,KAAK,IAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM;AAC/C,UAAI,IAAK,GAAE,KAAK,EAAE,MAAM;AACxB,UAAI,IAAK,GAAE,KAAK,EAAE,MAAM;AACxB,UAAI,IAAK,GAAE,KAAK,EAAE,MAAM;AACxB,UAAI,IAAI,OAAO;;AAGjB,WAAO;;AA7kCX,SAqlCE,aAAA,oBAAW,KAAuB;AAEhC,QAAM,IAAI,KAAK;AACf,QAAM,MAAM,EAAE,IACZ,MAAM,EAAE,IACR,MAAM,EAAE;AACV,QAAM,MAAM,EAAE,IACZ,MAAM,EAAE,IACR,MAAM,EAAE;AACV,QAAM,MAAM,EAAE,IACZ,MAAM,EAAE,IACR,MAAM,EAAE;AAEV,QAAI,IAAI,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AAChD,QAAI,IAAI,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AAChD,QAAI,IAAI,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AAEhD,WAAO;;AAtmCX,SA8mCE,iBAAA,wBAAe,KAAuB;AACpC,QAAM,IAAI,KAAK;AAEf,QAAI,IAAI,EAAE;AACV,QAAI,IAAI,EAAE;AACV,QAAI,IAAI,EAAE;AAEV,WAAO;;AArnCX,SA4nCE,WAAA,oBAAmB;AACjB,QAAM,IAAI,KAAK;AAEf,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AAEP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,KAAK;AAEP,MAAE,KAAK;AACP,MAAE,KAAK;AACP,MAAE,MAAM;AACR,MAAE,MAAM;AAER,MAAE,MAAM;AACR,MAAE,MAAM;AACR,MAAE,MAAM;AACR,MAAE,MAAM;AAER,WAAO;;AAnpCX,SA0pCE,SAAA,kBAAiB;AACf,YAAO,OAAO,MAAM;AACpB,WAAO;;AA5pCX,SAqqCE,kBAAA,yBAAgB,MAAe,GAAmB;AAChD,YAAO,gBAAgB,MAAM,MAAM,GAAG;AACtC,WAAO;;AAvqCX,SA+qCE,QAAA,eAAM,GAAoB;AACxB,YAAO,MAAM,MAAM,GAAG;AACtB,WAAO;;AAjrCX,SAyrCE,YAAA,mBAAU,GAAoB;AAC5B,YAAO,UAAU,MAAM,GAAG;AAC1B,WAAO;;AA3rCX,SAksCE,YAAA,qBAAoB;AAClB,YAAO,UAAU,MAAM;AACvB,WAAO;;AApsCX,SAAA;;AAAa,OACa,aAAsB,IAAI;AADvC,OAEa,aAAsB,IAAI;AAFvC,OAGa,aAAsB,IAAI;AAHvC,OAIa,aAAwB,IAAI;AAJzC,OAOK,YAAoB,IAAI,OACtC,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA;ICvBS,MAAb,WAAA;AAWE,gBAAY,QAAwB,WAA2B;AAAA,QAAnD,WAAmD,QAAA;AAAnD,eAAkB;;AAAiC,QAA3B,cAA2B,QAAA;AAA3B,kBAAqB;;AAAM,SATtD,SAAkB,IAAI;AASgC,SAPtD,YAAqB,IAAI;AAQhC,cAAU,OAAO,QAAQ,KAAK;AAC9B,iBAAa,UAAU,QAAQ,KAAK;;AAbxC,MAAA,SAAA,KAAA;AAAA,SAqBE,iBAAA,wBAAe,OAAsB;AACnC,WAAO,cAAc,sBAAsB,MAAM;;AAtBrD,SA8BE,kBAAA,yBAAgB,QAAgC;AAC9C,WAAO,cAAc,uBAAuB,MAAM;;AA/BtD,SAuCE,eAAA,sBAAa,KAA0B;AACrC,WAAO,cAAc,oBAAoB,MAAM;;AAxCnD,SAiDE,WAAA,kBAAS,UAAkB,KAAuB;AAChD,YAAQ,MAAM,KAAK,WAAW,UAAU;AACxC,WAAO,IAAI,IAAI,KAAK;;AAnDxB,SAAA;;ACLA,IAAM,MAAM,SAAS;IAGR,YAAb,WAAA;AAKE,sBAAY,QAAS,KAAM,OAAQ;AAAA,SAJ5B,SAI4B;AAAA,SAH5B,MAG4B;AAAA,SAF5B,QAE4B;AACjC,SAAK,SAAS,WAAW,SAAY,SAAS;AAC9C,SAAK,MAAM,QAAQ,SAAY,MAAM;AACrC,SAAK,QAAQ,UAAU,SAAY,QAAQ;;AAR/C,MAAA,SAAA,WAAA;AAAA,SAWE,MAAA,cAAI,QAAQ,KAAK,OAAO;AACtB,SAAK,SAAS;AACd,SAAK,MAAM;AACX,SAAK,QAAQ;AAEb,WAAO;;AAhBX,SAmBE,WAAA,oBAAW;AACT,SAAK,MAAM,SAAS,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AACnD,WAAO;;AArBX,SAwBE,cAAA,qBAAY,IAAa;AACvB,SAAK,SAAS,GAAG;AACjB,QAAI,KAAK,WAAW,GAAG;AACrB,WAAK,QAAQ;AACb,WAAK,MAAM;WACN;AACL,WAAK,QAAQ,KAAK,MAAM,GAAG,GAAG,GAAG;AACjC,WAAK,MAAM,KAAK,KAAK,SAAS,MAAM,GAAG,IAAI,KAAK,QAAQ,IAAI;;AAG9D,WAAO;;AAlCX,SAqCE,YAAA,mBAAU,IAAa;AACrB,QAAM,eAAe,KAAK,IAAI,KAAK,OAAO,KAAK;AAE/C,OAAG,IAAI,eAAe,KAAK,IAAI,KAAK;AACpC,OAAG,IAAI,KAAK,IAAI,KAAK,OAAO,KAAK;AACjC,OAAG,IAAI,eAAe,KAAK,IAAI,KAAK;AAEpC,WAAO;;AA5CX,SAAA;;ICDa,UAAb,WAAA;AAAA,WAYS,MAAP,aAAW,MAAe,OAAgB,KAAoB;AAC5D,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;;AAd3B,WAuBS,WAAP,kBAAgB,MAAe,OAAgB,KAAoB;AACjE,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;;AAzB3B,WAkCS,WAAP,kBAAgB,MAAe,OAAgB,KAAoB;AACjE,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;;AApC3B,WA6CS,SAAP,gBAAc,MAAe,OAAgB,KAAoB;AAC/D,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;;AA/C3B,WAwDS,MAAP,aAAW,MAAe,OAAwB;AAChD,WAAO,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM;;AAzD7C,WAkES,WAAP,kBAAgB,MAAe,OAAwB;AACrD,QAAM,IAAI,MAAM,IAAI,KAAK;AACzB,QAAM,IAAI,MAAM,IAAI,KAAK;AACzB,WAAO,KAAK,KAAK,IAAI,IAAI,IAAI;;AArEjC,WA8ES,kBAAP,yBAAuB,MAAe,OAAwB;AAC5D,QAAM,IAAI,MAAM,IAAI,KAAK;AACzB,QAAM,IAAI,MAAM,IAAI,KAAK;AACzB,WAAO,IAAI,IAAI,IAAI;;AAjFvB,WA0FS,SAAP,gBAAc,MAAe,OAAyB;AACpD,WAAO,SAAS,OAAO,KAAK,GAAG,MAAM,MAAM,SAAS,OAAO,KAAK,GAAG,MAAM;;AA3F7E,WAqGS,OAAP,cAAY,MAAe,OAAgB,GAAW,KAAoB;AAAA,QAChE,IAAS,KAAT,GAAG,IAAM,KAAN;AACX,QAAI,IAAI,IAAK,OAAM,IAAI,KAAK;AAC5B,QAAI,IAAI,IAAK,OAAM,IAAI,KAAK;;AAxGhC,WAiHS,MAAP,aAAW,MAAe,OAAgB,KAAoB;AAC5D,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;AAC/B,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;;AAnHnC,WA4HS,MAAP,aAAW,MAAe,OAAgB,KAAoB;AAC5D,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;AAC/B,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;;AA9HnC,WAsIS,SAAP,gBAAc,MAAe,KAAoB;AAC/C,QAAI,IAAI,CAAC,KAAK;AACd,QAAI,IAAI,CAAC,KAAK;;AAxIlB,WAgJS,YAAP,mBAAiB,MAAe,KAAoB;AAAA,QAC1C,IAAS,KAAT,GAAG,IAAM,KAAN;AACX,QAAI,MAAc,KAAK,KAAK,IAAI,IAAI,IAAI;AACxC,QAAI,MAAM,SAAS,eAAe;AAChC,YAAM,IAAI;AACV,UAAI,IAAI,IAAI;AACZ,UAAI,IAAI,IAAI;;;AAtJlB,WAgKS,QAAP,eAAa,MAAe,GAAW,KAAoB;AACzD,QAAI,IAAI,KAAK,IAAI;AACjB,QAAI,IAAI,KAAK,IAAI;;AAanB,oBAAY,GAAe,GAAe;AAAA,QAA9B,MAA8B,QAAA;AAA9B,UAAY;;AAAkB,QAAf,MAAe,QAAA;AAAf,UAAY;;AAAG,SAT1C,IAS0C;AAAA,SAP1C,IAO0C;AACxC,SAAK,IAAI;AACT,SAAK,IAAI;;AAjLb,MAAA,SAAA,SAAA;AAAA,SA0LE,WAAA,kBAAS,GAAW,GAAoB;AACtC,SAAK,IAAI;AACT,SAAK,IAAI;AACT,WAAO;;AA7LX,SAsME,kBAAA,yBAAgB,OAA0B,QAA6B;AAAA,QAA7B,WAA6B,QAAA;AAA7B,eAAiB;;AACzD,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM,SAAS;AACxB,WAAO;;AAzMX,SAiNE,MAAA,aAAI,OAAyB;AAC3B,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,WAAO;;AApNX,SA4NE,WAAA,kBAAS,OAAyB;AAChC,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,WAAO;;AA/NX,SAuOE,WAAA,kBAAS,OAAyB;AAChC,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,WAAO;;AA1OX,SAkPE,SAAA,gBAAO,OAAyB;AAC9B,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,WAAO;;AArPX,SA4PE,SAAA,kBAAiB;AAAA,QACP,IAAS,KAAT,GAAG,IAAM,KAAN;AACX,WAAO,KAAK,KAAK,IAAI,IAAI,IAAI;;AA9PjC,SAqQE,gBAAA,yBAAwB;AAAA,QACd,IAAS,KAAT,GAAG,IAAM,KAAN;AACX,WAAO,IAAI,IAAI,IAAI;;AAvQvB,SA8QE,SAAA,kBAAkB;AAChB,SAAK,IAAI,CAAC,KAAK;AACf,SAAK,IAAI,CAAC,KAAK;AACf,WAAO;;AAjRX,SAwRE,YAAA,qBAAqB;AACnB,aAAQ,UAAU,MAAM;AACxB,WAAO;;AA1RX,SAkSE,QAAA,eAAM,GAAoB;AACxB,SAAK,KAAK;AACV,SAAK,KAAK;AACV,WAAO;;AArSX,SA6SE,UAAA,iBAAQ,KAA6C,WAAuB;AAAA,QAAvB,cAAuB,QAAA;AAAvB,kBAAoB;;AACvE,QAAI,aAAa,KAAK;AACtB,QAAI,YAAY,KAAK,KAAK;;AA/S9B,SAsTE,QAAA,kBAAiB;AACf,WAAO,IAAI,SAAQ,KAAK,GAAG,KAAK;;AAvTpC,SA+TE,UAAA,iBAAQ,KAAuB;AAC7B,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK;AACb,WAAO;;AAlUX,SAAA;;AAAa,QAEK,QAAQ,IAAI,QAAQ,GAAK;AAF9B,QAIK,OAAO,IAAI,QAAQ,GAAK;ICF7B,UAAb,WAAA;AAAA,WAYS,MAAP,aAAW,MAAe,OAAgB,KAAoB;AAC5D,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;;AAhB3B,WAyBS,WAAP,kBAAgB,MAAe,OAAgB,KAAoB;AACjE,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;;AA7B3B,WAsCS,WAAP,kBAAgB,MAAe,OAAgB,KAAoB;AACjE,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;;AA1C3B,WAmDS,SAAP,gBAAc,MAAe,OAAgB,KAAoB;AAC/D,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;AACvB,QAAI,IAAI,KAAK,IAAI,MAAM;;AAvD3B,WAgES,MAAP,aAAW,MAAe,OAAwB;AAChD,WAAO,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM;;AAjEnF,WA0ES,WAAP,kBAAgB,GAAY,GAAoB;AAC9C,QAAM,IAAI,EAAE,IAAI,EAAE;AAClB,QAAM,IAAI,EAAE,IAAI,EAAE;AAClB,QAAM,IAAI,EAAE,IAAI,EAAE;AAClB,QAAM,IAAI,EAAE,IAAI,EAAE;AAClB,WAAO,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;;AA/EjD,WAwFS,kBAAP,yBAAuB,GAAY,GAAoB;AACrD,QAAM,IAAI,EAAE,IAAI,EAAE;AAClB,QAAM,IAAI,EAAE,IAAI,EAAE;AAClB,QAAM,IAAI,EAAE,IAAI,EAAE;AAClB,QAAM,IAAI,EAAE,IAAI,EAAE;AAClB,WAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;;AA7FvC,WAsGS,SAAP,gBAAc,MAAe,OAAyB;AACpD,WACE,SAAS,OAAO,KAAK,GAAG,MAAM,MAC9B,SAAS,OAAO,KAAK,GAAG,MAAM,MAC9B,SAAS,OAAO,KAAK,GAAG,MAAM,MAC9B,SAAS,OAAO,KAAK,GAAG,MAAM;;AA3GpC,WAsHS,OAAP,cAAY,OAAgB,KAAc,GAAW,KAAoB;AAAA,QAC/D,IAAe,MAAf,GAAG,IAAY,MAAZ,GAAG,IAAS,MAAT,GAAG,IAAM,MAAN;AACjB,QAAI,IAAI,IAAK,KAAI,IAAI,KAAK;AAC1B,QAAI,IAAI,IAAK,KAAI,IAAI,KAAK;AAC1B,QAAI,IAAI,IAAK,KAAI,IAAI,KAAK;AAC1B,QAAI,IAAI,IAAK,KAAI,IAAI,KAAK;;AA3H9B,WAoIS,MAAP,aAAW,MAAe,OAAgB,KAAoB;AAC5D,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;AAC/B,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;AAC/B,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;AAC/B,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;;AAxInC,WAiJS,MAAP,aAAW,MAAe,OAAgB,KAAoB;AAC5D,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;AAC/B,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;AAC/B,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;AAC/B,QAAI,IAAI,KAAK,IAAI,KAAK,GAAG,MAAM;;AArJnC,WA6JS,SAAP,gBAAc,GAAY,KAAoB;AAC5C,QAAI,IAAI,CAAC,EAAE;AACX,QAAI,IAAI,CAAC,EAAE;AACX,QAAI,IAAI,CAAC,EAAE;AACX,QAAI,IAAI,CAAC,EAAE;;AAjKf,WAyKS,YAAP,mBAAiB,GAAY,KAAoB;AAAA,QACvC,IAAe,EAAf,GAAG,IAAY,EAAZ,GAAG,IAAS,EAAT,GAAG,IAAM,EAAN;AACjB,QAAI,MAAc,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACxD,QAAI,MAAM,SAAS,eAAe;AAChC,YAAM,IAAI;AACV,UAAI,IAAI,IAAI;AACZ,UAAI,IAAI,IAAI;AACZ,UAAI,IAAI,IAAI;AACZ,UAAI,IAAI,IAAI;;;AAjLlB,WA2LS,QAAP,eAAa,GAAY,GAAW,KAAoB;AACtD,QAAI,IAAI,EAAE,IAAI;AACd,QAAI,IAAI,EAAE,IAAI;AACd,QAAI,IAAI,EAAE,IAAI;AACd,QAAI,IAAI,EAAE,IAAI;;AA/LlB,WAwMS,YAAP,mBAAiB,GAAY,GAAW,KAAoB;AAAA,QAClD,IAAe,EAAf,GAAG,IAAY,EAAZ,GAAG,IAAS,EAAT,GAAG,IAAM,EAAN;AACjB,QAAM,IAAI,EAAE;AACZ,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AAC/C,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AAC/C,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM,IAAI,EAAE;AAChD,QAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM,IAAI,EAAE;;AA9MpD,WAuNS,kBAAP,yBAAuB,GAAY,GAAe,KAAoB;AAAA,QAC5D,IAAe,EAAf,GAAG,IAAY,EAAZ,GAAG,IAAS,EAAT,GAAG,IAAM,EAAN;AACjB,QAAM,KAAK,EAAE;AACb,QAAM,KAAK,EAAE;AACb,QAAM,KAAK,EAAE;AACb,QAAM,KAAK,EAAE;AAGb,QAAM,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAClC,QAAM,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAClC,QAAM,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAClC,QAAM,KAAK,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK;AAGnC,QAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC3C,QAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC3C,QAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC3C,QAAI,IAAI;;AAmBV,oBAAY,GAAe,GAAe,GAAe,GAAe;AAAA,QAA5D,MAA4D,QAAA;AAA5D,UAAY;;AAAgD,QAA7C,MAA6C,QAAA;AAA7C,UAAY;;AAAiC,QAA9B,MAA8B,QAAA;AAA9B,UAAY;;AAAkB,QAAf,MAAe,QAAA;AAAf,UAAY;;AAAG,SAfxE,IAewE;AAAA,SAbxE,IAawE;AAAA,SAXxE,IAWwE;AAAA,SATxE,IASwE;AACtE,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;;AA/Pb,MAAA,SAAA,SAAA;AAAA,SA0QE,WAAA,kBAAS,GAAW,GAAW,GAAW,GAAoB;AAC5D,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AACT,WAAO;;AA/QX,SAwRE,kBAAA,yBAAgB,OAA0B,QAA6B;AAAA,QAA7B,WAA6B,QAAA;AAA7B,eAAiB;;AACzD,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM,SAAS;AACxB,SAAK,IAAI,MAAM,SAAS;AACxB,SAAK,IAAI,MAAM,SAAS;AACxB,WAAO;;AA7RX,SAqSE,MAAA,aAAI,OAAyB;AAC3B,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,WAAO;;AA1SX,SAkTE,WAAA,kBAAS,OAAyB;AAChC,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,WAAO;;AAvTX,SA+TE,WAAA,kBAAS,OAAyB;AAChC,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,WAAO;;AApUX,SA4UE,SAAA,gBAAO,OAAyB;AAC9B,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,SAAK,KAAK,MAAM;AAChB,WAAO;;AAjVX,SAwVE,SAAA,kBAAiB;AAAA,QACP,IAAe,KAAf,GAAG,IAAY,KAAZ,GAAG,IAAS,KAAT,GAAG,IAAM,KAAN;AACjB,WAAO,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;;AA1VjD,SAiWE,gBAAA,yBAAwB;AAAA,QACd,IAAe,KAAf,GAAG,IAAY,KAAZ,GAAG,IAAS,KAAT,GAAG,IAAM,KAAN;AACjB,WAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;;AAnWvC,SA0WE,SAAA,kBAAkB;AAChB,SAAK,IAAI,CAAC,KAAK;AACf,SAAK,IAAI,CAAC,KAAK;AACf,SAAK,IAAI,CAAC,KAAK;AACf,SAAK,IAAI,CAAC,KAAK;AACf,WAAO;;AA/WX,SAsXE,YAAA,qBAAqB;AACnB,aAAQ,UAAU,MAAM;AACxB,WAAO;;AAxXX,SAgYE,QAAA,eAAM,GAAoB;AACxB,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AACV,WAAO;;AArYX,SA6YE,UAAA,iBAAQ,KAA6C,WAAuB;AAAA,QAAvB,cAAuB,QAAA;AAAvB,kBAAoB;;AACvE,QAAI,aAAa,KAAK;AACtB,QAAI,YAAY,KAAK,KAAK;AAC1B,QAAI,YAAY,KAAK,KAAK;AAC1B,QAAI,YAAY,KAAK,KAAK;;AAjZ9B,SAwZE,QAAA,kBAAiB;AACf,QAAI,MAAM,IAAI,SAAQ,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;AACnD,WAAO;;AA1ZX,SAkaE,UAAA,iBAAQ,KAAuB;AAC7B,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK;AACb,WAAO;;AAvaX,SAAA;;AAAa,QAEK,QAAQ,IAAI,QAAQ,GAAK,GAAK,GAAK;AAFxC,QAIK,OAAO,IAAI,QAAQ,GAAK,GAAK,GAAK;ICNvC,QAAb,WAAA;AAAA,SAMS,qBAAP,4BAA0B,OAAuB;AAI/C,QAAI,SAAS;AAAK,aAAO;aAChB,SAAS;AAAS,aAAO,QAAQ;aACjC,QAAQ;AAAK,aAAO,KAAK,IAAK,SAAQ,SAAS,OAAO;;AAC1D,aAAO,KAAK,IAAI,OAAO;;AAbhC,SAqBS,qBAAP,4BAA0B,OAAuB;AAI/C,QAAI,SAAS;AAAK,aAAO;aAChB,QAAQ;AAAW,aAAO,QAAQ;aAClC,QAAQ;AAAK,aAAO,QAAQ,KAAK,IAAI,OAAO,WAAW;;AAC3D,aAAO,KAAK,IAAI,OAAO;;AA5BhC,SAqCS,SAAP,gBAAc,MAAa,OAAuB;AAChD,WACE,SAAS,OAAO,KAAK,GAAG,MAAM,MAC9B,SAAS,OAAO,KAAK,GAAG,MAAM,MAC9B,SAAS,OAAO,KAAK,GAAG,MAAM,MAC9B,SAAS,OAAO,KAAK,GAAG,MAAM;;AAoBlC,kBAAY,GAAe,GAAe,GAAe,GAAe;AAAA,QAA5D,MAA4D,QAAA;AAA5D,UAAY;;AAAgD,QAA7C,MAA6C,QAAA;AAA7C,UAAY;;AAAiC,QAA9B,MAA8B,QAAA;AAA9B,UAAY;;AAAkB,QAAf,MAAe,QAAA;AAAf,UAAY;;AAAG,SAfjE,IAeiE;AAAA,SAbjE,IAaiE;AAAA,SAXjE,IAWiE;AAAA,SATjE,IASiE;AACtE,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;;AAlEb,MAAA,SAAA,OAAA;AAAA,SAyEE,QAAA,kBAAe;AACb,QAAM,MAAM,IAAI,OAAM,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;AACnD,WAAO;;AA3EX,SAmFE,UAAA,iBAAQ,KAAmB;AACzB,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK;AACb,WAAO;;AAxFX,SAgGE,WAAA,kBAAS,KAAmB;AAC1B,QAAI,IAAI,OAAM,mBAAmB,KAAK;AACtC,QAAI,IAAI,OAAM,mBAAmB,KAAK;AACtC,QAAI,IAAI,OAAM,mBAAmB,KAAK;AACtC,WAAO;;AApGX,SA4GE,UAAA,iBAAQ,KAAmB;AACzB,QAAI,IAAI,OAAM,mBAAmB,KAAK;AACtC,QAAI,IAAI,OAAM,mBAAmB,KAAK;AACtC,QAAI,IAAI,OAAM,mBAAmB,KAAK;AACtC,WAAO;;AAhHX,SAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICDY;UAAA,qBAAA;AAAA,sBAAA,oBAAA,aAAA,KAAA;AAAA,sBAAA,oBAAA,aAAA,KAAA;AAAA,sBAAA,oBAAA,YAAA,KAAA;GAAA,sBAAA,sBAAA;IAWC,eAAb,SAAA,UAAA;AAAA,iBAAA,eAAA;AAAA,gBA8FS,MAAP,aAAc,UAAmD;AAC/D,WAAO,IAAI,cAAa,SAAC,SAAS,QAAQ,aAAgB;AACxD,UAAI,CAAC,MAAM,QAAQ,WAAW;AAC5B,eAAO,QAAQ,CAAC;;AAGlB,UAAI,YAAY;AAChB,UAAI,QAAQ,SAAS;AACrB,UAAI,UAAU,IAAI,MAAS;AAE3B,eAAS,QAAQ,SAAC,OAAO,OAAU;AACjC,gBAAQ,QAAQ,OACb,KAAK,SAAC,QAAW;AAChB,kBAAQ,SAAS;AAEjB,uBAAa;AACb,sBAAY,YAAY;AAExB,cAAI,aAAa,OAAO;AACtB,oBAAQ;;WAGX,MAAM,SAAC,KAAD;AAAA,iBAAS,OAAO;;;;;AApHjC,MAAA,SAAA,cAAA;AAAA,SAiJE,aAAA,oBAAW,UAAuD;AAChE,SAAK,WAAW,IAAI;AACpB,WAAO;;AAnJX,SA0JE,SAAA,kBAA0B;AACxB,QAAI,KAAK,YAAY,mBAAmB,SAAS;AAC/C,aAAO;;AAET,SAAK,QAAQ;AACb,WAAO;;AAUT,yBACE,UAKA;AAAA,QAAA;AACA,QAAI;AAEJ,QAAM,cAAc,sBAAC,UAAqB;AACxC,UAAI,YAAY,MAAK,WAAW;AAC9B;;AAEF,YAAK,YAAY;AAEjB,eAAA,YAAA,gCAAuB,MAAK,aAA5B,OAAA,CAAA,SAAA,aAAA,QAAwC;AAAA,YAA7B,WAA6B,MAAA;AACtC,iBAAS;;;AAIb,YAAA,SAAA,KAAA,MAAM,SAAC,SAAS,QAAW;AACzB,kBAAY,oBAAC,QAAiB;AAE5B,gBAAQ,UAAU,KAAK,WAAM;AAC3B,gBAAK,UAAU,mBAAmB;AAClC,iBAAO;;;AAGX,eACE,SAAC,OAAa;AAEZ,gBAAQ,UAAU,KAAK,WAAM;AAC3B,sBAAY;AACZ,gBAAK,UAAU,mBAAmB;AAClC,kBAAQ;;SAGZ,WACA,SAAC,UAAqB;AAEpB,gBAAQ,UAAU,KAAK,WAAM;AAC3B,sBAAY;;;UArBpB;AAdA,UAtDM,UAsDN;AAAA,UArDM,YAqDN;AAAA,UApDM,UAoDN;AAAA,UAnDM,aAmDN;AAwCA,UAAK,UAAU;AACf,UAAK,aAAa,IAAI;AACtB,UAAK,YAAY;AACjB,UAAK,UAAU,mBAAmB;AA3ClC,WAAA;;AA/KJ,eAAA,eAAA,CAAA;IAAA,KAAA;IAAA,KAiIE,gBAAiC;AAC/B,aAAO,KAAK;;KAlIhB;IAAA,KAAA;IAAA,KAwIE,gBAAuB;AACrB,aAAO,KAAK;;;AAzIhB,SAAA;EAAA,iBAAqC;IChBxB,OAAO;EAClB,SACE,aAAa,QACT,MAAM,UACN,SAAC,OAAwB;AACvB,WAAO,SAAS,KAAK,WAAW;;EAExC,aAPkB,qBAON,GAAiB;AAC3B,WAAO,CAAC,CAAC,KAAK,OAAO,EAAE,WAAW,YAAY,OAAO,MAAM;;EAE7D,OAVkB,eAUT,KAAW;AAClB,QAAI,OAAO,QAAQ,YAAY,QAAQ,MAAM;AAC3C,aAAO;;AAET,QAAI;AACJ,QAAI,KAAK,YAAY,MAAM;AACzB,YAAO,IAAY;AACnB,eAAS,IAAI,GAAG,IAAK,IAAY,QAAQ,IAAI,GAAG,KAAK;AACnD,YAAI,KAAK,KAAK,MAAM,IAAI;;WAErB;AACL,YAAM;AACN,eAAW,KAAK,KAAK;AACnB,YAAI,IAAI,eAAe,IAAI;AACzB,cAAI,KAAK,KAAK,MAAM,IAAI;;;;AAK9B,WAAO;;EAGT,cAhCkB,sBAgCL,MAAY,UAAuB;AAAA,QAAvB,aAAuB,QAAA;AAAvB,iBAAmB;;AAC1C,QAAI,aAAa,UAAU,YAAY;AACrC,gBAAU,WAAW,MAAM;AAC3B;;AAGF,QAAI,MAAM,OAAO,IAAI,gBAAgB;AACrC,QAAI,IAAI,SAAS,cAAc;AAC/B,aAAS,KAAK,YAAY;AAC1B,MAAE,MAAM,UAAU;AAClB,MAAE,OAAO;AACT,MAAE,WAAW;AACb,MAAE,iBAAiB,SAAS,WAAM;AAChC,UAAI,EAAE,eAAe;AACnB,UAAE,cAAc,YAAY;;;AAGhC,MAAE;AACF,WAAO,IAAI,gBAAgB;;;AAYxB,yBAAyB,OAAc,MAAoB;AAChE,MAAM,QAAQ,MAAM,QAAQ;AAC5B,MAAI,QAAQ,GAAG;AACb,WAAO;;AAET,MAAM,OAAO,MAAM,SAAS;AAC5B,MAAI,UAAU,MAAM;AAClB,QAAM,MAAM,MAAM;AAClB,UAAM,SAAS;;AAEjB,QAAM;AACN,SAAO;;AAGF,sBAAsB,KAAU;AACrC,SAAO,OAAO,KAAK,KAAK,IAAI,SAAC,KAAD;AAAA,WAAc,IAAI;;;IClEnC,kBAAb,WAAA;AAAA,mBAQS,aAAP,oBAAkB,MAAiB,QAAqB,UAAoB;AAC1E,SAAK,SAAS,QAAQ;AACtB,aAAS,IAAI,GAAG,MAAM,SAAS,QAAQ,IAAI,KAAK,KAAK;AACnD,WAAK,gBAAgB,SAAS,MAAM;;;AAX1C,mBAeiB,gBAAf,uBAA6B,KAAwB;AACnD,QAAM,OAAO,IAAI,MAAM,KAAK;AAC5B,WAAO,KAAK,gBAAgB,KAAK,UAAU,KAAK,YAAY,OAAO;;AAuBrE,4BAA4B,QAAgB;AAAA,SAAhB,SAAA;AAAgB,SAnB5C,aAAqB;AAmBuB,SAjB5C,gBAAwB;AAiBoB,SAf5C,UAAkB;AAe0B,SAZpC,aAAwC,OAAO,OAAO;AAYlB,SAVpC,gBAA2C,OAAO,OAAO;AAUrB,SARpC,iBAA+C,OAAO,OAAO;AAQzB,SANpC,mBAAyD;;AAlCnE,MAAA,SAAA,iBAAA;AAAA,SAsEE,OAAA,cAAQ,WAAkF;AAAA,QAAA,QAAA;AAExF,QAAI,CAAC,MAAM,QAAQ,YAAY;AAC7B,aAAO,KAAK,gBAAgB;;AAG9B,QAAM,WAAW,UAAU,IAAI,SAAC,MAAD;AAAA,aAAU,MAAK,gBAAmB;;AACjE,WAAO,aAAa,IAAI;;AA7E5B,SAiGE,kBAAA,yBAAgB,KAA+B;AAAA,QAAA,SAAA;AAC7C,QAAI,CAAC,KAAK;AACR,mBAAa,KAAK,kBAAkB,QAAQ,SAAC,SAAY;AACvD,gBAAQ;;eAED,OAAO,QAAQ,UAAU;AAAA,UAAA;AAClC,MAAA,yBAAA,KAAK,iBAAiB,UAAtB,QAAA,0BAAA,SAAA,SAAA,sBAA4B;WACvB;AACL,UAAI,QAAQ,SAAC,GAAM;AAAA,YAAA;AACjB,QAAA,yBAAA,OAAK,iBAAiB,QAAtB,QAAA,0BAAA,SAAA,SAAA,sBAA0B;;;;AA1GlC,SAmHE,KAAA,cAAW;AACT,QAAM,UAAU,aAAa,KAAK;AAClC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AAClD,UAAI,CAAC,QAAQ,GAAG,aAAa;AAC3B,gBAAQ,GAAG;;;;AAvHnB,SAiIE,eAAA,sBAAa,YAA4B;AACvC,WAAO,KAAK,WAAW;;AAlI3B,SAwIE,YAAA,mBAAU,MAAc,OAAwB;AAC9C,SAAK,WAAW,MAAM,cAAc;AACpC,SAAK,cAAc,QAAQ;;AA1I/B,SAgJE,eAAA,sBAAa,OAAwB;AACnC,QAAM,KAAK,MAAM;AACjB,QAAM,OAAO,KAAK,WAAW;AAC7B,QAAI,MAAM;AACR,aAAO,KAAK,WAAW;AACvB,aAAO,KAAK,cAAc;;;AArJhC,SA4JE,gBAAA,uBAAc,IAAY,OAAwB;AAChD,SAAK,eAAe,MAAM;;AA7J9B,SAmKE,mBAAA,0BAAiB,IAAkB;AACjC,WAAO,KAAK,eAAe;;AApK/B,SAuKU,wBAAR,+BAA8B,WAAuC;AAAA,QAAA,iBAAA,uBAAA,oBAAA,uBAAA;AACnE,cAAU,OAAV,mBAAiB,UAAU,SAA3B,OAAA,kBAAmC,iBAAgB,cAAc,UAAU;AAC3E,QAAI,UAAU,SAAS,QAAW;AAChC,YAAA,qCAAyC,UAAU;;AAErD,cAAU,aAAV,yBAAuB,UAAU,eAAjC,OAAA,wBAA+C,KAAK;AACpD,cAAU,UAAV,sBAAoB,UAAU,YAA9B,OAAA,qBAAyC,KAAK;AAC9C,cAAU,gBAAV,yBAA0B,UAAU,kBAApC,OAAA,wBAAqD,KAAK;AAC1D,cAAU,MAAV,kBAAgB,UAAU,QAA1B,OAAA,iBAAiC,UAAU,KAAK,KAAK;AACrD,WAAO;;AAhLX,SAmLU,kBAAR,yBAA2B,MAA0C;AAAA,QAAA,SAAA;AACnE,QAAM,QAAO,KAAK,sBAAsB,OAAO,SAAS,WAAW;MAAE,KAAK;QAAS;AACnF,QAAM,MAAM,MAAK;AAEjB,QAAI,KAAK,cAAc,MAAM;AAC3B,aAAO,IAAI,aAAa,SAAC,SAAY;AACnC,gBAAQ,OAAK,cAAc;;;AAI/B,QAAI,KAAK,iBAAiB,MAAM;AAC9B,aAAO,KAAK,iBAAiB,MAAK;;AAEpC,QAAM,SAAS,iBAAgB,SAAS,MAAK;AAC7C,QAAM,UAAU,OAAO,KAAK,OAAM;AAClC,SAAK,iBAAiB,OAAO;AAC7B,YACG,KAAK,SAAC,KAAQ;AACb,UAAI,OAAO;AAAU,eAAK,UAAU,KAAK;AACzC,aAAO,OAAK,iBAAiB;OAE9B,MAAM,WAAM;;AACf,WAAO;;AAzMX,SAAA;;AAAa,gBAEI,WAA2C;AAF/C,gBAGI,kBAAgD;AA+M1D,wBAAwB,WAAsB,UAAoB,UAA0B;AAAA,MAA1B,aAA0B,QAAA;AAA1B,eAAoB;;AAC3F,SAAO,SAAwB,QAA2C;AACxE,QAAM,SAAS,IAAI,OAAO;AAC1B,oBAAgB,WAAW,WAAW,QAAQ;;;IC3NrC,QAAb,WAAA;AA+CE,kBAAY,MAAuB,QAAgC,MAAgB,SAAyB;AAAA,QAAzE,WAAyE,QAAA;AAAzE,eAA0B;;AAA+C,QAAzC,SAAyC,QAAA;AAAzC,aAAY;;AAA6B,QAAzB,YAAyB,QAAA;AAAzB,gBAAmB;;AAAM,SAdrG,OAcqG;AAAA,SAZpG,aAYoG;AAAA,SAVpG,UAUoG;AAAA,SARpG,iBAQoG;AAAA,SANpG,WAMoG;AAAA,SAJpG,sBAIoG;AAAA,SAFpG,QAEoG;AAC1G,SAAK,aAAa,IAAI,OAAO;AAC7B,SAAK,UAAU;AACf,SAAK,OAAO;AACZ,SAAK,iBAAiB;AACtB,SAAK,WAAW;AAChB,SAAK,sBAAsB;AAC3B,SAAK,QAAQ;;AAtDjB,MAAA,SAAA,OAAA;AAAA,SAyDS,kBAAP,2BAA+B;AAC7B,SAAK,sBAAsB;;AA1D/B,eAAA,QAAA,CAAA;IAAA,KAAA;IAAA,KACE,gBAAkC;AAChC,aAAO,KAAK;;KAFhB;IAAA,KAAA;IAAA,KAKE,gBAA8B;AAC5B,aAAO,KAAK;;IANhB,KASE,cAAW,GAAG;AACZ,WAAK,UAAU;;KAVnB;IAAA,KAAA;IAAA,KAaE,gBAAwB;AACtB,aAAO,KAAK;;KAdhB;IAAA,KAAA;IAAA,KAiBE,gBAAqC;AACnC,aAAO,KAAK;;IAlBhB,KAqBE,cAAkB,GAAG;AACnB,WAAK,iBAAiB;;KAtB1B;IAAA,KAAA;IAAA,KAyBE,gBAAuB;AACrB,aAAO,KAAK;;KA1BhB;IAAA,KAAA;IAAA,KA6BE,gBAA4B;AAC1B,aAAO,KAAK;;;AA9BhB,SAAA;;ICFY;UAAA,YAAA;AAAA,aAAA,WAAA,YAAA,KAAA;AAAA,aAAA,WAAA,gBAAA,KAAA;AAAA,aAAA,WAAA,aAAA,KAAA;AAAA,aAAA,WAAA,UAAA,KAAA;GAAA,aAAA,aAAA;ACaL,qBAAqB,QAAgB,aAA2B;AACrE,eAAa,kBAAkB,QAAQ,aAAa,UAAU;;AAUzD,yBAAyB,QAAgB,aAA2B;AACzE,eAAa,kBAAkB,QAAQ,aAAa,UAAU;;AAWzD,sBAAsB,QAAgB,aAA2B;AACtE,eAAa,kBAAkB,QAAQ,aAAa,UAAU;;AAWzD,mBAAmB,QAAgB,aAA2B;AACnE,eAAa,kBAAkB,QAAQ,aAAa,UAAU;;IAOnD,eAAb,WAAA;AAAA,2BAAA;;AAAA,gBAcS,oBAAP,2BAAyB,QAAgB,aAAqB,MAAuB;AACnF,QAAI,YAAY,cAAa,iBAAiB,IAAI,OAAO;AACzD,QAAI,CAAC,WAAW;AACd,kBAAY,OAAO,OAAO;AAC1B,oBAAa,iBAAiB,IAAI,OAAO,aAAa;;AAExD,cAAU,eAAe;;AApB7B,gBA0BS,eAAP,sBAAoB,MAAwB;AAC1C,QAAI,aAAa,cAAa,cAAc,IAAI;AAChD,QAAI,CAAC,YAAY;AACf,mBAAa,OAAO,OAAO;AAC3B,oBAAa,cAAc,IAAI,MAAM;AACrC,UAAM,aAAa,cAAa;AAChC,UAAM,eAAe,cAAa;AAClC,aAAO,SAAS,YAAY;AAC1B,YAAM,gBAAgB,aAAa,IAAI;AACvC,YAAI,eAAe;AACjB,mBAAc,YAAY;;AAE5B,eAAO,OAAO,eAAe;;;AAGjC,WAAO;;AAzCX,gBAiDS,kBAAP,yBAAuB,QAAgB,QAAsB;AAC3D,QAAM,OAAO,OAAO;AACpB,YAAQ;WACD;WACA;WACA;WACA;WACA;WACA;WACA;WACA;AAES,eAAQ,IAAe;AACnC;WACG;AAEH,iBAAS,IAAI,GAAG,IAAS,OAAQ,QAAQ,IAAI,GAAG,KAAK;AACnD,wBAAa,qBAAqB,QAAQ,QAAQ;;AAEpD;;AAEA,YAAM,eAAuB;AAC7B,YAAI,aAAa,SAAS,aAAa,SAAS;AAE9C,uBAAa,QAAQ;eAChB;AAEL,cAAM,OAAO,OAAO,KAAK;AACzB,mBAAS,KAAI,GAAG,KAAI,KAAK,QAAQ,KAAI,IAAG,MAAK;AAC3C,0BAAa,qBAAqB,QAAQ,QAAQ,KAAK;;;;;AA9EnE,gBAoFiB,uBAAf,8BAAoC,QAAgB,QAAgB,GAA0B;AAC5F,QAAM,aAAa,OAAO;AAC1B,QAAI,sBAAsB,QAAQ;AAChC,UAAM,WAAoB,WAAY;AACtC,cAAQ;aACD;aACA;aACA;aACA;aACA;aACA;aACA;aACA;AAEH,cAAM,sBAAiC;AACvC,cAAI,sBAAiC,OAAO;AAC5C,cAAI,uBAAuB,MAAM;AAC/B,mBAAO,KAAK,oBAAoB;iBAC3B;AACL,gCAAoB,IAAI;;AAE1B;aACG;AAEH,cAAM,iBAAqB;AAC3B,cAAI,kBAAsB,OAAO;AACjC,cAAI,mBAAmB,MAAM;AAC3B,mBAAO,KAAK,IAAI,MAAM,eAAe;iBAChC;AACL,4BAAgB,SAAS,eAAe;;AAE1C,wBAAa,gBAAgB,gBAAgB;AAC7C;;AAEA,cAAI,WAAW,SAAS,WAAW,SAAS;AAE1C,gBAAI,mBAA2B;AAC/B,gBAAI,mBAA2B,OAAO;AACtC,gBAAI,kBAAkB;AACpB,+BAAiB,QAAQ;mBACpB;AACL,qBAAO,KAAK,iBAAiB;;iBAE1B;AAEL,gBAAI,aAAqB,OAAO;AAChC,0BAAc,QAAS,QAAO,KAAK,aAAa,IAAI,WAAW;AAC/D,0BAAa,gBAAgB,YAAY;AACzC;;;WAGD;AAEL,aAAO,KAAK;;;AAzIlB,SAAA;;AAAa,aAEJ,mBAAmB,IAAI;AAFnB,aAIJ,gBAAgB,IAAI;AAJhB,aAMI,cAAc,OAAO,eAAe;;;;;;IC3D/B,eAAtB,UAAA,SAAA,UAWE,uBAAY,QAAgB;AAAA,6BAAA,MAAA,cAAA,aAAA;AAAA,6BAAA,MAAA,WAAA,cAAA;AAC1B,OAAK,UAAU;GAZnB,QACiB,qBAA6B,GAD9C,QAAA,cAAA,0BAAA,OAAA,WAAA,cAAA,CAIG,cAJH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,uBAAA;AAAA,WAKgC,EAAE,aAAa;;IAL/C,eAAA,0BAAA,OAAA,WAAA,WAAA,CAQG,cARH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA;IAAA;;;;ICCa,kBAAb,YAAA,WAAA,SAAA,eAAA;AAAA,iBAAA,kBAAA;AAAA,8BAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,cAAA,KAAA,MAAA,eAAA,CAAA,MAAA,OAAA,UAAA;AAAA,+BAAA,OAAA,SAAA,eAAA,uBAAA;AAAA,UAGU,YAAY;AAHtB,WAAA;;AAAA,MAAA,SAAA,iBAAA;AAAA,SAUE,WAAA,kBAAS,OAAwB;AAC/B,WAAO,KAAK,MAAM,UAAU;;AAXhC,SAkBE,aAAA,sBAAuB;AACrB,QAAI,KAAK,cAAc;AAAG,aAAO;AACjC,WAAO,OAAO,KAAK,KAAK;;AApB5B,SA4BE,gBAAA,uBAAc,OAAuB;AACnC,QAAM,YAAY,KAAK,MAAM;AAE7B,QAAI,CAAC;AAAW,aAAO;AACvB,QAAI,UAAU;AAAI,aAAO;AACzB,WAAO,UAAU;;AAjCrB,SA0CE,WAAA,kBAAS,OAAe,MAAqB;AAC3C,QAAI,CAAC,KAAK,MAAM,QAAQ;AACtB,aAAO;;AAGT,QAAM,YAAY,KAAK,MAAM;AAE7B,QAAI,UAAU,IAAI;AAChB,UAAI,UAAU;AAAM,aAAK,oBAAoB,OAAO,UAAU;AAC9D,gBAAU,GAAG;WACR;AACL,UAAM,IAAI,UAAU;AACpB,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,YAAI,UAAU,GAAG;AAAM,eAAK,oBAAoB,OAAO,UAAU,GAAG;AACpE,kBAAU,GAAG,GAAG;;;AAGpB,WAAO;;AA3DX,SAoEE,KAAA,YAAG,OAAe,IAA+B;AAC/C,WAAO,KAAK,iBAAiB,OAAO;;AArExC,SA8EE,OAAA,cAAK,OAAe,IAA+B;AACjD,WAAO,KAAK,iBAAiB,OAAO,IAAI;;AA/E5C,SA0FE,mBAAA,0BAAiB,OAAe,IAAc,MAAiC;AAC7E,QAAM,WAAW;MAAE;MAAI;;AACvB,QAAM,SAAS,KAAK;AACpB,QAAI,CAAC,OAAO,QAAQ;AAClB,aAAO,SAAS;AAChB,WAAK;eACI,CAAC,OAAO,OAAO,IAAI;AAC5B,aAAO,OAAO,KAAK;WACd;AACL,aAAO,SAAS,CAAC,OAAO,QAAQ;;AAElC,WAAO;;AArGX,SA6GE,MAAA,aAAI,OAAe,IAAgC;AACjD,QAAI,CAAC,KAAK,MAAM;AAAQ,aAAO;AAC/B,QAAI,CAAC,IAAI;AACP,WAAK,YAAY;AACjB,aAAO;;AAGT,QAAM,YAAY,KAAK,MAAM;AAE7B,QAAI,UAAU,MAAM,UAAU,OAAO,IAAI;AACvC,WAAK,YAAY;WACZ;AACL,UAAM,QAAQ,UAAU,QAAQ;AAChC,UAAI,QAAQ,IAAI;AACd,YAAM,OAAO,UAAU,UAAU,SAAS;AAC1C,kBAAU,SAAS;AACnB,kBAAU;AACV,YAAI,UAAU,WAAW,GAAG;AAC1B,eAAK,MAAM,SAAS,UAAU;;;;AAIpC,WAAO;;AAnIX,SA4IE,sBAAA,6BAAoB,OAAe,IAAgC;AACjE,WAAO,KAAK,IAAI,OAAO;;AA7I3B,SAoJE,0BAAA,iCAAwB,OAAsB;AAC5C,QAAI,OAAO;AACT,UAAI,KAAK,MAAM;AAAQ,aAAK,YAAY;WACnC;AACL,WAAK,QAAQ,OAAO,OAAO;AAC3B,WAAK,YAAY;;;AAzJvB,SAgKE,UAAA,iBAAQ,GAAU;AAChB,SAAK,SAAS,EAAE,MAAgB,EAAE;;AAjKtC,SAoKU,cAAR,qBAAoB,OAAe;AACjC,QAAI,EAAE,KAAK,cAAc,GAAG;AAC1B,WAAK,QAAQ,OAAO,OAAO;WACtB;AACL,aAAO,KAAK,MAAM;;;AAxKxB,SAAA;EAAqC,eAArC,UAAA,gBAAA,0BAAA,SAAA,WAAA,SAAA,CACG,cADH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,wBAAA;AAAA,WAEkB,OAAO,OAAO;;IAFhC;ACFA,IAAM,OAAO,eAAC,SAA4C;;AAC1D,IAAM,QAAQ,QAAQ,IAAI,KAAK;AAC/B,IAAM,OAAO,QAAQ,KAAK,KAAK;AAC/B,IAAM,OAAO,QAAQ,KAAK,KAAK;AAC/B,IAAM,QAAQ,QAAQ,MAAM,KAAK;IAEpB,SAAS;EACpB,OAAO;EACP,MAAM;EACN,MAAM;EACN,OAAO;EACP,WAAW;EAGX,QARoB,kBAQX;AACP,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,YAAY;;EAInB,SAjBoB,mBAiBV;AACR,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,YAAY;;;IC9BR,OAAb,WAAA;AAaE,mBAAc;AAAA,SAZN,SAYM;AAAA,SAVN,aAUM;AAAA,SARN,aAQM;AAAA,SANN,aAMM;AAAA,SAJN,gBAIM;AACZ,SAAK,SAAS,cAAc,cAAc;AAE1C,SAAK,aAAa;AAClB,SAAK,aAAa;AAElB,QAAM,MAAM,KAAK,OAAO;AACxB,SAAK,aAAa;AAClB,SAAK,gBAAgB;;AArBzB,MAAA,SAAA,MAAA;AAAA,SAwBE,QAAA,iBAAQ;AACN,SAAK,gBAAgB,KAAK,OAAO;;AAzBrC,SAwES,OAAP,gBAAoB;AAClB,QAAM,MAAM,KAAK;AACjB,SAAK,aAAc,OAAM,KAAK,iBAAiB,KAAK;AACpD,SAAK,gBAAgB;;AA3EzB,eAAA,OAAA,CAAA;IAAA,KAAA;IAAA,KAgCE,gBAAsB;AACpB,aAAO,KAAK,OAAO;;KAjCvB;IAAA,KAAA;IAAA,KAwCE,gBAAwB;AACtB,aAAO,KAAK;;KAzChB;IAAA,KAAA;IAAA,KA+CE,gBAAwB;AACtB,aAAO,KAAK;;IAhDhB,KAkDE,cAAc,GAAG;AACf,WAAK,aAAa;;KAnDtB;IAAA,KAAA;IAAA,KA0DE,gBAAgC;AAC9B,aAAO,KAAK,aAAa,KAAK;;KA3DlC;IAAA,KAAA;IAAA,KAiEE,gBAA+B;AAC7B,aAAO,KAAK,UAAU,KAAK;;;AAlE/B,SAAA;;ICAY;UAAA,oBAAA;AAAA,qBAAA,mBAAA,WAAA,KAAA;AAAA,qBAAA,mBAAA,WAAA,KAAA;GAAA,qBAAA,qBAAA;IAWA;UAAA,YAAA;AAAA,aAAA,WAAA,gBAAA,KAAA;AAAA,aAAA,WAAA,iBAAA,KAAA;AAAA,aAAA,WAAA,gBAAA,KAAA;AAAA,aAAA,WAAA,gBAAA,KAAA;AAAA,aAAA,WAAA,kBAAA,KAAA;AAAA,aAAA,WAAA,eAAA,KAAA;GAAA,aAAA,aAAA;IAmBA;UAAA,eAAA;AAAA,gBAAA,cAAA,YAAA,OAAA;AAAA,gBAAA,cAAA,iBAAA,OAAA;GAAA,gBAAA,gBAAA;IAWA;UAAA,cAAA;AAAA,eAAA,aAAA,WAAA,QAAA;AAAA,eAAA,aAAA,eAAA,QAAA;AAAA,eAAA,aAAA,gBAAA,QAAA;AAAA,eAAA,aAAA,gBAAA,QAAA;AAAA,eAAA,aAAA,yBAAA,SAAA;AAAA,eAAA,aAAA,8BAAA,SAAA;AAAA,eAAA,aAAA,kBAAA,QAAA;GAAA,eAAA,eAAA;IAqBA;UAAA,YAAA;AAAA,aAAA,WAAA,QAAA,QAAA;AAAA,aAAA,WAAA,SAAA,QAAA;GAAA,aAAA,aAAA;IAWA;UAAA,WAAA;AAAA,YAAA,UAAA,WAAA,QAAA;AAAA,YAAA,UAAA,UAAA,QAAA;AAAA,YAAA,UAAA,oBAAA,QAAA;GAAA,YAAA,YAAA;IAaA;UAAA,OAAA;AAAA,QAAA,MAAA,WAAA,KAAA;AAAA,QAAA,MAAA,UAAA,KAAA;AAAA,QAAA,MAAA,UAAA,KAAA;AAAA,QAAA,MAAA,YAAA,KAAA;GAAA,QAAA,QAAA;IAeA;UAAA,WAAA;AAAA,YAAA,UAAA,WAAA,OAAA;AAAA,YAAA,UAAA,UAAA,OAAA;AAAA,YAAA,UAAA,WAAA,OAAA;AAAA,YAAA,UAAA,YAAA,OAAA;AAAA,YAAA,UAAA,aAAA,OAAA;AAAA,YAAA,UAAA,cAAA,OAAA;AAAA,YAAA,UAAA,YAAA,OAAA;AAAA,YAAA,UAAA,YAAA,OAAA;GAAA,YAAA,YAAA;IAsBA;UAAA,WAAA;AAAA,YAAA,UAAA,WAAA,QAAA;AAAA,YAAA,UAAA,gBAAA,SAAA;AAAA,YAAA,UAAA,gBAAA,SAAA;AAAA,YAAA,UAAA,gBAAA,SAAA;AAAA,YAAA,UAAA,SAAA,QAAA;AAAA,YAAA,UAAA,cAAA,SAAA;AAAA,YAAA,UAAA,cAAA,SAAA;AAAA,YAAA,UAAA,cAAA,SAAA;AAAA,YAAA,UAAA,UAAA,SAAA;AAAA,YAAA,UAAA,eAAA,SAAA;AAAA,YAAA,UAAA,eAAA,SAAA;AAAA,YAAA,UAAA,eAAA,SAAA;AAAA,YAAA,UAAA,gBAAA,SAAA;AAAA,YAAA,UAAA,gBAAA,SAAA;AAAA,YAAA,UAAA,gBAAA,SAAA;AAAA,YAAA,UAAA,iBAAA,SAAA;AAAA,YAAA,UAAA,sBAAA,OAAA;AAAA,YAAA,UAAA,sBAAA,UAAA;AAAA,YAAA,UAAA,sBAAA,UAAA;AAAA,YAAA,UAAA,eAAA,UAAA;AAAA,YAAA,UAAA,oBAAA,UAAA;AAAA,YAAA,UAAA,oBAAA,UAAA;AAAA,YAAA,UAAA,oBAAA,UAAA;AAAA,YAAA,UAAA,sBAAA,UAAA;AAAA,YAAA,UAAA,sBAAA,UAAA;AAAA,YAAA,UAAA,sBAAA,UAAA;AAAA,YAAA,UAAA,sBAAA,UAAA;AAAA,YAAA,UAAA,wBAAA,UAAA;AAAA,YAAA,UAAA,gBAAA,SAAA;AAAA,YAAA,UAAA,kBAAA,SAAA;AAAA,YAAA,UAAA,UAAA,QAAA;AAAA,YAAA,UAAA,mBAAA,QAAA;AAAA,YAAA,UAAA,WAAA,QAAA;AAAA,YAAA,UAAA,oBAAA,QAAA;AAAA,YAAA,UAAA,kBAAA,QAAA;GAAA,YAAA,YAAA;IAsFA;UAAA,kBAAA;AAAA,mBAAA,iBAAA,WAAA,KAAA;AAAA,mBAAA,iBAAA,WAAA,KAAA;AAAA,mBAAA,iBAAA,UAAA,KAAA;AAAA,mBAAA,iBAAA,gBAAA,KAAA;AAAA,mBAAA,iBAAA,eAAA,KAAA;AAAA,mBAAA,iBAAA,oBAAA,MAAA;AAAA,mBAAA,iBAAA,yBAAA,KAAA;AAAA,mBAAA,iBAAA,kBAAA,KAAA;AAAA,mBAAA,iBAAA,iBAAA,KAAA;AAAA,mBAAA,iBAAA,uBAAA,KAAA;AAAA,mBAAA,iBAAA,sBAAA,MAAA;AAAA,mBAAA,iBAAA,gCAAA,MAAA;AAAA,mBAAA,iBAAA,2BAAA,MAAA;AAAA,mBAAA,iBAAA,+BAAA,MAAA;AAAA,mBAAA,iBAAA,cAAA,MAAA;AAAA,mBAAA,iBAAA,iBAAA,MAAA;AAAA,mBAAA,iBAAA,kBAAA,MAAA;AAAA,mBAAA,iBAAA,YAAA,MAAA;AAAA,mBAAA,iBAAA,UAAA,MAAA;AAAA,mBAAA,iBAAA,kBAAA,MAAA;AAAA,mBAAA,iBAAA,gBAAA,MAAA;GAAA,mBAAA,mBAAA;IAmDA;UAAA,YAAA;AAAA,aAAA,WAAA,UAAA,KAAA;AAAA,aAAA,WAAA,SAAA,KAAA;AAAA,aAAA,WAAA,eAAA,OAAA;AAAA,aAAA,WAAA,yBAAA,OAAA;AAAA,aAAA,WAAA,eAAA,OAAA;AAAA,aAAA,WAAA,yBAAA,OAAA;AAAA,aAAA,WAAA,eAAA,OAAA;AAAA,aAAA,WAAA,yBAAA,OAAA;AAAA,aAAA,WAAA,eAAA,OAAA;AAAA,aAAA,WAAA,yBAAA,OAAA;AAAA,aAAA,WAAA,wBAAA,OAAA;AAAA,aAAA,WAAA,mBAAA,SAAA;AAAA,aAAA,WAAA,6BAAA,SAAA;AAAA,aAAA,WAAA,mBAAA,SAAA;AAAA,aAAA,WAAA,6BAAA,SAAA;GAAA,aAAA,aAAA;IA4CA;UAAA,cAAA;AAAA,eAAA,aAAA,UAAA,KAAA;AAAA,eAAA,aAAA,gBAAA,KAAA;GAAA,eAAA,eAAA;IAWA;UAAA,mBAAA;AAAA,oBAAA,yBAAA;AAAA,oBAAA,sBAAA;AAAA,oBAAA,sBAAA;AAAA,oBAAA,kBAAA;AAAA,oBAAA,iBAAA;AAAA,oBAAA,uBAAA;AAAA,oBAAA,qBAAA;AAAA,oBAAA,oBAAA;AAAA,oBAAA,kBAAA;AAAA,oBAAA,wBAAA;AAAA,oBAAA,sBAAA;AAAA,oBAAA,4BAAA;AAAA,oBAAA,4BAAA;AAAA,oBAAA,sBAAA;AAAA,oBAAA,0BAAA;AAAA,oBAAA,8BAAA;AAAA,oBAAA,UAAA;AAAA,oBAAA,iBAAA;AAAA,oBAAA,SAAA;AAAA,oBAAA,gBAAA;AAAA,oBAAA,UAAA;AAAA,oBAAA,iBAAA;AAAA,oBAAA,WAAA;AAAA,oBAAA,kBAAA;AAAA,oBAAA,UAAA;AAAA,oBAAA,iBAAA;GAAA,oBAAA,oBAAA;IC3TC,kBAAb,WAAA;AAKE,4BAAY,OAAmB;AAAA,QAAnB,UAAmB,QAAA;AAAnB,cAAgB;;AAAG,SAJ/B,YAI+B;AAAA,SAF/B,SAAiB;AAGf,SAAK,YAAY,IAAI,MAAS;;AANlC,MAAA,SAAA,iBAAA;AAAA,SASE,MAAA,aAAI,SAAkB;AACpB,QAAI,KAAK,WAAW,KAAK,UAAU;AAAQ,WAAK,UAAU,KAAK;;AAC1D,WAAK,UAAU,KAAK,UAAU;AACnC,SAAK;;AAZT,SAeE,SAAA,iBAAO,SAAkB;AAEvB,QAAM,QAAQ,KAAK,UAAU,QAAQ;AACrC,SAAK,cAAc;;AAlBvB,SAyBE,gBAAA,uBAAc,OAAkB;AAC9B,QAAI,WAAgB,KAAK;AACzB,QAAI,MAAS;AACb,QAAM,YAAY,KAAK,SAAS;AAChC,QAAI,UAAU,WAAW;AACvB,YAAM,SAAS;AACf,eAAS,SAAS;;AAEpB,SAAK;AACL,WAAO;;AAlCX,SAqCE,oBAAA,6BAA0B;AACxB,SAAK,UAAU,SAAS,KAAK;;AAtCjC,SAAA;;ICGa,wBAAb,WAAA;AAAA,oCAAA;AAAA,SAmCE,QAAkB;AAnCpB,SAqCE,UAAkB;;AArCpB,yBAOS,kBAAP,yBAAuB,MAA6B,OAA8B,KAAkC;AAClH,QAAM,UAAU,IAAI;AACpB,QAAI,SAAiB;AACrB,QAAI,SAAmB;AACvB,QAAI,KAAK,UAAU,MAAM,SAAS;AAChC,gBAAU,KAAK;AACf,gBAAU,MAAM;AAChB,gBAAU,KAAK;AACf,gBAAU,MAAM;WACX;AACL,gBAAU,MAAM;AAChB,gBAAU,KAAK;AACf,gBAAU,MAAM;AAChB,gBAAU,KAAK;;AAGjB,QAAI,IAAI;AACR,YAAQ,SAAS,WAAY,SAAQ,SAAS;AAC9C,WAAO,IAAI,SAAS,KAAK;AACvB,cAAQ,KAAK,QAAQ,KAAK,QAAQ;;AAEpC,WAAO,IAAI,SAAS,KAAK;AACvB,cAAQ,KAAK,QAAQ;;AAEvB,QAAI,UAAU;;AA/BlB,MAAA,SAAA,uBAAA;AAAA,SA2CE,SAAA,iBAAO,OAA0B;AAC/B,QAAM,QAAQ,MAAM;AACpB,QAAM,OAAO,QAAQ;AACrB,QAAM,OAAO,KAAK;AAClB,QAAI,YAAY,KAAK;AACrB,QAAI,YAAY,MAAM;AACpB,WAAK,SAAS,QAAS,MAAK,SAAS;AACrC,aAAO,YAAY,OAAO,aAAa;AACrC,aAAK,aAAa;;AAEpB,WAAK,SAAS,MAAM;AACpB,WAAK,UAAU;WACV;AACL,WAAK,UAAU,MAAM;;;AAxD3B,SAgEE,UAAA,kBAAQ,OAA0B;AAChC,QAAM,QAAQ,MAAM;AACpB,QAAM,OAAO,KAAK;AAClB,QAAM,WAAW,KAAK,UAAU;AAChC,QAAI,QAAQ,UAAU;AACpB;;AAEF,QAAM,WAAW,KAAK,SAAS,CAAC,MAAM;AACtC,QAAI,SAAS,YAAY,aAAa,GAAG;AACvC,WAAK;WACA;AACL,WAAK,SAAS;;;AA3EpB,SAmFE,kBAAA,yBAAgB,iBAA8C;AAC5D,QAAM,UAAU,gBAAgB;AAChC,QAAM,UAAU,gBAAgB;AAChC,QAAM,OAAO,KAAK;AAClB,QAAM,WAAW,KAAK;AACtB,QAAI,WAAW,SAAS;AACtB,WAAK,SAAS,WAAY,MAAK,SAAS;AACxC,UAAI,IAAI;AACR,aAAO,IAAI,UAAU,KAAK;AACxB,aAAK,MAAM,QAAQ;;AAErB,aAAO,IAAI,SAAS,KAAK;AACvB,aAAK,KAAK,QAAQ;;AAEpB,WAAK,UAAU;WACV;AACL,eAAS,KAAI,GAAG,KAAI,SAAS,MAAK;AAChC,aAAK,OAAM,QAAQ;;;;AApG3B,SA6GE,0BAAA,iCAAwB,iBAA8C;AACpE,QAAM,aAAa,gBAAgB;AACnC,QAAM,OAAO,KAAK;AAClB,QAAI,WAAW,KAAK,UAAU;AAC9B,QAAI,IAAI,KAAK,IAAI,gBAAgB,UAAU,GAAG;AAC9C,WAAO,KAAK,GAAG,KAAK;AAClB,UAAM,WAAW,KAAK,KAAK,CAAC,WAAW;AACvC,UAAI,KAAK,YAAY,aAAa,GAAG;AACnC;AACA,aAAK;aACA;AACL,aAAK,KAAK;;;;AAxHlB,SAiIE,yBAAA,gCAAuB,iBAA8C;AACnE,QAAM,YAAY,gBAAgB;AAClC,QAAM,OAAO,KAAK;AAClB,aAAS,IAAI,KAAK,UAAU,GAAG,KAAK,GAAG,KAAK;AAC1C,UAAM,QAAQ,KAAK,KAAK,UAAU;AAClC,UAAI,SAAS,KAAK,KAAK,KAAK,UAAU,GAAG;AACvC,aAAK;aACA;AACL,aAAK,KAAK;;;;AAzIlB,SAkJE,WAAA,kBAAS,OAA6B;AACpC,QAAM,QAAQ,MAAM;AACpB,QAAI,SAAS,KAAK,SAAS;AACzB,aAAO;;AAET,WAAQ,MAAK,MAAM,SAAS,MAAM,YAAY;;AAvJlD,SA6JE,QAAA,iBAAc;AACZ,SAAK,UAAU;;AA9JnB,SAAA;;ICKa,oBAAb,WAAA;AAAA,gCAAA;AAAA,SAEU,kBAA2C,IAAI;AAFzD,SAGU,mBAA4C,IAAI;AAH1D,SAIU,uBAAgD,IAAI;AAJ9D,SAKU,qBAA+B;AALzC,SAQU,sBAAkD,IAAI;AARhE,SAWU,aAAwC,IAAI;AAXtD,SAYU,qBAAgD,IAAI;AAZ9D,SAeU,2BAA0C;;AAfpD,MAAA,SAAA,mBAAA;AAAA,SAiBE,cAAA,qBAAY,UAAoB;AAC9B,aAAS,iBAAiB,KAAK,WAAW;AAC1C,SAAK,WAAW,IAAI;;AAnBxB,SAsBE,iBAAA,wBAAe,UAAoB;AACjC,QAAM,WAAW,KAAK,WAAW,cAAc,SAAS;AACxD,gBAAa,UAAS,iBAAiB,SAAS;AAChD,aAAS,iBAAiB;;AAzB9B,SA4BE,mBAAA,0BAAiB,SAAgB;AAC/B,YAAO,gBAAgB,KAAK,gBAAgB;AAC5C,SAAK,gBAAgB,IAAI;;AA9B7B,SAiCE,sBAAA,6BAAoB,SAAsB;AACxC,QAAM,WAAW,KAAK,gBAAgB,cAAc,QAAO;AAC3D,gBAAa,UAAS,gBAAgB,QAAO;AAC7C,YAAO,gBAAgB;;AApC3B,SAuCE,oBAAA,2BAAkB,SAAgB;AAChC,YAAO,iBAAiB,KAAK,iBAAiB;AAC9C,SAAK,iBAAiB,IAAI;;AAzC9B,SA4CE,uBAAA,8BAAqB,SAAsB;AACzC,QAAM,WAAW,KAAK,iBAAiB,cAAc,QAAO;AAC5D,gBAAa,UAAS,iBAAiB,QAAO;AAC9C,YAAO,iBAAiB;;AA/C5B,SAkDE,wBAAA,+BAAsB,SAAsB;AAC1C,YAAO,qBAAqB,KAAK,qBAAqB;AACtD,SAAK,qBAAqB,IAAI;;AApDlC,SAuDE,2BAAA,kCAAyB,SAAsB;AAC7C,QAAM,WAAW,KAAK,qBAAqB,cAAc,QAAO;AAChE,gBAAa,UAAS,qBAAqB,QAAO;AAClD,YAAO,qBAAqB;;AA1DhC,SA6DE,wBAAA,+BAAsB,WAA4B;AAEhD,cAAU,iBAAiB,KAAK,oBAAoB;AACpD,SAAK,oBAAoB,IAAI;;AAhEjC,SAmEE,2BAAA,kCAAyB,WAA4B;AAEnD,QAAM,WAAW,KAAK,oBAAoB,cAAc,UAAU;AAElE,gBAAa,UAAS,iBAAiB,UAAU;AAEjD,cAAU,iBAAiB;;AAzE/B,SA4EE,uBAAA,8BAAqB,UAA0B;AAC7C,aAAS,iBAAiB,KAAK,mBAAmB;AAClD,SAAK,mBAAmB,IAAI;;AA9EhC,SAiFE,0BAAA,iCAAwB,UAA0B;AAChD,QAAM,WAAW,KAAK,mBAAmB,cAAc,SAAS;AAChE,gBAAa,UAAS,iBAAiB,SAAS;AAChD,aAAS,iBAAiB;;AApF9B,SAuFE,sBAAA,6BAAoB,WAAiB;AACnC,SAAK,mBAAmB,KAAK;;AAxFjC,SA2FE,oBAAA,6BAA0B;AACxB,QAAM,iBAAiB,KAAK;AAC5B,QAAI,eAAe,SAAS,GAAG;AAC7B,UAAM,WAAW,eAAe;AAEhC,eAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC9C,YAAM,UAAS,SAAS;AACxB,gBAAO,WAAW;AAClB,gBAAO,gBAAgB;AACvB,gBAAO;;AAET,qBAAe,SAAS;;;AAtG9B,SA0GE,qBAAA,4BAAmB,WAAiB;AAClC,QAAM,WAAW,KAAK,iBAAiB;AACvC,aAAS,IAAI,KAAK,iBAAiB,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AAC1D,UAAM,UAAU,SAAS;AACzB,UAAI,QAAQ,UAAU;AACpB,gBAAQ,SAAS;;;;AA/GzB,SAoHE,yBAAA,gCAAuB,WAAiB;AACtC,QAAM,WAAW,KAAK,qBAAqB;AAC3C,aAAS,IAAI,KAAK,qBAAqB,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AAC9D,UAAM,UAAU,SAAS;AACzB,UAAI,QAAQ,UAAU;AACpB,gBAAQ,aAAa;;;;AAzH7B,SA8HE,sBAAA,6BAAoB,WAAiB;AACnC,QAAM,WAAW,KAAK,oBAAoB;AAC1C,aAAS,IAAI,KAAK,oBAAoB,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AAE7D,eAAS,GAAG,OAAO;;;AAlIzB,SAsIE,uBAAA,8BAAqB,WAAyB;AAC5C,QAAM,WAAW,KAAK,mBAAmB;AACzC,aAAS,IAAI,KAAK,mBAAmB,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AAC5D,eAAS,GAAG,OAAO;;;AAzIzB,SA6IE,aAAA,oBAAW,SAA8B;AACvC,QAAM,SAAS,QAAQ;AACvB,QAAM,WAAW,KAAK,WAAW;AACjC,aAAS,IAAI,KAAK,WAAW,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AACpD,UAAM,UAAU,SAAS;AAGzB,UAAI,CAAE,QAAO,cAAc,QAAQ,QAAQ,QAAQ;AACjD;;AAIF,UAAI,OAAO,sBAAsB;AAC/B,gBAAQ,WAAW,CAAC,OAAO,SAAS,cAAc,QAAQ;AAC1D,YAAI,QAAQ,UAAU;AACpB;;;AAIJ,cAAQ,kBAAkB;AAG1B,4BAAsB,gBACpB,OAAO,oBACP,QAAQ,WAAW,kBACnB,QAAQ;AAGV,cAAQ,QAAQ;;;AAzKtB,SA6KE,uBAAA,gCAA6B;AAC3B,QAAM,oBAAoB,KAAK;AAC/B,QAAM,SAAS,kBAAkB;AACjC,QAAI,SAAS,GAAG;AACd,eAAS,IAAI,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AACpC,0BAAkB,GAAG;;AAEvB,wBAAkB,SAAS;;;AApLjC,SAwLE,0BAAA,iCAAwB,QAAgB;AACtC,QAAM,WAAW,OAAO,OAAO;AAC/B,aAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AAC7C,UAAM,UAAU,SAAS;AACxB,cAAgB,iBAAkB,QAAgB,cAAc;;;AA5LvE,SAgME,wBAAA,+BAAsB,QAAgB;AACpC,QAAM,WAAW,OAAO,OAAO;AAC/B,aAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AAC7C,UAAM,UAAU,SAAS;AACxB,cAAgB,iBAAkB,QAAgB,YAAY;;;AApMrE,SAwME,2BAAA,oCAAwC;AACtC,WAAO,KAAK,yBAAyB,SAAS,KAAK,yBAAyB,QAAQ;;AAzMxF,SA4ME,2BAAA,kCAAyB,oBAAuC;AAC9D,uBAAmB,SAAS;AAC5B,SAAK,yBAAyB,KAAK;;AA9MvC,SAAA;;ICPa,kBAAb,WAAA;AAAA,8BAAA;;AAAA,mBAMS,iBAAP,wBAAsB,QAAmB,QAAyB;AAChE,QAAM,aAAa,aAAa,aAAa,OAAO;AACpD,QAAM,OAAO,OAAO,KAAK;AACzB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,KAAK;AAC3C,UAAM,IAAI,KAAK;AACf,UAAM,YAAY,WAAW;AAC7B,cAAQ;aACD;aACA,UAAU;AACb,iBAAO,KAAK,OAAO;AACnB;aACG,UAAU;AACb,cAAM,cAAsB,OAAO;AACnC,cAAI,uBAAuB,QAAQ;AACjC,gBAAI,UAAkB,OAAO;AAC7B,uBAAW,QAAS,WAAU,OAAO,KAAK,YAAY;AACtD,qBAAc,SAAS;iBAClB;AAEL,mBAAO,KAAK;;AAEd;aACG,UAAU;AACb,cAAM,cAAsB,OAAO;AACnC,cAAI,uBAAuB,QAAQ;AACjC,gBAAI,WAAkB,OAAO;AAC7B,wBAAW,QAAS,YAAU,OAAO,KAAK,YAAY;AACtD,yBAAa,gBAAgB,aAAa;iBACrC;AAEL,mBAAO,KAAK;;AAEd;;;;AAtCV,SAAA;;ICIa,yBAAb,WAAA;AAAA,0BAYS,WAAP,kBAAgB,kBAAwC,oBAA0C;AAChG,SAAK,eAAe,kBAAkB,oBAAoB,KAAK;AAC/D,SAAK,eAAe,oBAAoB,kBAAkB,KAAK;;AAdnE,0BAoBS,YAAP,mBAAiB,QAAgB,MAA4B;AAE3D,QAAM,gBAAe,wBAAuB,iBAAiB,IAAI;AACjE,QAAI,eAAc;AAChB,eAAS,IAAI,GAAG,MAAM,cAAa,QAAQ,IAAI,KAAK,KAAK;AACvD,YAAI,CAAC,OAAO,aAAa,cAAa,KAAK;AACzC,gBAAA,oBAAwB,cAAa,KAArC,oBAAyD;;;;;AA1BnE,0BAmCS,eAAP,sBAAoB,QAAgB,MAA4B;AAC9D,QAAM,mBAAmB,wBAAuB,oBAAoB,IAAI;AACxE,QAAI,kBAAkB;AACpB,eAAS,IAAI,GAAG,MAAM,iBAAiB,QAAQ,IAAI,KAAK,KAAK;AAC3D,YAAI,OAAO,aAAa,iBAAiB,KAAK;AAC5C,gBAAA,uBAA2B,iBAAiB,KAA5C,oBAAgE;;;;;AAxC1E,0BA8CiB,iBAAf,wBACE,kBACA,oBACA,KACA;AACA,QAAI,aAAa,IAAI,IAAI;AACzB,QAAI,CAAC,YAAY;AACf,mBAAa;AACb,UAAI,IAAI,kBAAkB;;AAE5B,QAAI,WAAW,QAAQ,wBAAwB,IAAI;AACjD,iBAAW,KAAK;;;AAIpB,qCAAsB;;AA7DxB,SAAA;;AAAa,uBAII,mBAAmB,IAAI;AAJ3B,uBAKI,sBAAsB,IAAI;AA2DpC,wBAA+D;AAAA,WAAA,OAAA,UAAA,QAAtC,eAAsC,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAtC,iBAAsC,QAAA,UAAA;;AACpE,SAAO,SAA0C,QAAiB;AAChE,iBAAa,QAAQ,SAAC,SAAD;AAAA,aAAa,uBAAuB,SAAS,QAAQ;;;;ICvElE;UAAA,QAAA;AAAA,SAAA,OAAA,YAAA,KAAA;AAAA,SAAA,OAAA,YAAA,KAAA;AAAA,SAAA,OAAA,YAAA,KAAA;AAAA,SAAA,OAAA,YAAA,KAAA;AAAA,SAAA,OAAA,YAAA,MAAA;AAAA,SAAA,OAAA,YAAA,MAAA;AAAA,SAAA,OAAA,YAAA,MAAA;AAAA,SAAA,OAAA,YAAA,OAAA;AAAA,SAAA,OAAA,YAAA,OAAA;AAAA,SAAA,OAAA,YAAA,OAAA;AAAA,SAAA,OAAA,aAAA,QAAA;AAAA,SAAA,OAAA,aAAA,QAAA;AAAA,SAAA,OAAA,aAAA,QAAA;AAAA,SAAA,OAAA,aAAA,QAAA;AAAA,SAAA,OAAA,aAAA,SAAA;AAAA,SAAA,OAAA,aAAA,SAAA;AAAA,SAAA,OAAA,aAAA,SAAA;AAAA,SAAA,OAAA,aAAA,UAAA;AAAA,SAAA,OAAA,aAAA,UAAA;AAAA,SAAA,OAAA,aAAA,UAAA;AAAA,SAAA,OAAA,aAAA,WAAA;AAAA,SAAA,OAAA,aAAA,WAAA;AAAA,SAAA,OAAA,aAAA,WAAA;AAAA,SAAA,OAAA,aAAA,WAAA;AAAA,SAAA,OAAA,aAAA,YAAA;AAAA,SAAA,OAAA,aAAA,YAAA;AAAA,SAAA,OAAA,aAAA,YAAA;AAAA,SAAA,OAAA,aAAA,aAAA;AAAA,SAAA,OAAA,aAAA,aAAA;AAAA,SAAA,OAAA,aAAA,aAAA;AAAA,SAAA,OAAA,aAAA,cAAA;AAAA,SAAA,OAAA,aAAA,cAAA;AAAA,SAAA,OAAA,gBAAA,cAAA;AAAA,SAAA,OAAA,aAAA,KAAA;GAAA,SAAA,SAAA;;;;;;;ICMU,YAAtB,YAAA,WAAA,SAAA,eAAA;AAAA,iBAAA,YAAA;AA+DE,sBAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,cAAA,KAAA,MAAM,OAAO,WAAb;AAD0B,+BAAA,OAAA,WAAA,eAAA,uBAAA;AAAA,+BAAA,OAAA,cAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,YAAA,cAAA,uBAAA;AAAA,+BAAA,OAAA,WAAA,cAAA,uBAAA;AAAA,UAyEpB,kBAA0B;AAvEhC,UAAK,UAAU;AAFW,WAAA;;AA/D9B,MAAA,SAAA,WAAA;AAAA,SAuEE,UAAA,mBAAgB;AACd,QAAI,KAAK,YAAY;AACnB;;AAEF,SAAK,QAAQ,iBAAiB;AAC9B,QAAI,KAAK,QAAQ,qBAAqB;AACpC,WAAK,YAAY,KAAK;AACtB,WAAK;;AAEP,SAAK,aAAa;AAClB,SAAK;;AAjFT,SAuFE,WAAA,oBAAiB;;AAvFnB,SA4FE,YAAA,qBAAkB;;AA5FpB,SAiGE,aAAA,sBAAmB;;AAjGrB,SAsGE,aAAA,sBAAmB;;AAtGrB,SA2GE,YAAA,qBAAkB;;AA3GpB,SAgHE,cAAA,uBAAoB;;AAhHtB,SAqHE,aAAA,oBAAW,OAAsB;AAC/B,QAAI,OAAO;AACT,UAAI,CAAC,KAAK,SAAS;AACjB,aAAK,UAAU;AACf,aAAK;;AAGP,UAAI,KAAK,QAAQ,sBAAsB;AACrC,aAAK;AACL,aAAK,YAAY,KAAK;;WAEnB;AACL,WAAK,YAAY,KAAK;AACtB,WAAK;;;AAlIX,eAAA,YAAA,CAAA;IAAA,KAAA;IAAA,KAgBE,gBAAuB;AACrB,aAAO,KAAK;;IAjBhB,KAuBE,cAAY,OAAgB;AAC1B,UAAI,UAAU,KAAK,UAAU;AAC3B;;AAEF,WAAK,WAAW;AAChB,UAAI,OAAO;AACT,aAAK,QAAQ,uBAAuB,KAAK;aACpC;AACL,aAAK,QAAQ,uBAAuB,KAAK;;;KA/B/C;IAAA,KAAA;IAAA,KAsCE,gBAAyB;AACvB,aAAO,KAAK;;KAvChB;IAAA,KAAA;IAAA,KA6CE,gBAAqB;AACnB,aAAO,KAAK;;KA9ChB;IAAA,KAAA;IAAA,KAoDE,gBAAmB;AACjB,aAAO,KAAK,QAAQ;;KArDxB;IAAA,KAAA;IAAA,KA2DE,gBAAqB;AACnB,aAAO,KAAK,QAAQ;;KA5DxB;IAAA,KAAA;IAAA,KA8IE,gBAA6B;AAC3B,aAAO,KAAK;;IA/IhB,KAiJE,cAAmB,KAAa;AAC9B,WAAK,kBAAkB;;;AAlJ3B,SAAA;EAAwC,eAAxC,UAAA,gBAAA,0BAAA,SAAA,WAAA,WAAA,CAEG,cAFH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA;IAAA,iBAAA,0BAAA,SAAA,WAAA,cAAA,CAKG,cALH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,wBAAA;AAAA,WAMwB;;IANxB,eAAA,0BAAA,SAAA,WAAA,YAAA,CAQG,kBARH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,wBAAA;AAAA,WAS8B;;IAT9B,eAAA,0BAAA,SAAA,WAAA,WAAA,CAUG,cAVH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,wBAAA;AAAA,WAW6B;;IAX7B;ICJa,aAAb,WAAA;AAIE,uBAAoB,QAA2B;AAAA,QAA3B,WAA2B,QAAA;AAA3B,eAAuB;;AAAI,SAA3B,SAAA;AAA2B,SAF/C,OAAO;;AAFT,MAAA,SAAA,YAAA;AAAA,SASE,UAAA,mBAAgB;AACd,QAAM,QAAQ,KAAK;AACnB,oBAAgB,OAAO;AACvB,SAAK,SAAS;;AAZlB,SAAA;;;;;;;;;;;;;;;;;;ICGa,YAAb,YAAA,WAAA,YAAA,SAAA,YAAA;AAAA,iBAAA,YAAA;AAAA,wBAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,WAAA,KAAA,MAAA,YAAA,CAAA,MAAA,OAAA,UAAA;AAAA,+BAAA,OAAA,aAAA,eAAA,uBAAA;AAAA,+BAAA,OAAA,aAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,uBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,UAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,kBAAA,cAAA,uBAAA;AAAA,+BAAA,OAAA,kBAAA,cAAA,uBAAA;AAAA,+BAAA,OAAA,4BAAA,cAAA,uBAAA;AAAA,+BAAA,OAAA,oBAAA,cAAA,uBAAA;AAAA,+BAAA,OAAA,gBAAA,cAAA,uBAAA;AAAA,+BAAA,OAAA,gBAAA,eAAA,uBAAA;AAAA,+BAAA,OAAA,gBAAA,eAAA,uBAAA;AAAA,+BAAA,OAAA,kBAAA,eAAA,uBAAA;AAAA,+BAAA,OAAA,yBAAA,eAAA,uBAAA;AAAA,UA4DU,aAAqB,WAAU;AA5DzC,WAAA;;AAAA,MAAA,SAAA,WAAA;AAAA,SAuTE,cAAA,qBAAY,GAAW,GAAW,GAAiB;AACjD,SAAK,UAAU,SAAS,GAAG,GAAG;AAC9B,SAAK,WAAW,KAAK;;AAzTzB,SAkUE,cAAA,qBAAY,GAAW,GAAW,GAAiB;AACjD,SAAK,UAAU,SAAS,GAAG,GAAG;AAC9B,SAAK,WAAW,KAAK;;AApUzB,SA8UE,wBAAA,+BAAsB,GAAW,GAAW,GAAW,GAAiB;AACtE,SAAK,oBAAoB,SAAS,GAAG,GAAG,GAAG;AAC3C,SAAK,qBAAqB,KAAK;;AAhVnC,SAyVE,WAAA,kBAAS,GAAW,GAAW,GAAiB;AAC9C,SAAK,OAAO,SAAS,GAAG,GAAG;AAC3B,SAAK,QAAQ,KAAK;;AA3VtB,SAoWE,mBAAA,0BAAiB,GAAW,GAAW,GAAiB;AACtD,SAAK,eAAe,SAAS,GAAG,GAAG;AACnC,SAAK,gBAAgB,KAAK;;AAtW9B,SA+WE,mBAAA,0BAAiB,GAAW,GAAW,GAAiB;AACtD,SAAK,eAAe,SAAS,GAAG,GAAG;AACnC,SAAK,gBAAgB,KAAK;;AAjX9B,SA2XE,6BAAA,oCAA2B,GAAW,GAAW,GAAW,GAAiB;AAC3E,SAAK,yBAAyB,SAAS,GAAG,GAAG,GAAG;AAChD,SAAK,0BAA0B,KAAK;;AA7XxC,SAqYE,kBAAA,yBAAgB,SAA2B;AACzC,QAAM,IAAI,KAAK,YAAY;AAC3B,YAAQ,SAAS,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE;AAClC,WAAO,QAAQ;;AAxYnB,SAgZE,gBAAA,uBAAc,OAAyB;AACrC,QAAM,IAAI,KAAK,YAAY;AAC3B,UAAM,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE;AAC7B,WAAO,MAAM;;AAnZjB,SA2ZE,aAAA,oBAAW,IAAsB;AAC/B,QAAM,IAAI,KAAK,YAAY;AAC3B,OAAG,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE;AAC1B,WAAO,GAAG;;AA9Zd,SAibE,YAAA,mBACE,gBACA,oBACA,GACA,iBACM;AACN,QAAI,OAAO,mBAAmB,UAAU;AACtC,UAAM,cAAY,WAAU;AAC5B,kBAAU,SAAS,gBAAwB,oBAAoB;AAC/D,WAAK,WAAW,aAAW;WACtB;AACL,WAAK,WAAW,gBAAyB;;;AA5b/C,SAgdE,SAAA,gBACE,aACA,oBACA,GACA,iBACM;AACN,QAAI,OAAO,gBAAgB,UAAU;AACnC,WAAK,WAAW,aAAqB,oBAAoB,GAAG;WACvD;AACL,WAAK,WAAW,YAAY,GAAG,YAAY,GAAG,YAAY,GAAY;;;AAzd5E,SAmeE,eAAA,sBAAa,MAAe,OAAe,iBAAuC;AAAA,QAAvC,oBAAuC,QAAA;AAAvC,wBAA2B;;AACpE,QAAM,MAAM,QAAQ,SAAS;AAC7B,eAAW,kBAAkB,MAAM,KAAK,WAAU;AAClD,SAAK,cAAc,WAAU,YAAY;;AAte7C,SA8eE,SAAA,gBAAO,eAAwB,SAAyB;AAAA,QAAA;AACtD,QAAM,WAAW,KAAK;AACtB,QAAM,UAAU,SAAS;AACzB,QACE,KAAK,IAAI,SAAS,IAAI,cAAc,KAAK,WACzC,KAAK,IAAI,SAAS,IAAI,cAAc,KAAK,WACzC,KAAK,IAAI,SAAS,IAAI,cAAc,KAAK,SACzC;AACA;;AAEF,QAAM,SAAS,WAAU;AACzB,QAAM,0BAA0B,KAAK;AAErC,cAAO,YAAG,YAAH,OAAA,WAAc,WAAU,UAAU,SAAS,GAAG,GAAG;AACxD,WAAO,OAAO,UAAU,eAAe,SAAS;AAChD,WAAO,YAAY,yBAAyB;AAC5C,SAAK,0BAA0B;;AA9fnC,SAqgBE,0BAAA,mCAAsC;AACpC,QAAM,OAAO,IAAI,WAAW,KAAK;AACjC,SAAK,aAAa,KAAK;AACvB,WAAO;;AAxgBX,SA8gBE,gBAAA,yBAAsB;AACpB,SAAK,iBAAiB;AACtB,SAAK;;AAhhBT,SAwhBU,2BAAR,oCAAyC;AACvC,QAAI,CAAC,KAAK,qBAAqB,WAAU,eAAe;AACtD,WAAK,uBAAuB,WAAU;AACtC,UAAM,eAAe,KAAK,QAAQ;AAClC,eAAS,IAAY,GAAG,IAAY,aAAa,QAAQ,IAAI,GAAG,KAAK;AAAA,YAAA;AACnE,QAAA,yBAAA,aAAa,GAAG,eAAhB,QAAA,0BAAA,SAAA,SAAA,sBAA2B;;;;AA7hBnC,SAyiBU,2BAAR,oCAAmC;AACjC,QAAI,CAAC,KAAK,qBAAqB,WAAU,kBAAkB;AACzD,WAAK,uBAAuB,WAAU;AACtC,UAAM,eAAe,KAAK,QAAQ;AAClC,eAAS,IAAY,GAAG,IAAY,aAAa,QAAQ,IAAI,GAAG,KAAK;AAAA,YAAA;AACnE,QAAA,0BAAA,aAAa,GAAG,eAAhB,QAAA,2BAAA,SAAA,SAAA,uBAA2B;;;;AA9iBnC,SA0jBU,sCAAR,+CAA8C;AAC5C,QAAI,CAAC,KAAK,qBAAqB,WAAU,qBAAqB;AAC5D,WAAK,uBAAuB,WAAU;AACtC,UAAM,eAAe,KAAK,QAAQ;AAClC,eAAS,IAAY,GAAG,IAAY,aAAa,QAAQ,IAAI,GAAG,KAAK;AAAA,YAAA;AACnE,QAAA,0BAAA,aAAa,GAAG,eAAhB,QAAA,2BAAA,SAAA,SAAA,uBAA2B;;;;AA/jBnC,SA0kBU,wBAAR,iCAAgC;AAC9B,QAAI,CAAC,KAAK,qBAAqB,WAAU,eAAe;AACtD,WAAK,uBAAuB,WAAU;AACtC,UAAM,eAAe,KAAK,QAAQ;AAClC,eAAS,IAAY,GAAG,IAAY,aAAa,QAAQ,IAAI,GAAG,KAAK;AAAA,YAAA;AACnE,QAAA,0BAAA,aAAa,GAAG,eAAhB,QAAA,2BAAA,SAAA,SAAA,uBAA2B;;;;AA/kBnC,SA0lBU,mCAAR,4CAAiD;AAC/C,QAAI,CAAC,KAAK,qBAAqB,WAAU,kBAAkB;AACzD,WAAK,uBAAuB,WAAU;AACtC,UAAM,eAAe,KAAK,QAAQ;AAClC,eAAS,IAAY,GAAG,IAAY,aAAa,QAAQ,IAAI,GAAG,KAAK;AAAA,YAAA;AACnE,QAAA,0BAAA,aAAa,GAAG,eAAhB,QAAA,2BAAA,SAAA,SAAA,uBAA2B;;;;AA/lBnC,SAumBU,sBAAR,+BAAoC;AAClC,QAAI,CAAC,KAAK,qBAAqB,WAAU,wBAAwB;AAC/D,WAAK,uBAAuB,WAAU;AACtC,UAAM,eAAe,KAAK,QAAQ;AAClC,eAAS,IAAY,GAAG,IAAY,aAAa,QAAQ,IAAI,GAAG,KAAK;AAAA,YAAA;AACnE,QAAA,0BAAA,aAAa,GAAG,eAAhB,QAAA,2BAAA,SAAA,SAAA,uBAA2B;;;;AA5mBnC,SAinBU,sBAAR,+BAAgD;AAC9C,QAAI,CAAC,KAAK,gBAAgB;AACxB,aAAO,KAAK;;AAEd,QAAI,cAAyB;AAC7B,QAAI,SAAS,KAAK,QAAQ;AAC1B,WAAO,QAAQ;AACb,UAAM,YAAY,OAAO;AACzB,UAAI,WAAW;AACb,sBAAc;AACd;aACK;AACL,iBAAS,OAAO;;;AAGpB,SAAK,wBAAwB;AAC7B,SAAK,iBAAiB;AACtB,WAAO;;AAloBX,SAqoBU,kBAAR,2BAAqC;AACnC,QAAM,cAAc,WAAU;AAC9B,QAAM,iBAAiB,WAAU;AACjC,QAAM,iBAAiB,WAAU;AACjC,QAAM,SAAS,WAAU;AACzB,mBAAe,iBAAiB,KAAK;AACrC,eAAW,OAAO,KAAK,yBAAyB;AAChD,cAAU,mBAAmB,aAAa;AAC1C,cAAU,SAAS,gBAAgB,gBAAgB;AACnD,WAAO;;AA9oBX,SAipBU,uBAAR,8BAA6B,kBAAmC;AAC9D,WAAQ,MAAK,aAAa,sBAAsB;;AAlpBpD,SAqpBU,sBAAR,6BAA4B,MAAuB;AACjD,WAAQ,MAAK,aAAa,SAAS;;AAtpBvC,SAypBU,oBAAR,2BAA0B,MAAc;AACtC,SAAK,cAAc;;AA1pBvB,SA6pBU,qBAAR,4BAA2B,MAAc;AACvC,SAAK,cAAc,CAAC;;AA9pBxB,SAiqBU,yBAAR,gCAA+B,MAAoB;AACjD,SAAK,cAAc;AACnB,QAAM,MAAM,KAAK,aAAa;AAC9B,aAAS,IAAI,MAAM,GAAG,KAAK,GAAG,KAAK;AACjC,WAAK,aAAa,GAAG,OAAO;;;AArqBlC,SAyqBU,gBAAR,uBAAsB,YAAwB,iBAA0B;AACtE,QAAI,iBAAiB;AACnB,iBAAW,SAAS,KAAK,oBAAoB,YAAY,KAAK;AAC9D,WAAK,qBAAqB,KAAK;WAC1B;AACL,iBAAW,SAAS,KAAK,yBAAyB,YAAY,KAAK;AACnE,WAAK,0BAA0B,KAAK;;;AA/qB1C,SAmrBU,aAAR,oBAAmB,aAAsB,iBAAuC;AAAA,QAAvC,oBAAuC,QAAA;AAAvC,wBAA2B;;AAClE,QAAI,iBAAiB;AACnB,UAAM,cAAc,WAAU;AAC9B,aAAO,mBAAmB,KAAK,oBAAoB;AACnD,cAAQ,oBAAoB,aAAa,aAAa,WAAU;AAChE,WAAK,WAAW,KAAK,UAAU,IAAI,WAAU;WACxC;AACL,WAAK,gBAAgB,KAAK,eAAe,IAAI;;;AA1rBnD,SA8rBU,aAAR,oBAAmB,GAAW,GAAW,GAAW,iBAAuC;AAAA,QAAvC,oBAAuC,QAAA;AAAvC,wBAA2B;;AAC7E,QAAM,YAAY,SAAS;AAC3B,QAAM,UAAU,WAAU;AAC1B,eAAW,cAAc,IAAI,WAAW,IAAI,WAAW,IAAI,WAAW;AACtE,SAAK,cAAc,SAAS;;AAlsBhC,SA6sBE,eAAA,sBAAa,GAAW,GAAW,GAAW,iBAAuC;AAAA,QAAvC,oBAAuC,QAAA;AAAvC,wBAA2B;;AACvE,SAAK,UAAU,GAAG,GAAG,GAAG;;AA9sB5B,SAytBE,YAAA,mBAAU,GAAW,GAAW,GAAW,iBAAuC;AAAA,QAAvC,oBAAuC,QAAA;AAAvC,wBAA2B;;AACpE,SAAK,OAAO,GAAG,GAAG,GAAG;;AA1tBzB,eAAA,YAAA,CAAA;IAAA,KAAA;IAAA,KAkEE,gBAAwB;AACtB,aAAO,KAAK;;IAnEhB,KAsEE,cAAa,OAAgB;AAC3B,UAAI,KAAK,cAAc,OAAO;AAC5B,cAAM,QAAQ,KAAK;;AAErB,WAAK,kBAAkB,WAAU;AACjC,WAAK;;KA3ET;IAAA,KAAA;IAAA,KAkFE,gBAA6B;AAC3B,UAAI,KAAK,oBAAoB,WAAU,uBAAuB;AAC5D,YAAI,KAAK,uBAAuB;AAC9B,eAAK,YAAY,eAAe,KAAK;eAChC;AACL,eAAK,UAAU,QAAQ,KAAK;;AAE9B,aAAK,mBAAmB,WAAU;;AAEpC,aAAO,KAAK;;IA3FhB,KA8FE,cAAkB,OAAgB;AAChC,UAAI,KAAK,mBAAmB,OAAO;AACjC,cAAM,QAAQ,KAAK;;AAErB,UAAM,SAAS,KAAK;AACpB,UAAI,QAAQ;AACV,eAAO,OAAO,OAAO,aAAa,WAAU;AAC5C,gBAAQ,oBAAoB,OAAO,WAAU,YAAY,KAAK;aACzD;AACL,cAAM,QAAQ,KAAK;;AAErB,WAAK,WAAW,KAAK;AACrB,WAAK,mBAAmB,WAAU;;KA1GtC;IAAA,KAAA;IAAA,KAiHE,gBAAwB;AACtB,UAAI,KAAK,oBAAoB,WAAU,oBAAoB;AACzD,aAAK,oBAAoB,QAAQ,KAAK;AACtC,aAAK,UAAU,MAAM,SAAS;AAE9B,aAAK,mBAAmB,WAAU;;AAEpC,aAAO,KAAK;;IAxHhB,KA2HE,cAAa,OAAgB;AAC3B,UAAI,KAAK,cAAc,OAAO;AAC5B,cAAM,QAAQ,KAAK;;AAErB,WAAK,kBAAkB,WAAU,qBAAqB,WAAU;AAChE,WAAK,mBAAmB,WAAU;AAClC,WAAK;;KAjIT;IAAA,KAAA;IAAA,KAwIE,gBAA6B;AAC3B,UAAI,KAAK,oBAAoB,WAAU,oBAAoB;AACzD,aAAK,wBAAwB,QAAQ,KAAK;AAC1C,aAAK,eAAe,MAAM,SAAS;AACnC,aAAK,mBAAmB,WAAU;;AAEpC,aAAO,KAAK;;IA9IhB,KAiJE,cAAkB,OAAgB;AAChC,UAAI,KAAK,mBAAmB,OAAO;AACjC,cAAM,QAAQ,KAAK;;AAErB,iBAAW,cACT,SAAS,eAAe,MAAM,IAC9B,SAAS,eAAe,MAAM,IAC9B,SAAS,eAAe,MAAM,IAC9B,KAAK;AAEP,WAAK,0BAA0B,KAAK;AACpC,WAAK,mBAAmB,WAAU;;KA5JtC;IAAA,KAAA;IAAA,KAmKE,gBAAqC;AACnC,UAAI,KAAK,oBAAoB,WAAU,mBAAmB;AACxD,mBAAW,cACT,SAAS,eAAe,KAAK,UAAU,IACvC,SAAS,eAAe,KAAK,UAAU,IACvC,SAAS,eAAe,KAAK,UAAU,IACvC,KAAK;AAEP,aAAK,mBAAmB,WAAU;;AAEpC,aAAO,KAAK;;IA7KhB,KAgLE,cAAuB,OAAmB;AACxC,UAAI,KAAK,wBAAwB,OAAO;AACtC,cAAM,QAAQ,KAAK;;AAErB,WAAK,kBAAkB,WAAU,qBAAqB,WAAU;AAChE,WAAK,mBAAmB,WAAU;AAClC,WAAK;;KAtLT;IAAA,KAAA;IAAA,KA6LE,gBAA0C;AACxC,UAAI,KAAK,oBAAoB,WAAU,mBAAmB;AACxD,YAAM,SAAS,KAAK;AACpB,YAAI,UAAU,MAAM;AAClB,qBAAW,SAAS,OAAO,yBAAyB,KAAK,oBAAoB,KAAK;eAC7E;AACL,eAAK,mBAAmB,QAAQ,KAAK;;AAEvC,aAAK,mBAAmB,WAAU;;AAEpC,aAAO,KAAK;;IAvMhB,KA0ME,cAA4B,OAAmB;AAC7C,UAAI,KAAK,6BAA6B,OAAO;AAC3C,cAAM,QAAQ,KAAK;;AAErB,UAAM,SAAS,KAAK;AACpB,UAAI,QAAQ;AACV,mBAAW,OAAO,OAAO,yBAAyB,WAAU;AAC5D,mBAAW,SAAS,OAAO,WAAU,YAAY,KAAK;aACjD;AACL,cAAM,QAAQ,KAAK;;AAErB,WAAK,qBAAqB,KAAK;AAC/B,WAAK,mBAAmB,WAAU;;KAtNtC;IAAA,KAAA;IAAA,KA6NE,gBAAqB;AACnB,aAAO,KAAK;;IA9NhB,KAiOE,cAAU,OAAgB;AACxB,UAAI,KAAK,WAAW,OAAO;AACzB,cAAM,QAAQ,KAAK;;AAErB,WAAK,kBAAkB,WAAU;AACjC,WAAK;;KAtOT;IAAA,KAAA;IAAA,KA6OE,gBAA+B;AAC7B,UAAI,KAAK,oBAAoB,WAAU,oBAAoB;AACzD,YAAI,KAAK,uBAAuB;AAC9B,cAAM,WAAW,KAAK;AACtB,cAAM,IAAI,SAAS;AACnB,eAAK,iBAAiB,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE;eACxC;AACL,eAAK,OAAO,QAAQ,KAAK;;AAE3B,aAAK,mBAAmB,WAAU;;AAEpC,aAAO,KAAK;;KAxPhB;IAAA,KAAA;IAAA,KA+PE,gBAA0B;AACxB,UAAI,KAAK,oBAAoB,WAAU,qBAAqB;AAC1D,eAAO,qBAAqB,KAAK,QAAQ,KAAK,oBAAoB,KAAK,WAAW,KAAK;AACvF,aAAK,mBAAmB,WAAU;;AAEpC,aAAO,KAAK;;IApQhB,KAuQE,cAAgB,OAAe;AAC7B,UAAI,KAAK,iBAAiB,OAAO;AAC/B,cAAM,QAAQ,KAAK;;AAErB,WAAK,aAAa,UAAU,KAAK,WAAW,KAAK,qBAAqB,KAAK;AAC3E,WAAK,kBAAkB,WAAU;AACjC,WAAK,mBAAmB,WAAU;AAClC,WAAK;;KA9QT;IAAA,KAAA;IAAA,KAqRE,gBAA0B;AACxB,UAAI,KAAK,oBAAoB,WAAU,qBAAqB;AAC1D,YAAM,SAAS,KAAK;AACpB,YAAI,QAAQ;AACV,iBAAO,SAAS,OAAO,aAAa,KAAK,aAAa,KAAK;eACtD;AACL,eAAK,YAAY,QAAQ,KAAK;;AAEhC,aAAK,mBAAmB,WAAU;;AAEpC,aAAO,KAAK;;IA/RhB,KAkSE,cAAgB,OAAe;AAC7B,UAAI,KAAK,iBAAiB,OAAO;AAC/B,cAAM,QAAQ,KAAK;;AAErB,UAAM,SAAS,KAAK;AACpB,UAAI,QAAQ;AACV,eAAO,OAAO,OAAO,aAAa,WAAU;AAC5C,eAAO,SAAS,OAAO,WAAU,YAAY,KAAK;aAC7C;AACL,cAAM,QAAQ,KAAK;;AAErB,WAAK,cAAc,KAAK;AACxB,WAAK,mBAAmB,WAAU;;;AA9StC,SAAA;EAA+B,YAA/B,UACiB,aAAyB,IAAI,cAD9C,UAEiB,YAAqB,IAAI,WAF1C,UAGiB,aAAwB,IAAI,aAH7C,UAIiB,aAAwB,IAAI,aAJ7C,UAKiB,aAAwB,IAAI,aAL7C,UAMiB,aAAqB,IAAI,UAN1C,UAOiB,aAAqB,IAAI,UAP1C,UAQiB,aAAqB,IAAI,UAR1C,UASiB,aAAqB,IAAI,UAT1C,UAWiB,oBAA4B,GAX7C,UAYiB,mBAA2B,GAZ5C,UAaiB,uBAA+B,GAbhD,UAciB,oBAA4B,GAd7C,UAeiB,mBAA2B,IAf5C,UAgBiB,oBAA4B,IAhB7C,UAiBiB,qBAA6B,IAjB9C,UAkBiB,qBAA6B,KAlB9C,UAqBiB,eAAuB,KArBxC,UAuBiB,kBAA0B,KAvB3C,UAyBiB,qBAA6B,KAzB9C,UA2BiB,eAAuB,KA3BxC,UA6BiB,kBAA0B,KA7B3C,UA+BiB,wBAAgC,KA/BjD,UAAA,gBAAA,0BAAA,SAAA,WAAA,aAAA,CAiCG,YAjCH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,wBAAA;AAAA,WAkC+B,IAAI;;IAlCnC,iBAAA,0BAAA,SAAA,WAAA,aAAA,CAmCG,YAnCH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,wBAAA;AAAA,WAoC+B,IAAI;;IApCnC,iBAAA,0BAAA,SAAA,WAAA,uBAAA,CAqCG,YArCH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,wBAAA;AAAA,WAsC4C,IAAI;;IAtChD,iBAAA,0BAAA,SAAA,WAAA,UAAA,CAuCG,YAvCH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,wBAAA;AAAA,WAwC4B,IAAI,QAAQ,GAAG,GAAG;;IAxC9C,eAAA,0BAAA,SAAA,WAAA,kBAAA,CAyCG,YAzCH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WA0CoC,IAAI;;IA1CxC,eAAA,0BAAA,SAAA,WAAA,kBAAA,CA2CG,YA3CH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WA4CoC,IAAI;;IA5CxC,eAAA,0BAAA,SAAA,WAAA,4BAAA,CA6CG,YA7CH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WA8CiD,IAAI;;IA9CrD,eAAA,0BAAA,SAAA,WAAA,oBAAA,CA+CG,YA/CH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAgDsC,IAAI,QAAQ,GAAG,GAAG;;IAhDxD,eAAA,0BAAA,SAAA,WAAA,gBAAA,CAiDG,YAjDH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAkDiC,IAAI;;IAlDrC,gBAAA,0BAAA,SAAA,WAAA,gBAAA,CAmDG,YAnDH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAoDiC,IAAI;;IApDrC,gBAAA,0BAAA,SAAA,WAAA,gBAAA,CAqDG,cArDH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAsDuC;;IAtDvC,gBAAA,0BAAA,SAAA,WAAA,kBAAA,CAuDG,cAvDH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAwDoC;;IAxDpC,gBAAA,0BAAA,SAAA,WAAA,yBAAA,CAyDG,cAzDH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WA0D6C;;IA1D7C;ICOa,SAAb,SAAA,eAAA;AAAA,iBAAA,SAAA;AAAA,UAQS,aAAP,oBAAkB,MAAsB;AACtC,QAAM,UAAU,QAAO;AACvB,QAAM,WAAW,QAAQ;AACzB,aAAS,IAAI,QAAQ,SAAS,GAAG,KAAK,GAAG,KAAK;AAC5C,UAAM,UAAS,SAAS;AACxB,UAAI,QAAO,SAAS,MAAM;AACxB,eAAO;;;AAGX,WAAO;;AAjBX,UA2BS,aAAP,oBAAkB,OAAc,MAA6B;AAC3D,WAAO,MAAM,iBAAiB;;AA5BlC,UAkCS,mBAAP,0BAAwB,MAAc,MAAsB;AAC1D,QAAM,WAAW,KAAK;AACtB,aAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAAK;AAC7C,UAAM,QAAQ,SAAS;AACvB,UAAI,MAAM,SAAS,MAAM;AACvB,eAAO;;;AAGX,WAAO;;AA1CX,UAgDS,yBAAP,gCAA8B,QAAgB,OAAoB;AAChE,WAAO,SAAS;AAChB,QAAM,WAAW,OAAO;AACxB,aAAS,IAAI,OAAO,aAAa,GAAG,KAAK,GAAG,KAAK;AAC/C,WAAK,uBAAuB,SAAS,IAAI;;;AAwH7C,mBAAY,QAAgB,MAAe;AAAA,QAAA;AACzC,YAAA,cAAA,KAAA,MAAM,WAAN;AADyC,UApH3C,OAoH2C;AAAA,UAlH3C,QAAe,MAAM;AAkHsB,UAjHlC,YAiHkC;AAAA,UA9G3C,uBAAgC;AA8GW,UA5G3C,cAA2B;AA4GgB,UA1G3C,YAAsB;AA0GqB,UAxG3C,SAwG2C;AAAA,UAtG3C,UAAmB;AAsGwB,UApG3C,YAAqB;AAoGsB,UAlGnC,UAAkB;AAkGiB,UAjGnC,2BAiGmC;AAAA,UAwTnC,kBAA0B,IAAI;AAxTK,UAyTnC,uBAzTmC;AAEzC,YAAO,SAAS,IAAhB,uBAAA;AACA,UAAK,OAAO;AACZ,UAAK,YAAY,MAAK,aAAa;AACnC,UAAK,uBAAuB,MAAK,UAAU;AALF,WAAA;;AA5K7C,MAAA,SAAA,QAAA;AAAA,SAyLE,eAAA,sBAAkC,MAAoC;AACpE,2BAAuB,UAAU,MAAM;AACvC,QAAM,YAAY,IAAI,KAAK;AAC3B,SAAK,YAAY,KAAK;AACtB,QAAI,KAAK,sBAAsB;AAC7B,gBAAU,WAAW;;AAEvB,WAAO;;AAhMX,SAwME,eAAA,sBAAkC,MAAoC;AACpE,aAAS,IAAI,KAAK,YAAY,SAAS,GAAG,KAAK,GAAG,KAAK;AACrD,UAAM,YAAY,KAAK,YAAY;AACnC,UAAI,qBAAqB,MAAM;AAC7B,eAAO;;;;AA5Mf,SAuNE,gBAAA,uBAAmC,MAAiC,SAAmB;AACrF,YAAQ,SAAS;AACjB,aAAS,IAAI,KAAK,YAAY,SAAS,GAAG,KAAK,GAAG,KAAK;AACrD,UAAM,YAAY,KAAK,YAAY;AACnC,UAAI,qBAAqB,MAAM;AAC7B,gBAAQ,KAAK;;;AAGjB,WAAO;;AA/NX,SAwOE,+BAAA,sCAAkD,MAAiC,SAAmB;AACpG,YAAQ,SAAS;AACjB,SAAK,yBAA4B,MAAM;AACvC,WAAO;;AA3OX,SAkPE,WAAA,kBAAS,OAAqB;AAC5B,UAAM,SAAS;;AAnPnB,SA0PE,cAAA,qBAAY,OAAqB;AAC/B,UAAM,SAAS;;AA3PnB,SAmQE,WAAA,kBAAS,OAAuB;AAC9B,WAAO,KAAK,UAAU;;AApQ1B,SA4QE,aAAA,oBAAW,MAAsB;AAC/B,QAAM,WAAW,KAAK;AACtB,QAAM,QAAQ,QAAO,iBAAiB,MAAM;AAC5C,QAAI;AAAO,aAAO;AAClB,aAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAAK;AAC7C,UAAM,SAAQ,SAAS;AACvB,UAAM,WAAW,OAAM,WAAW;AAClC,UAAI,UAAU;AACZ,eAAO;;;AAGX,WAAO;;AAvRX,SA+RE,aAAA,oBAAW,MAAsB;AAC/B,QAAM,SAAS,KAAK,MAAM;AAC1B,QAAI,SAAiB;AACrB,aAAS,IAAI,GAAG,SAAS,OAAO,QAAQ,IAAI,QAAQ,EAAE,GAAG;AACvD,UAAM,QAAQ,OAAO;AACrB,UAAI,OAAO;AACT,iBAAS,QAAO,iBAAiB,QAAQ;AACzC,YAAI,CAAC,QAAQ;AACX,iBAAO;;;;AAIb,WAAO;;AA3SX,SAmTE,cAAA,qBAAY,MAAuB;AACjC,QAAM,QAAQ,IAAI,QAAO,KAAK,QAAQ;AACtC,UAAM,QAAQ,KAAK;AACnB,UAAM,SAAS;AACf,WAAO;;AAvTX,SA6TE,gBAAA,yBAAsB;AACpB,QAAM,WAAW,KAAK;AACtB,aAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAAK;AAC7C,UAAM,QAAQ,SAAS;AACvB,YAAM,UAAU;AAChB,YAAM,wBAAwB,MAAM;AACpC,cAAO,uBAAuB,OAAO;;AAEvC,aAAS,SAAS;;AArUtB,SA4UE,QAAA,kBAAgB;AACd,QAAM,cAAc,IAAI,QAAO,KAAK,SAAS,KAAK;AAElD,gBAAY,YAAY,KAAK;AAC7B,gBAAY,UAAU,cAAc,KAAK,UAAU;AAEnD,QAAM,WAAW,KAAK;AACtB,aAAS,IAAI,GAAG,MAAM,KAAK,UAAU,QAAQ,IAAI,KAAK,KAAK;AACzD,UAAM,QAAQ,SAAS;AACvB,kBAAY,SAAS,MAAM;;AAG7B,QAAM,aAAa,KAAK;AACxB,aAAS,KAAI,GAAG,IAAI,WAAW,QAAQ,KAAI,GAAG,MAAK;AACjD,UAAM,aAAa,WAAW;AAC9B,UAAI,CAAE,uBAAsB,YAAY;AACtC,YAAM,aAAa,YAAY,aAAgD,WAAW;AAC1F,wBAAgB,eAAe,YAAY;;;AAI/C,WAAO;;AAjWX,SAuWE,UAAA,mBAAgB;AACd,QAAM,eAAe,KAAK;AAC1B,aAAS,IAAI,aAAa,SAAS,GAAG,KAAK,GAAG,KAAK;AACjD,mBAAa,GAAG;;AAElB,SAAK,YAAY,SAAS;AAE1B,QAAM,WAAW,KAAK;AACtB,aAAS,MAAI,SAAS,SAAS,GAAG,OAAK,GAAG,OAAK;AAC7C,eAAS,KAAG;;AAEd,SAAK,UAAU,SAAS;AAExB,QAAI,KAAK,WAAW,MAAM;AACxB,UAAM,iBAAiB,KAAK,QAAQ;AACpC,qBAAe,OAAO,eAAe,QAAQ,OAAO;;AAEtD,SAAK,UAAU;AACf,YAAO,SAAS,OAAO;;AAzX3B,SA+XE,mBAAA,0BAAiB,WAA4B;AAC3C,2BAAuB,aAAa,MAAM,UAAU;AACpD,QAAM,aAAa,KAAK;AACxB,eAAW,OAAO,WAAW,QAAQ,YAAY;;AAlYrD,SAwYE,oBAAA,6BAA4B;AAC1B,QAAM,YAAY,KAAK;AACvB,QAAI,aAAa,MAAM;AACrB,UAAM,oBAAoB,UAAU;AACpC,wBAAkB,OAAO,kBAAkB,QAAQ,OAAO;AAC1D,WAAK,UAAU;;AAEjB,WAAO;;AA/YX,SAqZE,iBAAA,0BAAuB;AACrB,QAAI,KAAK,0BAA0B;AACjC,YAAM;;AAER,SAAK,2BAA2B,KAAK,QAAQ,mBAAmB;AAChE,SAAK,sBAAsB,KAAK;AAChC,SAAK,qBAAqB;;AA3Z9B,SAiaE,mBAAA,4BAAyB;AACvB,QAAI,KAAK,0BAA0B;AACjC,YAAM;;AAER,SAAK,2BAA2B,KAAK,QAAQ,mBAAmB;AAChE,SAAK,wBAAwB,KAAK;AAClC,SAAK,qBAAqB;;AAva9B,SA0aU,2BAAR,kCAAsD,MAAiC,SAAoB;AACzG,aAAS,IAAI,KAAK,YAAY,SAAS,GAAG,KAAK,GAAG,KAAK;AACrD,UAAM,YAAY,KAAK,YAAY;AACnC,UAAI,qBAAqB,MAAM;AAC7B,gBAAQ,KAAK;;;AAGjB,aAAS,MAAI,KAAK,UAAU,SAAS,GAAG,OAAK,GAAG,OAAK;AACnD,WAAK,UAAU,KAAG,yBAA4B,MAAM;;;AAlb1D,SAsbU,uBAAR,8BAA6B,UAAyB;AACpD,QAAM,0BAA0B,KAAK;AACrC,aAAS,IAAI,GAAG,SAAS,wBAAwB,QAAQ,IAAI,QAAQ,EAAE,GAAG;AACxE,8BAAwB,GAAG,WAAW;;AAExC,SAAK,QAAQ,mBAAmB,yBAAyB;AACzD,SAAK,2BAA2B;;AA5bpC,SA+bU,wBAAR,+BAA8B,yBAA4C;AACxE,SAAK,uBAAuB;AAC5B,QAAM,aAAa,KAAK;AACxB,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG,KAAK;AAC/C,8BAAwB,KAAK,WAAW;;AAE1C,QAAM,WAAW,KAAK;AACtB,aAAS,MAAI,SAAS,SAAS,GAAG,OAAK,GAAG,OAAK;AAC7C,UAAM,QAAgB,SAAS;AAC/B,YAAM,YAAY,MAAM,sBAAsB;;;AAxcpD,SA4cU,0BAAR,iCAAgC,yBAA4C;AAC1E,SAAK,uBAAuB;AAC5B,QAAM,aAAa,KAAK;AACxB,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG,KAAK;AAC/C,8BAAwB,KAAK,WAAW;;AAE1C,QAAM,WAAW,KAAK;AACtB,aAAS,MAAI,SAAS,SAAS,GAAG,OAAK,GAAG,OAAK;AAC7C,UAAM,QAAgB,SAAS;AAC/B,YAAM,YAAY,MAAM,wBAAwB;;;AArdtD,SAydU,qBAAR,8BAA6B;AAC3B,QAAI,KAAK,WAAW;AAClB,WAAK,UAAU;WACV;AACL,eAAS,IAAI,GAAG,MAAM,KAAK,UAAU,QAAQ,IAAI,KAAK,KAAK;AACzD,aAAK,UAAU,GAAG;;;;AA9d1B,SA0hBE,oBAAA,6BAA4B;AAC1B,QAAI,KAAK,qBAAqB,MAAM;AAClC,aAAO,OAAO,KAAK,UAAU,aAAa,KAAK;AAC/C,WAAK,qBAAqB,OAAO;;AAEnC,WAAO,KAAK;;AA/hBhB,eAAA,SAAA,CAAA;IAAA,KAAA;IAAA,KAgFE,gBAAwB;AACtB,aAAO,KAAK;;IAjFhB,KAoFE,cAAa,OAAgB;AAC3B,UAAI,UAAU,KAAK,WAAW;AAC5B,aAAK,YAAY;AACjB,YAAI,OAAO;AACT,cAAM,SAAS,KAAK;AACpB,cAAI,WAAM,QAAN,WAAM,UAAN,OAAQ,wBAAyB,KAAK,WAAW,KAAK,OAAO,mBAAoB;AACnF,iBAAK;;eAEF;AACL,cAAI,KAAK,sBAAsB;AAC7B,iBAAK;;;;;KA9Ff;IAAA,KAAA;IAAA,KAuGE,gBAAmC;AACjC,aAAO,KAAK;;KAxGhB;IAAA,KAAA;IAAA,KA8GE,gBAAqB;AACnB,aAAO,KAAK;;IA/GhB,KAkHE,cAAW,QAAgB;AACzB,UAAI,WAAW,KAAK,SAAS;AAC3B,YAAM,YAAY,KAAK;AACvB,YAAM,YAAa,KAAK,UAAU;AAClC,YAAI,WAAW;AACb,oBAAU,UAAU,KAAK;AACzB,cAAM,cAAc,UAAU;AAC9B,cAAI,KAAK,WAAW,aAAa;AAC/B,oBAAO,uBAAuB,MAAM;;AAGtC,cAAI,UAAU,sBAAsB;AAClC,aAAC,KAAK,wBAAwB,KAAK,aAAa,KAAK;iBAChD;AACL,iBAAK,wBAAwB,KAAK;;eAE/B;AACL,eAAK,wBAAwB,KAAK;AAClC,cAAI,WAAW;AACb,oBAAO,uBAAuB,MAAM;;;AAGxC,aAAK;;;KAxIX;IAAA,KAAA;IAAA,KA+IE,gBAAmC;AACjC,aAAO,KAAK;;KAhJhB;IAAA,KAAA;IAAA,KAsJE,gBAAyB;AACvB,aAAO,KAAK,UAAU;;KAvJ1B;IAAA,KAAA;IAAA,KA6JE,gBAAmB;AACjB,aAAO,KAAK;;KA9JhB;IAAA,KAAA;IAAA,KAoKE,gBAAqB;AACnB,aAAO,KAAK;;KArKhB;IAAA,KAAA;IAAA,KA2eE,gBAAwB;AACtB,aAAO,KAAK,UAAU;;IA5e1B,KA+eE,cAAa,KAAc;AACzB,WAAK,UAAU,WAAW;;KAhf9B;IAAA,KAAA;IAAA,KAufE,gBAA6B;AAC3B,aAAO,KAAK,UAAU;;IAxf1B,KA2fE,cAAkB,KAAc;AAC9B,WAAK,UAAU,gBAAgB;;KA5fnC;IAAA,KAAA;IAAA,KAmgBE,gBAA2B;AACzB,aAAO,KAAK,UAAU;;IApgB1B,KAugBE,cAAa,KAAiB;AAC5B,WAAK,UAAU,qBAAqB;;KAxgBxC;IAAA,KAAA;IAAA,KA+gBE,gBAAqB;AACnB,aAAO,KAAK,UAAU;;IAhhB1B,KAmhBE,cAAU,KAAc;AACtB,WAAK,UAAU,QAAQ;;;AAphB3B,SAAA;EAA4B;AAAf,OACI,WAAoC,IAAI;ICR5C,iBAAb,WAAA;AAAA,6BAAA;AAAA,SACU,YAA8C;AADxD,SAGU,WAAW;;AAHrB,MAAA,SAAA,gBAAA;AAAA,SASS,kBAAP,yBAAuB,UAA6B;AAClD,QAAM,eAAe,KAAK;AAG1B,aAAS,IAAI,GAAG,MAAM,aAAa,QAAQ,IAAI,KAAK,KAAK;AACvD,UAAI,aAAa,OAAO,UAAU;AAChC;;;AAKJ,iBAAa,KAAK;AAGlB,QAAM,cAAc,KAAK;AACzB,aAAS,KAAI,GAAG,OAAM,YAAY,QAAQ,KAAI,MAAK,MAAK;AACtD,kBAAY,IAAG,SAAS,KAAK,IAAI;;;AAzBvC,SAiCS,YAAP,mBAAiB,KAA2B;AAC1C,QAAI,WAAW;AACf,aAAS,IAAI,GAAG,MAAM,KAAK,UAAU,QAAQ,IAAI,KAAK,KAAK;AAAA,UAAA;AACzD,UAAI,SAAS,KAAK,IAAI,KAAK,UAAU,GAAnB,WAA4B,IAAK,WAAjC,OAAA,UAAgD;;AAEpE,SAAK,SAAS,KAAK;;AAtCvB,SA+CS,oBAAP,2BAAyB,KAAqB,QAAgB,MAAmB;AAC/E,QAAM,WAAW,IAAI;AACrB,QAAM,QAAQ,SAAS;AAEvB,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,UAAM,UAAU,SAAS;AACzB,UAAI,QAAQ,SAAS;AACnB,gBAAQ,QAAQ,MAAM,SAAS;;;;AAtDvC,SAiES,cAAP,qBAAmB,KAAqB,UAA0B;AAChE,QAAM,WAAW,IAAI;AACrB,QAAM,QAAQ,SAAS;AAEvB,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,UAAM,UAAU,SAAS;AACzB,UAAI,QAAQ,gBAAiB,UAAkB;AAC7C,eAAO;;;AAGX,WAAO;;AA3EX,SAAA;;ICAa,gBAAb,WAAA;AAAA,4BAAA;AAAA,SA4BE,YA5BF;AAAA,SA8BE,YA9BF;AAAA,SAgCE,eAhCF;AAAA,SAkCE,WAlCF;;AAAA,iBAQS,cAAP,uBAAoC;AAAA,QACP,QAA8B,eAAjD,mBAAwC,OAAS,eAAvB;AAClC,mBAAc;AACd,QAAI,KAAK,WAAW,OAAO;AACzB,UAAM,UAAU,IAAI;AACpB,WAAK,KAAK;AACV,aAAO;WACF;AACL,aAAO,KAAK;;;AAhBlB,iBAuBS,YAAP,qBAAmB;AACjB,mBAAc,oBAAoB;;AAxBtC,MAAA,SAAA,eAAA;AAAA,SAoCE,WAAA,kBAAS,WAAqB,WAAsB,cAA4B,UAA0B;AACxG,SAAK,YAAY;AACjB,SAAK,YAAY;AACjB,SAAK,eAAe;AACpB,SAAK,WAAW;;AAxCpB,SAAA;;AAAa,cACI,oBAA4B;AADhC,cAEI,eAAgC;ICH3B,eAAtB,WAAA;AAAA,2BAAA;;AAAA,MAAA,SAAA,cAAA;AAAA,SAKS,YAAP,mBAAiB,OAAoB;;AALvC,SAWS,aAAP,oBAAkB,OAAoB;;AAXxC,SAkBS,YAAP,mBAAiB,OAAc,QAAsB;;AAlBvD,SAyBS,aAAP,oBAAkB,OAAc,QAAsB;;AAzBxD,SA+BS,UAAP,iBAAe,OAAoB;;AA/BrC,SAAA;;ICHY;UAAA,cAAA;AAAA,eAAA,aAAA,UAAA,KAAA;AAAA,eAAA,aAAA,SAAA,KAAA;AAAA,eAAA,aAAA,iBAAA,KAAA;AAAA,eAAA,aAAA,yBAAA,KAAA;AAAA,eAAA,aAAA,sBAAA,KAAA;AAAA,eAAA,aAAA,8BAAA,KAAA;AAAA,eAAA,aAAA,iBAAA,KAAA;AAAA,eAAA,aAAA,yBAAA,KAAA;AAAA,eAAA,aAAA,sBAAA,KAAA;AAAA,eAAA,aAAA,8BAAA,KAAA;AAAA,eAAA,aAAA,yBAAA,MAAA;AAAA,eAAA,aAAA,gBAAA,MAAA;AAAA,eAAA,aAAA,wBAAA,MAAA;GAAA,eAAA,eAAA;ICAA;UAAA,iBAAA;AAAA,kBAAA,gBAAA,SAAA,KAAA;AAAA,kBAAA,gBAAA,cAAA,KAAA;AAAA,kBAAA,gBAAA,qBAAA,KAAA;AAAA,kBAAA,gBAAA,SAAA,KAAA;AAAA,kBAAA,gBAAA,SAAA,KAAA;GAAA,kBAAA,kBAAA;ICAA;UAAA,iBAAA;AAAA,kBAAA,gBAAA,UAAA,KAAA;AAAA,kBAAA,gBAAA,SAAA,KAAA;AAAA,kBAAA,gBAAA,WAAA,KAAA;AAAA,kBAAA,gBAAA,UAAA,KAAA;AAAA,kBAAA,gBAAA,WAAA,KAAA;AAAA,kBAAA,gBAAA,SAAA,MAAA;GAAA,kBAAA,kBAAA;ICAA;UAAA,kBAAA;AAAA,mBAAA,iBAAA,WAAA,KAAA;AAAA,mBAAA,iBAAA,UAAA,KAAA;AAAA,mBAAA,iBAAA,WAAA,KAAA;AAAA,mBAAA,iBAAA,eAAA,KAAA;AAAA,mBAAA,iBAAA,aAAA,KAAA;AAAA,mBAAA,iBAAA,cAAA,KAAA;AAAA,mBAAA,iBAAA,kBAAA,KAAA;AAAA,mBAAA,iBAAA,YAAA,KAAA;GAAA,mBAAA,mBAAA;ICAA;UAAA,WAAA;AAAA,YAAA,UAAA,SAAA,KAAA;AAAA,YAAA,UAAA,WAAA,KAAA;AAAA,YAAA,UAAA,UAAA,KAAA;GAAA,YAAA,YAAA;ICAA;UAAA,mBAAA;AAAA,oBAAA,kBAAA,UAAA,KAAA;AAAA,oBAAA,kBAAA,UAAA,KAAA;AAAA,oBAAA,kBAAA,aAAA,KAAA;AAAA,oBAAA,kBAAA,uBAAA,KAAA;AAAA,oBAAA,kBAAA,uBAAA,KAAA;AAAA,oBAAA,kBAAA,YAAA,KAAA;AAAA,oBAAA,kBAAA,mBAAA,KAAA;AAAA,oBAAA,kBAAA,mBAAA,KAAA;GAAA,oBAAA,oBAAA;ICDA;UAAA,kBAAA;AAAA,mBAAA,iBAAA,YAAA,OAAA;AAAA,mBAAA,iBAAA,eAAA,OAAA;AAAA,mBAAA,iBAAA,iBAAA,OAAA;GAAA,mBAAA,mBAAA;ICuBC,cAAb,WAAA;AAAA,0BAAA;AAAA,SAIW,QAAgB;;AAJ3B,MAAA,SAAA,aAAA;AAAA,SASE,gBAAA,uBAAc,SAA8B;AAC1C,SAAK,MAAM,KAAK;;AAVpB,SAgBE,OAAA,cAAK,gBAA+B;AAAA,QAAA,QAAA;AAClC,SAAK,MAAM,KAAK,SAAC,GAAS,GAAY;AACpC,UAAM,eAAe,MAAK,aAAa;AACvC,UAAM,eAAe,MAAK,aAAa;AAEvC,UAAI,gBAAgB,cAAc;AAChC,YAAM,WAAyC;AAC/C,YAAM,WAAyC;AAC/C,YAAM,eAAe,SAAS,SAAS;AACvC,YAAM,eAAe,SAAS,SAAS;AAEvC,YAAI,eAAe,cAAc;AAC/B,iBAAO;;AAET,YAAI,eAAe,cAAc;AAC/B,iBAAO;;AAIT,YAAI,gBAAgB,gBAAgB,eAAe,gBAAgB,gBAAgB,aAAa;AAC9F,cAAM,YAAY,QAAQ,gBAAgB,SAAS,UAAU,OAAO,UAAU,eAAe;AAC7F,cAAM,YAAY,QAAQ,gBAAgB,SAAS,UAAU,OAAO,UAAU,eAAe;AAE7F,iBAAO,YAAY;;AAIrB,eAAO,SAAS,SAAS,OAAO,KAAK,cAAc,SAAS,SAAS,OAAO;iBACnE,gBAAgB,CAAC,cAAc;AACxC,eAAO;iBACE,CAAC,gBAAgB,cAAc;AACxC,eAAO;;;;AA/Cf,SAoDE,aAAA,oBAAW,WAAsB,cAAc,QAAQ,WAAW,SAAS,YAAY,QAAgB;AACrG,QAAM,UAAyB;MAE7B;MACA;MACA;MACA;MACA;MACA;MACA;;AAEF,SAAK,MAAM,KAAK;;AA/DpB,SAkEE,SAAA,gBAAO,QAAgB,iBAA2B,MAAa;AAC7D,QAAM,QAAQ,KAAK;AACnB,QAAI,MAAM,WAAW,GAAG;AACtB;;AAGF,QAAM,iBAAiB,OAAO,gBAAgB;AANe,QAOrD,SAAkB,OAAlB,QAAQ,QAAU,OAAV;AAChB,QAAM,cAAc,OAAO;AAC3B,QAAM,MAAM,OAAO;AACnB,QAAM,YAAY,MAAM;AACxB,QAAM,aAAa,OAAO;AAE1B,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAI,GAAG,KAAK;AAC5C,UAAM,OAAO,MAAM;AACnB,UAAM,iBAAiB,KAAK,UAAU,OAAO;AAE7C,UAAI,CAAE,kBAAiB,OAAO;AAC5B;;AAGF,UAAI,KAAK,aAAa,OAAO;AAC3B,YAAI,YAAY,QAAQ;AAExB,YAAM,gBAAgB,aAAY;AAClC,YAAM,UAAyB;AAC/B,YAAM,WAAW,QAAQ;AACzB,YAAM,WAAW,kBAAkB,kBAAkB,QAAQ;AAC7D,YAAM,eAAe,SAAS;AAC9B,YAAM,eAAe,SAAS;AAG9B,iBAAS,WAAW;AAGpB,8BAAsB,gBACpB,SAAS,oBACT,aAAa,kBACb;AAEF,sBAAc,gBAAgB,QAAQ,UAAU;AAEhD,YAAM,UAAU,SAAS,OAAO,kBAAkB,QAAQ;AAC1D,YAAI,CAAC,QAAQ,SAAS;AACpB;;AAGF,YAAM,gBAAgB,QAAQ;AAC9B,YAAM,oBAAoB,gBAAgB,QAAQ;AAElD,YAAI,mBAAmB;AACrB,kBAAQ;AACR,kBAAQ,UAAU,QAAQ,mBAAmB;AAC7C,kBAAQ,UAAU,QAAQ,oBAAoB;AAC9C,kBAAQ,UAAU,QAAQ,sBAAsB;AAChD,kBAAQ,UAAU,QAAQ,sBAAsB;AAChD,kBAAQ,gBAAgB;AACxB,kBAAQ,kBAAkB;AAC1B,kBAAQ,kBAAkB;AAC1B,kBAAQ,qBAAqB;eACxB;AACL,cAAI,QAAQ,kBAAkB,QAAQ;AACpC,oBAAQ,eAAe,QAAQ,oBAAoB;AACnD,oBAAQ,gBAAgB;;AAG1B,cAAI,QAAQ,oBAAoB,UAAU;AACxC,oBAAQ,eAAe,QAAQ,sBAAsB;AACrD,oBAAQ,kBAAkB;;AAG5B,cAAI,QAAQ,oBAAoB,UAAU;AACxC,oBAAQ,eAAe,QAAQ,sBAAsB;AACrD,oBAAQ,kBAAkB;;AAG5B,cAAI,eAAe;AACjB,oBAAQ,eAAe,QAAQ,mBAAmB;AAClD,oBAAQ,eAAe,QAAQ,oBAAoB;AACnD,oBAAQ,eAAe,QAAQ,sBAAsB;AACrD,oBAAQ,eAAe,QAAQ,sBAAsB;;;AAIzD,iBAAS,YAAY,OAAO,OAAO;AAEnC,YAAI,cAAc,QAAQ,WAAW,QAAQ,cAAc;aACtD;AACL,YAAM,gBAA+B;AACrC,YAAI,WACF,gBACA,cAAc,cACd,cAAc,QACd,cAAc,WACd,cAAc,SACd,cAAc,YACd,cAAc;;;AAKpB,QAAI,YAAY,QAAQ;;AAvK5B,SA6KE,QAAA,iBAAc;AACZ,SAAK,MAAM,SAAS;;AA9KxB,SAiLU,eAAR,sBAAqB,MAAM;AACzB,WAAO,CAAC,CAAC,KAAK;;AAlLlB,SAAA;;AAAa,YAEK,gBAAuC,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACE7D,IAAA,eAAe;EACb;EACA;EAEA;EAEA;EACA;EAEA;EAEA;EAEA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;;;;ACoBK,IAAM,YAAS,eAAA;EACpB;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EAEA;EACA;GAEG;AAGE,4BAA4B,KAAK;AACtC,WAAc,WAAW;;ICnJrB,gBAAA,WAAA;;;iBAKG,eAAP,sBAAoB,UAAyB;AAAA,QAAzB,aAAyB,QAAA;AAAzB,iBAAkB;;AACpC,WAAA,cAAmB,WAAnB;;iBAGK,iBAAP,wBAAsB,OAAe,OAAe,aAAuB;AACzE,QAAM,YAAY;AAElB,WAAA,sEAEkB,eAAc,QAAQ,SAFxC,kCAGkB,eAAc,QAAQ,SAHxC,oDAKoC,QALpC,+CAMsC,QANtC,0CAQkB,YARlB,kCASkB,YATlB,oDAWoC,YAXpC,+CAYsC,YAZtC;;iBAiBK,kBAAP,yBAAuB,MAAM;AAC3B,WAAA,4BAAiC,OAAjC;;iBAGK,uBAAP,8BAA4B,QAAQ;AAClC,WACE,wCACA,OAAO,IAAI,SAAC,GAAD;AAAA,aAAA,aAAkB,IAAlB;OAAyB,KAAK,MACzC;;iBAIG,oBAAP,2BAAyB,QAAkB;AACzC,WACE,qCACA,OAAO,IAAI,SAAC,GAAD;AAAA,aAAA,aAAkB,IAAlB;OAAyB,KAAK,MACzC;;iBAIG,cAAP,qBAAmB,KAAK;AACtB,WAAO,eAAc,cAAc;;iBAG9B,gBAAP,uBAAqB,KAAK;AACxB,QAAM,QAAQ;AAEd,qBAAiB,OAAO,OAAO;AAC7B,UAAI,WAAU,UAAU;AAExB,UAAI,aAAY,QAAW;AACzB,eAAO,MAAP,mBAA8B,MAAM,SAApC;AACA,eAAO;;AAGT,aAAO,eAAc,cAAc;;AAGrC,WAAO,IAAI,QAAQ,OAAO;;iBAGrB,qBAAP,8BAA0B,QAAQ;AAChC,uBAAmB;;iBAOd,iBAAP,wBAAsB,YAAsB;AAC1C,WACE,iCACA,WAAW,IAAI,SAAC,GAAD;AAAA,aAAA,gBAAqB,IAArB;OAAqC,KAAK,MADzD;;iBAWG,eAAP,sBAAoB,QAAgB,QAAkB;AAEpD,aAAS,OAAO,QAAQ,kBAAkB;AAC1C,aAAS,OAAO,QAAQ,gBAAgB,SAAS,OAAO;AAGxD,aAAS,OAAO,QAAQ,4BAA4B;AACpD,aAAS,OAAO,QAAQ,kCAAkC;AAC1D,QAAI,QAAQ;AACV,UAAM,QAAQ,wBAAwB,KAAK;AAC3C,UAAI,OAAO;AACT,iBAAS,OAAO,QAAQ,qBAAqB;AAC7C,YAAM,SAAS,OAAO,MAAM;AAC5B,iBAAS,KAAK,iBAAiB,QAAQ;aAClC;AACL,iBAAS,OAAO,QAAQ,sBAAf;AACT,iBAAS,OAAO,QAAQ,qBAAqB;;;AAIjD,WAAO;;iBAOF,oBAAP,2BAAyB,QAAwB;AAC/C,QAAM,cAAc,IAAI;AACxB,QAAM,SAAS,OAAO,MAAM,4BAA4B;AAExD,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAM,MAAM,OAAO,GAAG,MAAM;AAC5B,kBAAY,IAAI,IAAI;;AAGtB,WAAO,YAAY;;iBAMd,aAAP,oBAAkB,gBAAwB;AACxC,QAAM,cAAc,wBAAwB,KAAK;AACjD,QAAI,aAAa;AACf,uBAAiB,eAAe,QAAQ,qBAAqB;;AAE/D,WAAO;;iBAGM,mBAAf,0BAAgC,QAAgB,QAA0B;AACxE,QAAI,cAAc;AAClB,QAAM,cAAc,IAAI;AAExB,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAM,MAAM,OAAO,GAAG,MAAM;AAC5B,kBAAY,IAAI,IAAI;;AAGtB,gBAAY,QAAQ,SAAC,OAAU;AAC7B,qBAAW,qBAAuB,QAAvB,4BAAsD,QAAtD;;AAEb,mBAAW;AAEX,aAAS,OAAO,QAAQ,2BAA2B;AAEnD,aAAS,OAAO,QAAQ,sBAAsB;AAC9C,WAAO;;;;IC9JE,cAYX,sBAAY,MAAc,OAAe,OAAe;AAAA,OAV/C,OAU+C;AAAA,OAPxD,SAOwD;AAAA,OALxD,SAKwD;AACtD,OAAK,OAAO;AACZ,OAAK,SAAS;AACd,OAAK,SAAS;;ICfN;UAAA,kBAAA;AAAA,mBAAA,iBAAA,WAAA,KAAA;AAAA,mBAAA,iBAAA,YAAA,KAAA;AAAA,mBAAA,iBAAA,cAAA,KAAA;AAAA,mBAAA,iBAAA,cAAA,KAAA;GAAA,mBAAA,mBAAA;ICOC,gBAAb,WAAA;AAWE,0BAAY,QAAgB;AAAA,SAV5B,OAU4B;AAAA,SAT5B,aAS4B;AAAA,SAR5B,WAQ4B;AAAA,SAP5B,eAO4B;AAAA,SAN5B,YAM4B;AAAA,SAL5B,aAK4B;AAAA,SAHpB,OAGoB;AAAA,SAFpB,MAEoB;AAC1B,QAAM,MAAM,OAAO;AACnB,SAAK,OAAO;AACZ,SAAK,MAAM,IAAI;;AAdnB,MAAA,SAAA,eAAA;AAAA,SAiBE,WAAA,kBAAS,eAA8B,OAAqB;AAC1D,QAAI,KAAK,eAAe,OAAO;AAC7B,WAAK,IAAI,UAAU,cAAc,UAAU;AAC3C,WAAK,aAAa;;;AApBxB,SAwBE,YAAA,mBAAU,eAA8B,OAA2B;AACjE,SAAK,IAAI,WAAW,cAAc,UAAU;;AAzBhD,SA4BE,WAAA,kBAAS,eAA8B,OAAkD;AACvF,QAAM,YAAqB,KAAK;AAChC,QAAY,MAAO,MAAM,QAAW;AAClC,UAAI,UAAU,MAAc,MAAO,KAAK,UAAU,MAAc,MAAO,GAAG;AACxE,aAAK,IAAI,UAAU,cAAc,UAAkB,MAAO,GAAW,MAAO;AAC5E,kBAAU,IAAY,MAAO;AAC7B,kBAAU,IAAY,MAAO;;WAE1B;AACL,UAAI,UAAU,MAAgB,MAAO,KAAK,UAAU,MAAgB,MAAO,GAAG;AAC5E,aAAK,IAAI,UAAU,cAAc,UAAoB,MAAO,GAAa,MAAO;AAChF,kBAAU,IAAc,MAAO;AAC/B,kBAAU,IAAc,MAAO;;;;AAxCvC,SA6CE,YAAA,mBAAU,eAA8B,OAA2B;AACjE,SAAK,IAAI,WAAW,cAAc,UAAU;;AA9ChD,SAiDE,WAAA,kBAAS,eAA8B,OAAwC;AAC7E,QAAM,YAAqB,KAAK;AAChC,QAAY,MAAO,MAAM,QAAW;AAClC,UAAI,UAAU,MAAc,MAAO,KAAK,UAAU,MAAc,MAAO,KAAK,UAAU,MAAc,MAAO,GAAG;AAC5G,aAAK,IAAI,UAAU,cAAc,UAAkB,MAAO,GAAW,MAAO,GAAW,MAAO;AAC9F,kBAAU,IAAY,MAAO;AAC7B,kBAAU,IAAY,MAAO;AAC7B,kBAAU,IAAY,MAAO;;WAE1B;AACL,UACE,UAAU,MAAgB,MAAO,KACjC,UAAU,MAAgB,MAAO,KACjC,UAAU,MAAgB,MAAO,GACjC;AACA,aAAK,IAAI,UAAU,cAAc,UAAoB,MAAO,GAAa,MAAO,GAAa,MAAO;AACpG,kBAAU,IAAc,MAAO;AAC/B,kBAAU,IAAc,MAAO;AAC/B,kBAAU,IAAc,MAAO;;;;AAnEvC,SAwEE,YAAA,mBAAU,eAA8B,OAA2B;AACjE,SAAK,IAAI,WAAW,cAAc,UAAU;;AAzEhD,SA4EE,WAAA,kBAAS,eAA8B,OAA8B;AACnE,QAAM,YAAqB,KAAK;AAChC,QAAY,MAAO,MAAM,QAAW;AAClC,UACE,UAAU,MAAc,MAAO,KAC/B,UAAU,MAAc,MAAO,KAC/B,UAAU,MAAc,MAAO,KAC/B,UAAU,MAAc,MAAO,GAC/B;AACA,aAAK,IAAI,UACP,cAAc,UACN,MAAO,GACP,MAAO,GACP,MAAO,GACP,MAAO;AAEjB,kBAAU,IAAY,MAAO;AAC7B,kBAAU,IAAY,MAAO;AAC7B,kBAAU,IAAY,MAAO;AAC7B,kBAAU,IAAY,MAAO;;WAE1B;AACL,UACE,UAAU,MAAgB,MAAO,KACjC,UAAU,MAAgB,MAAO,KACjC,UAAU,MAAgB,MAAO,KACjC,UAAU,MAAgB,MAAO,GACjC;AACA,aAAK,IAAI,UACP,cAAc,UACJ,MAAO,GACP,MAAO,GACP,MAAO,GACP,MAAO;AAEnB,kBAAU,IAAc,MAAO;AAC/B,kBAAU,IAAc,MAAO;AAC/B,kBAAU,IAAc,MAAO;AAC/B,kBAAU,IAAc,MAAO;;;;AAlHvC,SAuHE,YAAA,mBAAU,eAA8B,OAA2B;AACjE,SAAK,IAAI,WAAW,cAAc,UAAU;;AAxHhD,SA2HE,WAAA,kBAAS,eAA8B,OAAqB;AAC1D,QAAI,KAAK,eAAe,OAAO;AAC7B,WAAK,IAAI,UAAU,cAAc,UAAU;AAC3C,WAAK,aAAa;;;AA9HxB,SAkIE,YAAA,mBAAU,eAA8B,OAAyB;AAC/D,SAAK,IAAI,WAAW,cAAc,UAAU;;AAnIhD,SAsIE,WAAA,kBAAS,eAA8B,OAAkD;AACvF,QAAM,YAAqB,KAAK;AAChC,QAAY,MAAO,MAAM,QAAW;AAClC,UAAI,UAAU,MAAc,MAAO,KAAK,UAAU,MAAc,MAAO,GAAG;AACxE,aAAK,IAAI,UAAU,cAAc,UAAkB,MAAO,GAAW,MAAO;AAC5E,kBAAU,IAAY,MAAO;AAC7B,kBAAU,IAAY,MAAO;;WAE1B;AACL,UAAI,UAAU,MAAgB,MAAO,KAAK,UAAU,MAAgB,MAAO,GAAG;AAC5E,aAAK,IAAI,UAAU,cAAc,UAAoB,MAAO,GAAa,MAAO;AAChF,kBAAU,IAAc,MAAO;AAC/B,kBAAU,IAAc,MAAO;;;;AAlJvC,SAuJE,YAAA,mBAAU,eAA8B,OAAyB;AAC/D,SAAK,IAAI,WAAW,cAAc,UAAU;;AAxJhD,SA2JE,WAAA,kBAAS,eAA8B,OAAwC;AAC7E,QAAM,YAAqB,KAAK;AAChC,QAAY,MAAO,MAAM,QAAW;AAClC,UAAI,UAAU,MAAc,MAAO,KAAK,UAAU,MAAc,MAAO,KAAK,UAAU,MAAc,MAAO,GAAG;AAC5G,aAAK,IAAI,UAAU,cAAc,UAAkB,MAAO,GAAW,MAAO,GAAW,MAAO;AAC9F,kBAAU,IAAY,MAAO;AAC7B,kBAAU,IAAY,MAAO;AAC7B,kBAAU,IAAY,MAAO;;WAE1B;AACL,UACE,UAAU,MAAgB,MAAO,KACjC,UAAU,MAAgB,MAAO,KACjC,UAAU,MAAgB,MAAO,GACjC;AACA,aAAK,IAAI,UAAU,cAAc,UAAoB,MAAO,GAAa,MAAO,GAAa,MAAO;AACpG,kBAAU,IAAc,MAAO;AAC/B,kBAAU,IAAc,MAAO;AAC/B,kBAAU,IAAc,MAAO;;;;AA7KvC,SAiLE,YAAA,mBAAU,eAA8B,OAAyB;AAC/D,SAAK,IAAI,WAAW,cAAc,UAAU;;AAlLhD,SAoLE,WAAA,kBAAS,eAA8B,OAA8B;AACnE,QAAM,YAAqB,KAAK;AAChC,QAAY,MAAO,MAAM,QAAW;AAClC,UACE,UAAU,MAAc,MAAO,KAC/B,UAAU,MAAc,MAAO,KAC/B,UAAU,MAAc,MAAO,KAC/B,UAAU,MAAc,MAAO,GAC/B;AACA,aAAK,IAAI,UACP,cAAc,UACN,MAAO,GACP,MAAO,GACP,MAAO,GACP,MAAO;AAEjB,kBAAU,IAAY,MAAO;AAC7B,kBAAU,IAAY,MAAO;AAC7B,kBAAU,IAAY,MAAO;AAC7B,kBAAU,IAAY,MAAO;;WAE1B;AACL,UACE,UAAU,MAAgB,MAAO,KACjC,UAAU,MAAgB,MAAO,KACjC,UAAU,MAAgB,MAAO,KACjC,UAAU,MAAgB,MAAO,GACjC;AACA,aAAK,IAAI,UACP,cAAc,UACJ,MAAO,GACP,MAAO,GACP,MAAO,GACP,MAAO;AAEnB,kBAAU,IAAc,MAAO;AAC/B,kBAAU,IAAc,MAAO;AAC/B,kBAAU,IAAc,MAAO;AAC/B,kBAAU,IAAc,MAAO;;;;AA1NvC,SA+NE,YAAA,mBAAU,eAA8B,OAAyB;AAC/D,SAAK,IAAI,WAAW,cAAc,UAAU;;AAhOhD,SAmOE,aAAA,oBAAW,eAA8B,OAAqB;AAC5D,SAAK,IAAI,iBAAiB,cAAc,UAAU,OAAO,MAAM;;AApOnE,SAuOE,cAAA,qBAAY,eAA8B,OAA2B;AACnE,SAAK,IAAI,iBAAiB,cAAc,UAAU,OAAO;;AAxO7D,SA2OE,gBAAA,uBAAc,eAA8B,OAAsB;AAChE,QAAM,MAAM,KAAK;AACjB,QAAI,cAAc,cAAc;AAChC,QAAI,YAAY,MAAM,SAAS,MAAM;;AA9OzC,SAiPE,qBAAA,4BAAmB,eAA8B,OAAwB;AACvE,QAAM,MAAM,KAAK;AACjB,QAAM,iBAAiB,cAAc;AACrC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAM,UAAU,MAAM;AACtB,UAAI,cAAc,eAAe;AACjC,UAAI,YAAY,QAAQ,SAAS,QAAQ;;;AAvP/C,SAAA;;ICJa,qBAAb,+BAAA;AAAA,OACW,gBAAiC;AAD5C,OAEW,kBAAmC;;ICSjC,gBAAb,WAAA;AAAA,iBAGiB,cAAf,qBAA2B,KAAa;AACtC,QAAM,QAAQ,IAAI,MAAM;AACxB,QAAM,cAAe,OAAM,SAAS,GAAG,WAAW,SAAS;AAC3D,QAAI;AACJ,WAAO,MACJ,IAAI,SAAC,MAAM,OAAU;AACpB,eAAM,OAAQ,SAAQ;AACtB,UAAI,OAAO,UAAU;AAAa,eAAO,OAAO,UAAU,GAAG,eAAe;AAE5E,eAAS,IAAI,GAAG,IAAI,cAAc,OAAO,QAAQ,KAAjD;AAAsD,kBAAU;;AAEhE,aAAO,SAAS;OAEjB,KAAK;;AAuCV,0BAAY,QAAgB,cAAsB,gBAAwB;AAAA,SApC1E,KAoC0E;AAAA,SAlCjE,oBAAwC,IAAI;AAkCqB,SAjCjE,qBAAyC,IAAI;AAiCoB,SAhCjE,uBAA2C,IAAI;AAgCkB,SA/BjE,uBAA2C,IAAI;AA+BkB,SA9BjE,oBAAwC,IAAI;AA8BqB,SA3B1E,qBAA6B;AA2B6C,SAzB1E,gBAyB0E;AAAA,SAvB1E,kBAuB0E;AAAA,SArB1E,kBAqB0E;AAAA,SAnB1E,oBAA2C,OAAO,OAAO;AAmBiB,SAhBlE,WAgBkE;AAAA,SAflE,UAekE;AAAA,SAdlE,MAckE;AAAA,SAblE,gBAakE;AAAA,SAZlE,kBAYkE;AAAA,SAXlE,aAWkE;AAAA,SAVlE,qBAA6B;AAWnC,SAAK,UAAU;AACf,SAAK,MAAM,OAAO,kBAAkB;AACpC,SAAK,aAAa,KAAK,eAAe,cAAc;AAEpD,QAAI,KAAK,YAAY;AACnB,WAAK,WAAW;AAChB,WAAK;WACA;AACL,WAAK,WAAW;;AAGlB,SAAK,KAAK,eAAc;;AAnE5B,MAAA,SAAA,eAAA;AAAA,SA2EE,YAAA,mBAAU,cAAkC,YAA8B;AACxE,SAAK,eAAe,cAAc;AAClC,SAAK,eAAe,cAAc;;AA7EtC,SAqFE,iBAAA,wBAAe,cAAkC,YAA8B;AAC7E,QAAM,aAAa,WAAW;AAC9B,QAAM,gBAAgB,aAAa;AAEnC,aAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,IAAI,GAAG,KAAK;AACpD,UAAM,UAAU,cAAc;AAC9B,UAAM,OAAO,WAAW,QAAQ;AAChC,cAAQ,QAAQ,QAAQ,UAAU,SAAS;;;AA5FjD,SAqGE,iBAAA,wBAAe,cAAkC,YAA8B;AAC7E,QAAM,aAAa,WAAW;AAC9B,QAAM,kBAAkB,aAAa;AAErC,QAAI,iBAAiB;AACnB,eAAS,IAAI,GAAG,IAAI,gBAAgB,QAAQ,IAAI,GAAG,KAAK;AACtD,YAAM,UAAU,gBAAgB;AAChC,gBAAQ,UAAU,SAAS,WAAW,QAAQ;;;;AA5GtD,SAoHE,4BAAA,qCAA4B;AAAA,QAAA,wBACiB,KAAK,mBAAxC,gBADkB,sBAClB,eAAe,kBADG,sBACH;AACvB,kBAAc,SAAS,KAAK,KAAK,0BAA0B,eAAe;AAC1E,oBAAgB,SAAS,KAAK,KAAK,0BAA0B,iBAAiB;;AAvHlF,SA8HE,OAAA,gBAAgB;AACd,QAAM,MAAwB,KAAK,QAAQ;AAC3C,QAAI,IAAI,iBAAiB,MAAM;AAC7B,WAAK,IAAI,WAAW,KAAK;AACzB,UAAI,eAAe;AACnB,aAAO;WACF;AACL,aAAO;;;AArIb,SA4IE,UAAA,mBAAgB;AACd,QAAM,KAAK,KAAK;AAChB,SAAK,iBAAiB,GAAG,aAAa,KAAK;AAC3C,SAAK,mBAAmB,GAAG,aAAa,KAAK;AAC7C,SAAK,cAAc,GAAG,cAAc,KAAK;;AAhJ7C,SAmJU,4BAAR,mCAAkC,UAA2B,WAAoB;AAC/E,aAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAAK;AAC7C,UAAM,UAAU,SAAS;AACzB,UAAM,QAAQ,OAAO,wBAAwB,QAAQ;AACrD,UAAI,UAAU,QAAW;AACvB,iBAAS,OAAO,SAAS,QAAQ,UAAU;AAC3C,aAAK,iBAAiB,SAAS,OAAO;;;;AAzJ9C,SA8JU,mBAAR,0BAAyB,SAAwB,OAAwB,WAA0B;AACjG,YAAQ;WACD,gBAAgB;AACnB,YAAI,WAAW;AACb,eAAK,kBAAkB,gBAAgB,KAAK;eACvC;AACL,eAAK,kBAAkB,cAAc,KAAK;;AAE5C;WACG,gBAAgB;AACnB,YAAI,WAAW;AACb,eAAK,mBAAmB,gBAAgB,KAAK;eACxC;AACL,eAAK,mBAAmB,cAAc,KAAK;;AAE7C;WACG,gBAAgB;AACnB,YAAI,WAAW;AACb,eAAK,qBAAqB,gBAAgB,KAAK;eAC1C;AACL,eAAK,qBAAqB,cAAc,KAAK;;AAE/C;WACG,gBAAgB;AACnB,YAAI,WAAW;AACb,eAAK,qBAAqB,gBAAgB,KAAK;eAC1C;AACL,eAAK,qBAAqB,cAAc,KAAK;;AAE/C;;AAEA,YAAI,WAAW;AACb,eAAK,kBAAkB,gBAAgB,KAAK;eACvC;AACL,eAAK,kBAAkB,cAAc,KAAK;;;;AAhMpD,SAwMU,iBAAR,wBAAuB,cAAsB,gBAA6C;AACxF,QAAM,KAAK,KAAK;AAGhB,QAAM,eAAe,KAAK,cAAc,GAAG,eAAe;AAC1D,QAAI,CAAC,cAAc;AACjB,aAAO;;AAGT,QAAM,iBAAiB,KAAK,cAAc,GAAG,iBAAiB;AAC9D,QAAI,CAAC,gBAAgB;AACnB,aAAO;;AAIT,QAAM,UAAU,GAAG;AACnB,OAAG,aAAa,SAAS;AACzB,OAAG,aAAa,SAAS;AACzB,OAAG,YAAY;AACf,OAAG,gBAAgB;AAEnB,QAAI,GAAG,iBAAiB;AACtB,aAAO,MAAM;AACb,SAAG,aAAa;AAChB,SAAG,aAAa;AAChB,aAAO;;AAGT,QAAI,CAAC,GAAG,oBAAoB,SAAS,GAAG,cAAc;AACpD,aAAO,MAAM,qCAAqC,GAAG,kBAAkB;AACvE,SAAG,cAAc;AACjB,aAAO;;AAGT,SAAK,gBAAgB;AACrB,SAAK,kBAAkB;AACvB,WAAO;;AA5OX,SA+OU,gBAAR,uBAAsB,YAAoB,cAA0C;AAClF,QAAM,KAAK,KAAK;AAChB,QAAM,SAAS,GAAG,aAAa;AAE/B,QAAI,CAAC,QAAQ;AACX,aAAO,MAAM;AACb,aAAO;;AAGT,OAAG,aAAa,QAAQ;AACxB,OAAG,cAAc;AAEjB,QAAI,GAAG,iBAAiB;AACtB,aAAO,MAAM;AACb,SAAG,aAAa;AAChB,aAAO;;AAGT,QAAI,CAAC,GAAG,mBAAmB,QAAQ,GAAG,iBAAiB;AACrD,aAAO,MAAP,sCACsC,GAAG,iBAAiB,SACxD,eAAc,YAAY;AAE5B,SAAG,aAAa;AAChB,aAAO;;AAGT,WAAO;;AA1QX,SAgRU,kBAAR,2BAA0B;AAAA,QAAA,QAAA;AACxB,QAAM,KAAK,KAAK;AAChB,QAAM,UAAU,KAAK;AACrB,QAAM,eAAe,KAAK;AAC1B,QAAM,iBAAiB,KAAK;AAE5B,iBAAa,QAAQ,SAAA,MAA0B;AAAA,UAAvB,OAAuB,KAAvB,MAAM,OAAiB,KAAjB,MAAM,OAAW,KAAX;AAClC,UAAM,gBAAgB,IAAI,cAAc,MAAK;AAC7C,UAAI,UAAU;AACd,UAAI,YAAY;AAEhB,UAAI,KAAK,QAAQ,SAAS,GAAG;AAC3B,eAAO,KAAK,OAAO,GAAG,KAAK,SAAS;AACpC,kBAAU;;AAGZ,UAAM,QAAQ,OAAO,wBAAwB;AAC7C,UAAM,WAAW,GAAG,mBAAmB,SAAS;AAChD,oBAAc,OAAO;AACrB,oBAAc,aAAa,OAAO,kBAAkB,MAAM;AAC1D,oBAAc,WAAW;AAEzB,cAAQ;aACD,GAAG;AACN,cAAI,SAAS;AACX,0BAAc,YAAY,cAAc;iBACnC;AACL,0BAAc,YAAY,cAAc;AACxC,0BAAc,aAAa;;AAE7B;aACG,GAAG;AACN,cAAI,SAAS;AACX,0BAAc,YAAY,cAAc;iBACnC;AACL,0BAAc,YAAY,cAAc;AACxC,0BAAc,aAAa,IAAI,QAAQ,GAAG;;AAE5C;aACG,GAAG;AACN,cAAI,SAAS;AACX,0BAAc,YAAY,cAAc;iBACnC;AACL,0BAAc,YAAY,cAAc;AACxC,0BAAc,aAAa,IAAI,QAAQ,GAAG,GAAG;;AAE/C;aACG,GAAG;AACN,cAAI,SAAS;AACX,0BAAc,YAAY,cAAc;iBACnC;AACL,0BAAc,YAAY,cAAc;AACxC,0BAAc,aAAa,IAAI,QAAQ,GAAG,GAAG,GAAG;;AAElD;aACG,GAAG;aACH,GAAG;AACN,cAAI,SAAS;AACX,0BAAc,YAAY,cAAc;iBACnC;AACL,0BAAc,YAAY,cAAc;AACxC,0BAAc,aAAa;;AAE7B;aACG,GAAG;aACH,GAAG;AACN,cAAI,SAAS;AACX,0BAAc,YAAY,cAAc;iBACnC;AACL,0BAAc,YAAY,cAAc;AACxC,0BAAc,aAAa,IAAI,QAAQ,GAAG;;AAE5C;aACG,GAAG;aACH,GAAG;AAIN,wBAAc,YAAY,UAAU,cAAc,YAAY,cAAc;AAC5E,wBAAc,aAAa,IAAI,QAAQ,GAAG,GAAG;AAC7C;aACG,GAAG;aACH,GAAG;AACN,cAAI,SAAS;AACX,0BAAc,YAAY,cAAc;iBACnC;AACL,0BAAc,YAAY,cAAc;AACxC,0BAAc,aAAa,IAAI,QAAQ,GAAG,GAAG;;AAE/C;aACG,GAAG;AACN,wBAAc,YAAY,UAAU,cAAc,cAAc,cAAc;AAC9E;aACG,GAAG;aACH,GAAG;AACN,sBAAY;AACZ,cAAI,SAAS;AACX,gBAAM,iBAAiB,IAAI,WAAW;AACtC,gBAAM,mBAAmB,IAAI,MAAc;AAC3C,qBAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC7B,6BAAe,KAAK,MAAK;AACzB,+BAAiB,KAAK,GAAG,WAAW,MAAK;;AAE3C,0BAAc,eAAe;AAC7B,0BAAc,YAAY,cAAc;AACxC,kBAAK;AACL,eAAG,WAAW,UAAU;iBACnB;AACL,gBAAM,eAAe,GAAG,WAAW,MAAK;AACxC,0BAAc,eAAe;AAC7B,0BAAc,YAAY,cAAc;AACxC,kBAAK;AACL,eAAG,UAAU,UAAU,MAAK;;AAE9B;;AAEJ,YAAK,iBAAiB,eAAe,OAAO;;AAG9C,mBAAe,QAAQ,SAAA,OAAc;AAAA,UAAX,OAAW,MAAX;AACxB,YAAK,kBAAkB,QAAQ,GAAG,kBAAkB,SAAS;;;AAxYnE,SA4YU,mBAAR,4BAA8C;AAC5C,QAAM,KAAK,KAAK;AAChB,QAAM,UAAU,KAAK;AACrB,QAAM,eAAkC;AAExC,QAAM,eAAe,GAAG,oBAAoB,SAAS,GAAG;AACxD,aAAS,IAAI,GAAG,IAAI,cAAc,EAAE,GAAG;AACrC,UAAM,QAAO,GAAG,iBAAiB,SAAS;AAC1C,mBAAa,KAAK;;AAGpB,WAAO;;AAvZX,SA0ZU,qBAAR,8BAAgD;AAC9C,QAAM,KAAK,KAAK;AAChB,QAAM,UAAU,KAAK;AACrB,QAAM,iBAAoC;AAE1C,QAAM,iBAAiB,GAAG,oBAAoB,SAAS,GAAG;AAC1D,aAAS,IAAI,GAAG,IAAI,gBAAgB,EAAE,GAAG;AACvC,UAAM,QAAO,GAAG,gBAAgB,SAAS;AACzC,qBAAe,KAAK;;AAGtB,WAAO;;AAraX,eAAA,gBAAA,CAAA;IAAA,KAAA;IAAA,KAmDE,gBAAuB;AACrB,aAAO,KAAK;;;AApDhB,SAAA;;AAAa,cACI,WAAmB;ICbvB,iBAWX,2BAAc;AAAA,OAPd,YAOc;AAAA,OALd,SAKc;AACZ,OAAK,YAAY,gBAAe;;AAZvB,eACI,uBAA+B;ICMnC,SAAb,WAAA;AAAA,UAeS,SAAP,gBAAc,MAAc,cAAsB,gBAAgC;AAChF,QAAM,YAAY,QAAO;AACzB,QAAI,UAAU,OAAO;AACnB,YAAA,mBAAuB,OAAvB;;AAEF,WAAQ,UAAU,QAAQ,IAAI,QAAO,MAAM,cAAc;;AApB7D,UA2BS,OAAP,cAAY,MAAsB;AAChC,WAAO,QAAO,WAAW;;AA5B7B,UAoCS,iBAAP,wBAAsB,MAA2B;AAC/C,QAAI,QAAQ,QAAO,UAAU;AAC7B,QAAI,CAAC,OAAO;AACV,UAAM,UAAU,QAAO;AACvB,UAAM,UAAU,QAAO;AACvB,UAAM,QAAQ,KAAK,MAAM,UAAU;AACnC,UAAM,MAAM,UAAU;AACtB,cAAQ,IAAI,YAAY,MAAM,OAAO,KAAK;AAC1C,cAAO,UAAU,QAAQ;AACzB,UAAI,SAAS,QAAQ,QAAQ;AAC3B,gBAAQ;AACR,gBAAQ,SAAS,IAAI,MAAc;;AAErC,cAAQ,OAAO,OAAO;AACtB,cAAO;;AAET,WAAO;;AApDX,UA4DS,oBAAP,2BAAyB,MAA8B;AACrD,QAAM,kBAAkB,QAAO;AAC/B,QAAI,gBAAgB,SAAS,MAAM;AACjC,aAAO,gBAAgB;WAClB;AACL,UAAM,WAAW,IAAI;AACrB,sBAAgB,QAAQ;AACxB,aAAO;;;AAnEb,UA0ES,0BAAP,iCAA+B,cAA8C;AAC3E,QAAM,iBAAiB,QAAO,iBAAiB;AAC/C,WAAO,mBAAP,QAAO,mBAAP,SAAA,SAAO,eAAgB;;AA5E3B,UA+EiB,oBAAf,2BAAiC,QAA+B,KAAqB;AACnF,QAAM,UAAU,QAAO;AACvB,QAAM,OAAO,OAAO;AACpB,QAAI,SAAS;AACb,aAAS,IAAI,GAAG,IAAI,OAAO,SAAS,IAAI,GAAG,KAAK;AAC9C,UAAM,aAAa,QAAQ;AAC3B,UAAM,UAAU,KAAK;AACrB,UAAM,KAAI,UAAU,IAAI,KAAK,KAAK,MAAM,KAAK,KAAK,YAAY;AAC9D,eAAS,IAAI,GAAG,IAAI,IAAG,KAAK;AAC1B,YAAI,UAAW,KAAK,GAAI;AACtB,cAAI,KAAK,WAAW;;;;;AAe5B,mBAAoB,MAAc,cAAsB,gBAAwB;AAAA,SARvE,OAQuE;AAAA,SALhF,YAAoB;AAK4D,SAHxE,gBAGwE;AAAA,SAFxE,kBAEwE;AAC9E,SAAK,YAAY,QAAO;AACxB,SAAK,OAAO;AACZ,SAAK,gBAAgB;AACrB,SAAK,kBAAkB;;AA5G3B,MAAA,SAAA,QAAA;AAAA,SAwHE,iBAAA,wBAAe,QAAgB,QAAwB;AACrD,QAAM,gBAAgB,YAAY;AAClC,kBAAc;AACd,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAI,GAAG,KAAK;AAC7C,oBAAc,OAAO,QAAO,eAAe,OAAO;;AAEpD,SAAK,kBAAkB,QAAQ;;AA9HnC,SAoIE,oBAAA,2BAAkB,QAAgB,iBAAuD;AACvF,QAAM,oBAAoB,OAAO,sBAAsB;AACvD,QAAI,gBAAgB,kBAAkB,IAAI;AAC1C,QAAI,eAAe;AACjB,aAAO;;AAGT,QAAM,WAAoB,OAAO,kBAAkB;AACnD,QAAM,gBAAgB;AACtB,YAAO,kBAAkB,iBAAiB;AAC1C,QAAM,eAAe,cAAc,kBAAkB;AACrD,QAAM,gBAAgB,cAAc,gBAAgB,KAAK,QAAQ;AACjE,QAAM,aAAa,WAAW,oBAAoB;AAClD,QAAM,eAAY;AAclB,QAAI,eAAe,cAAc,YAC/B,MAAI,aAAJ,eACI,gBADJ,eAEI,eAFJ,eAGI,eAHJ,eAIM,KAAK;AAGb,QAAI,iBAAiB,cAAc,YACjC,MAAI,aAAJ,eACI,gBADJ,eAEI,YAAW,KAAK,cAAc,eAAe,QAAO,qBAFxD,eAGI,eAHJ,eAII,eAJJ,aAKI,KAAK;AAGX,QAAI,UAAU;AACZ,qBAAe,cAAc,aAAa;AAC1C,uBAAiB,cAAc,aAAa,gBAAgB;;AAG9D,oBAAgB,IAAI,cAAc,QAAQ,cAAc;AAExD,sBAAkB,MAAM;AACxB,WAAO;;AAxLX,SAAA;;AAAa,OACI,iBAAyB;AAD7B,OAEI,aAAqC,OAAO,OAAO;AAFvD,OAGI,mBAAmD,OAAO,OAAO;AAHrE,OAII,gBAA4B;AAJhC,OAKI,gBAAwB;AAL5B,OAMI,YAAyC,OAAO,OAAO;AAN3D,OAOI,mBAAmB,CAAC,6BAA6B,+BAA+B;ICZpF,QAAb,SAAA,YAAA;AAAA,iBAAA,QAAA;AAAA,oBAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,WAAA,KAAA,MAAA,YAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UAMU,WANV;AAAA,UAOU,kBAPV;AAAA,WAAA;;AAAA,MAAA,SAAA,OAAA;AAAA,SAcE,YAAA,qBAAY;AACV,SAAK,MAAM,YAAY,cAAc,kBAAkB;;AAf3D,SAuBE,aAAA,sBAAa;AACX,SAAK,MAAM,YAAY,cAAc,kBAAkB;;AAxB3D,eAAA,QAAA,CAAA;IAAA,KAAA;IAAA,KA+BE,gBAAiB;AACf,UAAI,CAAC,KAAK;AAAU,aAAK,WAAW,IAAI;AACxC,aAAO,OAAO,KAAK,OAAO,UAAU,aAAa,KAAK;AACtD,aAAO,KAAK;;KAlChB;IAAA,KAAA;IAAA,KAyCE,gBAAwB;AACtB,UAAI,CAAC,KAAK;AAAiB,aAAK,kBAAkB,IAAI;AACtD,aAAO,OAAO,KAAK,YAAY,KAAK;AACpC,aAAO,KAAK;;;AA5ChB,SAAA;EAA2B;AAAd,MAIM,YAAoB;ICF1B,eAAb,SAAA,QAAA;AAAA,iBAAA,eAAA;AA2CE,yBAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,OAAA,KAAA,MAAM,WAAN;AAD0B,UAJpB,SAAgB,IAAI,MAAM,GAAG,GAAG,GAAG;AAIf,UAHpB,aAAqB;AAGD,UAFpB,cAAqB,IAAI,MAAM,GAAG,GAAG,GAAG;AAI9C,UAAK,QAAQ,MAAK;AAFQ,WAAA;;AA3C9B,eAAA,eAAA,CAAA;IAAA,KAAA;IAAA,KAME,gBAAmB;AACjB,aAAO,KAAK;;IAPhB,KAUE,cAAU,OAAc;AACtB,WAAK,SAAS;AACd,WAAK,MAAM,WAAW,SAAS,cAAa,gBAAgB,KAAK;;KAZrE;IAAA,KAAA;IAAA,KAkBE,gBAAwB;AACtB,aAAO,KAAK;;IAnBhB,KAsBE,cAAc,OAAe;AAC3B,WAAK,aAAa;AAClB,WAAK,MAAM,WAAW,SAAS,cAAa,gBAAgB,KAAK;;KAxBrE;IAAA,KAAA;IAAA,KA+BE,gBAAwB;AACtB,WAAK,YAAY,IAAI,KAAK,OAAO,IAAI,KAAK;AAC1C,WAAK,YAAY,IAAI,KAAK,OAAO,IAAI,KAAK;AAC1C,WAAK,YAAY,IAAI,KAAK,OAAO,IAAI,KAAK;AAC1C,WAAK,YAAY,IAAI,KAAK,OAAO,IAAI,KAAK;AAC1C,aAAO,KAAK;;;AApChB,SAAA;EAAkC;AAArB,aACI,iBAAiC,OAAO,kBAAkB;ICD9D,cAAb,SAAA,QAAA;AAAA,iBAAA,cAAA;AAAA,0BAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,OAAA,KAAA,MAAA,QAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UAmBE,QAAe,IAAI,MAAM,GAAG,GAAG,GAAG;AAnBpC,UAoBE,YAAoB;AApBtB,UAsBU,WAAoB,IAAI;AAtBlC,UAuBU,cAAqB,IAAI,MAAM,GAAG,GAAG,GAAG;AAvBlD,UAwBU,oBAA6B,IAAI;AAxB3C,WAAA;;AAAA,eAYS,oBAAP,2BAAyB,YAA8B;AACrD,QAAM,OAAO,aAAY;AAEzB,eAAW,cAAc,aAAY,gBAAgB,KAAK;AAC1D,eAAW,cAAc,aAAY,oBAAoB,KAAK;;AAhBlE,MAAA,SAAA,aAAA;AAAA,SA2DE,cAAA,qBAAY,YAA0B;AACpC,QAAM,aAAa,aAAa;AAChC,QAAM,iBAAiB,aAAa;AACpC,QAAM,aAAa,KAAK;AACxB,QAAM,YAAY,KAAK;AAEvB,QAAM,OAAO,aAAY;AAEzB,SAAK,MAAM,cAAc,WAAW;AACpC,SAAK,MAAM,aAAa,KAAK,WAAW;AACxC,SAAK,MAAM,aAAa,KAAK,WAAW;AACxC,SAAK,UAAU,kBAAkB,UAAU;AAC3C,SAAK,UAAU,iBAAiB,KAAK,UAAU;AAC/C,SAAK,UAAU,iBAAiB,KAAK,UAAU;;AAxEnD,eAAA,cAAA,CAAA;IAAA,KAAA;IAAA,KA8BE,gBAAyB;AACvB,WAAK,OAAO,UAAU,gBAAgB,KAAK;AAC3C,aAAO,KAAK;;KAhChB;IAAA,KAAA;IAAA,KAuCE,gBAAwB;AACtB,WAAK,YAAY,IAAI,KAAK,MAAM,IAAI,KAAK;AACzC,WAAK,YAAY,IAAI,KAAK,MAAM,IAAI,KAAK;AACzC,WAAK,YAAY,IAAI,KAAK,MAAM,IAAI,KAAK;AACzC,WAAK,YAAY,IAAI,KAAK,MAAM,IAAI,KAAK;AACzC,aAAO,KAAK;;KA5ChB;IAAA,KAAA;IAAA,KAmDE,gBAAgC;AAC9B,cAAQ,MAAM,KAAK,WAAW,IAAI,KAAK;AACvC,aAAO,KAAK;;;AArDhB,SAAA;EAAiC;AAApB,YACI,iBAAiC,OAAO,kBAAkB;AAD9D,YAEI,qBAAqC,OAAO,kBAAkB;AAFlE,YAII,gBAAgB;EAC7B,OAAO,IAAI,aAAa,IAAI,MAAM;EAClC,WAAW,IAAI,aAAa,IAAI,MAAM;;ICH7B,sBAAb,SAAA,QAAA;AAAA,iBAAA,sBAAA;AAAA,uBAiBS,oBAAP,2BAAyB,YAAwB,OAAkC;AAEjF,QAAM,kBAAkB,MAAM,OAAO,UAAU;AAC/C,eAAW,UAAU,qBAAoB,0BAA0B;;AAqGrE,gCAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,OAAA,KAAA,MAAM,WAAN;AAD0B,UAPpB,kBAOoB;AAAA,UANpB,mBAMoB;AAAA,UALpB,gBAAuB,IAAI,MAAM,KAAK,KAAK,KAAK;AAK5B,UAJpB,iBAAwB,IAAI,MAAM,KAAK,KAAK,KAAK;AAI7B,UAHpB,oBAA4B;AAGR,UAFpB,qBAA6B;AAInC,UAAK,eAAe,MAAK;AACzB,UAAK,gBAAgB,MAAK;AAC1B,UAAK,mBAAmB,MAAK;AAC7B,UAAK,oBAAoB,MAAK;AALJ,WAAA;;AAzH9B,eAAA,sBAAA,CAAA;IAAA,KAAA;IAAA,KA0BE,gBAAqC;AACnC,aAAO,KAAK;;IA3BhB,KA8BE,cAAmB,OAAuB;AACxC,WAAK,kBAAkB;AACvB,UAAM,aAAa,KAAK,MAAM;AAE9B,UAAI,OAAO;AACT,mBAAW,WAAW,qBAAoB,yBAAyB;AACnE,mBAAW,YAAY,qBAAoB;aACtC;AACL,mBAAW,aAAa,qBAAoB;;;KAtClD;IAAA,KAAA;IAAA,KA6CE,gBAAsC;AACpC,aAAO,KAAK;;IA9ChB,KAiDE,cAAoB,OAAuB;AACzC,WAAK,mBAAmB;AACxB,UAAM,aAAa,KAAK,MAAM;AAE9B,UAAI,OAAO;AACT,mBAAW,WAAW,qBAAoB,0BAA0B;AACpE,mBAAW,SAAS,qBAAoB,mBAAmB,KAAK,gBAAgB;AAChF,mBAAW,YAAY,qBAAoB;aACtC;AACL,mBAAW,aAAa,qBAAoB;;;KA1DlD;IAAA,KAAA;IAAA,KAiEE,gBAA0B;AACxB,aAAO,KAAK;;IAlEhB,KAqEE,cAAiB,OAAc;AAC7B,WAAK,gBAAgB;AAErB,WAAK,MAAM,WAAW,SAAS,qBAAoB,uBAAuB;;KAxE9E;IAAA,KAAA;IAAA,KA8EE,gBAA2B;AACzB,aAAO,KAAK;;IA/EhB,KAkFE,cAAkB,OAAc;AAC9B,WAAK,iBAAiB;AAEtB,WAAK,MAAM,WAAW,SAAS,qBAAoB,wBAAwB;;KArF/E;IAAA,KAAA;IAAA,KA2FE,gBAA+B;AAC7B,aAAO,KAAK;;IA5FhB,KA+FE,cAAqB,OAAe;AAClC,WAAK,oBAAoB;AAEzB,WAAK,MAAM,WAAW,SAAS,qBAAoB,2BAA2B;;KAlGlF;IAAA,KAAA;IAAA,KAwGE,gBAAgC;AAC9B,aAAO,KAAK;;IAzGhB,KA4GE,cAAsB,OAAe;AACnC,WAAK,qBAAqB;AAE1B,WAAK,MAAM,WAAW,SAAS,qBAAoB,4BAA4B;;;AA/GnF,SAAA;EAAyC;AAA5B,oBACI,gBAA6B,OAAO,eAAe;AADvD,oBAEI,iBAA8B,OAAO,eAAe;AAFxD,oBAGI,0BAA0C,OAAO,kBAAkB;AAHvE,oBAII,2BAA2C,OAAO,kBAAkB;AAJxE,oBAKI,oBAAoC,OAAO,kBAAkB;AALjE,oBAMI,wBAAwC,OAAO,kBAAkB;AANrE,oBAOI,yBAAyC,OAAO,kBAAkB;AAPtE,oBAQI,4BAA4C,OAAO,kBAAkB;AARzE,oBASI,6BAA6C,OAAO,kBACjE;AAVS,oBAYI,2BAA2C,OAAO,kBAAkB;ICfxE,aAAb,SAAA,QAAA;AAAA,iBAAA,aAAA;AAAA,yBAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,OAAA,KAAA,MAAA,QAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UAyBE,QAAe,IAAI,MAAM,GAAG,GAAG,GAAG;AAzBpC,UA0BE,YAAoB;AA1BtB,UA2BE,WAAmB;AA3BrB,UA4BE,QAAgB;AA5BlB,UA8BU,cAAqB,IAAI,MAAM,GAAG,GAAG,GAAG;AA9BlD,WAAA;;AAAA,cAgBS,oBAAP,2BAAyB,YAA8B;AACrD,QAAM,OAAO,YAAW;AAExB,eAAW,cAAc,YAAW,gBAAgB,KAAK;AACzD,eAAW,cAAc,YAAW,mBAAmB,KAAK;AAC5D,eAAW,cAAc,YAAW,mBAAmB,KAAK;AAC5D,eAAW,cAAc,YAAW,gBAAgB,KAAK;;AAtB7D,MAAA,SAAA,YAAA;AAAA,SAuDE,cAAA,qBAAY,YAA0B;AACpC,QAAM,aAAa,aAAa;AAChC,QAAM,gBAAgB,aAAa;AACnC,QAAM,gBAAgB;AACtB,QAAM,aAAa;AAEnB,QAAM,aAAa,KAAK;AACxB,QAAM,gBAAgB,KAAK;AAE3B,QAAM,OAAO,YAAW;AAExB,SAAK,MAAM,cAAc,WAAW;AACpC,SAAK,MAAM,aAAa,KAAK,WAAW;AACxC,SAAK,MAAM,aAAa,KAAK,WAAW;AACxC,SAAK,SAAS,iBAAiB,cAAc;AAC7C,SAAK,SAAS,gBAAgB,KAAK,cAAc;AACjD,SAAK,SAAS,gBAAgB,KAAK,cAAc;AACjD,SAAK,SAAS,iBAAiB,KAAK;AACpC,SAAK,MAAM,cAAc,KAAK;;AAzElC,eAAA,aAAA,CAAA;IAAA,KAAA;IAAA,KAoCE,gBAAwB;AACtB,aAAO,KAAK,OAAO,UAAU;;KArCjC;IAAA,KAAA;IAAA,KA4CE,gBAAwB;AACtB,WAAK,YAAY,IAAI,KAAK,MAAM,IAAI,KAAK;AACzC,WAAK,YAAY,IAAI,KAAK,MAAM,IAAI,KAAK;AACzC,WAAK,YAAY,IAAI,KAAK,MAAM,IAAI,KAAK;AACzC,WAAK,YAAY,IAAI,KAAK,MAAM,IAAI,KAAK;AACzC,aAAO,KAAK;;;AAjDhB,SAAA;EAAgC;AAAnB,WACI,iBAAiC,OAAO,kBAAkB;AAD9D,WAEI,oBAAoC,OAAO,kBAAkB;AAFjE,WAGI,oBAAoC,OAAO,kBAAkB;AAHjE,WAII,iBAAiC,OAAO,kBAAkB;AAJ9D,WAMI,gBAAgB;EAC7B,OAAO,IAAI,aAAa,IAAI,MAAM;EAClC,UAAU,IAAI,aAAa,IAAI,MAAM;EACrC,UAAU,IAAI,aAAa,MAAM;EACjC,OAAO,IAAI,aAAa,MAAM;;ICVrB,YAAb,SAAA,QAAA;AAAA,iBAAA,YAAA;AAAA,wBAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,OAAA,KAAA,MAAA,QAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UAwCE,QAAe,IAAI,MAAM,GAAG,GAAG,GAAG;AAxCpC,UAyCE,WAAmB;AAzCrB,UA0CE,WAAmB;AA1CrB,UA2CE,YAAoB;AA3CtB,UA4CE,QAAgB;AA5ClB,UA6CE,QAAgB,KAAK,KAAK;AA7C5B,UA+CU,WAAoB,IAAI;AA/ClC,UAgDU,cAAqB,IAAI,MAAM,GAAG,GAAG,GAAG;AAhDlD,UAiDU,oBAA6B,IAAI;AAjD3C,WAAA;;AAAA,aA0BS,oBAAP,2BAAyB,YAA8B;AACrD,QAAM,OAAO,WAAU;AAEvB,eAAW,cAAc,WAAU,gBAAgB,KAAK;AACxD,eAAW,cAAc,WAAU,mBAAmB,KAAK;AAC3D,eAAW,cAAc,WAAU,oBAAoB,KAAK;AAC5D,eAAW,cAAc,WAAU,mBAAmB,KAAK;AAC3D,eAAW,cAAc,WAAU,gBAAgB,KAAK;AACxD,eAAW,cAAc,WAAU,gBAAgB,KAAK;AACxD,eAAW,cAAc,WAAU,mBAAmB,KAAK;AAC3D,eAAW,cAAc,WAAU,sBAAsB,KAAK;AAC9D,eAAW,cAAc,WAAU,kBAAkB,KAAK;;AArC9D,MAAA,SAAA,WAAA;AAAA,SA4FE,cAAA,qBAAY,YAA0B;AACpC,QAAM,aAAa,aAAa;AAChC,QAAM,gBAAgB,aAAa;AACnC,QAAM,iBAAiB,aAAa;AACpC,QAAM,gBAAgB;AACtB,QAAM,aAAa;AACnB,QAAM,aAAa;AACnB,QAAM,gBAAgB;AACtB,QAAM,mBAAmB;AACzB,QAAM,eAAe;AAErB,QAAM,QAAQ,KAAK;AACnB,QAAM,WAAW,KAAK;AACtB,QAAM,YAAY,KAAK;AAEvB,QAAM,OAAO,WAAU;AAEvB,SAAK,MAAM,cAAc,MAAM;AAC/B,SAAK,MAAM,aAAa,KAAK,MAAM;AACnC,SAAK,MAAM,aAAa,KAAK,MAAM;AACnC,SAAK,SAAS,iBAAiB,SAAS;AACxC,SAAK,SAAS,gBAAgB,KAAK,SAAS;AAC5C,SAAK,SAAS,gBAAgB,KAAK,SAAS;AAC5C,SAAK,UAAU,kBAAkB,UAAU;AAC3C,SAAK,UAAU,iBAAiB,KAAK,UAAU;AAC/C,SAAK,UAAU,iBAAiB,KAAK,UAAU;AAC/C,SAAK,SAAS,iBAAiB,KAAK;AACpC,SAAK,MAAM,cAAc,KAAK;AAC9B,SAAK,MAAM,cAAc,KAAK;AAC9B,SAAK,SAAS,iBAAiB,KAAK;AACpC,SAAK,YAAY,oBAAoB,KAAK,IAAI,KAAK,QAAS,KAAI,KAAK;AACrE,SAAK,QAAQ,gBAAgB,KAAK,IAAI,KAAK;;AA3H/C,eAAA,YAAA,CAAA;IAAA,KAAA;IAAA,KAuDE,gBAAwB;AACtB,aAAO,KAAK,OAAO,UAAU;;KAxDjC;IAAA,KAAA;IAAA,KA+DE,gBAAyB;AACvB,WAAK,OAAO,UAAU,gBAAgB,KAAK;AAC3C,aAAO,KAAK;;KAjEhB;IAAA,KAAA;IAAA,KAwEE,gBAAgC;AAC9B,cAAQ,MAAM,KAAK,WAAW,IAAI,KAAK;AACvC,aAAO,KAAK;;KA1EhB;IAAA,KAAA;IAAA,KAiFE,gBAAwB;AACtB,WAAK,YAAY,IAAI,KAAK,MAAM,IAAI,KAAK;AACzC,WAAK,YAAY,IAAI,KAAK,MAAM,IAAI,KAAK;AACzC,WAAK,YAAY,IAAI,KAAK,MAAM,IAAI,KAAK;AACzC,WAAK,YAAY,IAAI,KAAK,MAAM,IAAI,KAAK;AACzC,aAAO,KAAK;;;AAtFhB,SAAA;EAA+B;AAAlB,UACI,iBAAiC,OAAO,kBAAkB;AAD9D,UAEI,oBAAoC,OAAO,kBAAkB;AAFjE,UAGI,qBAAqC,OAAO,kBAAkB;AAHlE,UAII,oBAAoC,OAAO,kBAAkB;AAJjE,UAKI,iBAAiC,OAAO,kBAAkB;AAL9D,UAMI,iBAAiC,OAAO,kBAAkB;AAN9D,UAOI,oBAAoC,OAAO,kBAAkB;AAPjE,UAQI,uBAAuC,OAAO,kBAAkB;AARpE,UASI,mBAAmC,OAAO,kBAAkB;AAThE,UAWI,gBAAgB;EAC7B,OAAO,IAAI,aAAa,IAAI,MAAM;EAClC,UAAU,IAAI,aAAa,IAAI,MAAM;EACrC,WAAW,IAAI,aAAa,IAAI,MAAM;EACtC,UAAU,IAAI,aAAa,MAAM;EACjC,OAAO,IAAI,aAAa,MAAM;EAC9B,OAAO,IAAI,aAAa,MAAM;EAC9B,UAAU,IAAI,aAAa,MAAM;EACjC,aAAa,IAAI,aAAa,MAAM;EACpC,SAAS,IAAI,aAAa,MAAM;;ACb7B,oBAA6B;AAClC,SAAO,KAAK,YAAY,cAAc,cAAc,SAAS;;IAMlD,eAAb,SAAA,eAAA;AAAA,iBAAA,eAAA;AAME,2BAAc;AAAA,QAAA;AACZ,YAAA,cAAA,KAAA,SAAA;AADY,UAFd,gBAEc;AAEZ,UAAK,gBAAgB;AAFT,WAAA;;AANhB,MAAA,SAAA,cAAA;AAAA,SAeE,oBAAA,2BAAkB,OAAoB;AACpC,QAAM,QAAQ,KAAK,cAAc,QAAQ;AACzC,QAAI,SAAS,IAAI;AACf,WAAK,cAAc,KAAK;WACnB;AACL,aAAO,KAAK;;;AApBlB,SA4BE,oBAAA,2BAAkB,OAAoB;AACpC,QAAM,QAAQ,KAAK,cAAc,QAAQ;AACzC,QAAI,SAAS,IAAI;AACf,WAAK,cAAc,OAAO,OAAO;;;AA/BvC,SAsCE,oBAAA,2BAAkB,YAAwB;AAIxC,QAAI,oBAAoB;AACxB,QAAI,mBAAmB;AACvB,QAAI,mBAAmB;AACvB,QAAI,kBAAkB;AACtB,QAAI,iBAAiB;AAErB,QAAI,SAAS,KAAK;AAClB,aAAS,IAAI,GAAG,MAAM,OAAO,QAAQ,IAAI,KAAK,KAAK;AACjD,UAAM,QAAQ,OAAO;AACrB,UAAI,iBAAiB,cAAc;AACjC;iBACS,iBAAiB,qBAAqB;AAC/C,4BAAoB,kBAAkB,YAAY;AAClD;iBACS,iBAAiB,aAAa;AACvC,cAAM,YAAY;iBACT,iBAAiB,YAAY;AACtC,cAAM,YAAY;iBACT,iBAAiB,WAAW;AACrC,cAAM,YAAY;;;AAItB,QAAI,mBAAmB;AACrB,iBAAW,YAAY,cAAa;WAC/B;AACL,iBAAW,aAAa,cAAa;;AAGvC,QAAI,kBAAkB;AACpB,iBAAW,YAAY,cAAa;WAC/B;AACL,iBAAW,aAAa,cAAa;;AAGvC,QAAI,kBAAkB;AACpB,kBAAY,kBAAkB;AAC9B,iBAAW,YAAY,yBAAyB,iBAAiB;WAC5D;AACL,iBAAW,aAAa;;AAG1B,QAAI,iBAAiB;AACnB,iBAAW,kBAAkB;AAC7B,iBAAW,YAAY,wBAAwB,gBAAgB;WAC1D;AACL,iBAAW,aAAa;;AAG1B,QAAI,gBAAgB;AAClB,gBAAU,kBAAkB;AAC5B,iBAAW,YAAY,uBAAuB,eAAe;WACxD;AACL,iBAAW,aAAa;;;AA/F9B,SAAA;EAAkC;AAArB,aACI,gBAA6B,OAAO,eAAe;AADvD,aAEI,YAAyB,OAAO,eAAe;IClB1C,YAAtB,SAAA,eAAA;AAAA,iBAAA,YAAA;AAqBE,sBAAsB,QAAgB;AAAA,QAAA;AACpC,YAAA,cAAA,KAAA,MAAM,WAAN;AADoC,UAnBtC,cAAuB;AAmBe,UAjB9B,YAAoB;AAiBU,UAhB9B,aAAsB;AAkB5B,WAAO,gBAAgB,cAAc,MAAK,YAA1C,uBAAA;AAFoC,WAAA;;AArBxC,MAAA,SAAA,WAAA;AAAA,SA+BE,UAAA,iBAAQ,OAAiC;AAAA,QAAjC,UAAiC,QAAA;AAAjC,cAAiB;;AACvB,QAAI,KAAK;AAAY,aAAO;AAC5B,QAAI,CAAC,SAAS,KAAK,cAAc;AAAG,aAAO;AAC3C,QAAM,kBAAkB,KAAK,QAAQ;AAGrC,QAAI,iBAAiB;AACnB,sBAAgB,aAAa;AAC7B,sBAAgB,iBAAiB,KAAK;;AAGxC,QAAM,WAAW,KAAK;AACtB,QAAI,WAAW,GAAG;AAChB,WAAK,aAAa,CAAC;;AAErB,SAAK,UAAU;AACf,SAAK;AACL,SAAK,aAAa;AAClB,WAAO;;AAjDX,SAuDE,eAAA,wBAAuB;AACrB,WAAO,KAAK;;AAxDhB,SA+DE,eAAA,sBAAa,OAAqB;AAChC,SAAK,aAAa;;AAhEtB,SAuEE,wBAAA,+BAAsB,MAAoB;AACxC,SAAK,QAAQ,gBAAgB,UAAU,MAAM;;AAxEjD,eAAA,YAAA,CAAA;IAAA,KAAA;IAAA,KAUE,gBAAuB;AACrB,aAAO,KAAK;;KAXhB;IAAA,KAAA;IAAA,KAiBE,gBAAyB;AACvB,aAAO,KAAK;;;AAlBhB,SAAA;EAAwC;ICI5B;UAAA,oCAAA;AAAA,qCAAA,mCAAA,uBAAA,SAAA;AAAA,qCAAA,mCAAA,uBAAA,SAAA;AAAA,qCAAA,mCAAA,uBAAA,SAAA;AAAA,qCAAA,mCAAA,uBAAA,SAAA;AAAA,qCAAA,mCAAA,uBAAA,SAAA;AAAA,qCAAA,mCAAA,uBAAA,SAAA;AAAA,qCAAA,mCAAA,uBAAA,SAAA;AAAA,qCAAA,mCAAA,uBAAA,SAAA;AAAA,qCAAA,mCAAA,wBAAA,SAAA;AAAA,qCAAA,mCAAA,wBAAA,SAAA;AAAA,qCAAA,mCAAA,wBAAA,SAAA;AAAA,qCAAA,mCAAA,yBAAA,SAAA;AAAA,qCAAA,mCAAA,yBAAA,SAAA;AAAA,qCAAA,mCAAA,yBAAA,SAAA;AAAA,qCAAA,mCAAA,+BAAA,SAAA;AAAA,qCAAA,mCAAA,+BAAA,SAAA;AAAA,qCAAA,mCAAA,+BAAA,SAAA;AAAA,qCAAA,mCAAA,+BAAA,SAAA;AAAA,qCAAA,mCAAA,+BAAA,SAAA;AAAA,qCAAA,mCAAA,+BAAA,SAAA;AAAA,qCAAA,mCAAA,+BAAA,SAAA;AAAA,qCAAA,mCAAA,+BAAA,SAAA;AAAA,qCAAA,mCAAA,gCAAA,SAAA;AAAA,qCAAA,mCAAA,gCAAA,SAAA;AAAA,qCAAA,mCAAA,gCAAA,SAAA;AAAA,qCAAA,mCAAA,iCAAA,SAAA;AAAA,qCAAA,mCAAA,iCAAA,SAAA;AAAA,qCAAA,mCAAA,iCAAA,SAAA;AAAA,qCAAA,mCAAA,oBAAA,SAAA;AAAA,qCAAA,mCAAA,aAAA,SAAA;AAAA,qCAAA,mCAAA,oBAAA,SAAA;AAAA,qCAAA,mCAAA,cAAA,SAAA;AAAA,qCAAA,mCAAA,qBAAA,SAAA;AAAA,qCAAA,mCAAA,eAAA,SAAA;AAAA,qCAAA,mCAAA,gBAAA,SAAA;AAAA,qCAAA,mCAAA,mCAAA,SAAA;AAAA,qCAAA,mCAAA,oCAAA,SAAA;AAAA,qCAAA,mCAAA,oBAAA,SAAA;AAAA,qCAAA,mCAAA,2BAAA,SAAA;AAAA,qCAAA,mCAAA,0BAAA,SAAA;AAAA,qCAAA,mCAAA,0BAAA,SAAA;AAAA,qCAAA,mCAAA,2BAAA,SAAA;AAAA,qCAAA,mCAAA,2BAAA,SAAA;AAAA,qCAAA,mCAAA,uBAAA,SAAA;AAAA,qCAAA,mCAAA,wBAAA,SAAA;AAAA,qCAAA,mCAAA,wBAAA,SAAA;AAAA,qCAAA,mCAAA,wBAAA,SAAA;GAAA,qCAAA,qCAAA;ICRA;UAAA,0BAAA;AAAA,2BAAA,yBAAA,YAAA,KAAA;AAAA,2BAAA,yBAAA,cAAA,KAAA;AAAA,2BAAA,yBAAA,cAAA,KAAA;AAAA,2BAAA,yBAAA,cAAA,KAAA;AAAA,2BAAA,yBAAA,YAAA,KAAA;AAAA,2BAAA,yBAAA,YAAA,KAAA;AAAA,2BAAA,yBAAA,kBAAA,KAAA;AAAA,2BAAA,yBAAA,kBAAA,KAAA;GAAA,2BAAA,2BAAA;ICAA;UAAA,0BAAA;AAAA,2BAAA,yBAAA,WAAA,KAAA;AAAA,2BAAA,yBAAA,kBAAA,KAAA;AAAA,2BAAA,yBAAA,aAAA,KAAA;AAAA,2BAAA,yBAAA,aAAA,KAAA;AAAA,2BAAA,yBAAA,aAAA,KAAA;AAAA,2BAAA,yBAAA,aAAA,KAAA;AAAA,2BAAA,yBAAA,qBAAA,KAAA;AAAA,2BAAA,yBAAA,qBAAA,KAAA;GAAA,2BAAA,2BAAA;ICAA;UAAA,oBAAA;AAAA,qBAAA,mBAAA,WAAA,KAAA;AAAA,qBAAA,mBAAA,cAAA,KAAA;AAAA,qBAAA,mBAAA,eAAA,KAAA;GAAA,qBAAA,qBAAA;ICAA;UAAA,gBAAA;AAAA,iBAAA,eAAA,YAAA,KAAA;AAAA,iBAAA,eAAA,cAAA,KAAA;AAAA,iBAAA,eAAA,cAAA,KAAA;AAAA,iBAAA,eAAA,cAAA,KAAA;AAAA,iBAAA,eAAA,YAAA,KAAA;AAAA,iBAAA,eAAA,YAAA,KAAA;AAAA,iBAAA,eAAA,kBAAA,KAAA;AAAA,iBAAA,eAAA,UAAA,KAAA;AAAA,iBAAA,eAAA,UAAA,KAAA;AAAA,iBAAA,eAAA,cAAA,KAAA;AAAA,iBAAA,eAAA,cAAA,MAAA;AAAA,iBAAA,eAAA,gBAAA,MAAA;AAAA,iBAAA,eAAA,gBAAA,MAAA;AAAA,iBAAA,eAAA,gBAAA,MAAA;AAAA,iBAAA,eAAA,iBAAA,MAAA;AAAA,iBAAA,eAAA,gBAAA,MAAA;AAAA,iBAAA,eAAA,iBAAA,MAAA;AAAA,iBAAA,eAAA,cAAA,MAAA;AAAA,iBAAA,eAAA,cAAA,MAAA;AAAA,iBAAA,eAAA,cAAA,MAAA;AAAA,iBAAA,eAAA,cAAA,MAAA;AAAA,iBAAA,eAAA,gBAAA,MAAA;AAAA,iBAAA,eAAA,gBAAA,MAAA;GAAA,iBAAA,iBAAA;ICAA;UAAA,kBAAA;AAAA,mBAAA,iBAAA,WAAA,KAAA;AAAA,mBAAA,iBAAA,YAAA,KAAA;AAAA,mBAAA,iBAAA,YAAA,KAAA;GAAA,mBAAA,mBAAA;ICYU,UAAtB,SAAA,YAAA;AAAA,iBAAA,UAAA;AAAA,sBAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,WAAA,KAAA,MAAA,YAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UA2XE,OA3XF;AAAA,UA6XE,aA7XF;AAAA,UA+XE,UA/XF;AAAA,UAiYE,gBAjYF;AAAA,UAmYY,SAnYZ;AAAA,UAoYY,UApYZ;AAAA,UAuYY,OAvYZ;AAAA,UAyYY,UAzYZ;AAAA,UA2YY,eA3YZ;AAAA,UA6YU,aA7YV;AAAA,UA8YU,aA9YV;AAAA,UA+YU,cA/YV;AAAA,UAgZU,cAAsB;AAhZhC,WAAA;;AAAA,WAKS,cAAP,qBAAmB,GAAoB;AACrC,WAAQ,KAAK,IAAI,OAAQ;;AAN7B,WAaS,mBAAP,0BACE,QACA,IACA,UACqB;AACrB,YAAQ;WACD,cAAc;AACjB,eAAO;UACL,gBAAgB,WAAW,GAAG,OAAO,GAAG;UACxC,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,WAAW,GAAG,QAAQ,GAAG;UACzC,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,WAAW,GAAG,QAAQ,GAAG;UACzC,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,WAAW,GAAG,UAAU,GAAG;UAC3C,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,WAAW,GAAG,SAAS,GAAG;UAC1C,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,GAAG;UACnB,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,GAAG;UACnB,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;WAEb,cAAc;AACjB,eAAO;UACL,gBAAgB,kCAAkC;UAClD,cAAc;;;AAGhB,cAAM,IAAI,MAAJ,0DAAkE;;;AArJhF,WA4JS,oCAAP,2CACE,QACA,IACA,UACqB;AACrB,YAAQ;WACD,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,WAAW,GAAG,OAAO,GAAG;UACxC,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;WAEb,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,WAAW,GAAG,QAAQ,GAAG;UACzC,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;WAEb,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,WAAW,GAAG,QAAQ,GAAG;UACzC,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;WAEb,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,WAAW,GAAG,UAAU,GAAG;UAC3C,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;WAEb,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,WAAW,GAAG,SAAS,GAAG;UAC1C,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;WAEb,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,GAAG;UACnB,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;WAEb,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,GAAG;UACnB,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;WAEb,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,GAAG;UACnB,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;;;AAGhB,cAAM,IAAI,MAAJ,oEAA4E;;;AA3N1F,WAmOS,oCAAP,2CACE,QACA,IACA,UACqB;AACrB,YAAQ;WACD,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,WAAW,GAAG,qBAAqB,GAAG;UACtD,YAAY,GAAG;UACf,UAAU,WAAW,GAAG,QAAQ,GAAG;UACnC,cAAc;UACd,YAAY,GAAG;;WAEd,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,WAAW,GAAG,mBAAmB,GAAG;UACpD,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;UACd,YAAY,GAAG;;WAEd,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,GAAG;UACnB,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;UACd,YAAY,GAAG;;WAEd,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,WAAW,GAAG,oBAAoB,GAAG;UACrD,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;UACd,YAAY,GAAG;;WAEd,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,GAAG;UACnB,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;UACd,YAAY,GAAG;;WAEd,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,GAAG;UACnB,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;UACd,YAAY,GAAG;;WAEd,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,WAAW,GAAG,mBAAmB,GAAG;UACpD,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;UACd,YAAY,GAAG;;WAEd,wBAAwB;AAC3B,eAAO;UACL,gBAAgB,GAAG;UACnB,YAAY,GAAG;UACf,UAAU,GAAG;UACb,cAAc;UACd,YAAY,GAAG;;;AAGjB,cAAM,IAAI,MAAJ,oEAA4E;;;AA1S1F,WAkTS,wBAAP,+BAA6B,QAAuB,KAAc;AAChE,QAAI,cAAc;AAElB,YAAQ;WACD,cAAc;AACjB;AACE,cAAI,CAAC,IAAI,QAAQ,iBAAiB,eAAe;AAC/C,0BAAc;;;AAGlB;;AAGJ,WAAO;;AA/TX,WAqUS,kCAAP,yCAAuC,QAAiC,KAAc;AACpF,QAAI,cAAc;AAElB,YAAQ;WACD,wBAAwB;AAC3B;AACE,cAAI,CAAC,IAAI,QAAQ,iBAAiB,qBAAqB,CAAC,IAAI,QAAQ,iBAAiB,eAAe;AAClG,0BAAc;;;AAGlB;WACG,wBAAwB;AAC3B;AACE,cAAI,CAAC,IAAI,QAAQ,iBAAiB,yBAAyB,CAAC,IAAI,QAAQ,iBAAiB,mBAAmB;AAC1G,0BAAc;;;AAGlB;;AAGJ,WAAO;;AAzVX,WA+VS,kCAAP,yCAAuC,QAAiC,KAAK,WAA6B;AACxG,QAAM,WAAoB,IAAI;AAC9B,QAAI,cAAc;AAElB,QAAI,aAAa,CAAC,IAAI,QAAQ,iBAAiB,eAAe;AAC5D,aAAO;;AAGT,YAAQ;WACD,wBAAwB;AAC3B;AACE,wBAAc;;AAEhB;WACG,wBAAwB;WACxB,wBAAwB;WACxB,wBAAwB;AAC3B;AACE,cAAI,CAAC,UAAU;AACb,0BAAc;;;AAGlB;;AAGJ,WAAO;;AAxXX,MAAA,SAAA,SAAA;AAAA,SA+gBS,kBAAP,2BAA+B;AAC7B,QAAI,CAAC,KAAK;AAAS;AAEnB,QAAM,KAAqD,KAAK,KAAK;AAErE,SAAK;AACL,OAAG,eAAe,KAAK;AACvB,SAAK;;AAthBT,SA4hBE,aAAA,sBAAa;AACX,QAAM,KAAqD,KAAK,KAAK;AACrE,OAAG,cAAc,KAAK;AACtB,SAAK,aAAa;AAClB,SAAK,gBAAgB;AAErB,SAAK,OAAO;;AAliBhB,SAsiBE,QAAA,iBAAc;AACZ,SAAK,KAAK,YAAY,KAAK,SAAS,KAAK;;AAviB7C,SA2iBE,UAAA,mBAAgB;AACd,SAAK,KAAK,YAAY,KAAK,SAAS;;AA5iBxC,SAyjBY,kBAAV,yBACE,MACA,GACA,GACA,OACA,QACA,KACM;AACN,QAAM,KAAqD,KAAK,KAAK;AAD/D,QAAA,sBAE2B,KAAK,eAA9B,aAFF,oBAEE,YAAY,WAFd,oBAEc;AAEpB,QAAI,CAAC,SAAQ,kBAAkB;AAC7B,eAAQ,mBAAmB,GAAG;;AAGhC,OAAG,gBAAgB,GAAG,aAAa,SAAQ;AAE3C,QAAI,QAAQ,MAAM;AAChB,SAAG,qBACD,GAAG,aACH,GAAG,mBACH,GAAG,8BAA8B,MACjC,KAAK,YACL;WAEG;AACL,SAAG,qBAAqB,GAAG,aAAa,GAAG,mBAAmB,GAAG,YAAY,KAAK,YAAY;;AAEhG,OAAG,WAAW,GAAG,GAAG,OAAO,QAAQ,YAAY,UAAU;AAEzD,OAAG,gBAAgB,GAAG,aAAa;;AAvlBvC,SA8lBY,cAAV,qBAAsB,QAAuB;AAC3C,QAAM,KAAqD,KAAK,KAAK;AACrE,QAAM,WAAW,KAAK,KAAK;AAFgB,QAAA,uBAGI,KAAK,eAA9C,iBAHqC,qBAGrC,gBAAgB,aAHqB,qBAGrB,YAAY,WAHS,qBAGT;AAElC,SAAK;AAEL,QAAI,UAAU;AACZ,SAAG,aAAa,KAAK,SAAS,KAAK,cAAc,gBAAgB,KAAK,QAAQ,KAAK;WAC9E;AAEL,UAAI,eAAe,gBAAgB;AACjC,yBAAiB;;AAGnB,UAAI,CAAC,QAAQ;AACX,iBAAS,IAAI,GAAG,IAAI,KAAK,cAAc,KAAK;AAC1C,cAAM,QAAQ,KAAK,IAAI,GAAG,KAAK,UAAU;AACzC,cAAM,SAAS,KAAK,IAAI,GAAG,KAAK,WAAW;AAE3C,aAAG,WAAW,KAAK,SAAS,GAAG,gBAAgB,OAAO,QAAQ,GAAG,YAAY,UAAU;;aAEpF;AACL,iBAAS,KAAI,GAAG,KAAI,KAAK,cAAc,MAAK;AAC1C,cAAM,OAAO,KAAK,IAAI,GAAG,KAAK,UAAU;AACxC,mBAAS,YAAY,GAAG,YAAY,GAAG,aAAa;AAClD,eAAG,WACD,GAAG,8BAA8B,WACjC,IACA,gBACA,MACA,MACA,GACA,YACA,UACA;;;;;AAOV,SAAK;;AAxoBT,SAgpBY,kBAAV,yBAA0B,MAAsB;AAC9C,WAAO,KAAK,MAAM,KAAK,KAAK;;AAjpBhC,SAupBY,kBAAV,2BAAoC;AAClC,WAAO,KAAK,UAAU,KAAK,MAAM,KAAK,KAAK,KAAK,IAAI,KAAK,QAAQ,KAAK,aAAa,IAAI;;AAxpB3F,SA8pBU,eAAR,sBAAqB,OAAwB,OAAqB;AAChE,QAAM,KAAqD,KAAK,KAAK;AACrE,QAAM,WAAoB,KAAK,KAAK;AAEpC,QACE,CAAC,YACD,UAAU,gBAAgB,SACzB,EAAC,SAAQ,YAAY,KAAK,WAAW,CAAC,SAAQ,YAAY,KAAK,WAChE;AACA,aAAO,KACL;AAEF,cAAQ,gBAAgB;;AAG1B,YAAQ;WACD,gBAAgB;AACnB,WAAG,cAAc,KAAK,SAAS,OAAO,GAAG;AACzC;WACG,gBAAgB;AACnB,WAAG,cAAc,KAAK,SAAS,OAAO,GAAG;AACzC;WACG,gBAAgB;AACnB,WAAG,cAAc,KAAK,SAAS,OAAO,GAAG;AACzC;;;AAtrBR,eAAA,UAAA,CAAA;IAAA,KAAA;IAAA,KAqZE,gBAAoB;AAClB,aAAO,KAAK;;KAtZhB;IAAA,KAAA;IAAA,KA4ZE,gBAAqB;AACnB,aAAO,KAAK;;KA7ZhB;IAAA,KAAA;IAAA,KAmaE,gBAAiC;AAC/B,aAAO,KAAK;;IApahB,KAuaE,cAAc,OAAwB;AACpC,UAAI,UAAU,KAAK;AAAY;AAE/B,UAAM,KAAqD,KAAK,KAAK;AAErE,WAAK,aAAa;AAElB,WAAK;AACL,WAAK,aAAa,OAAO,GAAG;AAC5B,WAAK;;KAhbT;IAAA,KAAA;IAAA,KAsbE,gBAAiC;AAC/B,aAAO,KAAK;;IAvbhB,KA0bE,cAAc,OAAwB;AACpC,UAAI,UAAU,KAAK;AAAY;AAE/B,UAAM,KAAqD,KAAK,KAAK;AAErE,WAAK,aAAa;AAElB,WAAK;AACL,WAAK,aAAa,OAAO,GAAG;AAC5B,WAAK;;KAncT;IAAA,KAAA;IAAA,KAycE,gBAA0B;AACxB,aAAO,KAAK;;KA1chB;IAAA,KAAA;IAAA,KAgdE,gBAAoC;AAClC,aAAO,KAAK;;IAjdhB,KAodE,cAAe,OAA0B;AACvC,UAAI,UAAU,KAAK;AAAa;AAEhC,UAAM,KAAqD,KAAK,KAAK;AAErE,WAAK,cAAc;AAEnB,WAAK;AACL,cAAQ;aACD,kBAAkB;AACrB,aAAG,cAAc,KAAK,SAAS,GAAG,oBAAoB,GAAG;AACzD,aAAG,cAAc,KAAK,SAAS,GAAG,oBAAoB,KAAK,UAAU,GAAG,yBAAyB,GAAG;AACpG;aACG,kBAAkB;AACrB,aAAG,cAAc,KAAK,SAAS,GAAG,oBAAoB,GAAG;AACzD,aAAG,cAAc,KAAK,SAAS,GAAG,oBAAoB,KAAK,UAAU,GAAG,wBAAwB,GAAG;AACnG;aACG,kBAAkB;AACrB,aAAG,cAAc,KAAK,SAAS,GAAG,oBAAoB,GAAG;AACzD,aAAG,cAAc,KAAK,SAAS,GAAG,oBAAoB,KAAK,UAAU,GAAG,uBAAuB,GAAG;AAClG;;AAEJ,WAAK;;KA1eT;IAAA,KAAA;IAAA,KAgfE,gBAAyB;AACvB,aAAO,KAAK;;IAjfhB,KAofE,cAAe,OAAe;AAC5B,UAAM,MAAM,KAAK,KAAK,WAAW;AAEjC,UAAI,QAAQ,KAAK;AACf,eAAO,KAAP,gBAA0B,QAA1B,4DAAyF;AACzF,gBAAQ;;AAGV,UAAI,QAAQ,GAAG;AACb,eAAO,KAAP,gBAA0B,QAA1B;AACA,gBAAQ;;AAGV,UAAI,UAAU,KAAK;AAAa;AAEhC,UAAM,KAAsF,KAAK,KAAK;AAEtG,WAAK,cAAc;AAEnB,WAAK;AACL,SAAG,cAAc,KAAK,SAAS,GAAG,4BAA4B;AAC9D,WAAK;;;AAzgBT,SAAA;EAAsC;AAAhB,QAEb,mBAAqC;ICSjC,aAAb,WAAA;AAcE,uBAAY,OAAwB;AAAA,SAZpC,SAYoC;AAAA,SAVpC,cAAuD,OAAO,OAAO;AAUjC,SARpC,mBAA0C,IAAI;AAQV,SAN5B,kBAA0C,OAAO,OAAO;AAM5B,SAL5B,YAAoB;AAM1B,SAAK,SAAS;;AAflB,MAAA,SAAA,YAAA;AAAA,SAgCE,WAAA,kBAAS,UAA2C;AAClD,WAAO,KAAK,SAAS;;AAjCzB,SAoDE,WAAA,kBAAS,UAAmC,OAAqB;AAC/D,SAAK,SAAS,UAAU;;AArD5B,SAsEE,SAAA,gBAAO,UAA2C;AAChD,WAAO,KAAK,SAAS;;AAvEzB,SA0FE,SAAA,gBAAO,UAAmC,OAAqB;AAC7D,SAAK,SAAS,UAAU;;AA3F5B,SA4GE,gBAAA,uBAAc,UAAiD;AAC7D,WAAO,KAAK,SAAS;;AA7GzB,SAgIE,gBAAA,uBAAc,UAAmC,OAA2B;AAC1E,SAAK,SAAS,UAAU;;AAjI5B,SAkJE,cAAA,qBAAY,UAA+C;AACzD,WAAO,KAAK,SAAS;;AAnJzB,SAsKE,cAAA,qBAAY,UAAmC,OAAyB;AACtE,SAAK,SAAS,UAAU;;AAvK5B,SAwLE,aAAA,oBAAW,UAA4C;AACrD,WAAO,KAAK,SAAS;;AAzLzB,SA4ME,aAAA,oBAAW,UAAmC,OAAsB;AAClE,SAAK,SAAS,UAAU;;AA7M5B,SA8NE,aAAA,oBAAW,UAA4C;AACrD,WAAO,KAAK,SAAS;;AA/NzB,SAkPE,aAAA,oBAAW,UAAmC,OAAsB;AAClE,SAAK,SAAS,UAAU;;AAnP5B,SAoQE,aAAA,oBAAW,UAA4C;AACrD,WAAO,KAAK,SAAS;;AArQzB,SAwRE,aAAA,oBAAW,UAAmC,OAAsB;AAClE,SAAK,SAAS,UAAU;;AAzR5B,SA0SE,YAAA,mBAAU,UAA2C;AACnD,WAAO,KAAK,SAAS;;AA3SzB,SA8TE,YAAA,mBAAU,UAAmC,OAAqB;AAChE,SAAK,SAAS,UAAU;;AA/T5B,SAgVE,WAAA,kBAAS,UAA0C;AACjD,WAAO,KAAK,SAAS;;AAjVzB,SAoWE,WAAA,kBAAS,UAAmC,OAAoB;AAC9D,SAAK,SAAS,UAAU;;AArW5B,SAsXE,aAAA,oBAAW,UAA4C;AACrD,WAAO,KAAK,SAAS;;AAvXzB,SAwYE,aAAA,oBAAW,UAAmC,OAAsB;AAClE,QAAI,KAAK,iBAAiB,GAAG;AAC3B,UAAM,YAAY,KAAK,SAAkB;AACzC,mBAAa,UAAU,aAAa;AACpC,eAAS,MAAM,aAAa;;AAE9B,SAAK,SAAS,UAAU;;AA9Y5B,SA+ZE,kBAAA,yBAAgB,UAA8C;AAC5D,WAAO,KAAK,SAAS;;AAhazB,SAibE,kBAAA,yBAAgB,UAAmC,OAAwB;AACzE,QAAI,KAAK,iBAAiB,GAAG;AAC3B,UAAM,YAAY,KAAK,SAAoB;AAC3C,UAAI,WAAW;AACb,iBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAI,GAAG,KAAK;AAChD,oBAAU,GAAG,aAAa;;;AAG9B,UAAI,OAAO;AACT,iBAAS,KAAI,GAAG,KAAI,MAAM,QAAQ,KAAI,IAAG,MAAK;AAC5C,gBAAM,IAAG,aAAa;;;;AAI5B,SAAK,SAAS,UAAU;;AA/b5B,SAsdE,cAAA,qBAAY,OAA6B,OAA4B;AAAA,QAA5B,UAA4B,QAAA;AAA5B,cAAgB;;AACvD,QAAI,OAAO;AACT,WAAK,qBAA6B,OAAO;WACpC;AACL,UAAI,OAAO,UAAU,UAAU;AAC7B,gBAAQ,OAAO,eAAe;;AAEhC,WAAK,iBAAiB,OAAO;;;AA7dnC,SA6eE,eAAA,sBAAa,OAAmC;AAC9C,QAAI,OAAO,UAAU,UAAU;AAE7B,UAAM,gBAAgB,KAAK,gBAAgB;AAC3C,UAAI,eAAe;AACjB,aAAK,sBAAsB,OAAO;aAC7B;AACL,gBAAQ,OAAO,eAAe;AAC9B,aAAK,iBAAiB,QAAQ;;WAE3B;AACL,WAAK,iBAAiB,QAAQ;;;AAxfpC,SA4fE,QAAA,kBAAoB;AAClB,QAAM,aAAa,IAAI,YAAW,KAAK;AACvC,SAAK,QAAQ;AACb,WAAO;;AA/fX,SAkgBE,UAAA,iBAAQ,QAA0B;AAChC,iBAAa,gBAAgB,KAAK,kBAAkB,OAAO;AAC3D,aAAc,OAAO,iBAAiB,KAAK;AAE3C,QAAM,aAAa,KAAK;AACxB,QAAM,mBAAmB,OAAO;AAChC,QAAM,OAAO,OAAO,KAAK;AACzB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,KAAK;AAC3C,UAAM,IAAI,KAAK;AACf,UAAM,YAAoC,WAAW;AACrD,UAAI,aAAY,MAAM;AACpB,YAAI,OAAO,cAAa,UAAU;AAChC,2BAAiB,KAAK;mBACb,qBAAoB,SAAS;AACtC,2BAAiB,KAAK;mBACb,qBAAoB,SAAS,qBAAoB,gBAAgB,qBAAoB,YAAY;AAC1G,2BAAiB,KAAK,UAAS;eAC1B;AACL,2BAAiB,KAAK,UAAS;;aAE5B;AACL,yBAAiB,KAAK;;;;AAvhB9B,SA+hBE,WAAA,kBAA4C,UAAsC;AAChF,QAAI,OAAO,aAAa,UAAU;AAChC,iBAAW,OAAO,kBAAkB;;AAEtC,WAAO,KAAK,YAAY,SAAS;;AAniBrC,SAyiBE,WAAA,kBAA4C,UAAmC,OAAgB;AAC7F,QAAI,OAAO,aAAa,UAAU;AAChC,iBAAW,OAAO,kBAAkB;;AAGtC,QAAI,SAAS,WAAW,KAAK,QAAQ;AACnC,UAAI,SAAS,WAAW,QAAW;AACjC,iBAAS,SAAS,KAAK;aAClB;AACL,cAAA,oCAAwC,gBAAgB,SAAS,UAAjE;;;AAIJ,SAAK,YAAY,SAAS,aAAa;;AAtjB3C,SA4jBE,eAAA,wBAAuB;AACrB,WAAO,KAAK;;AA7jBhB,SAmkBE,eAAA,sBAAa,OAAqB;AAChC,SAAK,aAAa;AAClB,QAAM,aAAa,KAAK;AACxB,aAAS,KAAK,YAAY;AACxB,UAAM,aAAW,WAAW;AAE5B,UAAI,cAAY,sBAAoB,SAAS;AAC3C,mBAAS,aAAa;;;;AA1kB9B,SA+kBU,uBAAR,8BAA6B,MAAc,OAAqB;AAC9D,QAAM,gBAAgB,KAAK;AAC3B,QAAM,gBAAgB,cAAc;AACpC,QAAI,kBAAkB,OAAO;AAC3B,uBAAiB,KAAK,sBAAsB,MAAM;AAElD,UAAM,SAAQ,OAAO,eAAkB,OAAzB,MAAiC;AAC/C,WAAK,iBAAiB,OAAO;AAC7B,oBAAc,QAAQ;;;AAvlB5B,SA2lBU,wBAAR,+BAA8B,MAAc,OAAqB;AAC/D,QAAM,WAAW,OAAO,eAAkB,OAAzB,MAAiC;AAClD,SAAK,iBAAiB,QAAQ;AAC9B,WAAO,KAAK,gBAAgB;;AA9lBhC,SAAA;;ICVa,QAAb,SAAA,eAAA;AAAA,iBAAA,QAAA;AAkEE,kBAAY,QAAgB,MAAe;AAAA,QAAA;AACzC,YAAA,cAAA,KAAA,MAAM,WAAN;AADyC,UA5DlC,aAAyB,IAAI,WAAW,gBAAgB;AA4DtB,UAzD3C,OAyD2C;AAAA,UA7C3C,aAAwB;AA6CmB,UA5C3C,iBAA2B;AA4CgB,UA3C3C,oBAA6B;AA2Cc,UAzCnC,aAAsB;AAyCa,UAxCnC,gBAA0B;AAwCS,UAvCnC,cAAuB,IAAI;AAuCQ,UAmN3C,WAA2B;AAjNzB,UAAK,OAAO,QAAQ;AAEpB,QAAM,aAAa,MAAK;AACxB,WAAM,oBAAoB,UAA1B,uBAAA;AACA,eAAW,aAAa;AAGxB,QAAI,MAAK,QAAQ,kBAAkB,QAAQ,iBAAiB,mBAAmB;AAC7E,iBAAW,YAAY;;AAEzB,QAAI,MAAK,QAAQ,kBAAkB,QAAQ,iBAAiB,sBAAsB;AAChF,iBAAW,YAAY;;AAbgB,WAAA;;AAlE7C,MAAA,SAAA,OAAA;AAAA,SAwFE,mBAAA,0BAAiB,MAAuB;AACtC,QAAM,SAAS,IAAI,OAAO,KAAK,SAAS;AACxC,SAAK,cAAc;AACnB,WAAO;;AA3FX,SAkGE,gBAAA,uBAAc,QAAsB;AAClC,QAAM,SAAS,OAAO;AAGtB,QAAI,CAAC,QAAQ;AACX,aAAO,UAAU;AACjB,aAAO;;AAIT,QAAM,WAAW,OAAO;AACxB,QAAI,aAAa,MAAM;AACrB,UAAI,YAAY,QAAQ;AACtB,iBAAS,cAAc;;AAEzB,WAAK,cAAc,KAAK;AACxB,aAAO,uBAAuB,QAAQ;eAC7B,CAAC,QAAQ;AAClB,WAAK,cAAc,KAAK;;AAI1B,QAAI,KAAK,mBAAmB;AAC1B,OAAC,OAAO,wBAAwB,OAAO,aAAa,OAAO;WACtD;AACL,aAAO,wBAAwB,OAAO;;;AA3H5C,SAmIE,mBAAA,0BAAiB,QAAsB;AACrC,QAAI,OAAO,WAAW,OAAO,UAAU,MAAM;AAC3C,WAAK,cAAc;AACnB,WAAK,qBAAqB,OAAO;AACjC,aAAO,uBAAuB,QAAQ;;;AAvI5C,SAgJE,gBAAA,uBAAc,OAAkC;AAAA,QAAlC,UAAkC,QAAA;AAAlC,cAAgB;;AAC5B,WAAO,KAAK,cAAc;;AAjJ9B,SAyJE,mBAAA,0BAAiB,MAA6B;AAC5C,QAAM,WAAW,KAAK;AACtB,aAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAAK;AAC7C,UAAM,QAAQ,SAAS;AACvB,UAAI,MAAM,SAAS,MAAM;AACvB,eAAO;;;AAIX,aAAS,KAAI,SAAS,SAAS,GAAG,MAAK,GAAG,MAAK;AAC7C,UAAM,SAAQ,SAAS;AACvB,UAAM,SAAS,OAAM,WAAW;AAChC,UAAI,QAAQ;AACV,eAAO;;;AAGX,WAAO;;AAzKX,SAiLE,mBAAA,0BAAiB,MAA6B;AAC5C,QAAM,SAAS,KAAK,MAAM,KAAK,OAAO;AACtC,aAAS,IAAI,GAAG,IAAI,KAAK,mBAAmB,IAAI,GAAG,KAAK;AACtD,UAAI,aAAa,KAAK,cAAc;AACpC,UAAI,WAAW,QAAQ,OAAO;AAAI;AAClC,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAI,GAAG,EAAE,GAAG;AAC7C,qBAAa,OAAO,iBAAiB,YAAY,OAAO;AACxD,YAAI,CAAC;AAAY;;AAEnB,aAAO;;AAET,WAAO;;AA5LX,SAkME,UAAA,mBAAgB;AACd,QAAI,KAAK,YAAY;AACnB;;AAEF,SAAK,qBAAsB,MAAK,QAAQ,aAAa,cAAc;AACnE,WAAM,oBAAoB,kBAAkB,MAAM,WAAW,CAAC;AAC9D,aAAS,IAAI,GAAG,IAAI,KAAK,mBAAmB,IAAI,GAAG,KAAK;AACtD,WAAK,cAAc,GAAG;;AAExB,SAAK,cAAc,SAAS;AAC5B,SAAK,eAAe,SAAS;AAC5B,WAAM,oBAA4B,WAAW;AAC9C,SAAK,WAAW,aAAa;AAC7B,SAAK,aAAa;;AA/MtB,SAsNE,qBAAA,4BAAmB,QAAsB;AACvC,QAAM,QAAQ,KAAK,eAAe,QAAQ;AAC1C,QAAI,UAAU,IAAI;AAChB,WAAK,eAAe,KAAK;WACpB;AACL,aAAO,KAAK;;;AA3NlB,SAmOE,qBAAA,4BAAmB,QAAsB;AACvC,QAAM,QAAQ,KAAK,eAAe,QAAQ;AAC1C,QAAI,UAAU,IAAI;AAChB,WAAK,eAAe,OAAO,OAAO;;;AAtOxC,SA6OE,iBAAA,wBAAe,QAAuB;AACpC,SAAK,oBAAoB;AACzB,QAAM,eAAe,KAAK;AAC1B,aAAS,IAAI,aAAa,SAAS,GAAG,KAAK,GAAG,KAAK;AACjD,UAAM,SAAS,aAAa;AAC5B,UAAI,OAAO,WAAW;AACpB,iBAAS,OAAO,mBAAmB,OAAO;;;;AAnPlD,SA2PE,oBAAA,6BAAoB;AAClB,QAAM,WAAW,KAAK,YAAY;AAClC,QAAM,aAAa,KAAK;AACxB,QAAM,SAAS,KAAK,OAAO;AAC3B,QAAM,aAAa,KAAK;AAExB,aAAS,kBAAkB;AAE3B,eAAW,SAAS,OAAO,OAAO,OAAO;AACzC,eAAW,WAAW,OAAM,qBAAqB;;AApQrD,SAuQU,gBAAR,uBAAsB,QAAsB;AAC1C,QAAM,kBAAkB,KAAK;AAC7B,oBAAgB,OAAO,gBAAgB,QAAQ,SAAS;;AAzQ5D,SA6QS,kBAAP,yBAAuB,SAAiC;AACtD,WAAM,oBAAoB,gBAAgB;;AA9Q9C,SAiRE,cAAA,qBAAoC,SAA2B;AAC7D,WAAO,OAAM,oBAAoB,YAAY,MAAM;;AAlRvD,SA4RS,UAAP,iBAAe,KAA8C,QAAkB,KAAkB;;AA5RnG,eAAA,QAAA,CAAA;IAAA,KAAA;IAAA,KAiCE,gBAAqB;AACnB,aAAO,KAAK;;KAlChB;IAAA,KAAA;IAAA,KAyCE,gBAAgC;AAC9B,aAAO,KAAK,cAAc;;KA1C9B;IAAA,KAAA;IAAA,KAiDE,gBAAuC;AACrC,aAAO,KAAK;;KAlDhB;IAAA,KAAA;IAAA,KAyDE,gBAAyB;AACvB,aAAO,KAAK;;;AA1DhB,SAAA;EAA2B;AAAd,MACI,sBAAsB,OAAO,kBAAkB;AADnD,MAGJ,sBAAsB,IAAI;ICZtB,eAAb,WAAA;AAsBE,yBAA4B,QAAgB;AAAA,SAAhB,SAAA;AAAgB,SArB5C,eAqB4C;;AAtB9C,MAAA,SAAA,cAAA;AAAA,SA8BE,YAAA,mBAAU,KAAa,iBAAsD;AAAA,QAAA,QAAA;AAAA,QAAtD,oBAAsD,QAAA;AAAtD,wBAA2B;;AAChD,QAAM,eAAe,KAAK,OAAO,gBAAgB,KAAY;AAC7D,iBAAa,KAAK,SAAC,OAAiB;AAClC,UAAM,WAAkB,MAAK;AAC7B,YAAK,cAAc;AACnB,UAAI,YAAY,iBAAiB;AAC/B,iBAAS;;;AAGb,WAAO;;AAvCX,SAgDE,cAAA,qBAAY,aAAoB,WAAwB;AACtD,QAAM,kBAAkB,YAAY;AACpC,aAAS,IAAY,GAAG,IAAY,gBAAgB,QAAQ,IAAI,GAAG,KAAK;AACtE,gBAAU,cAAc,gBAAgB;;;AAnD9C,eAAA,eAAA,CAAA;IAAA,KAAA;IAAA,KAME,gBAAyB;AACvB,aAAO,KAAK;;IAPhB,KAUE,cAAgB,OAAc;AAC5B,UAAM,WAAW,KAAK;AACtB,UAAI,aAAa,OAAO;AACtB,oBAAY,SAAS,eAAe;AACpC,iBAAS,MAAM,eAAe;AAC9B,aAAK,eAAe;;;;AAf1B,SAAA;;;;;;;;;;;;;;;ICYa,aAAb,WAAA;AAAA,yBAAA;;AAAA,cACS,OAAP,iBAAoB;AAClB,WAAO,OAAO,eAAe,cAAc;AAC3C,WAAO,OAAO,OAAO,OAAO;AAC5B,WAAO,OAAO,SAAS,SAAS;AAChC,WAAO,OAAO,cAAc,aAAa;AACzC,WAAO,OAAO,UAAU,aAAa;AACrC,WAAO,OAAO,UAAU,UAAU;AAClC,WAAO,OAAO,mBAAmB,YAAY;;AARjD,SAAA;;ICZa,oBAAb,WAAA;AAAA,gCAAA;AAAA,SACU,kBAA0B;AADpC,SAEU,YAAoB,OAAO,OAAO;AAF5C,SAGU,gBAHV;AAAA,SAIU,gBAJV;;AAAA,MAAA,SAAA,mBAAA;AAAA,SAWE,MAAA,cAAI,QAAqD;AACvD,QAAI,WAAW,KAAK;AACpB,QAAM,aAAa,OAAO;AAC1B,QAAI,aAAa,KAAK,iBAAiB;AACrC,WAAK,yBAAyB,UAAU,GAAG;;AAG7C,QAAM,OAAO,OAAO;AACpB,QAAM,WAAW,OAAO,UAAU;AAClC,QAAM,cAAc,KAAK,kBAAkB;AAC3C,aAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AACpC,UAAM,UAAU,WAAW,IAAI,IAAI,KAAK;AACxC,UAAI,kBAA0B,SAAS;AACvC,yBAAoB,UAAS,WAAW,kBAAkB,OAAO,OAAO;AACxE,iBAAW;;AAGb,QAAM,WAAW,WAAW,cAAc,IAAI,KAAK;AACnD,QAAM,SAAyC,SAAU;AACzD,QAAI,CAAC,QAAQ;AACX,WAAK,gBAAgB;AACrB,WAAK,gBAA+C;;AAEtD,WAAO;;AAlCX,SA6CE,QAAA,eAAM,eAAoC;AACxC,SAAK,cAAc,KAAK,iBAAiB;;AA9C7C,SAiDU,2BAAR,kCAAiC,UAAkB,WAAmB,cAA4B;AAEhG,QAAM,MAAM,KAAK,kBAAkB;AACnC,QAAI,aAAa,KAAK;AACpB,eAAS,KAAK,UAAU;AACtB,YAAM,SAAwB,SAAS;AACvC,iBAAS,IAAI,GAAG,IAAI,eAAe,KAAK,IAAI,GAAG,KAAK;AAClD,cAAI,KAAK,IAAI,GAAG;AACd,qBAAS,KAAK;iBACT;AACL,uBAAW,SAAS,KAAK,IAAI,IAAI,KAAK,OAAO,OAAO;;;;AAI1D,WAAK,kBAAkB;WAClB;AACL,eAAS,MAAK,UAAU;AACtB,aAAK,yBAAyB,SAAS,KAAI,EAAE,WAAW;;;;AAlEhE,SAAA;;ICAa,yBAAb,mCAAA;AAAA,OAEE,sBAAsC,eAAe;AAFvD,OAIE,sBAAsC,eAAe;AAJvD,OAME,yBAAsC,YAAY;AANpD,OAQE,yBAAsC,YAAY;AARpD,OAUE,8BAA2C,YAAY;AAVzD,OAYE,8BAA2C,YAAY;AAZzD,OAcE,iBAAiC,eAAe;AAdlD,OAiBE,eAAwB;;ICbb,aAAb,WAAA;AAAA,yBAAA;AAAA,SAgDW,mBAA2C,IAAI;AAhD1D,SAkDW,aAAoB,IAAI,MAAM,GAAG,GAAG,GAAG;AAlDlD,SAoDE,kBAA2B;;AApD7B,cACiB,oBAAf,2BAAiC,aAAkC;AACjE,YAAQ;WACD,YAAY;AACf,eAAO,sBAAsB;WAC1B,YAAY;AACf,eAAO,sBAAsB;WAC1B,YAAY;AACf,eAAO,sBAAsB;WAC1B,YAAY;AACf,eAAO,sBAAsB;WAC1B,YAAY;AACf,eAAO,sBAAsB;WAC1B,YAAY;AACf,eAAO,sBAAsB;WAC1B,YAAY;AACf,eAAO,sBAAsB;WAC1B,YAAY;AACf,eAAO,sBAAsB;WAC1B,YAAY;AACf,eAAO,sBAAsB;WAC1B,YAAY;AACf,eAAO,sBAAsB;WAC1B,YAAY;AACf,eAAO,sBAAsB;WAC1B,YAAY;AACf,eAAO,sBAAsB;WAC1B,YAAY;AACf,eAAO,sBAAsB;;;AA5BrC,cAgCiB,uBAAf,8BAAoC,gBAAwC;AAC1E,YAAQ;WACD,eAAe;AAClB,eAAO,sBAAsB;WAC1B,eAAe;AAClB,eAAO,sBAAsB;WAC1B,eAAe;AAClB,eAAO,sBAAsB;WAC1B,eAAe;AAClB,eAAO,uBAAuB;WAC3B,eAAe;AAClB,eAAO,uBAAuB;;;AA3CtC,MAAA,SAAA,YAAA;AAAA,SA0DE,SAAA,gBAAO,kBAAoC,iBAAoC;AAC7E,SAAK,eAAe,kBAAkB,gBAAgB;;AA3D1D,SA8DU,iBAAR,wBAAuB,KAAuB,WAA6B;AACzE,QAAM,KAA4B,IAAI;AACtC,QAAM,uBAAuB,UAAU;AAFkC,QAAA,wBAYrE,KAAK,kBAPP,sBALuE,sBAKvE,qBACA,sBANuE,sBAMvE,qBACA,yBAPuE,sBAOvE,wBACA,8BARuE,sBAQvE,6BACA,yBATuE,sBASvE,wBACA,8BAVuE,sBAUvE,6BACA,iBAXuE,sBAWvE;AAGF,QAAM,cAAc,CAClB,4BAA2B,YAAY,OACvC,gCAAgC,YAAY,QAC5C,2BAA2B,YAAY,OACvC,gCAAgC,YAAY,QAC3C,yBAAwB,eAAe,OAAO,wBAAwB,eAAe,aACrF,yBAAwB,eAAe,OAAO,wBAAwB,eAAe;AAGxF,QAAI,gBAAgB,qBAAqB,cAAc;AACrD,UAAI,aAAa;AACf,WAAG,OAAO,GAAG;aACR;AACL,WAAG,QAAQ,GAAG;;AAEhB,2BAAqB,eAAe;;AAGtC,QAAI,aAAa;AAEf,UACE,2BAA2B,qBAAqB,0BAChD,gCAAgC,qBAAqB,+BACrD,2BAA2B,qBAAqB,0BAChD,gCAAgC,qBAAqB,6BACrD;AACA,WAAG,kBACD,YAAW,kBAAkB,yBAC7B,YAAW,kBAAkB,8BAC7B,YAAW,kBAAkB,yBAC7B,YAAW,kBAAkB;AAE/B,6BAAqB,yBAAyB;AAC9C,6BAAqB,8BAA8B;AACnD,6BAAqB,yBAAyB;AAC9C,6BAAqB,8BAA8B;;AAIrD,UACE,wBAAwB,qBAAqB,uBAC7C,wBAAwB,qBAAqB,qBAC7C;AACA,WAAG,sBACD,YAAW,qBAAqB,sBAChC,YAAW,qBAAqB;AAElC,6BAAqB,sBAAsB;AAC3C,6BAAqB,sBAAsB;;AAI7C,UAAM,aAAa,KAAK;AACxB,UAAI,CAAC,MAAM,OAAO,UAAU,YAAY,aAAa;AACnD,WAAG,WAAW,WAAW,GAAG,WAAW,GAAG,WAAW,GAAG,WAAW;AACnE,mBAAW,QAAQ,UAAU;;;AAKjC,QAAI,mBAAmB,qBAAqB,gBAAgB;AAC1D,SAAG,UACA,kBAAiB,eAAe,SAAS,GACzC,kBAAiB,eAAe,WAAW,GAC3C,kBAAiB,eAAe,UAAU,GAC1C,kBAAiB,eAAe,WAAW;AAE9C,2BAAqB,iBAAiB;;AAIxC,QAAM,kBAAkB,KAAK;AAC7B,QAAI,oBAAoB,UAAU,iBAAiB;AACjD,UAAI,iBAAiB;AACnB,WAAG,OAAO,GAAG;aACR;AACL,WAAG,QAAQ,GAAG;;AAEhB,gBAAU,kBAAkB;;;AA1JlC,SAAA;;ICJa,aAAb,WAAA;AAAA,yBAAA;AAAA,SAuBE,UAAmB;AAvBrB,SAyBE,eAAwB;AAzB1B,SA2BE,kBAAmC,gBAAgB;;AA3BrD,cACiB,wBAAf,+BAAqC,iBAA0C;AAC7E,YAAQ;WACD,gBAAgB;AACnB,eAAO,sBAAsB;WAC1B,gBAAgB;AACnB,eAAO,sBAAsB;WAC1B,gBAAgB;AACnB,eAAO,sBAAsB;WAC1B,gBAAgB;AACnB,eAAO,uBAAuB;WAC3B,gBAAgB;AACnB,eAAO,uBAAuB;WAC3B,gBAAgB;AACnB,eAAO,uBAAuB;WAC3B,gBAAgB;AACnB,eAAO,uBAAuB;WAC3B,gBAAgB;AACnB,eAAO,uBAAuB;;;AAlBtC,MAAA,SAAA,YAAA;AAAA,SAiCE,SAAA,gBAAO,kBAAoC,iBAAoC;AAC7E,SAAK,eAAe,kBAAkB,gBAAgB;;AAlC1D,SAqCU,iBAAR,wBAAuB,KAAuB,WAA6B;AACzE,QAAM,KAA4B,IAAI;AADmC,QAEjE,UAA2C,KAA3C,SAAS,kBAAkC,KAAlC,iBAAiB,eAAiB,KAAjB;AAElC,QAAI,WAAW,UAAU,SAAS;AAChC,UAAI,SAAS;AACX,WAAG,OAAO,GAAG;aACR;AACL,WAAG,QAAQ,GAAG;;AAEhB,gBAAU,UAAU;;AAGtB,QAAI,SAAS;AAEX,UAAI,mBAAmB,UAAU,iBAAiB;AAChD,WAAG,UAAU,YAAW,sBAAsB;AAC9C,kBAAU,kBAAkB;;AAI9B,UAAI,gBAAgB,UAAU,cAAc;AAC1C,WAAG,UAAU;AACb,kBAAU,eAAe;;;;AA5DjC,SAAA;;ICAa,cAAb,WAAA;AAAA,0BAAA;AAAA,SAEE,WAAqB,SAAS;AAFhC,SAIE,YAAoB;AAJtB,SAME,uBAA+B;AANjC,SASE,kBAA2B;;AAT7B,MAAA,SAAA,aAAA;AAAA,SAcE,SAAA,gBAAO,kBAAoC,iBAAoC;AAC7E,SAAK,eAAe,kBAAkB,gBAAgB;;AAf1D,SAkBU,iBAAR,wBAAuB,KAAuB,WAA8B;AAC1E,QAAM,KAA4B,IAAI;AADoC,QAElE,WAA8C,KAA9C,UAAU,YAAoC,KAApC,WAAW,uBAAyB,KAAzB;AAE7B,QAAM,iBAAiB,aAAa,SAAS;AAC7C,QAAI,mBAAmB,UAAU,iBAAiB;AAChD,UAAI,gBAAgB;AAClB,WAAG,OAAO,GAAG;aACR;AACL,WAAG,QAAQ,GAAG;;AAEhB,gBAAU,kBAAkB;;AAI9B,QAAI,gBAAgB;AAClB,UAAI,aAAa,UAAU,UAAU;AACnC,YAAI,YAAY,SAAS,MAAM;AAC7B,aAAG,SAAS,GAAG;eACV;AACL,aAAG,SAAS,GAAG;;AAEjB,kBAAU,WAAW;;;AAKzB,QAAI,cAAc,UAAU,aAAa,yBAAyB,UAAU,sBAAsB;AAChG,UAAI,cAAc,KAAK,yBAAyB,GAAG;AACjD,WAAG,OAAO,GAAG;AACb,WAAG,cAAc,sBAAsB;aAClC;AACL,WAAG,QAAQ,GAAG;;AAEhB,gBAAU,YAAY;AACtB,gBAAU,uBAAuB;;;AArDvC,SAAA;;ICCa,eAAb,WAAA;AAAA,2BAAA;AAAA,SA4CE,UAAmB;AA5CrB,SA8CE,iBAAyB;AA9C3B,SAgDE,OAAe;AAhDjB,SAkDE,YAAoB;AAlDtB,SAoDE,uBAAwC,gBAAgB;AApD1D,SAsDE,sBAAuC,gBAAgB;AAtDzD,SAwDE,qBAAuC,iBAAiB;AAxD1D,SA0DE,oBAAsC,iBAAiB;AA1DzD,SA4DE,qBAAuC,iBAAiB;AA5D1D,SA8DE,oBAAsC,iBAAiB;AA9DzD,SAgEE,sBAAwC,iBAAiB;AAhE3D,SAkEE,qBAAuC,iBAAiB;;AAlE1D,gBACiB,wBAAf,+BAAqC,iBAA0C;AAC7E,YAAQ;WACD,gBAAgB;AACnB,eAAO,sBAAsB;WAC1B,gBAAgB;AACnB,eAAO,sBAAsB;WAC1B,gBAAgB;AACnB,eAAO,sBAAsB;WAC1B,gBAAgB;AACnB,eAAO,sBAAsB;WAC1B,gBAAgB;AACnB,eAAO,sBAAsB;WAC1B,gBAAgB;AACnB,eAAO,sBAAsB;WAC1B,gBAAgB;AACnB,eAAO,sBAAsB;WAC1B,gBAAgB;AACnB,eAAO,sBAAsB;;;AAlBrC,gBAsBiB,yBAAf,gCAAsC,iBAA2C;AAC/E,YAAQ;WACD,iBAAiB;AACpB,eAAO,sBAAsB;WAC1B,iBAAiB;AACpB,eAAO,sBAAsB;WAC1B,iBAAiB;AACpB,eAAO,sBAAsB;WAC1B,iBAAiB;AACpB,eAAO,sBAAsB;WAC1B,iBAAiB;AACpB,eAAO,sBAAsB;WAC1B,iBAAiB;AACpB,eAAO,sBAAsB;WAC1B,iBAAiB;AACpB,eAAO,sBAAsB;WAC1B,iBAAiB;AACpB,eAAO,sBAAsB;;;AAvCrC,MAAA,SAAA,cAAA;AAAA,SAuEE,SAAA,gBAAO,kBAAoC,iBAAoC;AAC7E,SAAK,eAAe,kBAAkB,gBAAgB;;AAxE1D,SA2EU,iBAAR,wBAAuB,KAAuB,WAA+B;AAC3E,QAAM,KAA4B,IAAI;AADqC,QAGzE,UAYE,KAZF,SACA,iBAWE,KAXF,gBACA,OAUE,KAVF,MACA,uBASE,KATF,sBACA,sBAQE,KARF,qBACA,qBAOE,KAPF,oBACA,sBAME,KANF,qBACA,qBAKE,KALF,oBACA,oBAIE,KAJF,mBACA,qBAGE,KAHF,oBACA,oBAEE,KAFF,mBACA,YACE,KADF;AAGF,QAAI,WAAW,UAAU,SAAS;AAChC,UAAI,SAAS;AACX,WAAG,OAAO,GAAG;aACR;AACL,WAAG,QAAQ,sBAAsB;;AAEnC,gBAAU,UAAU;;AAGtB,QAAI,SAAS;AAEX,UAAM,wBAAwB,mBAAmB,UAAU,kBAAkB,SAAS,UAAU;AAChG,UAAI,yBAAyB,yBAAyB,UAAU,sBAAsB;AACpF,WAAG,oBACD,GAAG,OACH,cAAa,sBAAsB,uBACnC,gBACA;AAEF,kBAAU,uBAAuB;;AAGnC,UAAI,yBAAyB,wBAAwB,UAAU,qBAAqB;AAClF,WAAG,oBAAoB,GAAG,MAAM,cAAa,sBAAsB,sBAAsB,gBAAgB;AACzG,kBAAU,sBAAsB,KAAK;;AAEvC,UAAI,uBAAuB;AACzB,kBAAU,iBAAiB,KAAK;AAChC,kBAAU,OAAO,KAAK;;AAIxB,UACE,uBAAuB,UAAU,sBACjC,wBAAwB,UAAU,uBAClC,uBAAuB,UAAU,oBACjC;AACA,WAAG,kBACD,GAAG,OACH,cAAa,uBAAuB,qBACpC,cAAa,uBAAuB,sBACpC,cAAa,uBAAuB;AAEtC,kBAAU,qBAAqB;AAC/B,kBAAU,sBAAsB;AAChC,kBAAU,qBAAqB;;AAGjC,UACE,sBAAsB,UAAU,qBAChC,uBAAuB,UAAU,sBACjC,sBAAsB,UAAU,mBAChC;AACA,WAAG,kBACD,GAAG,MACH,cAAa,uBAAuB,oBACpC,cAAa,uBAAuB,qBACpC,cAAa,uBAAuB;AAEtC,kBAAU,oBAAoB;AAC9B,kBAAU,qBAAqB;AAC/B,kBAAU,oBAAoB;;AAIhC,UAAI,cAAc,UAAU,WAAW;AACrC,WAAG,YAAY;AACf,kBAAU,YAAY;;;;AA/J9B,SAAA;;ICCa,gBAAb,WAAA;AAAA,0BAAA;AAAA,SAEW,aAAyB,IAAI;AAFxC,SAIW,aAAyB,IAAI;AAJxC,SAMW,eAA6B,IAAI;AAN5C,SAQW,cAA2B,IAAI;;AAR1C,MAAA,SAAA,aAAA;AAAA,SAWE,SAAA,gBAAO,QAAsB;AAC3B,QAAM,mBAAmB,OAAO;AAChC,QAAM,kBAAkB,OAAO;AAC/B,SAAK,WAAW,OAAO,kBAAkB;AACzC,SAAK,WAAW,OAAO,kBAAkB;AACzC,SAAK,aAAa,OAAO,kBAAkB;AAC3C,SAAK,YAAY,OAAO,kBAAkB;;AAjB9C,SAAA;;ACQA,IAAM,uBAAuB,IAAI;AACjC,WAAW;IAKE,SAAb,SAAA,kBAAA;AAAA,iBAAA,SAAA;AAoHE,mBAAY,QAAgB,kBAAoC;AAAA,QAAA;AAC9D,YAAA,iBAAA,KAAA,MAAM,SAAN;AAD8D,UAnHhE,qBAAwC,IAAI;AAmHoB,UAlHhE,oBAkHgE;AAAA,UAjHhE,mBAAgC,IAAI;AAiH4B,UA9GhE,eAAuB;AA8GyC,UA5GhE,sBAA2C;AA4GqB,UA1GtD,UA0GsD;AAAA,UAzGxD,mBAAoC,IAAI,gBAAJ,uBAAA;AAyGoB,UAxGxD,gBAA8B,IAAI,aAAJ,uBAAA;AAwG0B,UAvGxD,cAAsB;AAuGkC,UAtGxD,mBAA2B;AAsG6B,UArGxD,QAAc,IAAI;AAqGsC,UApGxD,YAAqB;AAoGmC,UAnGxD,aAmGwD;AAAA,UAlGxD,aAkGwD;AAAA,UAjGxD,gBAAwB;AAiGgC,UAhGxD,uBAA+B,MAAO;AAgGkB,UA9FxD,WAAW,WAAM;AACvB,UAAI,MAAK,aAAa;AACpB,cAAK,aAAa,sBAAsB,MAAK;AAC7C,YAAI,MAAK,kBAAkB,MAAK,gBAAgB,GAAG;AACjD,gBAAK;AACL,gBAAK,gBAAgB;;aAElB;AACL,cAAK,aAAa,OAAO,WAAW,MAAK,UAAU,MAAK;AACxD,cAAK;;;AAqFuD,UAgKhE,WAA4B;AA9J1B,UAAK,oBAAoB;AACzB,UAAK,kBAAkB,KAAK;AAC5B,UAAK,UAAU;AAEf,yBAAqB,UAArB,uBAAA;AACA,UAAK,cAAc,cAAc,IAAI,MAAJ,uBAAA,QAAgB;AAPa,WAAA;;AApHlE,MAAA,SAAA,QAAA;AAAA,SAmIE,eAAA,sBAAa,MAAuB;AAClC,WAAO,IAAI,OAAO,MAAM;;AApI5B,SA0IE,QAAA,iBAAc;AACZ,SAAK,YAAY;AACjB,yBAAqB,KAAK;AAC1B,iBAAa,KAAK;;AA7ItB,SAmJE,SAAA,kBAAe;AACb,QAAI,CAAC,KAAK;AAAW;AACrB,SAAK,YAAY;AACjB,SAAK,KAAK;AACV,0BAAsB,KAAK;;AAvJ/B,SA6JE,SAAA,kBAAe;AACb,QAAM,OAAO,KAAK;AAClB,QAAM,YAAY,KAAK;AAEvB,SAAK;AACL,kBAAc;AAEd,yBAAqB,kBAAkB,MAAM,WAAW,CAAC,MAAM,KAAK,cAAc;AAElF,QAAM,QAAQ,KAAK,cAAc;AACjC,QAAM,oBAAoB,KAAK;AAC/B,QAAI,OAAO;AACT,wBAAkB;AAClB,wBAAkB,mBAAmB;AACrC,wBAAkB,oBAAoB;AACtC,wBAAkB,uBAAuB;AAEzC,WAAK,QAAQ;;AAGf,SAAK,mBAAmB;AAExB,yBAAqB,kBAAkB,MAAM,YAAY,CAAC,MAAM,KAAK,cAAc;;AAnLvF,SAyLE,MAAA,eAAY;AAEV,yBAAqB,kBAAkB,MAAM,WAAW,CAAC;AACzD,SAAK;AACL,SAAK,QAAQ,IAAI,MAAM,OAAO;;AA7LlC,SAmME,UAAA,mBAAgB;AACd,QAAI,KAAK,eAAe;AAEtB,WAAK,QAAQ,IAAI,MAAM,YAAY;AACnC,2BAAqB,kBAAkB,MAAM,YAAY,CAAC;AAG1D,WAAK;AAEL,WAAK,WAAW;AAEhB,WAAK,cAAc,aAAa;AAChC,WAAK,gBAAgB;AACrB,WAAK,iBAAiB;AACtB,WAAK,mBAAmB;AAExB,WAAK,UAAU;AAEf,WAAK,WAAW;AAChB,WAAK,QAAQ;AAGZ,2BAA6B,WAAW;;;AAzN/C,SAgOE,wBAAA,+BAAsB,QAAmC;AACvD,QAAM,QAAQ,OAAO;AACrB,QAAM,qBAAqB,KAAK;AAChC,QAAI,OAAO,mBAAmB;AAC9B,QAAI,CAAC,MAAM;AACT,UAAM,SAAS,QAAQ;AACvB,UAAI,SAAS,mBAAmB,QAAQ;AACtC,2BAAmB,SAAS;;AAE9B,yBAAmB,SAAS,OAAO,IAAI;;AAEzC,WAAO;;AA3OX,SA8OE,UAAA,iBAAQ,OAAoB;AAC1B,QAAM,UAAU,MAAM;AACtB,QAAM,oBAAoB,KAAK;AAC/B,QAAM,YAAY,KAAK,KAAK;AAC5B,sBAAkB,qBAAqB;AAEvC,UAAM;AAEN,QAAI,QAAQ,SAAS,GAAG;AAGtB,cAAQ,KAAK,SAAC,SAAS,SAAV;AAAA,eAAsB,QAAQ,WAAW,QAAQ;;AAC9D,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,IAAI,GAAG,KAAK;AAC9C,YAAM,SAAS,QAAQ;AACvB,YAAM,eAAe,OAAO;AAC5B,YAAI,OAAO,WAAW,aAAa,qBAAqB;AACtD,4BAAkB,wBAAwB;AAC1C,gBAAM,oBAAoB,kBAAkB,OAAO,aAAa,CAAC,OAAO;AACxE,iBAAO;AACP,gBAAM,oBAAoB,kBAAkB,OAAO,cAAc,CAAC,OAAO;AACzE,4BAAkB,sBAAsB;;;WAGvC;AACL,aAAO,MAAM;;;AAtQnB,SA4QE,cAAA,qBAAY,SAAS;AACnB,WAAO,qBAAqB,YAAY,MAAM;;AA7QlD,UAgRS,kBAAP,yBAAuB,SAAwC;AAC7D,yBAAqB,gBAAgB;;AAjRzC,eAAA,SAAA,CAAA;IAAA,KAAA;IAAA,KAuCE,gBAAqB;AACnB,aAAO,KAAK;;KAxChB;IAAA,KAAA;IAAA,KA+CE,gBAAuC;AACrC,aAAO,KAAK;;KAhDhB;IAAA,KAAA;IAAA,KAuDE,gBAAiC;AAC/B,aAAO,KAAK;;KAxDhB;IAAA,KAAA;IAAA,KA+DE,gBAAiB;AACf,aAAO,KAAK;;KAhEhB;IAAA,KAAA;IAAA,KAuEE,gBAAwB;AACtB,aAAO,KAAK;;KAxEhB;IAAA,KAAA;IAAA,KA+EE,gBAAyB;AACvB,aAAO,KAAK;;IAhFhB,KAmFE,cAAe,OAAe;AAC5B,WAAK,cAAc,KAAK,IAAI,GAAG,KAAK,MAAM;;KApF9C;IAAA,KAAA;IAAA,KA6FE,gBAA8B;AAC5B,aAAO,KAAK;;IA9FhB,KAiGE,cAAoB,OAAe;AACjC,cAAQ,KAAK,IAAI,MAAU;AAC3B,WAAK,mBAAmB;AACxB,WAAK,uBAAuB,MAAO;;KApGvC;IAAA,KAAA;IAAA,KA2GE,gBAAuC;AACrC,aAAO,KAAK;;;AA5GhB,SAAA;EAA4B;ICpBf,aAAb,WAAA;AAAA,yBAAA;;AAAA,eAAA,aAAA,MAAA,CAAA;IAAA,KAAA;IAAA,KAIE,gBAAsC;AACpC,aAAO,OAAO;;;AALlB,SAAA;;ICIa,gBAAb,WAAA;AAAA,4BAAA;;AAAA,MAAA,SAAA,eAAA;AAAA,SAKS,UAAP,iBAAe,QAAsB;;AALvC,SAYS,UAAP,iBAAe,QAAgB,cAA2B;;AAZ5D,SAkBS,WAAP,kBAAgB,QAAgB,cAA2B;;AAlB7D,SAwBS,WAAP,kBAAgB,QAAsB;;AAxBxC,SAAA;;;;;;;;;;ICAa,SAAb,YAAA,WAAA,SAAA,YAAA;AAAA,iBAAA,SAAA;AAAA,qBAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,WAAA,KAAA,MAAA,YAAA,CAAA,MAAA,OAAA,UAAA;AAAA,+BAAA,OAAA,YAAA,eAAA,uBAAA;AAAA,+BAAA,OAAA,iBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,kBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,sBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,qBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,sBAAA,gBAAA,uBAAA;AAAA,WAAA;;AAAA,MAAA,SAAA,QAAA;AAAA,SAuBE,UAAA,mBAAgB;;AAvBlB,SA4BE,WAAA,oBAAiB;;AA5BnB,SAiCE,UAAA,mBAAgB;;AAjClB,SAuCE,WAAA,kBAAS,WAAyB;;AAvCpC,SA6CE,eAAA,sBAAa,WAAyB;;AA7CxC,SAmDE,gBAAA,uBAAc,QAAsB;;AAnDtC,SAyDE,cAAA,qBAAY,QAAsB;;AAzDpC,SA8DE,YAAA,qBAAkB;;AA9DpB,SAmEE,YAAA,qBAAkB;;AAnEpB,SA0EE,WAAA,oBAAiB;AACf,SAAK;;AA3ET,SAmFE,YAAA,qBAAkB;AAChB,QAAM,oBAAoB,KAAK,OAAO;AACtC,QAAM,YAAY,QAAO;AACzB,QAAI,CAAC,KAAK,UAAU;AAClB,wBAAkB,iBAAiB;;AAErC,QAAI,KAAK,aAAa,UAAU,UAAU;AACxC,wBAAkB,kBAAkB;;AAEtC,QAAI,KAAK,iBAAiB,UAAU,cAAc;AAChD,wBAAkB,sBAAsB;;AAE1C,SAAK;;AA/FT,SAuGE,aAAA,sBAAmB;AACjB,QAAM,oBAAoB,KAAK,OAAO;AAGtC,QAAI,KAAK,kBAAkB,IAAI;AAC7B,wBAAkB,oBAAoB;;AAExC,QAAI,KAAK,mBAAmB,IAAI;AAC9B,wBAAkB,qBAAqB;;AAEzC,QAAI,KAAK,uBAAuB,IAAI;AAClC,wBAAkB,yBAAyB;;AAE7C,SAAK;;AApHT,SA4HE,aAAA,sBAAmB;AACjB,SAAK,OAAO,mBAAmB,oBAAoB;;AA7HvD,SAAA;EAA4B,YAA5B,UAAA,gBAAA,0BAAA,SAAA,WAAA,YAAA,CAEG,cAFH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAGsB;;IAHtB,iBAAA,0BAAA,SAAA,WAAA,iBAAA,CAKG,cALH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAM0B;;IAN1B,iBAAA,0BAAA,SAAA,WAAA,kBAAA,CAQG,cARH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAS2B;;IAT3B,iBAAA,0BAAA,SAAA,WAAA,sBAAA,CAWG,cAXH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAY+B;;IAZ/B,iBAAA,0BAAA,SAAA,WAAA,qBAAA,CAcG,cAdH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAe8B;;IAf9B,iBAAA,0BAAA,SAAA,WAAA,sBAAA,CAiBG,cAjBH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAkB+B;;IAlB/B;;;;;;;;;;;;;;;;ICQsB,WAAtB,YAAA,WAAA,YAAA,SAAA,YAAA;AAAA,iBAAA,WAAA;AA0DE,qBAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,WAAA,KAAA,MAAM,WAAN;AAD0B,+BAAA,OAAA,cAAA,eAAA,uBAAA;AAAA,+BAAA,OAAA,YAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,kBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,kBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,sBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,mBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,wBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,WAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,aAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,cAAA,iBAAA,uBAAA;AAAA,+BAAA,OAAA,gBAAA,iBAAA,uBAAA;AAAA,+BAAA,OAAA,iBAAA,iBAAA,uBAAA;AAE1B,QAAM,YAAY,UAAS;AAC3B,UAAK,kBAAkB,MAAK,WAAW,UAAU;AACjD,UAAK,uBAAuB,MAAK,OAAO,UAAU;AAClD,UAAK,WAAW,aAAa;AALH,WAAA;;AA1D9B,MAAA,SAAA,UAAA;AAAA,SAqEE,oBAAA,2BAAkB,SAAwB;AACxC,QAAM,aAAa,KAAK;AACxB,QAAM,cAAc,KAAK,OAAO,UAAU;AAC1C,QAAM,WAAW,KAAK;AACtB,QAAM,YAAY,KAAK;AACvB,QAAM,cAAc,KAAK;AACzB,QAAM,eAAe,KAAK;AAE1B,WAAO,SAAS,QAAQ,QAAQ,YAAY,aAAa;AACzD,WAAO,SAAS,QAAQ,oBAAoB,aAAa;AACzD,WAAO,OAAO,UAAU;AACxB,WAAO,OAAO,aAAa;AAC3B,iBAAa;AAEb,eAAW,UAAU,UAAS,sBAAsB,KAAK,OAAO,UAAU;AAC1E,eAAW,UAAU,UAAS,sBAAsB;AACpD,eAAW,UAAU,UAAS,mBAAmB;AACjD,eAAW,UAAU,UAAS,oBAAoB;AAClD,eAAW,UAAU,UAAS,sBAAsB;AACpD,eAAW,UAAU,UAAS,uBAAuB;;AAxFzD,SA8FE,aAAA,sBAAmB;AACjB,QAAM,OAAO,KAAK;AAClB,QAAI,MAAM;AACR,WAAK;AACL,WAAK,uBAAuB;;AAE9B,SAAK,WAAW,aAAa;;AApGjC,SAyGE,SAAA,gBAAO,WAAyB;;AAzGlC,SA2GY,gBAAV,uBAAwB,aAAwB;;AA3GlD,SA6GE,YAAA,qBAAY;AACV,QAAM,oBAAoB,KAAK,OAAO;AACtC,QAAI,KAAK,iBAAiB;AACxB,wBAAkB,qBAAqB;;AAEzC,sBAAkB,YAAY;;AAlHlC,SAqHE,aAAA,sBAAa;AACX,QAAM,oBAAoB,KAAK,OAAO;AACtC,QAAI,KAAK,iBAAiB;AACxB,wBAAkB,wBAAwB;;AAE5C,sBAAkB,eAAe;;AA1HrC,SA6HE,UAAA,iBAAQ,QAAgB;AACtB,SAAK,OAAO;;AA9HhB,eAAA,WAAA,CAAA;IAAA,KAAA;IAAA,KA8CE,gBAA0B;AACxB,UAAM,aAAa,KAAK;AACxB,UAAI,WAAW,MAAM;AACnB,aAAK,cAAc,KAAK;AACxB,mBAAW,OAAO;;AAEpB,aAAO,KAAK;;;AApDhB,SAAA;EAAuC,YAAvC,UACiB,uBAAuB,OAAO,kBAAkB,eADjE,UAEiB,uBAAuB,OAAO,kBAAkB,eAFjE,UAGiB,oBAAoB,OAAO,kBAAkB,YAH9D,UAIiB,qBAAqB,OAAO,kBAAkB,aAJ/D,UAKiB,uBAAuB,OAAO,kBAAkB,eALjE,UAMiB,wBAAwB,OAAO,kBAAkB,gBANlE,UAAA,gBAAA,0BAAA,SAAA,WAAA,cAAA,CASG,YATH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAUoC,IAAI,WAAW,gBAAgB;;IAVnE,iBAAA,0BAAA,SAAA,WAAA,YAAA,CAYG,cAZH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAasB;;IAbtB,iBAAA,0BAAA,SAAA,WAAA,kBAAA,CAgBG,cAhBH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAiB2B;;IAjB3B,iBAAA,0BAAA,SAAA,WAAA,kBAAA,CAoBG,cApBH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAqB2B;;IArB3B,iBAAA,0BAAA,SAAA,WAAA,sBAAA,CAwBG,cAxBH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAyB8C,IAAI;;IAzBlD,iBAAA,0BAAA,SAAA,WAAA,mBAAA,CA2BG,cA3BH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WA4BuC;;IA5BvC,iBAAA,0BAAA,SAAA,WAAA,wBAAA,CA8BG,cA9BH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA;IAAA,iBAAA,0BAAA,SAAA,WAAA,WAAA,CAgCG,YAhCH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAiCiC,IAAI,YAAY,IAAI,WAAW,IAAI;;IAjCpE,iBAAA,0BAAA,SAAA,WAAA,aAAA,CAkCG,cAlCH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAmC8B,IAAI;;IAnClC,kBAAA,0BAAA,SAAA,WAAA,cAAA,CAoCG,cApCH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAqC+B,IAAI;;IArCnC,kBAAA,0BAAA,SAAA,WAAA,gBAAA,CAsCG,cAtCH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAuCiC,IAAI;;IAvCrC,kBAAA,0BAAA,SAAA,WAAA,iBAAA,CAwCG,cAxCH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAyCkC,IAAI;;IAzCtC;ICZY;UAAA,YAAA;AAAA,aAAA,WAAA,YAAA,KAAA;AAAA,aAAA,WAAA,WAAA,KAAA;AAAA,aAAA,WAAA,YAAA,KAAA;GAAA,aAAA,aAAA;ICWC,WAAb,SAAA,YAAA;AAAA,iBAAA,WAAA;AAeE,qBAAY,QAAgB,QAAgB;AAAA,QAAA;AAC1C,YAAA,WAAA,KAAA,MAAM,WAAN;AAD0C,UAb5C,SAa4C;AAAA,UAX5C,kBAAmC,gBAAgB;AAWP,UATnC,aAAyB,IAAI,WAAW,gBAAgB;AASrB,UAPnC,cAA2B,IAAI;AAStC,UAAK,SAAS;AAF4B,WAAA;;AAf9C,MAAA,SAAA,UAAA;AAAA,SAuBE,QAAA,kBAAkB;AAChB,QAAM,OAAO,IAAI,UAAS,KAAK,SAAS,KAAK;AAC7C,SAAK,QAAQ;AACb,WAAO;;AA1BX,SAiCE,UAAA,iBAAQ,QAAwB;AAC9B,WAAO,SAAS,KAAK;AACrB,WAAO,kBAAkB,KAAK;AAC9B,SAAK,WAAW,QAAQ,OAAO;AAC/B,iBAAa,gBAAgB,KAAK,aAAa,OAAO;;AArC1D,SA2CE,eAAA,sBAAa,OAAqB;AAChC,eAAA,UAAM,aAAN,KAAA,MAAmB;AACnB,SAAK,WAAW,aAAa;;AA7CjC,SAoDE,aAAA,oBAAW,eAA8B;;AApD3C,SAyDY,aAAV,sBAA6B;;AAzD/B,SAAA;EAA8B;ICAjB,qBAAb,SAAA,WAAA;AAAA,iBAAA,qBAAA;AAmKE,+BAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,UAAA,KAAA,MAAM,QAAQ,OAAO,KAAK,mBAA1B;AAD0B,UAlKpB,iBAAwB,IAAI,MAAM,GAAG,GAAG,GAAG;AAkKvB,UAjKpB,gBAAuB,IAAI,MAAM,GAAG,GAAG,GAAG;AAiKtB,UAhKpB,iBAAwB,IAAI,MAAM,GAAG,GAAG,GAAG;AAgKvB,UA/JpB,mBA+JoB;AAAA,UA9JpB,kBA8JoB;AAAA,UA7JpB,mBA6JoB;AAAA,UA5JpB,aAAqB;AA4JD,UA3JpB,aAAwB,UAAU;AA2Jd,UA1JpB,eAAwB;AA4J9B,UAAK,WAAW,YAAY;AAE5B,UAAK,gBAAgB,MAAK;AAC1B,UAAK,eAAe,MAAK;AACzB,UAAK,gBAAgB,MAAK;AAC1B,UAAK,YAAY,MAAK;AAPI,WAAA;;AAnK9B,MAAA,SAAA,oBAAA;AAAA,SAgLE,QAAA,kBAA4B;AAC1B,QAAI,OAA2B,IAAI,oBAAmB,KAAK;AAC3D,SAAK,QAAQ;AACb,WAAO;;AAnLX,eAAA,qBAAA,CAAA;IAAA,KAAA;IAAA,KAcE,gBAA2B;AACzB,aAAO,KAAK;;IAfhB,KAkBE,cAAkB,OAAc;AAC9B,WAAK,iBAAiB;AACtB,WAAK,WAAW,SAAS,mBAAmB;;KApBhD;IAAA,KAAA;IAAA,KA0BE,gBAAiC;AAC/B,aAAO,KAAK;;IA3BhB,KA8BE,cAAoB,OAAkB;AACpC,WAAK,mBAAmB;AAExB,UAAI,OAAO;AACT,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,qBAAqB;aAC3C;AACL,aAAK,WAAW,aAAa;;;KArCnC;IAAA,KAAA;IAAA,KA4CE,gBAA0B;AACxB,aAAO,KAAK;;IA7ChB,KAgDE,cAAiB,OAAc;AAC7B,WAAK,gBAAgB;AACrB,WAAK,WAAW,SAAS,kBAAkB;;KAlD/C;IAAA,KAAA;IAAA,KAwDE,gBAAgC;AAC9B,aAAO,KAAK;;IAzDhB,KA4DE,cAAmB,OAAkB;AACnC,WAAK,kBAAkB;AAEvB,UAAI,OAAO;AACT,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,oBAAoB;aAC1C;AACL,aAAK,WAAW,aAAa;;;KAnEnC;IAAA,KAAA;IAAA,KA0EE,gBAA2B;AACzB,aAAO,KAAK;;IA3EhB,KA8EE,cAAkB,OAAc;AAC9B,WAAK,iBAAiB;AACtB,WAAK,WAAW,SAAS,mBAAmB;;KAhFhD;IAAA,KAAA;IAAA,KAsFE,gBAAiC;AAC/B,aAAO,KAAK;;IAvFhB,KA0FE,cAAoB,OAAkB;AACpC,WAAK,mBAAmB;AAExB,UAAI,OAAO;AACT,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,qBAAqB;aAC3C;AACL,aAAK,WAAW,aAAa;;;KAjGnC;IAAA,KAAA;IAAA,KAwGE,gBAAwB;AACtB,aAAO,KAAK;;IAzGhB,KA4GE,cAAc,OAAe;AAC3B,WAAK,aAAa;AAClB,WAAK,WAAW,SAAS,eAAe;;KA9G5C;IAAA,KAAA;IAAA,KAoHE,gBAA2B;AACzB,aAAO,KAAK;;IArHhB,KAwHE,cAAc,GAAc;AAC1B,UAAM,SAAS,KAAK,YAAY,WAAW;AAC3C,UAAM,aAAa,KAAK,YAAY;AAEpC,cAAQ;aACD,UAAU;aACV,UAAU;AACb;AACE,mBAAO,yBAAyB,OAAO,yBAAyB,YAAY;AAC5E,mBAAO,8BAA8B,OAAO,8BAA8B,YAAY;AACtF,mBAAO,sBAAsB,OAAO,sBAAsB,eAAe;AACzE,uBAAW,eAAe;AAC1B,iBAAK,kBAAkB,gBAAgB;;AAEzC;aACG,UAAU;AACb;AACE,mBAAO,yBAAyB,OAAO,yBAAyB,YAAY;AAC5E,mBAAO,8BAA8B,OAAO,8BAA8B,YAAY;AACtF,mBAAO,sBAAsB,OAAO,sBAAsB,eAAe;AACzE,uBAAW,eAAe;AAC1B,iBAAK,kBAAkB,gBAAgB;;AAEzC;;;KA/IR;IAAA,KAAA;IAAA,KAuJE,gBAA2B;AACzB,aAAO,KAAK;;IAxJhB,KA2JE,cAAgB,GAAY;AAC1B,UAAI,GAAG;AACL,aAAK,YAAY,YAAY,WAAW,SAAS;aAC5C;AACL,aAAK,YAAY,YAAY,WAAW,SAAS;;;;AA/JvD,SAAA;EAAwC;ICClB,kBAAtB,SAAA,WAAA;AAAA,iBAAA,kBAAA;AA2cE,4BAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,UAAA,KAAA,MAAM,QAAQ,OAAO,KAAK,WAA1B;AAD0B,UA1cpB,aAAoB,IAAI,MAAM,GAAG,GAAG,GAAG;AA0cnB,UAzcpB,eAAuB;AAycH,UAxcpB,iBAAiB,IAAI,MAAM,GAAG,GAAG,GAAG;AAwchB,UAvcpB,qBAA6B;AAucT,UAtcpB,eAAuB;AAscH,UArcpB,mBAA2B;AAqcP,UApcpB,mBAA2B,IAAI;AAocX,UAncpB,mBAA2B;AAmcP,UAlcpB,uBAA+B;AAkcX,UAjcpB,uBAA+B;AAicX,UAhcpB,aAAa,IAAI,OAAO,KAAK,GAAK,GAAK,GAAK,GAAK,KAAK,GAAK,GAAK,GAAK,GAAK,KAAK,GAAK,KAAK,KAAK,KAAK;AAgc/E,UA/bpB,oBA+boB;AAAA,UA9bpB,kBA8boB;AAAA,UA7bpB,iBA6boB;AAAA,UA5bpB,mBA4boB;AAAA,UA3bpB,oBA2boB;AAAA,UA1bpB,qBA0boB;AAAA,UAzbpB,qBAyboB;AAAA,UAxbpB,uBAwboB;AAAA,UAtbpB,QAAiB;AAsbG,UArbpB,YAAqB;AAqbD,UApbpB,SAAkB;AAobE,UAnbpB,qBAA8B;AAmbV,UAlbpB,qBAA8B;AAkbV,UAjbpB,aAAwB,UAAU;AAibd,UAhbpB,eAAwB;AAkb9B,UAAK,WAAW,YAAY;AAE5B,UAAK,YAAY,MAAK;AACtB,UAAK,cAAc,MAAK;AACxB,UAAK,gBAAgB,MAAK;AAC1B,UAAK,oBAAoB,MAAK;AAC9B,UAAK,cAAc,MAAK;AACxB,UAAK,kBAAkB,MAAK;AAC5B,UAAK,kBAAkB,MAAK;AAC5B,UAAK,kBAAkB,MAAK;AAC5B,UAAK,sBAAsB,MAAK;AAChC,UAAK,sBAAsB,MAAK;AAEhC,UAAK,OAAO,MAAK;AACjB,UAAK,WAAW,MAAK;AACrB,UAAK,QAAQ,MAAK;AAClB,UAAK,oBAAoB,MAAK;AAC9B,UAAK,oBAAoB,MAAK;AAC9B,UAAK,YAAY,MAAK;AApBI,WAAA;;AA3c9B,eAAA,kBAAA,CAAA;IAAA,KAAA;IAAA,KAgCE,gBAAuB;AACrB,aAAO,KAAK;;IAjChB,KAoCE,cAAc,GAAU;AACtB,WAAK,aAAa;AAClB,WAAK,WAAW,SAAS,qBAAqB;;KAtClD;IAAA,KAAA;IAAA,KA4CE,gBAAkC;AAChC,aAAO,KAAK;;IA7ChB,KAgDE,cAAqB,GAAc;AACjC,WAAK,oBAAoB;AAEzB,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,sBAAsB;aAC5C;AACL,aAAK,WAAW,aAAa;;;KAvDnC;IAAA,KAAA;IAAA,KA8DE,gBAAsB;AACpB,aAAO,KAAK,UAAU;;IA/D1B,KAkEE,cAAY,KAAa;AACvB,WAAK,UAAU,IAAI;;KAnEvB;IAAA,KAAA;IAAA,KAyEE,gBAAgC;AAC9B,aAAO,KAAK;;IA1EhB,KA6EE,cAAmB,GAAc;AAC/B,WAAK,kBAAkB;AAEvB,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,oBAAoB;aAC1C;AACL,aAAK,WAAW,aAAa;;;KApFnC;IAAA,KAAA;IAAA,KA2FE,gBAA+B;AAC7B,aAAO,KAAK;;IA5FhB,KA+FE,cAAkB,GAAc;AAC9B,WAAK,iBAAiB;AAEtB,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,mBAAmB;aACzC;AACL,aAAK,WAAW,aAAa;;;KAtGnC;IAAA,KAAA;IAAA,KA6GE,gBAA0B;AACxB,aAAO,KAAK;;IA9GhB,KAiHE,cAAgB,GAAW;AACzB,WAAK,eAAe;AACpB,WAAK,WAAW,SAAS,iBAAiB;;KAnH9C;IAAA,KAAA;IAAA,KAyHE,gBAAiC;AAC/B,aAAO,KAAK;;IA1HhB,KA6HE,cAAoB,GAAc;AAChC,WAAK,mBAAmB;AAExB,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,qBAAqB;aAC3C;AACL,aAAK,WAAW,aAAa;;;KApInC;IAAA,KAAA;IAAA,KA2IE,gBAA2B;AACzB,aAAO,KAAK;;IA5IhB,KA+IE,cAAkB,GAAU;AAC1B,WAAK,iBAAiB;AACtB,WAAK,WAAW,SAAS,oBAAoB;;KAjJjD;IAAA,KAAA;IAAA,KAuJE,gBAAkC;AAChC,aAAO,KAAK;;IAxJhB,KA2JE,cAAqB,GAAc;AACjC,WAAK,oBAAoB;AAEzB,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,sBAAsB;aAC5C;AACL,aAAK,WAAW,aAAa;;;KAlKnC;IAAA,KAAA;IAAA,KAyKE,gBAAgC;AAC9B,aAAO,KAAK;;IA1KhB,KA6KE,cAAsB,GAAW;AAC/B,WAAK,qBAAqB;AAC1B,WAAK,WAAW,SAAS,uBAAuB;;KA/KpD;IAAA,KAAA;IAAA,KAsLE,gBAA0B;AACxB,aAAO,KAAK;;IAvLhB,KA0LE,cAAgB,GAAW;AACzB,WAAK,eAAe;AACpB,WAAK,WAAW,SAAS,iBAAiB;;KA5L9C;IAAA,KAAA;IAAA,KAmME,gBAAwC;AACtC,aAAO,KAAK;;IApMhB,KAuME,cAAsB,GAAmB;AACvC,WAAK,qBAAqB;AAE1B,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,uBAAuB;aAC7C;AACL,aAAK,WAAW,aAAa;;;KA9MnC;IAAA,KAAA;IAAA,KAqNE,gBAA8B;AAC5B,aAAO,KAAK;;IAtNhB,KAyNE,cAAoB,GAAW;AAC7B,WAAK,mBAAmB;AACxB,WAAK,WAAW,SAAS,qBAAqB;;KA3NlD;IAAA,KAAA;IAAA,KAiOE,gBAA8B;AAC5B,aAAO,KAAK;;IAlOhB,KAqOE,cAAoB,GAAW;AAC7B,WAAK,mBAAmB;AACxB,WAAK,WAAW,SAAS,qBAAqB;;KAvOlD;IAAA,KAAA;IAAA,KA6OE,gBAA8B;AAC5B,aAAO,KAAK;;IA9OhB,KAiPE,cAAoB,GAAW;AAC7B,WAAK,mBAAmB;AACxB,WAAK,WAAW,SAAS,qBAAqB;;KAnPlD;IAAA,KAAA;IAAA,KAyPE,gBAAmC;AACjC,aAAO,KAAK;;IA1PhB,KA6PE,cAAsB,GAAc;AAClC,WAAK,qBAAqB;AAE1B,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,uBAAuB;AAClD,aAAK,WAAW,UAAU,eAAe,KAAK;aACzC;AACL,aAAK,WAAW,aAAa;;;KArQnC;IAAA,KAAA;IAAA,KA4QE,gBAAqC;AACnC,aAAO,KAAK;;IA7QhB,KAgRE,cAAwB,GAAc;AACpC,WAAK,uBAAuB;AAE5B,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,yBAAyB;aAC/C;AACL,aAAK,WAAW,aAAa;;;KAvRnC;IAAA,KAAA;IAAA,KA8RE,gBAAkC;AAChC,aAAO,KAAK;;IA/RhB,KAkSE,cAAwB,GAAW;AACjC,WAAK,uBAAuB;AAC5B,WAAK,WAAW,SAAS,yBAAyB;;KApStD;IAAA,KAAA;IAAA,KA0SE,gBAAkC;AAChC,aAAO,KAAK;;IA3ShB,KA8SE,cAAwB,GAAW;AACjC,WAAK,uBAAuB;AAC5B,WAAK,WAAW,SAAS,yBAAyB;;KAhTtD;IAAA,KAAA;IAAA,KAsTE,gBAAoB;AAClB,aAAO,KAAK;;IAvThB,KA0TE,cAAS,GAAY;AACnB,WAAK,QAAQ;AAEb,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;aACvB;AACL,aAAK,WAAW,aAAa;;;KAhUnC;IAAA,KAAA;IAAA,KAuUE,gBAAwB;AACtB,aAAO,KAAK;;IAxUhB,KA2UE,cAAa,GAAY;AACvB,WAAK,YAAY;AAEjB,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;aACvB;AACL,aAAK,WAAW,aAAa;;;KAjVnC;IAAA,KAAA;IAAA,KAwVE,gBAAqB;AACnB,aAAO,KAAK;;IAzVhB,KA4VE,cAAU,GAAY;AACpB,WAAK,SAAS;AAEd,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;aACvB;AACL,aAAK,WAAW,aAAa;;;KAlWnC;IAAA,KAAA;IAAA,KAyWE,gBAAiC;AAC/B,aAAO,KAAK;;IA1WhB,KA6WE,cAAsB,GAAY;AAChC,WAAK,qBAAqB;AAE1B,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;aACvB;AACL,aAAK,WAAW,aAAa;;;KAnXnC;IAAA,KAAA;IAAA,KA0XE,gBAAiC;AAC/B,aAAO,KAAK;;IA3XhB,KA8XE,cAAsB,GAAY;AAChC,WAAK,qBAAqB;AAE1B,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;aACvB;AACL,aAAK,WAAW,aAAa;;;KApYnC;IAAA,KAAA;IAAA,KA2YE,gBAA2B;AACzB,aAAO,KAAK;;IA5YhB,KA+YE,cAAc,GAAc;AAC1B,UAAM,SAAS,KAAK,YAAY,WAAW;AAC3C,UAAM,aAAa,KAAK,YAAY;AAEpC,WAAK,WAAW,aAAa;AAC7B,WAAK,WAAW,aAAa;AAE7B,cAAQ;aACD,UAAU;AACb;AACE,mBAAO,yBAAyB,OAAO,yBAAyB,YAAY;AAC5E,mBAAO,8BAA8B,OAAO,8BAA8B,YAAY;AACtF,mBAAO,sBAAsB,OAAO,sBAAsB,eAAe;AACzE,uBAAW,eAAe;AAC1B,iBAAK,kBAAkB,gBAAgB;;AAEzC;aACG,UAAU;AACb;AACE,iBAAK,WAAW,YAAY;AAC5B,mBAAO,yBAAyB,OAAO,yBAAyB,YAAY;AAC5E,mBAAO,8BAA8B,OAAO,8BAA8B,YAAY;AACtF,mBAAO,sBAAsB,OAAO,sBAAsB,eAAe;AACzE,uBAAW,eAAe;AAC1B,iBAAK,kBAAkB,gBAAgB;;AAEzC;aACG,UAAU;AACb;AACE,iBAAK,WAAW,YAAY;AAC5B,mBAAO,yBAAyB,OAAO,yBAAyB,YAAY;AAC5E,mBAAO,8BAA8B,OAAO,8BAA8B,YAAY;AACtF,mBAAO,sBAAsB,OAAO,sBAAsB,eAAe;AACzE,uBAAW,eAAe;AAC1B,iBAAK,kBAAkB,gBAAgB;;AAEzC;;;KAnbR;IAAA,KAAA;IAAA,KA2bE,gBAA2B;AACzB,aAAO,KAAK;;IA5bhB,KA+bE,cAAgB,GAAY;AAC1B,UAAI,GAAG;AACL,aAAK,YAAY,YAAY,WAAW,SAAS;aAC5C;AACL,aAAK,YAAY,YAAY,WAAW,SAAS;;;;AAncvD,SAAA;EAA8C;ICRjC,cAAb,SAAA,kBAAA;AAAA,iBAAA,cAAA;AAyFE,wBAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,iBAAA,KAAA,MAAM,WAAN;AAD0B,UAxFpB,kBAA0B;AAwFN,UAvFpB,mBAA2B;AAuFP,UAtFpB,mBAsFoB;AAAA,UArFpB,oBAqFoB;AAAA,UApFpB,4BAoFoB;AAE1B,UAAK,WAAW,YAAY;AAE5B,UAAK,iBAAiB,MAAK;AAC3B,UAAK,kBAAkB,MAAK;AALF,WAAA;;AAzF9B,MAAA,SAAA,aAAA;AAAA,SAoGE,QAAA,kBAAqB;AACnB,QAAM,OAAO,IAAI,aAAY,KAAK;AAClC,SAAK,QAAQ;AACb,WAAO;;AAvGX,eAAA,cAAA,CAAA;IAAA,KAAA;IAAA,KAUE,gBAA6B;AAC3B,aAAO,KAAK;;IAXhB,KAcE,cAAmB,GAAW;AAC5B,WAAK,kBAAkB;AACvB,WAAK,WAAW,SAAS,WAAW;;KAhBxC;IAAA,KAAA;IAAA,KAsBE,gBAA8B;AAC5B,aAAO,KAAK;;IAvBhB,KA0BE,cAAoB,GAAW;AAC7B,WAAK,mBAAmB;AACxB,WAAK,WAAW,SAAS,eAAe;;KA5B5C;IAAA,KAAA;IAAA,KAkCE,gBAAiC;AAC/B,aAAO,KAAK;;IAnChB,KAsCE,cAAoB,GAAc;AAChC,WAAK,mBAAmB;AAExB,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,qBAAqB;aAC3C;AACL,aAAK,WAAW,aAAa;;;KA7CnC;IAAA,KAAA;IAAA,KAoDE,gBAAkC;AAChC,aAAO,KAAK;;IArDhB,KAwDE,cAAqB,GAAc;AACjC,WAAK,oBAAoB;AAEzB,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,sBAAsB;aAC5C;AACL,aAAK,WAAW,aAAa;;;KA/DnC;IAAA,KAAA;IAAA,KAsEE,gBAA0C;AACxC,aAAO,KAAK;;IAvEhB,KA0EE,cAA6B,GAAc;AACzC,WAAK,4BAA4B;AAEjC,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,8BAA8B;aACpD;AACL,aAAK,WAAW,aAAa;;;;AAjFnC,SAAA;EAAiC;ICCpB,sBAAb,SAAA,kBAAA;AAAA,iBAAA,sBAAA;AAmDE,gCAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,iBAAA,KAAA,MAAM,WAAN;AAD0B,UAlDpB,iBAAiB,IAAI,MAAM,GAAG,GAAG,GAAG;AAkDhB,UAjDpB,oBAA4B;AAiDR,UAhDpB,6BAgDoB;AAG1B,UAAK,gBAAgB,MAAK;AAC1B,UAAK,mBAAmB,MAAK;AAJH,WAAA;;AAnD9B,MAAA,SAAA,qBAAA;AAAA,SA6DE,QAAA,kBAA6B;AAC3B,QAAM,OAAO,IAAI,qBAAoB,KAAK;AAC1C,SAAK,QAAQ;AACb,WAAO;;AAhEX,eAAA,sBAAA,CAAA;IAAA,KAAA;IAAA,KAQE,gBAA2B;AACzB,aAAO,KAAK;;IAThB,KAYE,cAAkB,GAAU;AAC1B,WAAK,iBAAiB;AACtB,WAAK,WAAW,SAAS,oBAAoB;;KAdjD;IAAA,KAAA;IAAA,KAoBE,gBAA+B;AAC7B,aAAO,KAAK;;IArBhB,KAwBE,cAAqB,GAAW;AAC9B,WAAK,oBAAoB;AACzB,WAAK,WAAW,SAAS,sBAAsB;;KA1BnD;IAAA,KAAA;IAAA,KAgCE,gBAA2C;AACzC,aAAO,KAAK;;IAjChB,KAoCE,cAA8B,GAAc;AAC1C,WAAK,6BAA6B;AAElC,UAAI,GAAG;AACL,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,+BAA+B;aACrD;AACL,aAAK,WAAW,aAAa;;;;AA3CnC,SAAA;EAAyC;ICM5B,gBAAb,SAAA,WAAA;AAAA,iBAAA,gBAAA;AA0FE,0BAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,UAAA,KAAA,MAAM,QAAQ,OAAO,KAAK,aAA1B;AAD0B,UAzFpB,aAAoB,IAAI,MAAM,GAAG,GAAG,GAAG;AAyFnB,UAxFpB,oBAwFoB;AAAA,UAvFpB,aAAwB,UAAU;AAuFd,UAtFpB,eAAwB;AAwF9B,UAAK,WAAW,YAAY;AAE5B,UAAK,YAAY,MAAK;AAJI,WAAA;;AA1F9B,MAAA,SAAA,eAAA;AAAA,SAoGE,QAAA,kBAAuB;AACrB,QAAI,OAAO,IAAI,eAAc,KAAK;AAClC,SAAK,QAAQ;AACb,WAAO;;AAvGX,eAAA,gBAAA,CAAA;IAAA,KAAA;IAAA,KASE,gBAAuB;AACrB,aAAO,KAAK;;IAVhB,KAaE,cAAc,OAAc;AAC1B,WAAK,aAAa;AAClB,WAAK,WAAW,SAAS,eAAe;;KAf5C;IAAA,KAAA;IAAA,KAqBE,gBAAkC;AAChC,aAAO,KAAK;;IAtBhB,KAyBE,cAAqB,OAAkB;AACrC,WAAK,oBAAoB;AAEzB,UAAI,OAAO;AACT,aAAK,WAAW,YAAY;AAC5B,aAAK,WAAW,WAAW,sBAAsB;aAC5C;AACL,aAAK,WAAW,aAAa;;;KAhCnC;IAAA,KAAA;IAAA,KAuCE,gBAA2B;AACzB,aAAO,KAAK;;IAxChB,KA2CE,cAAc,GAAc;AAC1B,UAAM,SAAS,KAAK,YAAY,WAAW;AAC3C,UAAM,aAAa,KAAK,YAAY;AAEpC,cAAQ;aACD,UAAU;aACV,UAAU;AACb;AACE,mBAAO,yBAAyB,OAAO,yBAAyB,YAAY;AAC5E,mBAAO,8BAA8B,OAAO,8BAA8B,YAAY;AACtF,mBAAO,sBAAsB,OAAO,sBAAsB,eAAe;AACzE,uBAAW,eAAe;AAC1B,iBAAK,kBAAkB,gBAAgB;;AAEzC;aACG,UAAU;AACb;AACE,mBAAO,yBAAyB,OAAO,yBAAyB,YAAY;AAC5E,mBAAO,8BAA8B,OAAO,8BAA8B,YAAY;AACtF,mBAAO,sBAAsB,OAAO,sBAAsB,eAAe;AACzE,uBAAW,eAAe;AAC1B,iBAAK,kBAAkB,gBAAgB;;AAEzC;;;KAlER;IAAA,KAAA;IAAA,KA0EE,gBAA2B;AACzB,aAAO,KAAK;;IA3EhB,KA8EE,cAAgB,GAAY;AAC1B,UAAI,GAAG;AACL,aAAK,YAAY,YAAY,WAAW,SAAS;aAC5C;AACL,aAAK,YAAY,YAAY,WAAW,SAAS;;;;AAlFvD,SAAA;EAAmC;ACNnC,IAAI,UAAU;IAKR,aAAA,WAAA;AAoBJ,uBACE,MACA,UACA,cACA,iBACA,MACA,YACA;AAAA,QANA,SAMA,QAAA;AANA,aAMA,gBANqB;;AAMrB,QALA,aAKA,QAAA;AALA,iBAAW;;AAKX,QAJA,iBAIA,QAAA;AAJA,qBAAe;;AAIf,QAHA,oBAGA,QAAA;AAHA,wBAAkB;;AAGlB,QAFA,SAEA,QAAA;AAFA,aAAO;;AAEP,QADA,eACA,QAAA;AADA,mBAAa,IAAI,QAAQ,GAAG,GAAG,GAAG;;AAClC,SA1BK,OA0BL;AAAA,SAzBK,UAyBL;AAAA,SAxBK,WAwBL;AAAA,SAvBK,eAuBL;AAAA,SAtBK,kBAsBL;AAAA,SArBK,OAqBL;AAAA,SApBK,iBAoBL;AAAA,SAnBK,YAmBL;AAAA,SAlBM,cAkBN;AACA,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,eAAe;AACpB,SAAK,kBAAkB;AACvB,SAAK,OAAO,QAAQ,MAAM;AAC1B,SAAK,iBAAiB;AAEtB,SAAK,YAAY,UAAU;AAC3B,SAAK,cAAc;;;SAmBrB,SAAA,gBAAO,QAAgB,OAAoB;;SAO3C,YAAA,mBAAU,QAAgB,OAAoB;;SAO9C,aAAA,oBAAW,QAAgB,OAAoB;;;;SA3B/C,gBAAiB;AACf,aAAO,KAAK;;SAGd,cAAe,GAAG;AAChB,WAAK,cAAc;;;;;ICrDV,qBAAb,SAAA,aAAA;AAAA,iBAAA,qBAAA;AAGE,+BAAY,MAAyB,UAAe;AAAA,QAAA;AAAA,QAAxC,SAAwC,QAAA;AAAxC,aAAO;;AAAiC,QAAf,aAAe,QAAA;AAAf,iBAAW;;AAC9C,YAAA,YAAA,KAAA,MAAM,MAAM,aAAZ;AADkD,UAF5C,eAE4C;AAGlD,UAAK,YAAY,UAAU;AAC3B,UAAK,iBAAiB;AAEtB,UAAK,eAAe;AAN8B,WAAA;;AAHtD,MAAA,SAAA,oBAAA;AAAA,SAgBE,YAAA,qBAAY;AACV,SAAK,UAAU,KAAK;;AAjBxB,SAoBE,SAAA,gBAAO,QAAQ;AACb,QAAM,MAAM,OAAO;AAEnB,SAAK,gBAAgB,OAAO;AAC5B,QAAM,QAAQ,KAAK;AACnB,QAAM,WAAW,OAAO,gBAAgB;AAExC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAM,OAAO,MAAM;AACnB,UAAI,WACF,UACA,KAAK,cACL,KAAK,QACL,KAAK,WACL,KAAK,SACL,KAAK,YACL,KAAK;;AAIT,UAAM,SAAS;;AAxCnB,SA2CE,aAAA,oBAAW,QAAQ;AACjB,QAAI,KAAK,SAAS;AAChB,aAAO,eAAe,YAAY,OAAO,QAAQ,OAAO,kBAAkB;;;AA7ChF,SAiDE,kBAAA,yBAAgB,QAAQ;AACtB,QAAI,KAAK,aAAa,SAAS,GAAG;AAChC,WAAK,eAAe,KAAK,aAAa,KAAK,SAAU,OAAO,OAAO;AACjE,YAAI,MAAM,UAAU,mBAAmB,MAAM,UAAU,gBAAgB;AACrE,cAAM,OAAO,MAAM,UAAU,KAAK;AAClC,cAAM,OAAO,MAAM,UAAU,KAAK;AAElC,cAAM,MAAM,QAAQ,gBAAgB,MAAM,UAAU,QAAQ,gBAAgB,MAAM;AAClF,iBAAO;eACF;AACL,iBAAO,MAAM,UAAU,iBAAiB,MAAM,UAAU;;;;;AA3DlE,SAiEE,aAAA,oBAAW,WAAW,cAAc,QAAQ,WAAW,SAAS,YAAY,QAAgB;AAC1F,SAAK,aAAa,KAAK;MACrB;MACA;MACA;MACA;MACA;MACA;MACA;;;AAzEN,eAAA,qBAAA,CAAA;IAAA,KAAA;IAAA,KAYE,gBAAa;AACX,aAAO,KAAK,aAAa,SAAS;;;AAbtC,SAAA;EAAwC;ICW3B,sBAAb,WAAA;AAaE,gCAAY,QAAgB;AAAA,SAZ5B,yBAY4B;AAAA,SAXlB,UAWkB;AAAA,SAVpB,SAUoB;AAAA,SATpB,eASoB;AAAA,SARlB,mBAQkB;AAAA,SAPpB,mBAOoB;AAAA,SANpB,sBAMoB;AAC1B,SAAK,UAAU;AACf,SAAK,SAAS,IAAI;AAElB,SAAK,mBAAmB;AACxB,SAAK,eAAe,IAAI,WAAW,WAAW,GAAG,MAAM,MAAM;AAC7D,SAAK,cAAc,KAAK;AAGxB,QAAM,WAAY,KAAK,yBAAyB,IAAI,SAAS,OAAO,QAAQ,OAAO,KAAK;AACxF,QAAM,SAAS,SAAS,YAAY,WAAW;AAC/C,WAAO,yBAAyB,OAAO,yBAAyB,YAAY;AAC5E,WAAO,8BAA8B,OAAO,8BAA8B,YAAY;AACtF,WAAO,sBAAsB,OAAO,sBAAsB,eAAe;AACzE,aAAS,YAAY,WAAW,eAAe;AAC/C,aAAS,kBAAkB,gBAAgB;AAC3C,aAAS,YAAY,YAAY,WAAW,SAAS;;AA7BzD,MAAA,SAAA,qBAAA;AAAA,SAgDE,gBAAA,uBACE,YACA,UACA,cACA,iBACA,MACA,YACA;AAAA,QALA,aAKA,QAAA;AALA,iBAAmB;;AAKnB,QAJA,iBAIA,QAAA;AAJA,qBAA6B;;AAI7B,QAHA,oBAGA,QAAA;AAHA,wBAA4B;;AAG5B,QAFA,SAEA,QAAA;AAFA,aAAc;;AAEd,QADA,eACA,QAAA;AADA,mBAAa,IAAI,QAAQ,GAAG,GAAG,GAAG;;AAElC,QAAI,OAAO,eAAe,UAAU;AAClC,UAAM,aAAa,IAAI,WAAW,YAAY,UAAU,cAAc,iBAAiB,MAAM;AAC7F,WAAK,iBAAiB,KAAK;eAClB,sBAAsB,YAAY;AAC3C,WAAK,iBAAiB,KAAK;;AAG7B,SAAK,iBAAiB,KAAK,SAAU,IAAI,IAAI;AAC3C,aAAO,GAAG,WAAW,GAAG;;;AAhE9B,SAwEE,mBAAA,0BAAiB,YAAuC;AACtD,QAAI;AACJ,QAAI,OAAO,eAAe;AAAU,aAAO,KAAK,cAAc;aACrD,sBAAsB;AAAY,aAAO;AAClD,QAAI,MAAM;AACR,UAAM,MAAM,KAAK,iBAAiB,QAAQ;AAC1C,WAAK,iBAAiB,OAAO,KAAK;;;AA9ExC,SAsFE,gBAAA,uBAAc,MAAc;AAC1B,aAAS,IAAI,GAAG,MAAM,KAAK,iBAAiB,QAAQ,IAAI,KAAK,KAAK;AAChE,UAAM,OAAO,KAAK,iBAAiB;AACnC,UAAI,KAAK,SAAS;AAAM,eAAO;;AAGjC,WAAO;;AA5FX,SAyGE,UAAA,mBAAU;;AAzGZ,SAgHE,SAAA,gBAAO,SAAwB,UAA4B;AACzD,QAAM,SAAS,KAAK;AACpB,QAAM,QAAQ,KAAK;AAEnB,UAAM;AAEN,WAAO,OAAO,mBAAmB,WAAW;AAE5C,UAAM,KAAK,OAAO,OAAO,UAAU;AAEnC,QAAI,KAAK;AAAkB,WAAK,iBAAiB,UAAU;AAE3D,QAAI,KAAK,uBAAuB,KAAK,oBAAoB,QAAQ;AAE/D,UAAI,KAAK,aAAa,cAAc;AAClC,YAAI,CAAC,KAAK,kBAAkB;AAC1B,eAAK,mBAAmB,IAAI,WAAW,yBAAyB,GAAG,MAAM,MAAM;AAC/E,eAAK,iBAAiB,YAAY,UAAU;AAC5C,eAAK,cAAc,KAAK;;AAE1B,aAAK,iBAAiB,UAAU;;;AAIpC,aAAS,IAAI,GAAG,MAAM,KAAK,iBAAiB,QAAQ,IAAI,KAAK,KAAK;AAChE,WAAK,gBAAgB,KAAK,iBAAiB,IAAI,QAAQ;;;AAzI7D,SA6IU,kBAAR,yBAAwB,MAAkB,QAAgB,UAA4B;AACpF,SAAK,UAAU,QAAQ,KAAK;AAE5B,QAAI,KAAK,SAAS;AAChB,UAAM,MAAM,OAAO,MAAM,OAAO;AAChC,UAAM,eAAe,OAAO,gBAAgB,KAAK;AACjD,UAAI,mBAAmB,cAAc;AACrC,UAAI,oBAAoB,cAAc;AACtC,UAAI,kBAAkB,OAAO,QAAQ,KAAK,WAAW,KAAK;AAE1D,UAAI,KAAK,gBAAgB;AACvB,aAAK,OAAO,QAAQ,KAAK;aACpB;AACL,aAAK,MAAM,OAAO,QAAQ,KAAK,iBAAiB,KAAK;;AAGvD,UAAI,iBAAiB;;AAGvB,SAAK,WAAW,QAAQ,KAAK;;AAhKjC,SAuKE,gBAAA,uBAAc,SAAwB;AACpC,SAAK,OAAO,cAAc;;AAxK9B,SA2KE,aAAA,oBAAW,WAAsB,cAAc,QAAQ,WAAW,SAAS,YAAY,QAAgB;AACrG,QAAK,UAAkB,cAAc;AACnC,UAAI,CAAC,KAAK,qBAAqB;AAC7B,aAAK,sBAAsB,IAAI;AAC/B,aAAK,cAAc,KAAK;;AAG1B,WAAK,oBAAoB,WAAW,WAAW,cAAc,QAAQ,WAAW,SAAS,YAAY;AACrG;;AAGF,SAAK,MAAM,WAAW,WAAW,cAAc,QAAQ,WAAW,SAAS,YAAY;;AAtL3F,eAAA,sBAAA,CAAA;IAAA,KAAA;IAAA,KAmCE,gBAAwB;AACtB,aAAO,KAAK;;KApChB;IAAA,KAAA;IAAA,KAkGE,gBAAyB;AACvB,aAAO,KAAK;;;AAnGhB,SAAA;;ICba,gBAAb,WAAA;AAAA,4BAAA;AAAA,SAcE,UAdF;AAAA,SAgBE,qBAA6B,IAAI;;AAhBnC,iBAMS,oBAAP,2BAAyB,QAA+B;AACtD,QAAM,UAAU,eAAc;AAC9B,YAAQ,UAAU;AAClB,WAAO,SAAS,OAAO,kBAAkB,OAAO,YAAY,QAAQ;AACpE,WAAO;;AAVX,SAAA;;AAAa,cACI,iBAAgC,IAAI;;;;;;;;;;;;;;;;;;;;ICgB/C,WAAA,qBAAA;;AAAA,SACG,WAAW,IAAI;AADlB,SAEG,WAAW,IAAI;AAFlB,SAGG,WAAW,IAAI;IAMZ;UAAA,aAAA;AAAA,cAAA,YAAA,cAAA,KAAA;AAAA,cAAA,YAAA,gBAAA,KAAA;AAAA,cAAA,YAAA,WAAA,KAAA;AAAA,cAAA,YAAA,UAAA,KAAA;GAAA,cAAA,cAAA;IAeC,SAAb,QADC,aAAa,YACd,KAAA,WAAA,aAAA,WAAA,UAAA,SAAA,YAAA;AAAA,iBAAA,SAAA;AA6QE,mBAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,WAAA,KAAA,MAAM,WAAN;AAD0B,UApQ5B,WAAmB;AAoQS,UAjQ5B,uBAAgC;AAiQJ,UA3P5B,cAAqB,MAAM;AA2PC,UAxPnB,aAAyB,IAAI,WAAW,gBAAgB;AAwPrC,UArP5B,qBAA4C,IAAI;AAqPpB,+BAAA,OAAA,YAAA,eAAA,uBAAA;AAAA,+BAAA,OAAA,mBAAA,gBAAA,uBAAA;AAAA,UA7OpB,kBAA2B;AA6OP,UA5OpB,oBAAoB;AA4OA,UA3OpB,aAAwB,UAAU;AA2Od,UA1OpB,iBAAyB;AA0OL,UAzOpB,gBAAwB;AAyOJ,UAxOpB,eAAuB;AAwOH,UAvOpB,oBAA4B;AAuOR,UAtOpB,qBAAqB;AAsOD,UArOpB,qBAA8B;AAqOV,UApOpB,yBAAkC;AAoOd,UAnOpB,qBAAyC;AAmOrB,UAlOpB,gBAA8B;AAkOV,+BAAA,OAAA,0BAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,cAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,sBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,uBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,qBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,eAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,oBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,aAAA,iBAAA,uBAAA;AAAA,+BAAA,OAAA,4BAAA,iBAAA,uBAAA;AAAA,+BAAA,OAAA,sBAAA,iBAAA,uBAAA;AAAA,+BAAA,OAAA,mBAAA,iBAAA,uBAAA;AAAA,+BAAA,OAAA,mBAAA,eAAA,uBAAA;AAG1B,QAAM,YAAY,MAAK,OAAO;AAC9B,UAAK,aAAa;AAClB,UAAK,qBAAqB,UAAU;AACpC,UAAK,sBAAsB,UAAU;AACrC,UAAK,yBAAyB,UAAU;AACxC,UAAK,kBAAkB,IAAI,oBAAJ,uBAAA;AACvB,UAAK,WAAW,aAAa;AAE7B,UAAK;AAXqB,WAAA;;AA7Q9B,MAAA,SAAA,QAAA;AAAA,SA8RE,wBAAA,iCAA8B;AAC5B,SAAK,oBAAoB;AACzB,SAAK;;AAhST,SAsSE,mBAAA,4BAAyB;AACvB,SAAK,qBAAqB;AAC1B,SAAK;;AAxST,SAiTE,uBAAA,8BAAqB,OAAgB,KAAuB;AAC1D,WAAO,SAAS,KAAK,kBAAkB,KAAK,YAAY,SAAS;AACjE,aAAS,SAAS,SAAS,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG;AACtD,YAAQ,UAAU,SAAS,UAAU,SAAS,UAAU,SAAS;AAEjE,QAAM,IAAI,SAAS,SAAS;AAC5B,QAAM,KAAK,SAAS,SAAS,IAAI;AACjC,QAAM,KAAK,SAAS,SAAS,IAAI;AACjC,QAAM,KAAK,SAAS,SAAS,IAAI;AAGjC,QAAI,IAAK,MAAK,KAAO;AACrB,QAAI,IAAK,KAAM,MAAM;AACrB,QAAI,IAAI;AACR,QAAI,IAAI;AACR,WAAO;;AAhUX,SAyUE,uBAAA,8BAAqB,OAAgB,KAAuB;AAC1D,QAAM,iBAAiB,KAAK;AAC5B,WAAO,KAAK,2BAA2B,OAAO,gBAAgB;;AA3UlE,SAoVE,qBAAA,4BAAmB,OAAgB,KAAe;AAChD,QAAM,YAAY,SAAS;AAE3B,cAAU,SAAS,MAAM,GAAG,MAAM,GAAG;AACrC,QAAM,SAAS,KAAK,qBAAqB,WAAW,IAAI;AAExD,cAAU,IAAI;AACd,QAAM,WAAoB,KAAK,2BAA2B,WAAW,KAAK,iBAAiB;AAC3F,YAAQ,SAAS,UAAU,QAAQ,IAAI;AACvC,QAAI,UAAU;AAEd,WAAO;;AA/VX,SAwWE,wBAAA,+BAAmD,OAA0B,KAAW;AACtF,QAAM,SAAS,KAAK,OAAO;AAC3B,QAAM,WAAW,KAAK;AACtB,QAAI,IAAK,OAAM,IAAI,OAAO,QAAQ,SAAS,KAAK,SAAS;AACzD,QAAI,IAAK,OAAM,IAAI,OAAO,SAAS,SAAS,KAAK,SAAS;AAC1D,WAAO;;AA7WX,SAsXE,wBAAA,+BAA6D,OAAU,KAAW;AAChF,QAAM,SAAS,KAAK,OAAO;AAC3B,QAAM,WAAW,KAAK;AACtB,QAAI,IAAK,UAAS,IAAI,MAAM,IAAI,SAAS,KAAK,OAAO;AACrD,QAAI,IAAK,UAAS,IAAI,MAAM,IAAI,SAAS,KAAK,OAAO;AACrD,WAAO;;AA3XX,SAoYE,qBAAA,4BAAmB,OAAgB,KAAuB;AACxD,SAAK,qBAAqB,OAAO;AACjC,WAAO,KAAK,sBAAsB,KAAK;;AAtY3C,SA+YE,qBAAA,4BAAmB,OAAgB,KAAuB;AACxD,SAAK,sBAAsB,OAAO;AAClC,WAAO,KAAK,qBAAqB,KAAK;;AAjZ1C,SAwZE,SAAA,gBAAO,UAAkC;AAEvC,QAAM,UAAU,cAAc,kBAAkB;AAChD,QAAI,KAAK,wBAAyB,MAAK,uBAAuB,QAAQ,KAAK,yBAAyB;AAClG,WAAK,SAAS,oBAAoB,QAAQ;AAC1C,WAAK,uBAAuB,OAAO;AACnC,WAAK,yBAAyB;;AAGhC,SAAK,kBAAkB;AAGvB,0BAAsB,gBACpB,KAAK,MAAM,WAAW,kBACtB,KAAK,WAAW,kBAChB,KAAK;AAGP,SAAK,gBAAgB,OAAO,SAAS;AACrC,SAAK,QAAQ;;AA3ajB,SAkbE,YAAA,qBAAY;AACV,SAAK,OAAO,MAAM,mBAAmB;;AAnbzC,SA0bE,cAAA,uBAAc;AACZ,SAAK,OAAO,MAAM,mBAAmB;;AA3bzC,SAkcE,aAAA,sBAAa;AAAA,QAAA;AACX,IAAA,yBAAA,KAAK,qBAAL,QAAA,0BAAA,SAAA,SAAA,sBAAsB;AACtB,SAAK,oBAAoB;AACzB,SAAK,mBAAmB;AACxB,SAAK,WAAW,aAAa;;AAtcjC,SAycU,iBAAR,0BAAyB;AACvB,SAAK,yBAAyB;AAC9B,SAAK,qBAAqB;AAC1B,SAAK,qBAAqB;AAC1B,SAAK,oBAAoB,OAAO;;AA7cpC,SAgdU,6BAAR,oCAAmC,OAAgB,gBAAwB,KAAuB;AAEhG,QAAM,QAAQ,MAAM,IAAI,IAAI;AAE5B,QAAM,YAAY,SAAS;AAC3B,cAAU,SAAS,MAAM,IAAI,IAAI,GAAG,IAAI,MAAM,IAAI,GAAG,OAAO;AAC5D,YAAQ,UAAU,WAAW,gBAAgB;AAC7C,QAAM,OAAO,IAAM,UAAU;AAC7B,QAAI,IAAI,UAAU,IAAI;AACtB,QAAI,IAAI,UAAU,IAAI;AACtB,QAAI,IAAI,UAAU,IAAI;AACtB,WAAO;;AA3dX,SA8dU,oBAAR,2BAA0B,SAAwB;AAChD,QAAM,aAAa,KAAK;AACxB,eAAW,UAAU,QAAO,qBAAqB,KAAK;AACtD,eAAW,UAAU,QAAO,2BAA2B,KAAK;AAC5D,eAAW,UAAU,QAAO,mBAAmB,QAAQ;AACvD,eAAW,UAAU,QAAO,4BAA4B,KAAK;AAC7D,eAAW,UAAU,QAAO,kCAAkC,KAAK;AACnE,eAAW,WAAW,QAAO,yBAAyB,KAAK,WAAW;;AAre1E,SAihBE,eAAA,sBACE,WACA,iBACM;AAAA,QAFN,cAEM,QAAA;AAFN,kBAAuB,UAAU;;AAE3B,QADN,oBACM,QAAA;AADN,wBAA2B,IAAI,QAAQ,MAAM,MAAM,MAAM;;AAEzD,SAAK,aAAa;AAClB,SAAK,mBAAmB;AACxB,SAAK,gBAAgB,kBAAkB,aAAa;AACpD,SAAK,gBAAgB,kBAAkB,YAAY;;AAxhBvD,eAAA,SAAA,CAAA;IAAA,KAAA;IAAA,KAyEE,gBAA4B;AAC1B,aAAO,KAAK;;IA1EhB,KA6EE,cAAkB,OAAe;AAC/B,WAAK,iBAAiB;AACtB,WAAK;;KA/ET;IAAA,KAAA;IAAA,KAqFE,gBAA2B;AACzB,aAAO,KAAK;;IAtFhB,KAyFE,cAAiB,OAAe;AAC9B,WAAK,gBAAgB;AACrB,WAAK;;KA3FT;IAAA,KAAA;IAAA,KAiGE,gBAA0B;AACxB,aAAO,KAAK;;IAlGhB,KAqGE,cAAgB,OAAe;AAC7B,WAAK,eAAe;AACpB,WAAK;;KAvGT;IAAA,KAAA;IAAA,KA6GE,gBAA0B;AAAA,UAAA;AACxB,UAAM,SAAS,KAAK,QAAQ,OAAO;AACnC,aAAA,yBAAO,KAAK,uBAAZ,OAAA,wBAAmC,OAAO,QAAQ,KAAK,UAAU,IAAM,QAAO,SAAS,KAAK,UAAU;;IA/G1G,KAkHE,cAAgB,OAAe;AAC7B,WAAK,qBAAqB;AAC1B,WAAK;;KApHT;IAAA,KAAA;IAAA,KA2HE,gBAAwB;AACtB,aAAO,KAAK;;IA5HhB,KA+HE,cAAa,OAAgB;AAC3B,UAAI,UAAU,KAAK,WAAW;AAC5B,cAAM,QAAQ,KAAK;;AAErB,WAAK;;KAnIT;IAAA,KAAA;IAAA,KAyIE,gBAA8B;AAC5B,aAAO,KAAK;;IA1IhB,KA6IE,cAAmB,OAAgB;AACjC,WAAK,kBAAkB;AACvB,WAAK;;KA/IT;IAAA,KAAA;IAAA,KAqJE,gBAA+B;AAC7B,aAAO,KAAK;;IAtJhB,KAyJE,cAAqB,OAAe;AAClC,WAAK,oBAAoB;AACzB,WAAK;;KA3JT;IAAA,KAAA;IAAA,KAiKE,gBAA6B;AAC3B,YAAM;;IAlKV,KAwKE,cAAe,OAAmB;AAChC,YAAM;;KAzKV;IAAA,KAAA;IAAA,KA+KE,gBAA+B;AAC7B,aAAO,KAAK;;IAhLhB,KAmLE,cAAoB,OAAgB;AAClC,WAAK,aAAa,KAAK,YAAY;;KApLvC;IAAA,KAAA;IAAA,KA2LE,gBAAyB;AACvB,YAAM,IAAI,MAAM;;KA5LpB;IAAA,KAAA;IAAA,KAkME,gBAAmC;AAEjC,UAAI,KAAK,mBAAmB,MAAM;AAChC,aAAK,mBAAmB,OAAO;AAC/B,eAAO,OAAO,KAAK,WAAW,aAAa,KAAK;;AAElD,aAAO,KAAK;;KAxMhB;IAAA,KAAA;IAAA,KAoNE,gBAA+B;AAC7B,UAAM,SAAS,KAAK,QAAQ,OAAO;AACnC,UACG,EAAC,KAAK,sBAAsB,KAAK,sBAClC,KAAK,gBAAgB,MAAM,OAAO,SAClC,KAAK,gBAAgB,MAAM,OAAO,QAClC;AACA,eAAO,KAAK;;AAEd,WAAK,qBAAqB;AAC1B,WAAK,gBAAgB,IAAI,OAAO;AAChC,WAAK,gBAAgB,IAAI,OAAO;AAChC,UAAM,cAAc,KAAK;AACzB,UAAI,CAAC,KAAK,iBAAiB;AACzB,eAAO,YACL,SAAS,eAAe,KAAK,eAC7B,aACA,KAAK,gBACL,KAAK,eACL,KAAK;aAEF;AACL,YAAM,QAAQ,KAAK,oBAAoB;AACvC,YAAM,SAAS,KAAK;AACpB,eAAO,MAAM,CAAC,OAAO,OAAO,CAAC,QAAQ,QAAQ,KAAK,gBAAgB,KAAK,eAAe,KAAK;;AAE7F,aAAO,KAAK;;IA9OhB,KA8ME,cAAqB,OAAe;AAClC,WAAK,oBAAoB;AACzB,WAAK,oBAAoB;AACzB,WAAK;;KAjNT;IAAA,KAAA;IAAA,KAqPE,gBAAyB;AACvB,cAAQ,IAAI;AACZ,aAAO;;IAvPX,KA0PE,cAAc,OAAgB;AAC5B,cAAQ,IAAI;;KA3PhB;IAAA,KAAA;IAAA,KAiQE,gBAAwC;AACtC,aAAO,KAAK;;IAlQhB,KAqQE,cAAiB,OAA4B;AAC3C,WAAK,gBAAgB;;KAtQzB;IAAA,KAAA;IAAA,KA4eE,gBAA6B;AAC3B,UAAI,KAAK,oBAAoB,MAAM;AACjC,aAAK,oBAAoB,OAAO;AAChC,eAAO,SAAS,KAAK,mBAAmB,KAAK,yBAAyB,KAAK;;AAE7E,aAAO,KAAK;;KAjfhB;IAAA,KAAA;IAAA,KAwfE,gBAAgD;AAC9C,UAAI,KAAK,oBAAoB;AAC3B,aAAK,qBAAqB;AAC1B,eAAO,OAAO,KAAK,kBAAkB,KAAK;;AAE5C,aAAO,KAAK;;KA7fhB;IAAA,KAAA;IAAA,KAsgBE,gBAA0C;AACxC,WAAK,WAAW,YAAY,QAAQ,KAAK;AACzC,aAAO,KAAK;;;AAxgBhB,SAAA;EAA4B,YAA5B,QACiB,sBAAsB,OAAO,kBAAkB,cADhE,QAEiB,4BAA4B,OAAO,kBAAkB,cAFtE,QAGiB,oBAAoB,OAAO,kBAAkB,YAH9D,QAIiB,6BAA6B,OAAO,kBAAkB,iBAJvE,QAKiB,mCAAmC,OAAO,kBAAkB,iBAL7E,QAMiB,0BAA0B,OAAO,kBAAkB,gBANpE,UAAA,gBAAA,0BAAA,UAAA,WAAA,YAAA,CA0BG,YA1BH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WA2B8B,IAAI;;IA3BlC,iBAAA,0BAAA,UAAA,WAAA,mBAAA,CA6BG,cA7BH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA;IAAA,iBAAA,0BAAA,UAAA,WAAA,0BAAA,CA6CG,cA7CH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA;IAAA,iBAAA,0BAAA,UAAA,WAAA,cAAA,CA+CG,cA/CH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA;IAAA,iBAAA,0BAAA,UAAA,WAAA,sBAAA,CAiDG,cAjDH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA;IAAA,iBAAA,0BAAA,UAAA,WAAA,uBAAA,CAmDG,cAnDH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA;IAAA,iBAAA,0BAAA,UAAA,WAAA,qBAAA,CAqDG,YArDH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAsDsC,IAAI;;IAtD1C,iBAAA,0BAAA,UAAA,WAAA,eAAA,CAuDG,YAvDH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAwDgC,IAAI;;IAxDpC,iBAAA,0BAAA,UAAA,WAAA,oBAAA,CAyDG,YAzDH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WA0DsC,IAAI;;IA1D1C,kBAAA,0BAAA,UAAA,WAAA,aAAA,CA2DG,YA3DH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WA4D+B,IAAI,QAAQ,GAAG,GAAG,GAAG;;IA5DpD,kBAAA,0BAAA,UAAA,WAAA,4BAAA,CA6DG,YA7DH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WA8D6C,IAAI;;IA9DjD,kBAAA,0BAAA,UAAA,WAAA,sBAAA,CA+DG,YA/DH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAgEuC,IAAI;;IAhE3C,kBAAA,0BAAA,UAAA,WAAA,mBAAA,CAiEG,YAjEH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAkEqC,IAAI,QAAQ,GAAG;;IAlEpD,gBAAA,0BAAA,UAAA,WAAA,mBAAA,CAmEG,YAnEH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAoEoC,IAAI;;IApExC,eAAA;AC7CA,IAAM,WAAW;EACf,MAAM;EACN,MAAM;EACN,KAAK;EACL,QAAQ;EACR,KAAK;EACL,KAAK;EACL,KAAK;EACL,MAAM;EACN,KAAK;;AAGP,IAAM,oBAAoB;AAC1B,IAAM,iBAAiB;AACvB,IAAM,kBAAkB;AAcjB,iBAAoB,KAAa,QAA6C;AAAA,MAA7C,WAA6C,QAAA;AAA7C,aAAwB;;AAC9D,SAAO,IAAI,aAAa,SAAC,SAAS,QAAQ,aAAgB;AAAA,QAAA,oBAAA,uBAAA,iBAAA;AACxD,QAAM,aAAU,sBAAG,OAAO,eAAV,OAAA,qBAAwB;AACxC,QAAM,gBAAa,yBAAG,OAAO,kBAAV,OAAA,wBAA2B;AAC9C,WAAO,UAAP,mBAAiB,OAAO,YAAxB,OAAA,kBAAmC;AACnC,WAAO,OAAP,gBAAc,OAAO,SAArB,OAAA,eAA6B,mBAAmB;AAChD,QAAM,cAAc,OAAO,SAAS,UAAU,eAAe;AAC7D,QAAI;AACJ,QAAM,WAAW,IAAI,cACnB,WAAM;AACJ,aAAO,YAAe,KAAK,QACxB,WAAW,aACX,KAAK,SAAC,KAAQ;AACb,gBAAQ;AACR,iBAAS;SAEV,MAAM,SAAC,KAAD;AAAA,eAAU,YAAY;;OAEjC,YACA;AAEF,aAAS,MAAM,WAAM;AACnB,aAAO;;;;AAKb,sBAAyB,KAAa,QAAwC;AAC5E,SAAO,IAAI,aAAa,SAAC,SAAS,QAAW;AAAA,QACnC,UAAY,OAAZ;AACR,QAAM,MAAM,IAAI;AAChB,QAAM,UAAU,oBAAM;AACpB,aAAO,IAAI,MAAJ,aAAqB,MAArB;;AAET,QAAI,UAAU;AAEd,QAAI,UAAU;AAEd,QAAM,YAAY,WAAW,WAAM;AACjC,aAAO,IAAI,MAAJ,aAAqB,MAArB;OACN;AAEH,QAAI,SAAU,SAAC,YAAc;AAC3B,aAAO,WAAM;AAEX,8BAAsB,WAAM;AAE1B,kBAAQ;;AAEV,qBAAa;;MAEd;AAEH,QAAI,cAAc;AAElB,QAAI,MAAM;;;AAId,oBAAuB,KAAa,QAAwC;AAC1E,SAAO,IAAI,aAAa,SAAC,SAAS,QAAQ,aAAgB;AAAA,QAAA;AACxD,QAAM,MAAM,IAAI;AAChB,QAAI,UAAU,OAAO;AACrB,WAAO,SAAP,kBAAgB,OAAO,WAAvB,OAAA,iBAAiC;AACjC,QAAI,SAAS,WAAM;AAAA,UAAA;AACjB,UAAI,IAAI,SAAS,OAAO,IAAI,UAAU,KAAK;AACzC,eAAO,IAAI,MAAJ,0BAAkC;AACzC;;AAEF,UAAM,SAAM,iBAAG,IAAI,aAAP,OAAA,gBAAmB,IAAI;AACnC,cAAQ;;AAEV,QAAI,UAAU,WAAM;AAClB,aAAO,IAAI,MAAJ,0BAAkC;;AAE3C,QAAI,YAAY,WAAM;AACpB,aAAO,IAAI,MAAJ,2BAAmC;;AAE5C,QAAI,aAAa,SAAC,GAAM;AACtB,kBAAY,EAAE,SAAS,EAAE;;AAE3B,QAAI,KAAK,OAAO,QAAQ,KAAK;AAC7B,QAAI,kBAAkB,OAAO,gBAAgB;AAE7C,QAAI,eAAe,OAAO;AAC1B,QAAM,UAAU,OAAO;AACvB,QAAI,SAAS;AACX,aAAO,KAAK,SAAS,QAAQ,SAAC,MAAS;AACrC,YAAI,iBAAiB,MAAM,QAAQ;;;AAGvC,QAAI,KAAK,OAAO;;;AAIpB,4BAA4B,KAAa;AACvC,MAAM,UAAU,IAAI,UAAU,IAAI,YAAY,OAAO;AACrD,SAAO,SAAS;;IAGL,gBAAb,WAAA;AAGE,0BACU,UACA,YACA,UACR;AAAA,SAHQ,WAAA;AAGR,SAFQ,aAAA;AAER,SADQ,WAAA;AACR,SANM,aAAqB;AAM3B,SALM,gBAAgB;AAKtB,SAIM,OAJN;AACA,SAAK,OAAO,KAAK,KAAK,KAAK;;AAR/B,MAAA,SAAA,eAAA;AAAA,SAYE,QAAA,eAAM,MAAuB;AAC3B,SAAK,OAAO;AACZ,SAAK;;AAdT,SAiBE,OAAA,gBAAa;AACX,iBAAa,KAAK;;AAlBtB,SAqBU,OAAR,gBAAqB;AAAA,QAAA,QAAA;AACnB,QAAI,KAAK,iBAAiB,KAAK,YAAY;AACzC,WAAK,QAAQ,KAAK;AAClB;;AAEF,SAAK;AACL,SAAK,SAAS,KAAK,eAAe,KAAK,WAAM;AAE3C,YAAK,aAAa,WAAW,MAAK,MAAM,MAAK;;;AA7BnD,SAAA;;IC3HsB,SAGpB,iBAA4B,UAAmB;AAAA,OAAnB,WAAA;AAAmB,OAF/C,UAAsE;;ICL5D;UAAA,YAAA;AAAA,aAAA,WAAA,UAAA,KAAA;AAAA,aAAA,WAAA,UAAA,KAAA;AAAA,aAAA,WAAA,YAAA,KAAA;AAAA,aAAA,WAAA,eAAA,KAAA;AAAA,aAAA,WAAA,iBAAA,KAAA;AAAA,aAAA,WAAA,cAAA,KAAA;AAAA,aAAA,WAAA,UAAA,KAAA;AAAA,aAAA,WAAA,mBAAA,KAAA;AAAA,aAAA,WAAA,YAAA,KAAA;AAAA,aAAA,WAAA,SAAA,KAAA;AAAA,aAAA,WAAA,aAAA,MAAA;GAAA,aAAA,aAAA;ICAC,kBAAb,SAAA,eAAA;AAAA,iBAAA,kBAAA;AAEE,8BAAc;AAAA,QAAA;AACZ,YAAA,cAAA,KAAA,SAAA;AADY,UADd,YACc;AAGZ,UAAK,YAAY;AAHL,WAAA;;AAFhB,MAAA,SAAA,iBAAA;AAAA,SAYE,iBAAA,wBAAe,UAAoB;AACjC,SAAK,UAAU,KAAK;;AAbxB,SAoBE,iBAAA,wBAAe,UAAoB;AACjC,QAAM,QAAQ,KAAK,UAAU,QAAQ;AACrC,QAAI,SAAS,IAAI;AACf,WAAK,UAAU,OAAO,OAAO;;;AAvBnC,SAAA;EAAqC;ICIxB,WAAb,SAAA,YAAA;AAAA,iBAAA,WAAA;AAIE,qBAAY,QAAgB;AAAA,WAC1B,WAAA,KAAA,MAAM,WADoB;;AAJ9B,MAAA,SAAA,UAAA;AAAA,SAQE,YAAA,qBAAkB;AAChB,SAAK,MAAM,YAAY,iBAAiB,eAAe;;AAT3D,SAYE,aAAA,sBAAmB;AACjB,SAAK,MAAM,YAAY,iBAAiB,eAAe;;AAb3D,SAAA;EAA8B;ICCjB,eAAb,SAAA,WAAA;AAAA,iBAAA,eAAA;AAYE,yBAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,UAAA,KAAA,MAAM,WAAN;AAD0B,UATrB,SASqB;AAAA,UARrB,SAQqB;AAAA,UAPpB,WAA2B;AAOP,UANpB,cAAuB;AAQ7B,UAAK,SAAS,IAAI,QAAQ,MAAM,MAAM;AACtC,UAAK,SAAS,IAAI,QAAQ,KAAK,KAAK;AAHV,WAAA;;AAZ9B,MAAA,SAAA,cAAA;AAAA,SAuBE,eAAA,sBAAa,KAAc,KAAc;AACvC,SAAK,SAAS;AACd,SAAK,SAAS;AAEd,SAAK,cAAc;;AA3BvB,SAmCE,mBAAA,0BAAiB,QAAiB,MAAe;AAC/C,QAAM,WAAW,cAAa;AAC9B,YAAQ,MAAM,MAAM,KAAK;AACzB,YAAQ,IAAI,QAAQ,UAAU,KAAK;AACnC,YAAQ,SAAS,QAAQ,UAAU,KAAK;AAExC,SAAK,cAAc;;AAzCvB,SA+CE,aAAA,sBAAwB;AACtB,QAAI,KAAK,aAAa;AACpB,UAAM,OAAO,KAAK,OAAO;AACzB,UAAM,OAAO,KAAK,OAAO;AACzB,UAAM,OAAO,KAAK,OAAO;AACzB,UAAM,IAAI,KAAK,OAAO,IAAI;AAC1B,UAAM,IAAI,KAAK,OAAO,IAAI;AAC1B,UAAM,IAAI,KAAK,OAAO,IAAI;AAE1B,UAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,iBAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,eAAK,SAAS,KAAK,IAAI;;;AAI3B,WAAK,SAAS,GAAG,SAAS,OAAO,GAAG,OAAO,GAAG,OAAO;AACrD,WAAK,SAAS,GAAG,SAAS,MAAM,OAAO,GAAG,OAAO;AACjD,WAAK,SAAS,GAAG,SAAS,MAAM,MAAM,OAAO;AAC7C,WAAK,SAAS,GAAG,SAAS,OAAO,GAAG,MAAM,OAAO;AACjD,WAAK,SAAS,GAAG,SAAS,OAAO,GAAG,OAAO,GAAG;AAC9C,WAAK,SAAS,GAAG,SAAS,MAAM,OAAO,GAAG;AAC1C,WAAK,SAAS,GAAG,SAAS,MAAM,MAAM;AACtC,WAAK,SAAS,GAAG,SAAS,OAAO,GAAG,MAAM;AAE1C,WAAK,cAAc;;AAGrB,WAAO,KAAK;;AA1EhB,SAAA;EAAkC;AAArB,aACI,YAAqB,IAAI;ICH7B,kBAAb,SAAA,WAAA;AAAA,iBAAA,kBAAA;AAQE,4BAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,UAAA,KAAA,MAAM,WAAN;AAD0B,UAP5B,SAO4B;AAAA,UAL5B,SAK4B;AAI1B,UAAK,SAAS,IAAI;AAGlB,UAAK,SAAS;AAPY,WAAA;;AAR9B,MAAA,SAAA,iBAAA;AAAA,SAuBE,YAAA,mBAAU,QAAiB,QAAgB;AACzC,SAAK,SAAS;AACd,SAAK,SAAS;;AAzBlB,SAAA;EAAqC;ICCxB,gBAAb,SAAA,WAAA;AAAA,iBAAA,gBAAA;AASE,0BAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,UAAA,KAAA,MAAM,WAAN;AAD0B,UAR5B,aAQ4B;AAAA,UAN5B,SAM4B;AAI1B,UAAK,aAAa,IAAI;AAGtB,UAAK,SAAS,IAAI,QAAQ,GAAG,GAAG;AAPN,WAAA;;AAT9B,MAAA,SAAA,eAAA;AAAA,SAwBE,WAAA,kBAAS,OAAgB,QAAiB;AACxC,SAAK,aAAa;AAClB,SAAK,SAAS;;AA1BlB,SAAA;EAAmC;ICFtB,aAOX,uBAAc;AAAA,OANP,WAMO;AAAA,OALP,WAKO;AAAA,OAJP,QAIO;AAEZ,OAAK,WAAW,OAAO;AAGvB,OAAK,WAAW;AAGhB,OAAK,QAAQ;;ACTjB,IAAM,YAAY,IAAI;AAEtB,IAAM,aAAa,IAAI;AAEvB,IAAM,WAAW,IAAI;AAErB,IAAM,cAAc,IAAI;AAQvB,MAAM,UAAkB,UAAU,SAAU,KAAU,SAAkB,KAA+B;AAAA,MAA/B,QAA+B,QAAA;AAA/B,UAAa,MAAM;;AAC1F,MAAM,KAAK,KAAK,YAAY;AAC5B,MAAM,YAAY,GAAG;AAErB,MAAI,aAAa,IAAI;AAErB,WAAS,IAAI,GAAG,MAAM,UAAU,QAAQ,IAAI,KAAK,KAAK;AACpD,QAAM,WAAW,UAAU;AAC3B,QAAI,CAAC,SAAS,OAAO,qBAAqB;AACxC;;AAGF,QAAI,CAAE,UAAS,OAAO,QAAQ,MAAM;AAClC;;AAEF,QAAM,MAAM,IAAI;AAChB,QAAI,SAAS,QAAQ,KAAK,MAAM;AAC9B,UAAI,IAAI,WAAW,WAAW,UAAU;AACtC,qBAAa;;;;AAKnB,MAAI,WAAW,WAAW,UAAU;AAClC,eAAW,MAAM,QAAQ;;AAG3B,SAAO,WAAW;;AAQnB,aAAa,UAAkB,UAAU,SAAU,KAAK,KAAK;AAC5D,MAAM,WAAW,aAAa,MAAM;AAEpC,OAAK,OAAO,QAAQ,SAAS;AAC7B,OAAK,OAAO,QAAQ,SAAS;AAC7B,MAAM,YAAY,SAAS,aAAa;AACxC,MAAI,cAAc,IAAI;AACpB,qBAAiB,MAAM,UAAU,WAAW,KAAK,IAAI;AACrD,WAAO;SACF;AACL,WAAO;;;AAIV,gBAAgB,UAAkB,UAAU,SAAU,KAAK,KAAK;AAC/D,MAAM,WAAW,aAAa,MAAM;AAEpC,OAAK,OAAO,QAAQ,YAAY;AAChC,cAAY,SAAS,KAAK;AAC1B,MAAM,YAAY,SAAS,gBAAgB;AAC3C,MAAI,cAAc,IAAI;AACpB,qBAAiB,MAAM,UAAU,WAAW,KAAK,IAAI;AACrD,WAAO;SACF;AACL,WAAO;;;AAIV,cAAc,UAAkB,UAAU,SAAU,KAAK,KAAK;AAC7D,MAAM,WAAW,aAAa,MAAM;AAEpC,OAAK,OAAO,QAAQ,WAAW;AAC/B,aAAW,WAAW,CAAC,QAAQ,IAAI,KAAK,YAAY,WAAW;AAC/D,MAAM,YAAY,SAAS,eAAe;AAC1C,MAAI,cAAc,IAAI;AACpB,qBAAiB,MAAM,UAAU,WAAW,KAAK,IAAI;AACrD,WAAO;SACF;AACL,WAAO;;;AAUX,0BAA0B,UAAU,KAAU,UAAkB,QAAoB,QAAiB;AACnG,MAAM,SAAS;AACf,MAAI,SAAS,UAAU;AACvB,UAAQ,oBAAoB,QAAQ,SAAS,OAAO,UAAU,aAAa;AAE3E,SAAO,WAAW,QAAQ,SAAS,QAAQ;AAC3C,SAAO,WAAW;AAClB,SAAO,QAAQ;;AASjB,sBAAsB,UAAU,KAAK;AACnC,MAAM,eAAe,SAAS,OAAO;AAGrC,MAAM,IAAI,IAAI;AACd,UAAQ,oBAAoB,IAAI,QAAQ,cAAc;AAGtD,MAAM,IAAI,IAAI;AACd,sBAAoB,GAAG,IAAI,WAAW;AAEtC,SAAO,IAAI,IAAI,GAAG;;AAMpB,6BAA6B,KAAc,GAAY,GAAW;AAChE,MAAM,IAAI,EAAE;AACZ,MAAM,IAAI,EAAE;AACZ,MAAM,IAAI,EAAE;AACZ,MAAM,IAAI,EAAE;AACZ,MAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AACpC,MAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AACpC,MAAI,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AACpC,SAAO;;IC7II,OAAb,SAAA,eAAA;AAAA,iBAAA,OAAA;AAWE,iBAAY,QAAgB,MAAe;AAAA,QAAA;AACzC,YAAA,cAAA,KAAA,MAAM,WAAN;AADyC,UAV3C,OAU2C;AAAA,UAT3C,aAA0B;AASiB,UAR3C,SAAyB;AAQkB,UAP3C,UAO2C;AAAA,UANlC,SAAsB,IAAI,YAAY,IAAI,WAAW,IAAI;AAQhE,UAAK,OAAO;AAF6B,WAAA;;AAX7C,MAAA,SAAA,MAAA;AAAA,SAgBE,gCAAA,uCAA8B,gBAA0B;;AAhB1D,SAsBE,UAAA,mBAAU;AACR,SAAK,aAAa;;AAvBtB,SAAA;EAA0B;ICAb,OAAb,SAAA,eAAA;AAAA,iBAAA,OAAA;AAQE,iBAAY,MAAc;AAAA,QAAA;AACxB,YAAA,cAAA,KAAA,MAAM,SAAN;AADwB,UAPnB,sBAOmB;AAAA,UANnB,SAMmB;AAAA,UALnB,WAKmB;AAGxB,UAAK,sBAAsB;AAC3B,UAAK,SAAS;AACd,UAAK,WAAW;AALQ,WAAA;;AAR5B,SAAA;EAA0B;;;;;ACE1B,+BAA+B,MAAY,UAAwB;AACjE,MAAM,aAAa,KAAK;AACxB,WAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,IAAI,GAAG,KAAK;AACjD,eAAW,GAAG,aAAa;;;IAOlB,eAAb,YAAA,WAAA,SAAA,WAAA;AAAA,iBAAA,eAAA;AAOE,yBAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,UAAA,KAAA,MAAM,WAAN;AAD0B,UANpB,QAMoB;AAAA,+BAAA,OAAA,sBAAA,eAAA,uBAAA;AAAA,+BAAA,OAAA,oBAAA,gBAAA,uBAAA;AAG1B,UAAK,QAAQ;AAHa,WAAA;;AAP9B,MAAA,SAAA,cAAA;AAAA,SAuCE,oBAAA,2BAAkB,gBAAwB,UAAoB;AAC5D,QAAI,KAAK,iBAAiB,iBAAiB;AACzC,WAAK,iBAAiB,gBAAgB,aAAa;;AAErD,aAAS,aAAa;AACtB,SAAK,iBAAiB,kBAAkB;;AA5C5C,SAoDE,cAAA,qBAAY,gBAAwB,UAAoB;AACtD,QAAI,KAAK,mBAAmB,iBAAiB;AAC3C,WAAK,mBAAmB,gBAAgB,aAAa;;AAEvD,aAAS,aAAa;AACtB,SAAK,mBAAmB,kBAAkB;;AAzD9C,SAiEE,sBAAA,6BAAoB,gBAAkC;AACpD,WAAO,KAAK,mBAAmB;;AAlEnC,SA0EE,oBAAA,2BAAkB,gBAAkC;AAClD,WAAO,KAAK,iBAAiB;;AA3EjC,SAkFE,SAAA,gBAAO,QAAgB;AACrB,QAAM,OAAO,KAAK;AAClB,QAAI,CAAC,MAAM;AACT;;AAGF,QAAM,iBAAiB,OAAO;AANT,QAOb,aAAuB,KAAvB,YAAY,SAAW,KAAX;AAGpB,aAAS,IAAI,GAAG,MAAM,WAAW,QAAQ,IAAI,KAAK,KAAK;AACrD,UAAM,YAAY,WAAW;AAC7B,UAAM,WAAW,KAAK,mBAAmB,MAAM,KAAK,iBAAiB;AACrE,UAAI,UAAU;AACZ,YAAM,UAAU,cAAc;AAC9B,gBAAQ,SAAS,MAAM,WAAW,OAAO,IAAI;AAC7C,uBAAe,cAAc;aACxB;AACL,eAAO,MAAM,gCAAgC,UAAU;;;;AApG/D,SA4GE,UAAA,mBAAU;AACR,cAAA,UAAM,QAAN,KAAA;AAGA,SAAK,QAAQ;AAGb,SAAK,qBAAqB;AAC1B,SAAK,mBAAmB;AAGxB,aAAS,IAAI,GAAG,IAAI,KAAK,mBAAmB,QAAQ,KAAK;AACvD,WAAK,mBAAmB,GAAG,aAAa;;AAI1C,aAAS,KAAI,GAAG,KAAI,KAAK,iBAAiB,QAAQ,MAAK;AACrD,WAAK,iBAAiB,IAAG,aAAa;;AAGxC,QAAI,KAAK,OAAO;AACd,4BAAsB,KAAK,OAAO;;;AAjIxC,SAwIY,gBAAV,uBAAwB,aAAgC;AACtD,QAAM,cAAc,KAAK,KAAK;AAC9B,QAAM,cAAc,KAAK,QAAQ,UAAU;AAE3C,gBAAY,UAAU,aAAa,aAAa;;AA5IpD,eAAA,eAAA,CAAA;IAAA,KAAA;IAAA,KAgBE,gBAAW;AACT,aAAO,KAAK;;IAjBhB,KAwBE,cAAS,MAAY;AACnB,UAAI,KAAK,OAAO;AACd,8BAAsB,KAAK,OAAO;;AAEpC,4BAAsB,MAAM;AAC5B,WAAK,QAAQ;AACb,WAAK,mBAAmB;AACxB,WAAK,qBAAqB;;;AA/B9B,SAAA;EAAkC,WAAlC,UAAA,gBAAA,0BAAA,SAAA,WAAA,sBAAA,CAEG,cAFH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAG2C;;IAH3C,iBAAA,0BAAA,SAAA,WAAA,oBAAA,CAIG,eAJH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAKyC;;IALzC;ICVa,YAAb,SAAA,UAAA;AAAA,iBAAA,YAAA;AAqBE,sBACE,QACA,OACA,QACA,QACA,QACA;AAAA,QAAA;AAAA,QAFA,WAEA,QAAA;AAFA,eAAwB,cAAc;;AAEtC,QADA,WACA,QAAA;AADA,eAAkB;;AAElB,YAAA,SAAA,KAAA,MAAM,WAAN;AADA,UA1BM,UA0BN;AAAA,UAxBM,uBAA+B;AA0BrC,QAAM,MAAM,OAAO;AACnB,QAAM,KAAqD,IAAI;AAC/D,QAAM,WAAoB,IAAI;AAE9B,QAAI,CAAC,QAAQ,sBAAsB,QAAQ,MAAM;AAC/C,YAAM,IAAI,MAAJ,qCAA6C,cAAc;;AAGnE,QAAI,UAAU,CAAC,YAAa,EAAC,QAAQ,YAAY,UAAU,CAAC,QAAQ,YAAY,UAAU;AACxF,aAAO,KACL;AAEF,eAAS;;AAGX,QAAM,eAAe,QAAQ,iBAAiB,QAAQ,IAAI;AAE1D,UAAK,aAAa,GAAG;AACrB,UAAK,gBAAgB;AACrB,UAAK,OAAO;AACZ,UAAK,UAAU,GAAG;AAClB,UAAK,UAAU;AACf,UAAK,SAAS;AACd,UAAK,UAAU;AACf,UAAK,UAAU;AACf,UAAK,eAAe,MAAK;AAExB,iBAAa,gBAAgB,CAAC,YAAa,MAAK,YAAY;AAE7D,UAAK,aAAa,kBAAkB;AACpC,UAAK,YAAY,MAAK,YAAY,gBAAgB;AAhClD,WAAA;;AA3BJ,MAAA,SAAA,WAAA;AAAA,SAwEE,iBAAA,wBACE,aACA,UACA,GACA,GACA,OACA,QACM;AAAA,QALN,aAKM,QAAA;AALN,iBAAmB;;AAMnB,QAAM,KAAqD,KAAK,KAAK;AACrE,QAAM,WAAoB,KAAK,KAAK;AAF9B,QAAA,sBAGyD,KAAK,eAA5D,iBAHF,oBAGE,gBAAgB,aAHlB,oBAGkB,YAAY,WAH9B,oBAG8B,UAAU,eAHxC,oBAGwC;AAC9C,QAAM,WAAW,KAAK,IAAI,GAAG,KAAK,UAAU;AAC5C,QAAM,YAAY,KAAK,IAAI,GAAG,KAAK,WAAW;AAE9C,QAAI,KAAK;AACT,QAAI,KAAK;AACT,YAAQ,SAAS,WAAW;AAC5B,aAAS,UAAU,YAAY;AAE/B,SAAK;AAEL,OAAG,YAAY,GAAG,qBAAqB;AACvC,OAAG,YAAY,GAAG,gCAAgC;AAElD,QAAI,cAAc;AAChB,UAAM,SAAS,KAAK;AACpB,UAAI,YAAY,KAAK,uBAAuB,QAAQ;AAClD,WAAG,wBAAwB,KAAK,SAAS,UAAU,GAAG,GAAG,OAAO,QAAQ,gBAAgB;aACnF;AACL,WAAG,qBAAqB,KAAK,SAAS,UAAU,gBAAgB,OAAO,QAAQ,GAAG;AAClF,aAAK,wBAAwB;;WAE1B;AACL,SAAG,cAAc,KAAK,SAAS,UAAU,GAAG,GAAG,OAAO,QAAQ,YAAY,UAAU;;AAGtF,SAAK;;AA5GT,SAwHE,iBAAA,wBACE,aACA,UACA,OACA,kBACA,GACA,GACM;AAAA,QALN,aAKM,QAAA;AALN,iBAAmB;;AAKb,QAJN,UAIM,QAAA;AAJN,cAAiB;;AAIX,QAHN,qBAGM,QAAA;AAHN,yBAA4B;;AAI5B,QAAM,KAAqD,KAAK,KAAK;AAD/D,QAAA,uBAE2B,KAAK,eAA9B,aAFF,qBAEE,YAAY,WAFd,qBAEc;AAEpB,SAAK;AACL,OAAG,YAAY,GAAG,qBAAqB,CAAC;AACxC,OAAG,YAAY,GAAG,gCAAgC,CAAC;AACnD,OAAG,cAAc,KAAK,SAAS,UAAU,KAAK,GAAG,KAAK,GAAG,YAAY,UAAU;AAC/E,SAAK;;AAvIT,SAkJE,iBAAA,wBAAe,GAAW,GAAW,OAAe,QAAgB,KAA4B;AAC9F,QAAI,KAAK,cAAc,cAAc;AACnC,YAAM,IAAI,MAAM;;AAElB,aAAA,UAAM,gBAAN,KAAA,MAAsB,MAAM,GAAG,GAAG,OAAO,QAAQ;;AAtJrD,eAAA,YAAA,CAAA;IAAA,KAAA;IAAA,KASE,gBAA4B;AAC1B,aAAO,KAAK;;;AAVhB,SAAA;EAA+B;;;;;;;;;;;;ICOlB,sBAAb,YAAA,WAAA,YAAA,SAAA,eAAA;AAAA,iBAAA,sBAAA;AAgCE,gCAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,cAAA,KAAA,MAAM,WAAN;AAD0B,+BAAA,OAAA,iBAAA,eAAA,uBAAA;AAAA,+BAAA,OAAA,cAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,gBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,kBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,QAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,YAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,kBAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,oBAAA,gBAAA,uBAAA;AAAA,UANpB,QAMoB;AAE1B,UAAK,OAAO,IAAI;AAChB,UAAK,WAAW;AAChB,UAAK,QAAQ;AAJa,WAAA;;AAhC9B,MAAA,SAAA,qBAAA;AAAA,SA0CE,oBAAA,2BAAkB,SAAwB;AACxC,kBAAA,UAAM,kBAAN,KAAA,MAAwB;AAExB,QAAI,CAAC,KAAK,oBAAoB,KAAK,eAAe;AAChD,WAAK,WAAW,cAAc,qBAAoB,sBAAsB,KAAK;;;AA9CnF,SAsDE,aAAA,oBAAW,SAAmB;AAC5B,SAAK,WAAW;AAChB,QAAI,CAAC,SAAS;AACZ;;AAEF,QAAM,MAAM,QAAQ;AACpB,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,WAAK,eAAe,KAAK;;AAG3B,QAAM,iBAAiB,KAAK;AAE5B,aAAS,KAAI,GAAG,KAAI,MAAM,GAAG,MAAK;AAChC,eAAS,IAAI,KAAI,GAAG,IAAI,KAAK,KAAK;AAChC,YAAI,QAAQ,KAAK,QAAQ,KAAI;AAC3B,cAAI,IAAI,QAAQ;AAChB,kBAAQ,MAAK,QAAQ;AACrB,kBAAQ,KAAK;AACb,cAAI,eAAe;AACnB,yBAAe,MAAK,eAAe;AACnC,yBAAe,KAAK;;;;AAI1B,SAAK,KAAK,8BAA8B;;AA9E5C,SAgGE,cAAA,uBAAc;AAAA,QAAA;AACZ,QAAI,CAAC,KAAK;AAAO;AACjB,QAAM,OAAO,KAAK;AAElB,QAAM,SAAS,KAAK;AACpB,QAAM,aAAa;AACnB,aAAS,IAAI,OAAO,SAAS,GAAG,KAAK,GAAG,KAAK;AAC3C,iBAAW,KAAK,KAAK,eAAe,KAAK,QAAQ,OAAO;;AAE1D,SAAK,gBAAgB,IAAI,aAAa,WAAW,SAAS;AAC1D,SAAK,aAAa;AAGlB,QAAM,MAAM,KAAK,OAAO,OAAO;AAC/B,QAAI,CAAC;AAAK;AACV,QAAM,uBAAuB,IAAI,aAAa,aAAa,IAAI,GAAG;AAClE,QAAM,YAAY,KAAK,MAAO,wBAAuB,MAAM;AAC3D,QAAM,aAAa,KAAK;AACxB,QAAM,aAAU,oBAAG,KAAK,gBAAR,QAAA,qBAAA,SAAA,SAAG,iBAAiB;AACpC,QAAI,YAAY;AACd,iBAAW,YAAY;AACvB,iBAAW,OAAO,qBAAoB,qBAAqB;AAC3D,UAAI,OAAO,SAAS,WAAW;AAC7B,YAAI,IAAI,mBAAmB;AACzB,eAAK,mBAAmB;AACxB,qBAAW,YAAY;AACvB,qBAAW,WAAW,qBAAoB,uBAAuB,KAAK;eACjE;AACL,iBAAO,MAAP,8BAC8B,SAD9B,+DACiG,uBADjG,oFACuM,YADvM,KAEE;;aAGC;AACL,YAAM,aAAY,KAAK,IAAI,qBAAoB,YAAY,OAAO;AAClE,6BAAoB,aAAa;AACjC,mBAAW,aAAa;AACxB,mBAAW,YAAY,iBAAiB,WAAU;;WAE/C;AACL,iBAAW,aAAa;;;AAxI9B,SA4IU,iBAAR,wBAAuB,QAAgB,UAAkB;AACvD,QAAI,CAAC;AAAQ,aAAO;AAEpB,QAAM,IAAI,OAAO,WAAW;AAE5B,QAAI;AAAG,aAAO;AAEd,WAAO,KAAK,eAAe,OAAO,QAAQ;;AAnJ9C,SAsJU,cAAR,qBAAoB,QAAgB,UAAkB;AACpD,QAAI,QAAQ;AACV,UAAM,SAAS,OAAO;AACtB,UAAI,CAAC;AAAQ,eAAO;AACpB,UAAI,OAAO,SAAS;AAAU,eAAO;AAErC,UAAM,UAAU,OAAO,WAAW;AAClC,UAAI;AAAS,eAAO;AAEpB,aAAO,KAAK,YAAY,QAAQ;;AAElC,WAAO;;AAjKX,SAuKE,SAAA,kBAAS;AACP,QAAI,CAAC,KAAK,gBAAgB;AACxB,WAAK;AACL,WAAK,iBAAiB;;AAExB,QAAI,KAAK,OAAO;AACd,UAAM,SAAS,KAAK;AACpB,UAAM,OAAO,KAAK,MAAM;AACxB,UAAM,gBAAgB,KAAK;AAC3B,UAAM,eAAe,KAAK,OAAO;AAEjC,UAAM,MAAM,KAAK;AACjB,eAAS,IAAI,OAAO,SAAS,GAAG,KAAK,GAAG,KAAK;AAC3C,YAAI;AACJ,YAAI,OAAO,IAAI;AACb,iBAAO,SAAS,OAAO,GAAG,UAAU,aAAa,KAAK,IAAI;eACrD;AACL,eAAK,GAAG,QAAQ;;AAElB,eAAO,SAAS,cAAc,KAAK;AACnC,sBAAc,IAAI,IAAI,UAAU,IAAI;;AAEtC,UAAI,KAAK,kBAAkB;AACzB,aAAK;;;;AA9Lb,SAuME,qBAAA,8BAAqB;AACnB,QAAI,CAAC,KAAK,cAAc;AACtB,UAAM,SAAS,KAAK;AACpB,UAAM,MAAM,OAAO;AACnB,UAAI,CAAC;AAAK;AACV,WAAK,eAAe,IAAI,UAAU,QAAQ,GAAG,KAAK,WAAW,QAAQ,cAAc,cAAc;AACjG,WAAK,aAAa,aAAa,kBAAkB;;AAEnD,SAAK,aAAa,eAAe,KAAK;;AA/M1C,eAAA,sBAAA,CAAA;IAAA,KAAA;IAAA,KAoFE,gBAAW;AACT,aAAO,KAAK;;IArFhB,KAwFE,cAAS,MAAM;AACb,WAAK,QAAQ;;KAzFjB;IAAA,KAAA;IAAA,KA4FE,gBAAc;AACZ,aAAO,KAAK;;;AA7FhB,SAAA;EAAyC,eAAzC,UACiB,sBAAsC,OAAO,kBAAkB,iBADhF,UAEiB,wBAAwC,OAAO,kBAAkB,mBAFlF,UAGiB,uBAAuC,OAAO,kBAAkB,kBAHjF,UAKiB,aAAqB,GALtC,UAAA,gBAAA,0BAAA,SAAA,WAAA,iBAAA,CAOG,cAPH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA;IAAA,iBAAA,0BAAA,SAAA,WAAA,cAAA,CASG,cATH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA;IAAA,iBAAA,0BAAA,SAAA,WAAA,gBAAA,CAWG,cAXH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA;IAAA,iBAAA,0BAAA,SAAA,WAAA,kBAAA,CAcG,cAdH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAeoC;;IAfpC,iBAAA,0BAAA,SAAA,WAAA,QAAA,CAgBG,cAhBH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA;IAAA,iBAAA,0BAAA,SAAA,WAAA,YAAA,CAkBG,cAlBH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA;IAAA,iBAAA,0BAAA,SAAA,WAAA,kBAAA,CAoBG,cApBH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAqBqC;;IArBrC,iBAAA,0BAAA,SAAA,WAAA,oBAAA,CAsBG,cAtBH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAwBsC;;IAxBtC;ICVa,WAAb,SAAA,WAAA;AAAA,iBAAA,WAAA;AAAA,uBAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,UAAA,KAAA,MAAA,WAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UACU,QAAQ;AADlB,WAAA;;AAAA,MAAA,SAAA,UAAA;AAAA,SAQE,SAAA,gBAAO,UAAkB,UAAoB;AAE3C,aAAS,UAAU;AAEnB,SAAK,MAAM,KAAK;MACd;MACA,iBAAiB;;AAGnB,SAAK,MAAM,KAAK,SAAC,GAAG,GAAJ;AAAA,aAAU,EAAE,WAAW,EAAE;;;AAjB7C,SAuBE,SAAA,gBAAO,QAAgB;AACrB,QAAI,KAAK,MAAM,UAAU;AAAG;AAE5B,QAAM,OAAO,QAAQ,SAAS,OAAO,OAAO,UAAU,eAAe,KAAK,OAAO,UAAU;AAE3F,QAAM,OAAO,KAAK;AAClB,QAAI,cAAc;AAClB,aAAS,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG,KAAK;AACzC,UAAM,OAAM,KAAK;AACjB,UAAI,OAAO,KAAI,UAAU;AACvB,sBAAc;AACd;;;AAIJ,QAAM,MAAM,KAAK;AACjB,QAAI,gBAAgB,OAAO;;AAvC/B,SAAA;EAA8B;ICJlB;UAAA,kBAAA;AAAA,mBAAA,iBAAA,eAAA,KAAA;AAAA,mBAAA,iBAAA,eAAA,KAAA;AAAA,mBAAA,iBAAA,eAAA,KAAA;AAAA,mBAAA,iBAAA,eAAA,KAAA;AAAA,mBAAA,iBAAA,eAAA,KAAA;AAAA,mBAAA,iBAAA,eAAA,KAAA;GAAA,mBAAA,mBAAA;ICQC,iBAAb,SAAA,UAAA;AAAA,iBAAA,iBAAA;AAmBE,2BAAY,QAAgB,MAAc,QAAgD,QAAwB;AAAA,QAAA;AAAA,QAAxE,WAAwE,QAAA;AAAxE,eAAwB,cAAc;;AAAkC,QAAxB,WAAwB,QAAA;AAAxB,eAAkB;;AAC1G,YAAA,SAAA,KAAA,MAAM,WAAN;AADgH,UAlB1G,UAkB0G;AAAA,UAhB1G,wBAAkC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG;AAkBxD,QAAM,MAAM,OAAO;AACnB,QAAM,KAAqD,IAAI;AAC/D,QAAM,WAAoB,IAAI;AAE9B,QAAI,CAAC,QAAQ,sBAAsB,QAAQ,MAAM;AAC/C,YAAM,IAAI,MAAJ,qCAA6C,cAAc;;AAGnE,QAAI,UAAU,CAAC,YAAY,CAAC,QAAQ,YAAY,OAAO;AACrD,aAAO,KACL;AAEF,eAAS;;AAGX,QAAM,eAAe,QAAQ,iBAAiB,QAAQ,IAAI;AAE1D,UAAK,aAAa,GAAG;AACrB,UAAK,gBAAgB;AACrB,UAAK,OAAO;AACZ,UAAK,UAAU,GAAG;AAClB,UAAK,UAAU;AACf,UAAK,SAAS;AACd,UAAK,UAAU;AACf,UAAK,UAAU;AACf,UAAK,eAAe,MAAK;AAExB,iBAAa,gBAAgB,CAAC,YAAa,MAAK,YAAY;AAE7D,UAAK,aAAa,kBAAkB;AACpC,UAAK,YAAY,MAAK,YAAY,gBAAgB;AAhC8D,WAAA;;AAnBpH,MAAA,SAAA,gBAAA;AAAA,SAiEE,iBAAA,wBACE,MACA,aACA,UACA,GACA,GACA,OACA,QACM;AAAA,QALN,aAKM,QAAA;AALN,iBAAmB;;AAMnB,QAAM,KAAqD,KAAK,KAAK;AACrE,QAAM,WAAoB,KAAK,KAAK;AAF9B,QAAA,sBAGyD,KAAK,eAA5D,iBAHF,oBAGE,gBAAgB,aAHlB,oBAGkB,YAAY,WAH9B,oBAG8B,UAAU,eAHxC,oBAGwC;AAC9C,QAAM,UAAU,KAAK,IAAI,GAAG,KAAK,UAAU;AAE3C,QAAI,KAAK;AACT,QAAI,KAAK;AACT,YAAQ,SAAS,UAAU;AAC3B,aAAS,UAAU,UAAU;AAE7B,SAAK;AAEL,OAAG,YAAY,GAAG,qBAAqB;AACvC,OAAG,YAAY,GAAG,gCAAgC;AAElD,QAAI,cAAc;AAChB,UAAM,SAAS,KAAK;AACpB,UAAI,YAAY,KAAK,sBAAsB,QAAQ,QAAQ;AACzD,WAAG,wBACD,GAAG,8BAA8B,MACjC,UACA,GACA,GACA,OACA,QACA,gBACA;aAEG;AACL,WAAG,qBACD,GAAG,8BAA8B,MACjC,UACA,gBACA,OACA,QACA,GACA;AAEF,aAAK,sBAAsB,SAAS;;WAEjC;AACL,SAAG,cACD,GAAG,8BAA8B,MACjC,UACA,GACA,GACA,OACA,QACA,YACA,UACA;;AAIJ,SAAK;;AAhIT,SA6IE,iBAAA,wBACE,MACA,aACA,UACA,OACA,kBACA,GACA,GACM;AAAA,QALN,aAKM,QAAA;AALN,iBAAmB;;AAKb,QAJN,UAIM,QAAA;AAJN,cAAiB;;AAIX,QAHN,qBAGM,QAAA;AAHN,yBAA4B;;AAI5B,QAAM,KAAqD,KAAK,KAAK;AAD/D,QAAA,uBAE2B,KAAK,eAA9B,aAFF,qBAEE,YAAY,WAFd,qBAEc;AAEpB,SAAK;AAEL,OAAG,YAAY,GAAG,qBAAqB,CAAC;AACxC,OAAG,YAAY,GAAG,gCAAgC,CAAC;AACnD,OAAG,cACD,GAAG,8BAA8B,MACjC,UACA,KAAK,GACL,KAAK,GACL,YACA,UACA;AAEF,SAAK;;AAtKT,SAkLE,iBAAA,wBACE,MACA,GACA,GACA,OACA,QACA,KACM;AACN,QAAI,KAAK,cAAc,cAAc;AACnC,YAAM,IAAI,MAAM;;AAElB,aAAA,UAAM,gBAAN,KAAA,MAAsB,MAAM,GAAG,GAAG,OAAO,QAAQ;;AA7LrD,eAAA,iBAAA,CAAA;IAAA,KAAA;IAAA,KAQE,gBAA4B;AAC1B,aAAO,KAAK;;;AAThB,SAAA;EAAoC;ICDvB,qBAAb,SAAA,UAAA;AAAA,iBAAA,qBAAA;AAkCE,+BACE,QACA,OACA,QACA,QACA,QACA,QACA;AAAA,QAAA;AAAA,QAHA,WAGA,QAAA;AAHA,eAAkC,wBAAwB;;AAG1D,QAFA,WAEA,QAAA;AAFA,eAAkB;;AAElB,QADA,WACA,QAAA;AADA,eAAkB;;AAElB,YAAA,SAAA,KAAA,MAAM,WAAN;AADA,UAvCK,UAAmB;AAuCxB,UArCM,UAqCN;AAAA,UApCM,cAAuB;AAsC7B,QAAM,MAAM,OAAO;AACnB,QAAM,KAAqD,IAAI;AAC/D,QAAM,WAAoB,IAAI;AAE9B,QAAI,CAAC,QAAQ,gCAAgC,QAAQ,KAAK,OAAO;AAC/D,YAAM,IAAI,MAAJ,8CAAsD,wBAAwB;;AAGtF,QAAI,UAAU,UAAU,QAAQ;AAC9B,YAAM,IAAI,MAAM;;AAElB,QAAI,UAAU,CAAC,YAAa,EAAC,QAAQ,YAAY,UAAU,CAAC,QAAQ,YAAY,UAAU;AACxF,aAAO,KACL;AAEF,eAAS;;AAGX,UAAK,aAAa,GAAG;AACrB,UAAK,gBAAgB,QAAQ,kCAAkC,QAAQ,IAAI;AAC3E,UAAK,UAAU;AACf,UAAK,OAAO;AACZ,UAAK,UAAU,SAAS,GAAG,mBAAmB,GAAG;AACjD,UAAK,UAAU;AACf,UAAK,SAAS;AACd,UAAK,UAAU;AACf,UAAK,UAAU;AACf,UAAK,eAAe,MAAK;AAEzB,UAAK,YAAY;AAEjB,UAAK,aAAa,kBAAkB;AACpC,UAAK,YAAY,MAAK,YAAY,gBAAgB;AAlClD,WAAA;;AAzCJ,eAAA,qBAAA,CAAA;IAAA,KAAA;IAAA,KAUE,gBAAsC;AACpC,aAAO,KAAK;;KAXhB;IAAA,KAAA;IAAA,KAiBE,gBAAmC;AACjC,aAAO,KAAK;;IAlBhB,KAqBE,cAAwB,OAAgB;AACtC,WAAK,cAAc;;;AAtBvB,SAAA;EAAwC;ICG3B,eAAb,SAAA,eAAA;AAAA,iBAAA,eAAA;AAqIE,yBACE,QACA,OACA,QACA,eACA,OACA,cACA;AAAA,QAAA;AAAA,QAFA,UAEA,QAAA;AAFA,cAA6D,wBAAwB;;AAErF,QADA,iBACA,QAAA;AADA,qBAAuB;;AAEvB,YAAA,cAAA,KAAA,MAAM,WAAN;AADA,UA3IK,eA2IL;AAAA,UA1IK,mBA0IL;AAAA,UAxIM,OAwIN;AAAA,UAvIM,SAuIN;AAAA,UAtIM,UAsIN;AAAA,UArIM,gBAqIN;AAAA,UApIM,iBAoIN;AAAA,UAnIM,gBAmIN;AAAA,UAlIM,qBAkIN;AAAA,UAjIM,0BAA+C;AAiIrD,UAhIM,yBAgIN;AAAA,UA/HM,kBA+HN;AAAA,UA9HM,mBA8HN;AAEA,QAAM,MAAM,OAAO;AAMnB,QAAM,KAAqD,IAAI;AAE/D,QAAI,CAAE,kBAAiB,uBAAuB,CAAC,QAAQ,gCAAgC,OAAO,KAAK,QAAQ;AACzG,YAAM,IAAI,MAAJ,8CAAsD,wBAAwB;;AAGtF,QAAK,mBAAD,QAAC,kBAAD,SAAA,SAAC,cAAwC,UAAS,KAAK,CAAC,IAAI,QAAQ,iBAAiB,cAAc;AACrG,YAAM,IAAI,MAAM;;AAIlB,QAAI,eAAe;AACjB,YAAK,iBAAiB,yBAAyB,QAAQ,cAAc,UAAU,CAAC;WAC3E;AACL,YAAK,iBAAiB;;AAGxB,QAAI,MAAK,eAAe,KAAK,SAAC,GAAD;AAAA,aAA2B,EAAE,UAAU,SAAS,EAAE,WAAW;QAAS;AACjG,YAAM,IAAI,MAAM;;AAGlB,QAAI,iBAAiB,sBAAuB,OAAM,UAAU,SAAS,MAAM,WAAW,SAAS;AAC7F,YAAM,IAAI,MAAM;;AAIlB,QAAI,MAAK,eAAe,SAAS,KAAK,MAAK,eAAe,KAAK,SAAC,GAAD;AAAA,aAA2B,EAAE;QAAU;AACpG,YAAM,IAAI,MAAM;;AAGlB,QAAM,kBAAkB,IAAI,WAAW;AACvC,QAAI,eAAe,iBAAiB;AAClC,aAAO,KAAP,4EAAsF;AACtF,qBAAe;;AAGjB,UAAK,OAAO;AACZ,UAAK,SAAS;AACd,UAAK,UAAU;AACf,UAAK,eAAe,GAAG;AACvB,UAAK,gBAAgB;AAErB,QAAI,iBAAiB,oBAAoB;AACvC,YAAK,gBAAgB;;AAIvB,UAAK,aAAa;AAGlB,QAAI,eAAe,GAAG;AACpB,YAAK,mBAAmB,GAAG;AAC3B,YAAK,aAAa;;AA5DpB,WAAA;;AA5IJ,MAAA,SAAA,cAAA;AAAA,SAgNS,kBAAP,yBAAuB,OAA8C;AAAA,QAA9C,UAA8C,QAAA;AAA9C,cAAgB;;AACrC,WAAO,KAAK,eAAe;;AAjN/B,SAuNS,UAAP,mBAAuB;AACrB,QAAM,KAAqD,KAAK,KAAK;AAErE,OAAG,kBAAkB,KAAK;AAC1B,SAAK,sBAAsB,GAAG,mBAAmB,KAAK;AACtD,SAAK,oBAAoB,GAAG,kBAAkB,KAAK;AACnD,SAAK,0BAA0B,GAAG,mBAAmB,KAAK;AAE1D,aAAS,IAAI,GAAG,IAAI,KAAK,eAAe,QAAQ,KAAK;AACnD,WAAK,eAAe,GAAG;;AAGzB,aAAS,KAAI,GAAG,KAAI,KAAK,wBAAwB,QAAQ,MAAK;AAC5D,SAAG,mBAAmB,KAAK,wBAAwB;;AAGrD,SAAK,iBAAiB,KAAK,cAAc;AAEzC,SAAK,eAAe;AACpB,SAAK,eAAe,SAAS;AAC7B,SAAK,gBAAgB;AACrB,SAAK,qBAAqB;AAC1B,SAAK,mBAAmB;AACxB,SAAK,wBAAwB,SAAS;AACtC,SAAK,yBAAyB;;AA/OlC,SAwPS,sBAAP,+BAAmC;AACjC,QAAM,KAAqD,KAAK,KAAK;AAErE,QAAI,KAAK,kBAAkB;AACzB,SAAG,gBAAgB,GAAG,aAAa,KAAK;WACnC;AACL,SAAG,gBAAgB,GAAG,aAAa,KAAK;;;AA9P9C,SAsQS,uBAAP,8BAA4B,WAA8D;AAAA,QAA9D,cAA8D,QAAA;AAA9D,kBAA6B,gBAAgB;;AACvE,QAAM,KAAqD,KAAK,KAAK;AACrE,QAAM,eAAe,KAAK,eAAe;AACzC,QAAM,eAAe,KAAK;AAE1B,OAAG,gBAAgB,GAAG,aAAa,KAAK;AAGxC,QAAI,iBAAJ,QAAI,iBAAJ,UAAI,aAAc,SAAS;AACzB,SAAG,qBACD,GAAG,aACH,GAAG,mBACH,GAAG,8BAA8B,WACjC,aAAa,YACb;;AAKJ,QAAI,iBAAJ,QAAI,iBAAJ,UAAI,aAAc,SAAS;AACzB,SAAG,qBACD,GAAG,aACH,aAAa,cAAc,YAC3B,GAAG,8BAA8B,WACjC,aAAa,YACb;;AAKJ,SAAK;;AApST,SA0SS,oBAAP,6BAAiC;AAC/B,QAAM,KAAqD,KAAK,KAAK;AACrE,QAAM,OAAO,GAAG,mBAAoB,MAAK,gBAAgB,GAAG,mBAAmB;AAC/E,QAAM,qBAAqB,KAAK,eAAe;AAE/C,OAAG,gBAAgB,GAAG,kBAAkB,KAAK;AAC7C,OAAG,gBAAgB,GAAG,kBAAkB,KAAK;AAE7C,aAAS,eAAe,GAAG,eAAe,oBAAoB,gBAAgB;AAC5E,UAAM,aAAa,GAAG,oBAAoB;AAE1C,WAAK,iBAAiB,gBAAgB;AAEtC,SAAG,WAAW;AACd,SAAG,YAAY,KAAK;AACpB,SAAG,gBAAgB,GAAG,GAAG,KAAK,QAAQ,KAAK,SAAS,GAAG,GAAG,KAAK,QAAQ,KAAK,SAAS,MAAM,GAAG;AAE9F,WAAK,iBAAiB,gBAAgB,GAAG;;AAG3C,OAAG,gBAAgB,GAAG,aAAa;;AA9TvC,SAoUU,eAAR,sBAAqB,aAAwE;AAC3F,QAAM,KAAqD,KAAK,KAAK;AACrE,QAAM,WAAoB,KAAK,KAAK;AACpC,QAAM,qBAAqB,KAAK,eAAe;AAC/C,QAAM,cAAc,IAAI,MAAM;AAE9B,OAAG,gBAAgB,GAAG,aAAa,KAAK;AAGxC,aAAS,IAAI,GAAG,IAAI,oBAAoB,KAAK;AAC3C,UAAM,gBAAe,KAAK,eAAe;AACzC,UAAM,aAAa,GAAG,oBAAoB;AAE1C,kBAAY,KAAK;AAGjB,UAAI,CAAC,cAAa,SAAS;AACzB,WAAG,qBAAqB,GAAG,aAAa,YAAY,GAAG,YAAY,cAAa,YAAY;;;AAIhG,QAAI,qBAAqB,GAAG;AAC1B,SAAG,YAAY;;AAEjB,SAAK,kBAAkB;AAGvB,QAAI,gBAAgB,MAAM;AACxB,UAAI,uBAAuB,oBAAoB;AAE7C,YAAI,CAAC,YAAY,SAAS;AACxB,aAAG,qBACD,GAAG,aACH,YAAY,cAAc,YAC1B,GAAG,YACH,YAAY,YACZ;;iBAGK,KAAK,iBAAiB,GAAG;AAAA,YAAA,wBACK,QAAQ,kCAAkC,aAAa,IAAI,WAA1F,iBAD0B,sBAC1B,gBAAgB,cADU,sBACV;AACxB,YAAM,oBAAoB,GAAG;AAE7B,aAAK,qBAAqB;AAE1B,WAAG,iBAAiB,GAAG,cAAc;AACrC,WAAG,oBAAoB,GAAG,cAAc,gBAAgB,KAAK,QAAQ,KAAK;AAC1E,WAAG,wBAAwB,GAAG,aAAa,aAAY,GAAG,cAAc;;;AAI5E,OAAG,gBAAgB,GAAG,aAAa;AACnC,OAAG,iBAAiB,GAAG,cAAc;;AAxXzC,SA8XU,eAAR,sBAAqB,aAAwE;AAC3F,QAAM,KAAqD,KAAK,KAAK;AACrE,QAAM,WAAoB,KAAK,KAAK;AACpC,QAAM,wBAAwB,GAAG;AACjC,QAAM,qBAAqB,KAAK,eAAe;AAE/C,SAAK,mBAAmB,IAAI,MAAM;AAClC,SAAK,yBAAyB;AAE9B,OAAG,gBAAgB,GAAG,aAAa,KAAK;AAGxC,aAAS,IAAI,GAAG,IAAI,oBAAoB,KAAK;AAC3C,UAAM,wBAAwB,GAAG;AAEjC,WAAK,wBAAwB,KAAK;AAClC,WAAK,iBAAiB,KAAK,GAAG;AAE9B,SAAG,iBAAiB,GAAG,cAAc;AACrC,SAAG,+BACD,GAAG,cACH,KAAK,eACL,KAAK,eAAe,GAAG,cAAc,gBACrC,KAAK,QACL,KAAK;AAEP,SAAG,wBAAwB,GAAG,aAAa,GAAG,oBAAoB,GAAG,GAAG,cAAc;;AAExF,OAAG,YAAY,KAAK;AAGpB,QAAI,gBAAgB,MAAM;AAAA,UAAA,OAEtB,uBAAuB,qBACnB,YAAY,gBACZ,QAAQ,kCAAkC,aAAa,IAAI,WAHzD,iBADgB,KAChB,gBAAgB,aADA,KACA;AAKxB,SAAG,iBAAiB,GAAG,cAAc;AACrC,SAAG,+BAA+B,GAAG,cAAc,KAAK,eAAe,gBAAgB,KAAK,QAAQ,KAAK;AACzG,SAAG,wBAAwB,GAAG,aAAa,YAAY,GAAG,cAAc;;AAG1E,SAAK;AACL,OAAG,gBAAgB,GAAG,aAAa;AACnC,OAAG,iBAAiB,GAAG,cAAc;;AA1azC,SAgbU,oBAAR,6BAAkC;AAChC,QAAM,KAAqD,KAAK,KAAK;AACrE,QAAM,WAAoB,KAAK,KAAK;AACpC,QAAM,IAAI,GAAG,uBAAuB,GAAG;AAEvC,YAAQ;WACD,GAAG;AACN,cAAM,IAAI,MACR;WAEC,GAAG;AACN,cAAM,IAAI,MAAM;WACb,GAAG;AACN,cAAM,IAAI,MAAM;WACb,GAAG;AACN,cAAM,IAAI,MACR;;AAIN,QAAI,YAAY,MAAM,GAAG,oCAAoC;AAC3D,YAAM,IAAI,MACR;;;AAtcR,eAAA,eAAA,CAAA;IAAA,KAAA;IAAA,KAoBE,gBAAoB;AAClB,aAAO,KAAK;;KArBhB;IAAA,KAAA;IAAA,KA4BE,gBAAqB;AACnB,aAAO,KAAK;;KA7BhB;IAAA,KAAA;IAAA,KAoCE,gBAAgC;AAC9B,aAAO,KAAK,eAAe;;KArC/B;IAAA,KAAA;IAAA,KA4CE,gBAA8C;AAC5C,aAAO,KAAK;;KA7ChB;IAAA,KAAA;IAAA,KAqDE,gBAA2B;AACzB,aAAO,KAAK;;;AAtDhB,SAAA;EAAkC;ICFrB,qBAAb,SAAA,UAAA;AAAA,iBAAA,qBAAA;AAmCE,+BACE,QACA,OACA,QACA,QACA,QACA,QACA;AAAA,QAAA;AAAA,QAHA,WAGA,QAAA;AAHA,eAAkC,wBAAwB;;AAG1D,QAFA,WAEA,QAAA;AAFA,eAAkB;;AAElB,QADA,WACA,QAAA;AADA,eAAkB;;AAElB,YAAA,SAAA,KAAA,MAAM,WAAN;AADA,UAxCK,UAAmB;AAwCxB,UAtCM,UAsCN;AAAA,UArCM,cAAuB;AAuC7B,QAAM,MAAM,OAAO;AACnB,QAAM,KAAqD,IAAI;AAC/D,QAAM,WAAoB,IAAI;AAE9B,QAAI,CAAC,QAAQ,gCAAgC,QAAQ,MAAM;AACzD,YAAM,IAAI,MAAJ,8CAAsD,wBAAwB;;AAGtF,QAAI,UAAU,UAAU,QAAQ;AAC9B,YAAM,IAAI,MAAM;;AAElB,QAAI,UAAU,CAAC,YAAa,EAAC,QAAQ,YAAY,UAAU,CAAC,QAAQ,YAAY,UAAU;AACxF,aAAO,KACL;AAEF,eAAS;;AAGX,UAAK,aAAa,GAAG;AACrB,UAAK,gBAAgB,QAAQ,kCAAkC,QAAQ,IAAI;AAC3E,UAAK,UAAU;AACf,UAAK,OAAO;AACZ,UAAK,UAAU,SAAS,GAAG,mBAAmB,GAAG;AACjD,UAAK,UAAU;AACf,UAAK,SAAS;AACd,UAAK,UAAU;AACf,UAAK,UAAU;AACf,UAAK,eAAe,MAAK;AAEzB,UAAK,YAAY;AAEjB,UAAK,aAAa,kBAAkB;AACpC,UAAK,YAAY,MAAK,YAAY,gBAAgB;AAlClD,WAAA;;AA1CJ,MAAA,SAAA,oBAAA;AAAA,SAwFS,iBAAP,wBACE,MACA,GACA,GACA,OACA,QACA,KACM;AACN,aAAA,UAAM,gBAAN,KAAA,MAAsB,MAAM,GAAG,GAAG,OAAO,QAAQ;;AAhGrD,eAAA,qBAAA,CAAA;IAAA,KAAA;IAAA,KAWE,gBAAsC;AACpC,aAAO,KAAK;;KAZhB;IAAA,KAAA;IAAA,KAkBE,gBAAmC;AACjC,aAAO,KAAK;;IAnBhB,KAsBE,cAAwB,OAAgB;AACtC,WAAK,cAAc;;;AAvBvB,SAAA;EAAwC;ICR5B;UAAA,cAAA;AAAA,eAAA,aAAA,YAAA,KAAA;AAAA,eAAA,aAAA,aAAA,KAAA;AAAA,eAAA,aAAA,YAAA,KAAA;GAAA,eAAA,eAAA;ICAA;UAAA,sBAAA;AAAA,uBAAA,qBAAA,WAAA,KAAA;AAAA,uBAAA,qBAAA,aAAA,KAAA;AAAA,uBAAA,qBAAA,aAAA,KAAA;AAAA,uBAAA,qBAAA,aAAA,KAAA;AAAA,uBAAA,qBAAA,WAAA,KAAA;AAAA,uBAAA,qBAAA,YAAA,KAAA;AAAA,uBAAA,qBAAA,qBAAA,KAAA;AAAA,uBAAA,qBAAA,sBAAA,KAAA;AAAA,uBAAA,qBAAA,YAAA,KAAA;AAAA,uBAAA,qBAAA,aAAA,KAAA;AAAA,uBAAA,qBAAA,sBAAA,MAAA;AAAA,uBAAA,qBAAA,uBAAA,MAAA;AAAA,uBAAA,qBAAA,YAAA,MAAA;AAAA,uBAAA,qBAAA,aAAA,MAAA;AAAA,uBAAA,qBAAA,sBAAA,MAAA;AAAA,uBAAA,qBAAA,uBAAA,MAAA;GAAA,uBAAA,uBAAA;ICAA;UAAA,cAAA;AAAA,eAAA,aAAA,WAAA,KAAA;AAAA,eAAA,aAAA,YAAA,KAAA;AAAA,eAAA,aAAA,YAAA,KAAA;GAAA,eAAA,eAAA;ICOC,aAAb,WAAA;AAAA,yBAAA;;AAAA,cAIS,oBAAP,2BAAyB,IAA2B,aAAkC;AACpF,YAAQ;WACD,YAAY;AACf,eAAO,GAAG;WACP,YAAY;AACf,eAAO,GAAG;WACP,YAAY;AACf,eAAO,GAAG;;;AAXlB,cAeS,kBAAP,yBAAuB,aAAoC;AACzD,YAAQ;WACD,YAAY;AACf,eAAO,SAAS;WACb,YAAY;AACf,eAAO,SAAS;WACb,YAAY;AACf,eAAO,SAAS;;;AAtBxB,cA6BS,kBAAP,yBAAuB,QAA0C;AAC/D,QAAI;AACJ,QAAI;AACJ,YAAQ;WACD,oBAAoB;AACvB,eAAO;AACP,eAAO,SAAS;AAChB;WACG,oBAAoB;AACvB,eAAO;AACP,eAAO,SAAS;AAChB;WACG,oBAAoB;AACvB,eAAO;AACP,eAAO,SAAS;AAChB;WACG,oBAAoB;AACvB,eAAO;AACP,eAAO,SAAS;AAChB;WACG,oBAAoB;AACvB,eAAO;AACP,eAAO,SAAS;AAChB;WACG,oBAAoB;AACvB,eAAO;AACP,eAAO,SAAS;AAChB;WACG,oBAAoB;AACvB,eAAO;AACP,eAAO,SAAS;AAChB;WACG,oBAAoB;AACvB,eAAO;AACP,eAAO,SAAS;AAChB;WACG,oBAAoB;AACvB,eAAO;AACP,eAAO,SAAS;AAChB;;AAIJ,WAAO;MAAE;MAAM;;;AAxEnB,SAAA;;ICPY;UAAA,iBAAA;AAAA,kBAAA,gBAAA,kBAAA,KAAA;AAAA,kBAAA,gBAAA,iBAAA,KAAA;GAAA,kBAAA,kBAAA;ICAA;UAAA,iBAAA;AAAA,kBAAA,gBAAA,UAAA,KAAA;AAAA,kBAAA,gBAAA,aAAA,KAAA;GAAA,kBAAA,kBAAA;ICQC,SAAb,SAAA,YAAA;AAAA,iBAAA,SAAA;AAwDE,mBACE,QACA,MACA,kBACA,aACA;AAAA,QAAA;AAAA,QADA,gBACA,QAAA;AADA,oBAA2B,YAAY;;AAEvC,YAAA,WAAA,KAAA,MAAM,WAAN;AADA,UA5DF,gBA4DE;AAAA,UA3DF,iBA2DE;AAAA,UA1DF,gBA0DE;AAAA,UAxDM,oBAwDN;AAAA,UAvDM,QAuDN;AAAA,UAtDM,cAsDN;AAAA,UArDM,eAqDN;AAEA,UAAK,UAAU;AACf,UAAK,QAAQ;AACb,UAAK,eAAe;AAEpB,QAAM,mBAAmB,OAAO;AAChC,QAAM,KAAqD,iBAAiB;AAC5E,QAAM,gBAAgB,WAAW,kBAAkB,IAAI;AACvD,QAAM,eAAe,SAAS,eAAe,eAAe,GAAG,eAAe,GAAG;AAEjF,UAAK,gBAAgB,GAAG;AACxB,UAAK,oBAAoB;AACzB,UAAK,iBAAiB;AACtB,UAAK,gBAAgB;AAErB,UAAK;AACL,QAAI,OAAO,qBAAqB,UAAU;AACxC,YAAK,cAAc;AACnB,SAAG,WAAW,cAAc,kBAAkB;WACzC;AACL,YAAK,cAAc,iBAAiB;AACpC,SAAG,WAAW,cAAc,kBAAkB;;AAEhD,OAAG,WAAW,cAAc;AAxB5B,WAAA;;AA7DJ,MAAA,SAAA,QAAA;AAAA,SA2FE,OAAA,gBAAa;AACX,QAAM,KAAqD,KAAK,kBAAkB;AAClF,OAAG,WAAW,KAAK,eAAe,KAAK;;AA7F3C,SAsIE,UAAA,iBACE,MACA,kBACA,YACA,YACA,SACM;AAAA,QAJN,qBAIM,QAAA;AAJN,yBAA2B;;AAIrB,QAHN,eAGM,QAAA;AAHN,mBAAqB;;AAGf,QADN,YACM,QAAA;AADN,gBAA0B,eAAe;;AAEzC,QAAM,KAAqD,KAAK,kBAAkB;AAClF,QAAM,WAAoB,KAAK,kBAAkB;AACjD,QAAM,eAAuB,KAAK;AAClC,SAAK;AAEL,QAAI,YAAY,eAAe,SAAS;AACtC,SAAG,WAAW,cAAc,KAAK,aAAa,KAAK;;AAIrD,QAAM,WAAwB,KAAM,qBAAqB;AACzD,QAAM,iBAAiB,aAAa,WAAW,aAAa,KAAK;AAEjE,QAAI,eAAe,KAAK,iBAAiB,KAAK,YAAY;AACxD,UAAM,oBAAsC,KAAM,eAAe;AACjE,UAAI,YAAY,mBAAmB;AACjC,WAAG,cAAc,cAAc,kBAAmC,MAAM,YAAY,iBAAiB;aAChG;AACL,YAAM,UAAU,IAAI,WAClB,oBAAsC,KAAM,SAAsB,MAClE,aAAa,UACb;AAEF,WAAG,cAAc,cAAc,kBAAkB;;WAE9C;AACL,SAAG,cAAc,cAAc,kBAAkB;;AAEnD,OAAG,WAAW,cAAc;;AAzKhC,SAkME,UAAA,iBAAQ,MAAuB,kBAA8B,YAAwB,YAA2B;AAAA,QAAjF,qBAAiF,QAAA;AAAjF,yBAA2B;;AAAsD,QAAnD,eAAmD,QAAA;AAAnD,mBAAqB;;AAChF,QAAM,WAAoB,KAAK,kBAAkB;AAEjD,QAAI,UAAU;AACZ,UAAM,KAAqD,KAAK,kBAAkB;AAClF,WAAK;AACL,SAAG,iBAAiB,KAAK,eAAe,kBAAkB,MAAM,YAAY;WACvE;AACL,YAAM;;;AA1MZ,SAkNE,aAAA,sBAAa;AACX,QAAM,KAAqD,KAAK,kBAAkB;AAClF,OAAG,aAAa,KAAK;AACrB,SAAK,gBAAgB;AACrB,SAAK,oBAAoB;;AAtN7B,SA4NE,SAAA,gBAAO,YAAoB;AACzB,SAAK;AACL,QAAM,KAAqD,KAAK,kBAAkB;AAClF,OAAG,WAAW,KAAK,eAAe,YAAY,KAAK;AACnD,SAAK,cAAc;;AAhOvB,eAAA,SAAA,CAAA;IAAA,KAAA;IAAA,KAaE,gBAAqB;AACnB,aAAO,KAAK;;KAdhB;IAAA,KAAA;IAAA,KAoBE,gBAA2B;AACzB,aAAO,KAAK;;KArBhB;IAAA,KAAA;IAAA,KA2BE,gBAAyB;AACvB,aAAO,KAAK;;KA5BhB;IAAA,KAAA;IAAA,KAkCE,gBAA+B;AAC7B,aAAO,KAAK;;;AAnChB,SAAA;EAA4B;ICRhB;UAAA,oBAAA;AAAA,qBAAA,mBAAA,YAAA,KAAA;AAAA,qBAAA,mBAAA,WAAA,KAAA;AAAA,qBAAA,mBAAA,cAAA,KAAA;AAAA,qBAAA,mBAAA,eAAA,KAAA;AAAA,qBAAA,mBAAA,eAAA,KAAA;AAAA,qBAAA,mBAAA,mBAAA,KAAA;AAAA,qBAAA,mBAAA,iBAAA,KAAA;GAAA,qBAAA,qBAAA;ICGC,qBAAb,WAAA;AAyBE,+BAAY,QAAgB,QAAqB;AAAA,SAvBjD,UAuBiD;AAAA,SArBjD,UAqBiD;AAC/C,SAAK,UAAU;AACf,SAAK,UAAU;;AA3BnB,eAAA,qBAAA,CAAA;IAAA,KAAA;IAAA,KASE,gBAAqB;AACnB,aAAO,KAAK;;KAVhB;IAAA,KAAA;IAAA,KAgBE,gBAA0B;AACxB,aAAO,KAAK;;;AAjBhB,SAAA;;ICDa,sBAAb,WAAA;AAyBE,gCAAY,QAAgB,QAAgB;AAAA,SAvB5C,UAuB4C;AAAA,SArB5C,UAqB4C;AAC1C,SAAK,UAAU;AACf,SAAK,UAAU;;AA3BnB,eAAA,sBAAA,CAAA;IAAA,KAAA;IAAA,KASE,gBAAqB;AACnB,aAAO,KAAK;;KAVhB;IAAA,KAAA;IAAA,KAgBE,gBAAqB;AACnB,aAAO,KAAK;;;AAjBhB,SAAA;;ICca,YAAb,SAAA,YAAA;AAAA,iBAAA,YAAA;AA6CE,sBAAY,QAAgB,MAAe;AAAA,QAAA;AACzC,YAAA,WAAA,KAAA,MAAM,WAAN;AADyC,UArC3C,OAqC2C;AAAA,UAnC3C,gBAAwB;AAmCmB,UAhC3C,mBAA0C,IAAI;AAgCH,UA/B3C,oBAA4B;AA+Be,UA9B3C,eA8B2C;AAAA,UA7B3C,qBA6B2C;AAAA,UA3BnC,wBAA+C;AA2BZ,UA1BnC,sBAA0C;AA0BP,UAzBnC,kBAAmC;AAyBA,UAF3C,UAAiB;AAIf,UAAK,OAAO;AACZ,UAAK,qBAAqB,MAAK,QAAQ,kBAAkB,wBAA/B,uBAAA;AAHe,WAAA;;AA7C7C,MAAA,SAAA,WAAA;AAAA,SAkEE,yBAAA,gCACE,iBACA,oBACA,YACM;AAAA,QAFN,uBAEM,QAAA;AAFN,2BAA6B;;AAEvB,QADN,eACM,QAAA;AADN,mBAAqB;;AAErB,QAAI,UAA+B;AACnC,QAAM,YAAY,QAAQ,WAAW;AACrC,iBAAc,WAAU,IAAI,oBAA4B,iBAAiB;AAEzE,QAAM,WAAW,KAAK;AACtB,aAAS,UAAU,cAAe,UAAS,SAAS,aAAa;AACjE,SAAK,wBAAwB,YAAY,qBAAqB,YAAY;;AA7E9E,SAqFE,0BAAA,iCAAwB,gBAAuC,YAA8B;AAAA,QAA9B,eAA8B,QAAA;AAA9B,mBAAqB;;AAClF,QAAM,WAAW,KAAK;AACtB,QAAM,QAAQ,eAAe;AAC7B,QAAM,aAAa,aAAa;AAChC,aAAS,SAAS,cAAe,UAAS,SAAS;AACnD,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,WAAK,wBAAwB,aAAa,GAAG,eAAe;;;AA3FlE,SA4GE,wBAAA,+BAAsB,iBAA8C,QAA4B;AAC9F,QAAI,UAA8B;AAClC,QAAM,YAAY,QAAQ,WAAW;AACrC,iBAAc,WAAU,IAAI,mBAA2B,iBAAiB;AACxE,SAAK,sBAAsB;AAC3B,SAAK,eAAe,WAAW,gBAAgB,QAAQ;;AAjH3D,SAwHE,oBAAA,2BAAkB,UAAiC;AACjD,SAAK;AACL,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,IAAI,GAAG,KAAK;AAC/C,WAAK,kBAAkB,SAAS;;;AA3HtC,SAkIE,QAAA,eAAM,eAA8B,cAAkC;AACpE,SAAK,mBAAmB,KAAK,eAAe;;AAnIhD,SAyIE,eAAA,sBAAa,OAAqB;AAChC,eAAA,UAAM,aAAN,KAAA,MAAmB;AACnB,QAAM,uBAAuB,KAAK;AAClC,aAAS,IAAI,GAAG,IAAI,qBAAqB,QAAQ,IAAI,GAAG,KAAK;AAC3D,2BAAqB,GAAG,QAAQ,aAAa;;;AA7InD,SAqJE,aAAA,sBAAa;AACX,SAAK,wBAAwB;AAC7B,SAAK,sBAAsB;AAC3B,SAAK,kBAAkB;AACvB,SAAK,oBAAoB;AACzB,SAAK,mBAAmB;;AA1J5B,SA6JU,uBAAR,gCAAqC;AACnC,SAAK,gBAAgB,SAAS;AAC9B,QAAM,mBAAmB,KAAK;AAC9B,aAAS,KAAK,kBAAkB;AAC9B,aAAO,iBAAiB;;AAG1B,SAAK,iBAAiB,QAAQ,WAAU;AACxC,SAAK,iBAAiB,QAAQ,WAAU;AACxC,SAAK,iBAAiB,QAAQ,WAAU;AACxC,SAAK,iBAAiB,QAAQ,WAAU;AACxC,SAAK,iBAAiB,QAAQ,WAAU;;AAxK5C,SA2KU,oBAAR,2BAA0B,SAA8B;AAAA,QAC9C,WAAqB,QAArB,UAAU,SAAW,QAAX;AAClB,SAAK,kBAAkB,YAAY;AACnC,SAAK,gBAAgB,KAAK;AAG1B,YAAQ;WACD;AACH,aAAK,iBAAiB,OAAO,WAAU;AACvC;WACG;AACH,aAAK,iBAAiB,OAAO,WAAU;AACvC;WACG;AACH,aAAK,iBAAiB,OAAO,WAAU;AACvC;WACG;AACH,aAAK,iBAAiB,OAAO,WAAU;AACvC,YAAI,WAAW,oBAAoB;AAAS,eAAK,iBAAiB,OAAO,WAAU;AACnF;;;AA9LR,SAkMU,0BAAR,iCAAgC,OAAe,SAAoC;AACjF,QAAI,KAAK,iBAAiB,GAAG;AAC3B,UAAM,cAAc,KAAK,sBAAsB;AAC/C,qBAAe,YAAY,QAAQ,aAAa;AAChD,cAAQ,QAAQ,aAAa;;AAE/B,SAAK,sBAAsB,SAAS;;AAxMxC,eAAA,YAAA,CAAA;IAAA,KAAA;IAAA,KAyBE,gBAA4D;AAC1D,aAAO,KAAK;;KA1BhB;IAAA,KAAA;IAAA,KAgCE,gBAAgD;AAC9C,aAAO,KAAK;;KAjChB;IAAA,KAAA;IAAA,KAuCE,gBAA6C;AAC3C,aAAO,KAAK;;;AAxChB,SAAA;EAA+B;AAAlB,UACI,WAAwB,OAAO,eAAe;AADlD,UAEI,eAA4B,OAAO,eAAe;AAFtD,UAGI,gBAA6B,OAAO,eAAe;AAHvD,UAII,oBAAiC,OAAO,eAAe;AAJ3D,UAKI,oBAAiC,OAAO,eAAe;IClB3D,gBAAb,WAAA;AAsDE,0BACE,UACA,QACA,QACA,cACA,kBACA;AAAA,QADA,qBACA,QAAA;AADA,yBAA2B;;AAC3B,SA3Dc,aAAa;AA2D3B,SAzDF,iBAyDE;AAAA,SAvDM,YAuDN;AAAA,SAtDM,UAsDN;AAAA,SArDM,UAqDN;AAAA,SApDM,gBAoDN;AAAA,SAnDM,oBAmDN;AACA,SAAK,YAAY;AACjB,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,gBAAgB;AACrB,SAAK,iBAAiB,WAAW,gBAAgB,KAAK;AACtD,SAAK,oBAAoB,KAAK,MAAM;;AAlExC,eAAA,gBAAA,CAAA;IAAA,KAAA;IAAA,KAcE,gBAAuB;AACrB,aAAO,KAAK;;KAfhB;IAAA,KAAA;IAAA,KAqBE,gBAAqB;AACnB,aAAO,KAAK;;KAtBhB;IAAA,KAAA;IAAA,KA4BE,gBAAkC;AAChC,aAAO,KAAK;;KA7BhB;IAAA,KAAA;IAAA,KAmCE,gBAA2B;AACzB,aAAO,KAAK;;KApChB;IAAA,KAAA;IAAA,KA0CE,gBAA+B;AAC7B,aAAO,KAAK;;KA3ChB;IAAA,KAAA;IAAA,KAwEE,gBAA+B;AAC7B,aAAO,KAAK;;;AAzEhB,SAAA;;ICDa,eAcX,uBAAY,OAAmB,OAAmB,UAA2D;AAAA,MAAjG,UAAiG,QAAA;AAAjG,YAAgB;;AAAiF,MAA9E,UAA8E,QAAA;AAA9E,YAAgB;;AAA8D,MAA3D,aAA2D,QAAA;AAA3D,eAA8B,kBAAkB;;AAAW,OAZ7G,QAY6G;AAAA,OAV7G,QAU6G;AAAA,OAR7G,WAQ6G;AAC3G,OAAK,QAAQ;AACb,OAAK,QAAQ;AACb,OAAK,WAAW;;ICUP,iBAAb,SAAA,WAAA;AAAA,iBAAA,iBAAA;AA6BE,2BAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,UAAA,KAAA,MAAM,WAAN;AAD0B,UAvBpB,UAuBoB;AAAA,UAtBpB,aAAuB;AAsBH,UArBpB,gBAqBoB;AAAA,UApBpB,iBAAyB;AAoBL,UAnBpB,UAmBoB;AAAA,UAlBlB,WAkBkB;AAAA,UAjBlB,QAiBkB;AAAA,UAhBpB,mBAgBoB;AAAA,UAX5B,aAAqB;AAWO,UAPrB,YAAqB,IAAI,QAAQ,GAAG,GAAG,GAAG;AAOrB,UANrB,kBAMqB;AAE1B,UAAK,mBAAmB;AAExB,UAAK,WAAW;AAChB,UAAK,QAAQ;AACb,UAAK,UAAU;AACf,UAAK;AACL,UAAK;AAEL,UAAK,gBAAgB;MACnB,SAAS,IAAI;MACb,YAAY,IAAI;MAChB,UAAU,IAAI;MACd,aAAa,IAAI;;AAdO,WAAA;;AA7B9B,MAAA,SAAA,gBAAA;AAAA,SA4EY,aAAV,oBAAqB,SAAS;AAE5B,QAAI,WAAW,QAAQ,OAAO;AAC5B,gBAAU,QAAQ;;AAGpB,SAAK,WAAW;;AAlFpB,SAiGY,UAAV,iBAAkB,MAAO;AAAA,QAAA,sBAAA,gBAAA,uBAAA;AACvB,QAAI;AACJ,QAAI;AACF,UAAI,MAAM;AACR,qBAAa,KAAK,MAAM;;aAEnB,QAAP;AACA,aAAO,KAAK;;AAGd,SAAK,QAAQ,QAAQ;MACnB,GAAG;MACH,GAAG;MACH,OAAK,wBAAA,kBAAE,KAAK,cAAP,QAAA,mBAAA,SAAA,SAAE,eAAe,UAAjB,OAAA,uBAA0B;MAC/B,QAAM,yBAAA,mBAAE,KAAK,cAAP,QAAA,oBAAA,SAAA,SAAE,gBAAe,WAAjB,OAAA,wBAA2B;;;AA/GvC,SAmHY,YAAV,mBAAoB,QAAQ;AAC1B,SAAK,UAAU,UAAU,CAAC,KAAK;;AApHnC,SAuHY,eAAV,wBAAyB;AAAA,QACf,mBAAqB,KAArB;AACR,SAAK,aAAa,CAAC,KAAK,MAAM,QAAQ,kBAAkB,KAAK,MAAM,SAAS;;AAzHhF,SA4HY,YAAV,qBAAsB;AACpB,QAAI,GAAG;AAEP,QAAI,KAAK,UAAU;AACjB,UAAI,KAAK,SAAS;AAClB,UAAI,KAAK,SAAS;WACb;AACL,UAAI,KAAK,MAAM;AACf,UAAI,KAAK,MAAM;;AAEjB,SAAK,UAAU;MACb,GAAG,KAAK,MAAM,IAAI;MAClB,GAAG,KAAK,MAAM,IAAI;MAClB,OAAO,KAAK,MAAM,QAAQ;MAC1B,QAAQ,KAAK,MAAM,SAAS;;;AA1IlC,SAkJE,SAAA,gBAAO,QAAgB;AACrB,SAAK,oBAAoB;AACzB,SAAK;AACL,WAAO,gBAAgB,WACrB,MACA,KAAK,eACL,KAAK,SACL,KAAK,WACL,KAAK,SACL,KAAK,YACL;;AA5JN,SAgKE,qBAAA,8BAAqB;AACnB,QAAI,CAAC,KAAK;AAAiB;AAC3B,QAAM,SAAS,KAAK;AAEpB,QAAI,OAAgB,KAAK,cAAc;AACvC,QAAM,UAAmB,gBAAe;AACxC,YAAQ,SAAS,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG;AAEzC,WAAO,KAAK,cAAc;AAC1B,QAAM,aAAsB,gBAAe;AAC3C,eAAW,SAAS,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG;AAE5C,WAAO,KAAK,cAAc;AAC1B,QAAM,WAAoB,gBAAe;AACzC,aAAS,SAAS,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG;AAE1C,WAAO,KAAK,cAAc;AAC1B,QAAM,cAAuB,gBAAe;AAC5C,gBAAY,SAAS,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG;AAE7C,YAAQ,UAAU,SAAS,QAAQ;AACnC,YAAQ,UAAU,YAAY,QAAQ;AACtC,YAAQ,UAAU,UAAU,QAAQ;AACpC,YAAQ,UAAU,aAAa,QAAQ;AAEvC,SAAK,cAAc,QAAQ,SAAS,QAAQ,GAAG,QAAQ,GAAG,QAAQ;AAClE,SAAK,cAAc,WAAW,SAAS,WAAW,GAAG,WAAW,GAAG,WAAW;AAC9E,SAAK,cAAc,SAAS,SAAS,SAAS,GAAG,SAAS,GAAG,SAAS;AACtE,SAAK,cAAc,YAAY,SAAS,YAAY,GAAG,YAAY,GAAG,YAAY;;AA5LtF,SAoME,sBAAA,6BAAoB,QAAgB;AAClC,QAAI,KAAK,eAAe,MAAM;AAC5B,UAAM,IAAI,OAAO,WAAW;AAC5B,UAAM,KAAK,IAAI,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE;AACrC,UAAM,KAAK,IAAI,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE;AAErC,UAAM,IAAa,KAAK,OAAO,cAAc;AAC7C,UAAM,IAAI,KAAK;AACf,UAAM,KAAK,KAAK,OAAO;AAEvB,SAAG,MAAM,EAAE,KAAK,GAAG;AACnB,SAAG,MAAM,EAAE,KAAK,GAAG;AAEnB,UAAI,KAAK,mBAAmB,GAAG;AAC7B,YAAM,KAAK,IAAI,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE;AAErC,YAAM,WAAuB,IAAI;AACjC,mBAAW,kBAAkB,IAAI,KAAK,gBAAgB;AAEtD,gBAAQ,gBAAgB,IAAI,UAAU;AACtC,gBAAQ,gBAAgB,IAAI,UAAU;;AAGxC,UAAM,KAAc,IAAI;AACxB,UAAM,KAAc,IAAI;AACxB,cAAQ,MAAM,IAAK,MAAK,OAAO,KAAK,OAAO,GAAG;AAC9C,cAAQ,MAAM,IAAK,MAAK,OAAO,KAAK,OAAO,GAAG;AAE9C,QAAE,SAAS,IAAI,IAAI;AAGnB,UAAM,UAAmB,KAAK,cAAc;AAC5C,cAAQ,SAAS,GAAG,IAAI;AACxB,cAAQ,IAAI;AAEZ,UAAM,aAAsB,KAAK,cAAc;AAC/C,cAAQ,SAAS,GAAG,IAAI;AACxB,iBAAW,SAAS;AAEpB,UAAM,cAAuB,KAAK,cAAc;AAChD,cAAQ,IAAI,GAAG,IAAI;AACnB,kBAAY,SAAS;AAErB,UAAM,WAAoB,KAAK,cAAc;AAC7C,cAAQ,IAAI,GAAG,IAAI;AACnB,eAAS,IAAI;;;AAjPnB,eAAA,iBAAA,CAAA;IAAA,KAAA;IAAA,KAsDE,gBAAc;AACZ,aAAO,KAAK;;IAvDhB,KA+CE,cAAY,GAAG;AACb,WAAK,WAAW;AAChB,WAAK;AACL,WAAK;AACL,WAAK;;KAnDT;IAAA,KAAA;IAAA,KA8DE,gBAAa;AACX,aAAO,KAAK;;IA/DhB,KA0DE,cAAW,GAAG;AACZ,WAAK,UAAU,KAAK,CAAC,KAAK;;KA3D9B;IAAA,KAAA;IAAA,KAwEE,gBAAW;AACT,aAAO,KAAK;;IAzEhB,KAkEE,cAAS,GAAG;AACV,WAAK,QAAQ;AACb,WAAK;AACL,WAAK;;KArET;IAAA,KAAA;IAAA,KAyFE,gBAAoB;AAClB,aAAO,KAAK;;IA1FhB,KA6FE,cAAkB,GAAG;AACnB,WAAK,iBAAiB;;;AA9F1B,SAAA;EAAoC;AAAvB,eACI,aAAsB,IAAI;AAD9B,eAEI,aAAsB,IAAI;AAF9B,eAGI,aAAsB,IAAI;AAH9B,eAII,aAAsB,IAAI;IChC/B;UAAA,WAAA;AAAA,YAAA,UAAA,UAAA,KAAA;AAAA,YAAA,UAAA,UAAA,KAAA;GAAA,YAAA,YAAA;IAaA;UAAA,qBAAA;AAAA,sBAAA,oBAAA,cAAA,KAAA;AAAA,sBAAA,oBAAA,cAAA,KAAA;AAAA,sBAAA,oBAAA,iBAAA,KAAA;GAAA,sBAAA,sBAAA;IAaA;UAAA,oBAAA;AAAA,qBAAA,mBAAA,YAAA,KAAA;AAAA,qBAAA,mBAAA,iBAAA,KAAA;AAAA,qBAAA,mBAAA,UAAA,KAAA;GAAA,qBAAA,qBAAA;IC1BA;UAAA,YAAA;AAAA,aAAA,WAAA,cAAA,KAAA;AAAA,aAAA,WAAA,cAAA,KAAA;AAAA,aAAA,WAAA,WAAA,KAAA;AAAA,aAAA,WAAA,WAAA,KAAA;GAAA,aAAA,aAAA;IAWC,gBAAb,SAAA,eAAA;AAAA,iBAAA,gBAAA;AAkBE,0BAA4B,MAAc;AAAA,QAAA;AACxC,YAAA,cAAA,KAAA,MAAM,SAAN;AADwC,UAAd,OAAA;AAAc,UAXnC,WAWmC;AAAA,UATnC,gBASmC;AAAA,UAPnC,WAOmC;AAAA,UALnC,WAKmC;AAGxC,UAAK,WAAW;AAEhB,UAAK,WAAW;AALwB,WAAA;;AAlB5C,MAAA,SAAA,eAAA;AAAA,SAiCS,aAAP,oBACE,QACA,SACA,aACA,gBACA;AAAA,QADA,mBACA,QAAA;AADA,uBAAoC,kBAAkB;;AAGtD,QAAI,mBAAmB,kBAAkB,aAAa;AACpD,UAAI,eAAe,GAAG;AACpB,yBAAiB,kBAAkB;aAC9B;AACL,uBAAe;;;AAKnB,QAAM,UAAU;MACd,OAAO;MACP,QAAQ;MACR,YAAY;MACZ,eAAe;;AAEjB,SAAK,SAAS,KAAK;;AAvDvB,SAgES,aAAP,oBAAkB,cAAsB,UAAkB,YAAoB;AAC5E,QAAM,cAAc,KAAK,SAAS;AAElC,QAAI,YAAuB,eAAc,cAAc;AAEvD,QAAM,UAAU;MACd,SAAS;MACT,QAAQ;QACN,IAAI;QACJ,MAAM;QACN,UAAU,aAAF,OAAE,YAAa,UAAU;;;AAIrC,SAAK,SAAS,KAAK;;AA9EvB,SAqFS,kBAAP,2BAAiC;AAC/B,WAAO,KAAK,SAAS;;AAtFzB,SA8FS,mBAAP,0BAAwB,cAAsB;AAC5C,WAAO,KAAK,SAAS;;AA/FzB,SAuGS,gBAAP,uBAAqB,cAA8B;AACjD,QAAM,UAAU,KAAK,SAAS,cAAc;AAC5C,WAAO,QAAQ,MAAM;;AAzGzB,SAkHS,eAAP,sBAAoB,cAAsB,YAA4B;AACpE,QAAM,UAAU,KAAK,SAAS,cAAc;AAC5C,WAAO,QAAQ,MAAM;;AApHzB,SA4HS,uBAAP,8BAA4B,cAA8B;AACxD,QAAM,UAAU,KAAK,SAAS,cAAc;AAC5C,QAAM,aAAa,QAAQ,MAAM;AACjC,WAAO,QAAQ,MAAM,aAAa;;AA/HtC,SAuIS,qBAAP,4BAA0B,cAAwD;AAChF,QAAM,UAAU,KAAK,SAAS,cAAc;AAE5C,WAAO,IAAI,aAAa,QAAQ;;AA1IpC,SAqJS,WAAP,kBACE,UACA,cACA,YACA,gBACA,OACO;AACP,QAAM,UAAU,KAAK,SAAS;AAC9B,QAAM,SAAS,QAAQ,QAAQ;AAC/B,QAAM,aAAa,QAAQ,QAAQ;AAEnC,YAAQ,QAAQ,QAAQ;WACjB,kBAAkB;AACrB,aAAK,oBAAoB,UAAU,QAAQ,YAAY,YAAY,gBAAgB;AACnF;WACG,kBAAkB;AACrB,aAAK,eAAe,UAAU,QAAQ,YAAY,YAAY,gBAAgB;AAC9E;;AAGJ,WAAO;;AAzKX,SA4KS,sBAAP,6BACE,UACA,QACA,YACA,YACA,gBACA,OACA;AACA,QAAM,UAAU,QAAQ;AACxB,QAAM,QAAQ,QAAQ;AACtB,QAAM,QAAQ,IAAM,QAAQ,IAAM,UAAU;AAC5C,QAAM,QAAQ,KAAO,QAAQ,IAAM;AACnC,QAAM,QAAQ,QAAQ,IAAM,UAAU;AACtC,QAAM,QAAQ,QAAQ;AAEtB,aAAS,IAAI,YAAY,KAAK,GAAG,KAAK;AACpC,UAAM,KAAK,OAAO,aAAa,aAAa,IAAI;AAChD,UAAM,KAAK,OAAO,aAAa,aAAa,IAAI,aAAa;AAC7D,UAAM,KAAK,OAAO,aAAa,aAAa,IAAI,aAAa,IAAI;AACjE,UAAM,KAAK,OAAO,iBAAiB,aAAa,IAAI,aAAa;AAEjE,eAAS,KAAK,KAAK,QAAQ,KAAK,QAAQ,KAAK,QAAQ,KAAK;;;AAjMhE,SAqMS,iBAAP,wBACE,UACA,QACA,YACA,YACA,gBACA,OACA;AACA,YAAQ;WACD;AACH,iBAAS,KAAK,OAAO,cAAe,KAAI,SAAS,OAAO,kBAAkB;AAC1E;WACG;AAcH,aAAK,UAAU,UAAU,QAAQ,aAAa,YAAY,QAAQ,iBAAiB,YAAY;AAC/F;;AAEA,iBAAS,IAAI,YAAY,KAAK,GAAG,KAAK;AACpC,mBAAS,KACP,OAAO,aAAa,aAAa,KAAM,KAAI,SAAS,OAAO,iBAAiB,aAAa,KAAK;;AAElG;;;AAtOR,SA0OU,YAAR,mBAAkB,KAAK,GAAG,QAAQ,GAAG,QAAQ,GAAG;AAG9C,QAAI,KAAK,EAAE,IAAI,SACb,KAAK,EAAE,IAAI,SACX,KAAK,EAAE,IAAI,SACX,KAAK,EAAE,IAAI;AACb,QAAI,KAAK,EAAE,IAAI,SACb,KAAK,EAAE,IAAI,SACX,KAAK,EAAE,IAAI,SACX,KAAK,EAAE,IAAI;AAEb,QAAI,OAAO,OAAO,OAAO,QAAQ;AAGjC,YAAQ,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAE3C,QAAI,QAAQ,GAAK;AACf,cAAQ,CAAC;AACT,WAAK,CAAC;AACN,WAAK,CAAC;AACN,WAAK,CAAC;AACN,WAAK,CAAC;;AAGR,QAAI,IAAM,QAAQ,MAAU;AAE1B,cAAQ,KAAK,KAAK;AAClB,cAAQ,KAAK,IAAI;AACjB,eAAS,KAAK,IAAK,KAAM,KAAK,SAAS;AACvC,eAAS,KAAK,IAAI,IAAI,SAAS;WAC1B;AAEL,eAAS,IAAM;AACf,eAAS;;AAGX,QAAI,KAAK,SAAS,KAAK,SAAS;AAChC,QAAI,KAAK,SAAS,KAAK,SAAS;AAChC,QAAI,KAAK,SAAS,KAAK,SAAS;AAChC,QAAI,KAAK,SAAS,KAAK,SAAS;AAEhC,WAAO;;AApRX,SAAA;EAAmC;AAAtB,cACI,gBAAwB;EACrC,UAAU,UAAU;EACpB,UAAU,UAAU;EACpB,OAAO,UAAU;;ICHR,iBAAb,SAAA,kBAAA;AAAA,iBAAA,iBAAA;AA6CE,6BAAc;AAAA,QAAA;AACZ,YAAA,iBAAA,KAAA,MAAM,SAAN;AADY,UArCP,cAqCO;AAAA,UAnCP,gBAmCO;AAAA,UAjCP,WAiCO;AAAA,UA/BP,gBA+BO;AAAA,UA7BP,oBA6BO;AAAA,UA3BP,eA2BO;AAAA,UAzBP,qBAyBO;AAAA,UAvBP,aAuBO;AAAA,UArBP,cAqBO;AAAA,UAnBP,YAmBO;AAAA,UAjBN,iBAiBM;AAAA,UAfN,YAeM;AAAA,UAbN,aAaM;AAAA,UAXN,YAWM;AAAA,UATN,iBASM;AAAA,UAPN,kBAOM;AAAA,UALN,eAKM;AAGZ,UAAK,cAAc;AAEnB,UAAK,iBAAiB;AALV,WAAA;;AA7ChB,MAAA,SAAA,gBAAA;AAAA,SA0DS,SAAP,gBAAc,cAA6B,YAA6B;AACtE,QAAI,CAAC,KAAK,aAAa,CAAC,KAAK,cAAc,KAAK,cAAc,KAAK,UAAU;AAC3E,aAAO;;AAGT,QAAI,KAAK,UAAU,sBAAsB,aAAa,mBAAmB;AACvE,aAAO;;AAGT,QAAM,QAAQ,KAAK,UAAU;AAC7B,aAAS,IAAI,QAAQ,GAAG,KAAK,GAAG,KAAK;AACnC,UAAM,aAAa,KAAK,UAAU,iBAAiB;AACnD,UAAM,kBAAkB,KAAK,mBAAmB,YAAY,WAAW;AAEvE,UAAM,cAAc,aAAa,iBAAiB;AAClD,UAAM,mBAAmB,KAAK,mBAAmB,YAAY,YAAY;AAEzE,UAAI,oBAAoB,kBAAkB;AACxC,eAAO;;;AAIX,WAAO;;AAhFX,SA2FS,MAAP,aACE,UACA,aACA,YACA,WACA,SACA;AAAA,QADA,YACA,QAAA;AADA,gBAAmC;;AAEnC,SAAK,aAAa,YAAY;AAC9B,SAAK,YAAY;AACjB,SAAK,YAAY,OAAO,QAAQ,aAAa,cAAc,QAAQ,WAAW,YAAY;AAE1F,SAAK,WAAW;AAEhB,SAAK,iBAAiB;AACtB,SAAK,kBAAkB;AAGvB,QAAI,KAAK,YAAY;AACnB,UAAM,sBAAsB,YAAY;AACxC,UAAM,QAAQ,KAAK,UAAU;AAC7B,eAAS,IAAI,QAAQ,GAAG,KAAK,GAAG,KAAK;AACnC,YAAM,UAAU,KAAK,UAAU,iBAAiB;AAChD,YAAM,eAAe,KAAK,mBAAmB,WAAW,QAAQ;AAChE,aAAK,eAAe,KAAK;UACvB,WAAW;UACX,cAAc;UACd,cAAc,KAAK,UAAU,mBAAmB;UAChD,WAAW,eAAe,IAAI;;AAGhC,4BAAoB,GAAG,YACrB,oBAAoB,GAAG,cAAc,SAAY,IAAI,oBAAoB,GAAG;AAC9E,YAAI,oBAAoB,GAAG,cAAc,GAAG;AAC1C,8BAAoB,GAAG,YAAY,eAAe,IAAI;;AAGxD,YAAM,oBAAoB,KAAK,UAAU,qBAAqB;AAC9D,aAAK,kBAAkB,KAAK,kBAAkB,oBAAoB,KAAK,kBAAkB;;AAG3F,aAAO;;AAGT,WAAO;;AAtIX,SAyIS,kBAAP,2BAAyB;AACvB,QAAM,QAAQ,KAAK,eAAe;AAClC,aAAS,IAAI,QAAQ,GAAG,KAAK,GAAG,KAAK;AACnC,UAAI,KAAK,eAAe,GAAG,cAAc,GAAG;AAC1C,aAAK,cAAc,eAAe,GAAG,YAAY;;;;AA7IzD,SAwJS,OAAP,cACE,UACA,YACA,SAC0B;AAAA,QAD1B,YAC0B,QAAA;AAD1B,gBAA4B;QAAE,UAAU,SAAS;;;AAEjD,SAAK,aAAa,CAAC,CAAC;AACpB,SAAK,YAAY;AACjB,SAAK,YAAY,OAAO,QAAQ,aAAa,cAAc,QAAQ,WAAW,SAAS;AAEvF,SAAK,WAAW;AAEhB,SAAK,iBAAiB;AACtB,SAAK,kBAAkB;AAGvB,QAAI,KAAK,YAAY;AACnB,UAAM,QAAQ,KAAK,UAAU;AAC7B,UAAM,iBAAmC;AACzC,eAAS,IAAI,QAAQ,GAAG,KAAK,GAAG,KAAK;AACnC,YAAM,UAAU,KAAK,UAAU,iBAAiB;AAChD,YAAM,eAAe,KAAK,mBAAmB,YAAY,QAAQ;AACjE,YAAI,CAAC,cAAc;AACjB,iBAAO,KAAK,iCAAiC,QAAQ,OAAO;;AAE9D,aAAK,eAAe,KAAK;UACvB,WAAW;UACX,cAAc;UACd,cAAc,KAAK,UAAU,mBAAmB;;AAGlD,uBAAe,KAAK;UAClB;UACA,MAAM,QAAQ,OAAO;UACrB,UAAU,QAAQ,OAAO;UACzB,YAAY,QAAQ,QAAQ;;AAG9B,YAAM,oBAAoB,KAAK,UAAU,qBAAqB;AAC9D,aAAK,kBAAkB,KAAK,kBAAkB,oBAAoB,KAAK,kBAAkB;;AAG3F,aAAO;;AAGT,WAAO;;AApMX,SA2MS,OAAP,cAAY,UAAmB;AAC7B,QAAI,CAAC,KAAK,aAAa,CAAC,KAAK,YAAY;AACvC;;AAGF,QAAI,UAAU;AACZ,WAAK,aAAa;WACb;AACL,WAAK,YAAY,SAAS;;;AAnNhC,SA2NS,cAAP,qBAAmB,WAAmB;AACpC,QAAI,CAAC,KAAK,aAAa,CAAC,KAAK,YAAY;AACvC;;AAIF,QAAI,KAAK,UAAU;AACjB,WAAK,iBAAiB;AACtB,WAAK,cAAc,IAAM,KAAK,gBAAgB,KAAK;AACnD,UAAI,KAAK,eAAe,GAAG;AACzB,aAAK,aAAa;;eAEX,KAAK,mBAAmB;AACjC,WAAK,sBAAsB;AAC3B,WAAK,cAAc,KAAK,qBAAqB,KAAK;AAClD,UAAI,KAAK,eAAe,GAAK;AAC3B,aAAK,cAAc;AACnB,eAAO,KAAK;;;AAIhB,gBAAY,YAAY;AACxB,SAAK,cAAc;AAGnB,QAAM,QAAQ,KAAK,UAAU;AAC7B,QAAI,eAAe;AACnB,aAAS,IAAI,QAAQ,GAAG,KAAK,GAAG,KAAK;AACnC,UAAI,KAAK,oBAAoB,WAAW,IAAI;AAC1C;;;AAIJ,QAAI,iBAAiB,GAAG;AACtB,WAAK,aAAa;AAElB,UAAI,KAAK,YAAY;AACnB,aAAK;;;;AAhQb,SA0QS,wBAAP,+BAA6B,cAA8B;AACzD,QAAK,MAAK,eAAe,KAAK,eAAe,eAAe,KAAK,eAAe,QAAQ;AACtF,UAAM,YAAY,KAAK,eAAe,cAAc;AACpD,UAAM,cAAc,KAAK,aAAa,KAAK,cAAc,cAAc,KAAK;AAC5E,aAAO,YAAY;;AAErB,WAAO,KAAK;;AAhRhB,SAuRS,kBAAP,yBAAuB,cAAsB;AAC3C,WAAO,KAAK,eAAe,cAAc;;AAxR7C,SA8RS,gBAAP,yBAAuB;AAAA,QAAA,SAAA;AACrB,SAAK,kBACH,KAAK,eAAe,QAAQ,SAAC,OAAU;AACrC,aAAK,QAAQ;;AAGjB,SAAK,eAAe,SAAS;;AApSjC,SA2SS,cAAP,qBAAmB,WAAmB;AACpC,QAAM,QAAQ,KAAK,UAAU;AAC7B,aAAS,IAAI,QAAQ,GAAG,KAAK,GAAG,KAAK;AAEnC,UAAM,eAAe,KAAK,eAAe;AACzC,mBAAa,YAAY;AAGzB,WAAK,oBAAoB,WAAW;;;AAnT1C,SA6TS,sBAAP,6BAA2B,WAAW,cAAc;AAClD,QAAM,WAAW,KAAK;AACtB,QAAM,eAAe,KAAK,eAAe;AACzC,QAAM,iBAAiB,SAAS,qBAAqB;AAErD,iBAAa,aAAa;AAC1B,QAAI,aAAa,YAAY,gBAAgB;AAC3C,cAAQ,KAAK;aACN,SAAS;AACZ,uBAAa,YAAY;AACzB;aACG,SAAS;AACZ,uBAAa,YAAY,aAAa,YAAY,KAAK;AACvD;;AAEA,iBAAO,MAAM,6BAA6B,KAAK;;;AAIrD,QAAI,aAAa,aAAa,aAAa,cAAc,GAAG;AAC1D,aAAO;;AAGT,QAAM,YAAY,KAAK,IAAI,aAAa,WAAW;AACnD,QAAM,YAAY,KAAK,gBAAgB,SAAS,iBAAiB,eAAe;AAChF,iBAAa,eAAe,SAAS,SACnC,aAAa,cACb,cACA,UAAU,YACV,UAAU,SACV,UAAU;AAGZ,QAAI,KAAK,cAAc,SAAS,QAAQ,aAAa,aAAa,gBAAgB;AAChF,aAAO;;AAET,WAAO;;AAjWX,SAwWU,aAAR,oBAAmB,SAAc;AAAA,QAAA,SAAA;AAC/B,SAAK;AAEL,SAAK,eAAe;AACpB,QAAI,QAAQ,QAAQ;AAClB,UAAI,kBAAkB;AADJ,UAAA,QAAA,gBAET,IAFS;AAGhB,YAAM,QAAQ,QAAQ,OAAO;AAC7B,YAAI,YAAY,MAAM;AACtB,YAAI,MAAM,SAAS,mBAAmB,aAAa;AACjD,sBAAY,eAAe;AAC3B;AACA,iBAAK,aAAa,KAAK;YACrB;YACA,aAAa,MAAM;YACnB,WAAW;;;AAGf,eAAK,iBAAiB,WAAW,SAAC,GAAM;AACtC,gBAAM;;;AAbV,eAAS,IAAI,QAAQ,OAAO,SAAS,GAAG,KAAK,GAAG,KAAK;AAAA,cAA5C;;;;AA9Wf,SAsYU,gBAAR,uBAAsB,WAAmB;AAEvC,QAAM,QAAQ,KAAK,UAAU;AAE7B,QAAI,KAAK,aAAa,SAAS,KAAK,KAAK,eAAe,SAAS,GAAG;AAClE,UAAM,eAAe,KAAK,eAAe,OAAO,YAAY;AAC5D,eAAS,IAAI,KAAK,aAAa,SAAS,GAAG,KAAK,GAAG,KAAK;AACtD,YAAM,aAAa,KAAK,aAAa;AACrC,YAAI,CAAC,WAAW,aAAa,eAAe,WAAW,aAAa;AAClE,eAAK,eAAe,KAAK,IAAI,MAAM,WAAW,WAAW;AACzD,qBAAW,YAAY;;;;AAK7B,QAAI,KAAK,eAAe,SAAS,KAAK,KAAK,eAAe,OAAO,YAAY,aAAa,KAAK,UAAU,UAAU;AACjH,UAAI,KAAK,cAAc,SAAS,MAAM;AAEpC,YAAI,KAAK,aAAa,SAAS,GAAG;AAChC,mBAAS,KAAI,KAAK,aAAa,SAAS,GAAG,MAAK,GAAG,MAAK;AACtD,iBAAK,aAAa,IAAG,YAAY;;;AAKrC,YAAI,KAAK,SAAS,mBAAmB,WAAW;AAC9C,eAAK,eAAe,KAAK,IAAI,MAAM,mBAAmB,UAAU;;iBAGzD,KAAK,SAAS,mBAAmB,WAAW;AAErD,aAAK,eAAe,KAAK,IAAI,MAAM,mBAAmB,UAAU;;;;AAraxE,SAgbU,qBAAR,4BAA2B,UAAkB,QAAiC;AAC5E,QAAM,WAAW,OAAO;AACxB,QAAI,oBAA4B;AAChC,QAAI,SAAS,SAAS,UAAU;AAC9B,0BAAoB;WACf;AACL,0BAAoB,SAAS,WAAW;;AAG1C,QAAI,OAAO,SAAS,WAAW;AAC7B,aAAO,kBAAkB,aAAa;WACjC;AACL,aAAO;;;AA5bb,SAscU,kBAAR,yBAAwB,SAAS,MAAc;AAC7C,QAAI,UAAU;AACd,QAAI,aAAa;AACjB,QAAI,UAAU;AAEd,QAAM,WAAW,QAAQ,QAAQ;AACjC,QAAM,UAAU,SAAS;AACzB,aAAS,IAAI,UAAU,GAAG,KAAK,GAAG,KAAK;AACrC,UAAI,OAAO,SAAS,IAAI;AACtB,kBAAU,OAAO,SAAS;AAC1B,qBAAa;AACb;;;AAIJ,cAAU,aAAa;AACvB,QAAI,WAAW,SAAS;AACtB,cAAQ,KAAK;aACN,SAAS;AACZ,oBAAU,UAAU;AACpB;aACG,SAAS;AACZ,oBAAU;AACV;;;AAIN,QAAM,YAAY,SAAS,WAAW,SAAS;AAC/C,QAAM,QAAQ,YAAY,cAAc,YAAY,OAAU,IAAI,UAAU;AAE5E,WAAO;MACL;MACA;MACA;;;AAveN,eAAA,iBAAA,CAAA;IAAA,KAAA;IAAA,KAIE,gBAAyB;AACvB,aAAO,KAAK,aAAa,KAAK;;;AALlC,SAAA;EAAoC;;;;;;;;ICJvB,YAAb,YAAA,WAAA,SAAA,YAAA;AAAA,iBAAA,YAAA;AAAA,aA0BgB,OAAd,cACE,UACA,YACA,UACA,OACA,YACuB;AACvB,YAAQ;WACD;AACH,mBAAmB,aAAc,KAAI,SAAiB,WAAW;AACjE;WACG;AACH,YAAM,QAAK,WAAO,YAAe;AACjC,YAAM,MAAG,WAAO,YAAe;AAC/B,YAAM,OAAO,IAAI;AACjB,mBAAW,MAAM,OAAO,KAAK,OAAO;AACpC,iBAAS,KAAK,KAAK;AACnB,iBAAS,KAAK,KAAK;AACnB,iBAAS,KAAK,KAAK;AACnB,iBAAS,KAAK,KAAK;AACnB;;AAEA,iBAAS,IAAI,YAAY,KAAK,GAAG,KAAK;AACpC,mBAAS,KAAK,WAAW,KAAM,KAAI,SAAS,SAAS,KAAK;;AAE5D;;AAGJ,WAAO;;AAoBT,sBAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,WAAA,KAAA,MAAM,WAAN;AAD0B,+BAAA,OAAA,kBAAA,eAAA,uBAAA;AAAA,+BAAA,OAAA,YAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,eAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,cAAA,gBAAA,uBAAA;AAAA,+BAAA,OAAA,mBAAA,gBAAA,uBAAA;AAAA,WAAA;;AA1E9B,MAAA,SAAA,WAAA;AAAA,SAmFS,SAAP,gBAAc,WAAmB;AAC/B,QAAI,CAAC,KAAK,aAAa;AACrB;;AAGF,gBAAY,YAAY,KAAK;AAG7B,aAAS,IAAI,KAAK,YAAY,SAAS,GAAG,KAAK,GAAG,KAAK;AACrD,UAAM,YAAY,KAAK,YAAY;AACnC,gBAAU,YAAY;;AAIxB,SAAK;AAGL,aAAS,KAAI,KAAK,YAAY,SAAS,GAAG,MAAK,GAAG,MAAK;AACrD,UAAM,aAAY,KAAK,YAAY;AACnC,iBAAU;AACV,UAAI,CAAC,WAAU,aAAc,YAAU,YAAY,WAAU,aAAa;AACxE,aAAK,YAAY,OAAO,IAAG;AAC3B,aAAK,oBAAoB;;;;AAzGjC,SAmHS,mBAAP,0BAAwB,UAAyB,MAAc;AAC7D,SAAK,SAAS,QAAQ;;AApH1B,SA2HS,sBAAP,6BAA2B,MAAc;AACvC,QAAM,WAAW,KAAK,SAAS;AAC/B,QAAI,UAAU;AACZ,aAAO,KAAK,SAAS;;;AA9H3B,SAuIS,yBAAP,gCAA8B,MAAsB;AAClD,QAAM,WAAW,KAAK,SAAS;AAC/B,QAAI,UAAU;AACZ,aAAO,SAAS,qBAAqB;WAChC;AACL,aAAO;;;AA5Ib,SAqJS,mBAAP,0BAAwB,MAA6B;AACnD,WAAO,KAAK,SAAS,SAAS;;AAtJlC,SA6JS,YAAP,qBAA4B;AAC1B,aAAS,IAAI,KAAK,YAAY,SAAS,GAAG,KAAK,GAAG,KAAK;AACrD,UAAI,KAAK,YAAY,GAAG,WAAW;AACjC,eAAO;;;AAGX,WAAO;;AAnKX,SA2KS,oBAAP,2BAAyB,MAAc,SAA4B;AACjE,QAAM,WAAW,KAAK,SAAS;AAC/B,QAAI,CAAC,UAAU;AACb,aAAO,MAAM,6BAA6B;AAC1C;;AAGF,QAAI,YAA4B;AAChC,aAAS,IAAI,KAAK,YAAY,SAAS,GAAG,KAAK,GAAG,KAAK;AACrD,UAAI,CAAC,KAAK,YAAY,GAAG,YAAY,CAAC,KAAK,YAAY,GAAG,YAAY;AACpE,oBAAY,KAAK,YAAY;AAC7B;;;AAIJ,QAAI,CAAC,WAAW;AACd,kBAAY,IAAI;AAChB,WAAK,YAAY,KAAK;;AAExB,SAAK,oBAAoB;AACzB,SAAK,kBAAkB,UAAU,KAAK,UAAU,KAAK,QAAQ;;AA/LjE,SAwMS,YAAP,mBAAiB,MAAc,mBAA2B,SAA2B;AACnF,QAAM,WAAW,KAAK,SAAS;AAC/B,QAAI,CAAC,UAAU;AACb,aAAO,MAAM,6BAA6B;AAC1C;;AAGF,QAAI,CAAC,qBAAqB,oBAAoB,GAAG;AAC/C,aAAO,MAAM;AACb;;AAIF,QAAI,kBAAkB;AACtB,aAAS,IAAI,KAAK,YAAY,SAAS,GAAG,KAAK,GAAG,KAAK;AACrD,UAAI,KAAK,YAAY,GAAG,OAAO,UAAU,KAAK,SAAS;AACrD,0BAAkB,KAAK,YAAY;AACnC;;;AAIJ,QAAI,iBAAiB;AAEnB,eAAS,MAAI,KAAK,YAAY,SAAS,GAAG,OAAK,GAAG,OAAK;AACrD,YAAI,KAAK,YAAY,KAAG,UAAU;AAChC,eAAK,YAAY,OAAO,KAAG;;;AAI/B,sBAAgB,WAAW;AAC3B,sBAAgB,eAAe;AAC/B,sBAAgB,gBAAgB;AAEhC,UAAM,YAAY,IAAI;AACtB,gBAAU,oBAAoB;AAC9B,gBAAU,qBAAqB;AAC/B,gBAAU,KAAK,UAAU,KAAK,QAAQ;AACtC,WAAK,YAAY,KAAK;WACjB;AACL,WAAK,kBAAkB,MAAM;;;AA/OnC,SAyPS,MAAP,aAAW,MAAc,aAAqB,SAA2B;AACvE,QAAM,WAAW,KAAK,SAAS;AAC/B,QAAI,CAAC,UAAU;AACb,aAAO,MAAM,6BAA6B;AAC1C;;AAGF,QAAM,UAAU,KAAK,OAAO,WAAW;AACvC,QAAI,CAAC,SAAS;AACZ,aAAO,MAAM;AACb;;AAIF,QAAI,kBAAkB;AACtB,aAAS,IAAI,KAAK,YAAY,SAAS,GAAG,KAAK,GAAG,KAAK;AACrD,UAAI,KAAK,YAAY,GAAG,OAAO,UAAU,KAAK,SAAS;AACrD,0BAAkB,KAAK,YAAY;AACnC;;;AAIJ,QAAI,iBAAiB;AACnB,WAAK,oBAAoB,MAAM;AAE/B,sBAAgB,cAAc;AAE9B,UAAM,YAAY,IAAI;AACtB,gBAAU,aAAa;AACvB,gBAAU,gBAAgB;AAC1B,gBAAU,YAAY;AACtB,gBAAU,IAAI,UAAU,iBAAiB,KAAK,QAAQ,SAAS;AAC/D,WAAK,YAAY,KAAK;;;AAzR5B,SAiSS,OAAP,cAAY,UAAmB;AAC7B,aAAS,IAAI,KAAK,YAAY,SAAS,GAAG,KAAK,GAAG,KAAK;AACrD,UAAI,KAAK,YAAY,GAAG,UAAU;AAChC,aAAK,YAAY,OAAO,GAAG;aACtB;AACL,aAAK,YAAY,GAAG,KAAK;;;;AAtSjC,SA+SS,cAAP,qBAAmB,WAAmB;AACpC,gBAAY,YAAY;AACxB,aAAS,IAAI,KAAK,YAAY,SAAS,GAAG,KAAK,GAAG,KAAK;AACrD,WAAK,YAAY,GAAG,YAAY;;AAGlC,SAAK;;AArTT,SA8TS,sBAAP,6BAA2B,aAA6B,SAAU;AAChE,QAAI,eAAe,YAAY,aAAa;AAC1C,eAAS,IAAI,KAAK,YAAY,SAAS,GAAG,KAAK,GAAG,KAAK;AACrD,YAAM,YAAY,KAAK,YAAY;AACnC,YAAI,UAAU,cAAc,UAAU,kBAAkB,aAAa;AACnE,oBAAU;AACV,eAAK,YAAY,OAAO,GAAG;;;;AAKjC,QAAI,SAAS;AACX,eAAS,MAAI,KAAK,YAAY,SAAS,GAAG,OAAK,GAAG,OAAK;AACrD,YAAM,cAAY,KAAK,YAAY;AACnC,YACE,YAAU,cACT,aAAU,cAAc,WACvB,YAAU,UAAU,WAAW,YAC/B,QAAQ,WAAW,YAAU,aAC/B;AACA,sBAAU;AACV,eAAK,YAAY,OAAO,KAAG;;;;;AAnVrC,SA6VS,gBAAP,yBAAuB;AACrB,QAAI,KAAK,YAAY,WAAW,KAAK,CAAC,KAAK,iBAAiB;AAC1D;;AAGF,aAAS,IAAI,KAAK,gBAAgB,SAAS,GAAG,KAAK,GAAG,KAAK;AACzD,UAAM,gBAAgB,KAAK,gBAAgB;AAC3C,UAAM,MAAM,KAAK,iBAAiB,GAAG,cAAc;AACnD,UAAM,eAAe,cAAc;AACnC,UAAM,OAAO,cAAc;AAE3B,UAAI,SAAS,WAAW;AAErB,qBAAqC,WAAW;aAC5C;AACL,YAAM,IAAI;AAIV,YAAM,YAAqB,aAAc;AACzC,gBAAQ,cAAc;eACf,UAAU;AACb,gBAAM,WAAoB,UAAU;AACpC,qBAAS,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE;AAChC,sBAAU,WAAW;AACrB;eACG,UAAU;AACb,gBAAM,WAAuB,UAAU;AACvC,qBAAS,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AACtC,sBAAU,qBAAqB;AAC/B;eACG,UAAU;AACb,gBAAM,QAAiB,UAAU;AACjC,kBAAM,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE;AAC7B,sBAAU,QAAQ;AAClB;;AAEA,yBAAa,QAAQ;;;;;AAlYjC,SA8YS,mBAAP,0BAAwB,cAAsB,YAAqD;AACjG,QAAM,UAAU;AAChB,QAAM,SAAS;AACf,aAAS,IAAI,KAAK,YAAY,SAAS,GAAG,KAAK,GAAG,KAAK;AACrD,UAAM,SAAS,KAAK,YAAY,GAAG,sBAAsB;AACzD,UAAI,SAAS,GAAG;AACd,gBAAQ,KAAK;AACb,eAAO,KAAK,KAAK,YAAY,GAAG,gBAAgB;;;AAOpD,QAAI,OAAO,WAAW,GAAG;AACvB,aAAO,OAAO;eACL,OAAO,WAAW,GAAG;AAC9B,aAAO,WAAU,KAAK,OAAO,IAAI,OAAO,IAAI,OAAO,IAAI,QAAQ,IAAI;;AAIrE,WAAO,MAAM;AACb,WAAO;;AApaX,SA4aE,YAAA,qBAAkB;AAChB,SAAK,OAAO,mBAAmB,sBAAsB;;AA7azD,SAqbE,aAAA,sBAAmB;AACjB,SAAK,OAAO,mBAAmB,yBAAyB;;AAtb5D,eAAA,YAAA,CAAA;IAAA,KAAA;IAAA,KAIE,gBAAwB;AACtB,aAAO,KAAK;;IALhB,KAWE,cAAc,KAAa;AACzB,UAAI,MAAM,GAAG;AACX,aAAK,aAAa;;;;AAbxB,SAAA;EAA+B,YAA/B,UAAA,gBAAA,0BAAA,SAAA,WAAA,kBAAA,CA0DG,cA1DH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WA2D2B;;IA3D3B,iBAAA,0BAAA,SAAA,WAAA,YAAA,CA6DG,eA7DH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WA8DqB;;IA9DrB,iBAAA,0BAAA,SAAA,WAAA,eAAA,CAgEG,cAhEH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAiE0C,CAAC,IAAI;;IAjE/C,iBAAA,0BAAA,SAAA,WAAA,cAAA,CAkEG,cAlEH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA,yBAAA;AAAA,WAmE+B;;IAnE/B,iBAAA,0BAAA,SAAA,WAAA,mBAAA,CAoEG,cApEH;EAAA,cAAA;EAAA,YAAA;EAAA,UAAA;EAAA,aAAA;IAAA;ICEa,iBAAb,SAAA,eAAA;AAAA,iBAAA,iBAAA;AA6DE,2BAAY,QAAgB,MAAe;AAAA,QAAA;AACzC,YAAA,cAAA,KAAA,MAAM,WAAN;AADyC,UA3D3C,OA2D2C;AAAA,UAxD3C,aAwD2C;AAAA,UAtDlC,SAAsB,IAAI;AAsDQ,UArDnC,iBAAiC;AAuDvC,UAAK,aAAa,IAAI,UAAU;AAChC,UAAK,OAAO;AAH6B,WAAA;;AA7D7C,MAAA,SAAA,gBAAA;AAAA,SAkFE,yBAAA,gCACE,iBACA,QACA,YACM;AAAA,QAFN,WAEM,QAAA;AAFN,eAAiB;;AAEX,QADN,eACM,QAAA;AADN,mBAAqB;;AAErB,SAAK,WAAW,uBAA+B,iBAAiB,QAAQ;;AAvF5E,SA+FE,0BAAA,iCAAwB,sBAA6C,YAA8B;AAAA,QAA9B,eAA8B,QAAA;AAA9B,mBAAqB;;AACxF,SAAK,WAAW,wBAAwB,sBAAsB;;AAhGlE,SAgHE,wBAAA,+BAAsB,iBAA8C,QAA4B;AAC9F,SAAK,WAAW,sBAA8B,iBAAiB;;AAjHnE,SAwHE,oBAAA,2BAAkB,UAAiC;AACjD,SAAK,WAAW,kBAAkB;;AAzHtC,SAkIE,iBAAA,wBACE,OACA,OACA,UACc;AAAA,QADd,aACc,QAAA;AADd,iBAA8B,kBAAkB;;AAEhD,QAAM,cAAc,IAAI,aAAa,OAAO,OAAO;AACnD,SAAK,eAAe,KAAK;AACzB,WAAO;;AAzIX,SAgJE,oBAAA,2BAAkB,aAAiC;AACjD,QAAM,gBAAgB,KAAK;AAC3B,QAAM,QAAQ,cAAc,QAAQ;AACpC,QAAI,UAAU,IAAI;AAChB,oBAAc,OAAO,OAAO;;;AApJlC,SA2JE,mBAAA,4BAAyB;AACvB,SAAK,eAAe,SAAS;;AA5JjC,SAkKE,UAAA,mBAAgB;AACd,QAAI,KAAK,YAAY;AACnB,WAAK,WAAW;AAChB,WAAK,aAAa;;;AArKxB,eAAA,iBAAA,CAAA;IAAA,KAAA;IAAA,KAaE,gBAA4D;AAC1D,aAAO,KAAK,WAAW;;KAd3B;IAAA,KAAA;IAAA,KAoBE,gBAA6C;AAC3C,aAAO,KAAK,WAAW;;KArB3B;IAAA,KAAA;IAAA,KA2BE,gBAAgD;AAC9C,aAAO,KAAK,WAAW;;KA5B3B;IAAA,KAAA;IAAA,KAkCE,gBAAuC;AACrC,aAAO,KAAK,eAAe,MAAM;;KAnCrC;IAAA,KAAA;IAAA,KAyCE,gBAA8C;AAC5C,aAAO,KAAK;;KA1ChB;IAAA,KAAA;IAAA,KAgDE,gBAA4B;AAC1B,aAAO,KAAK,WAAW;;IAjD3B,KAoDE,cAAkB,OAAe;AAC/B,WAAK,WAAW,gBAAgB;;;AArDpC,SAAA;EAAoC;ICHvB,mBAAb,SAAA,WAAA;AAAA,iBAAA,mBAAA;AAAA,+BAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,UAAA,KAAA,MAAA,WAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UACE,YADF;AAAA,UAIU,YAJV;AAAA,WAAA;;AAAA,MAAA,SAAA,kBAAA;AAAA,SAoCE,SAAA,gBAAO,QAAgB;AACrB,QAAM,WAAW,KAAK;AACtB,QAAI,UAAU;AACZ,UAAM,gBAAgB,SAAS;AAC/B,UAAM,iBAAiB,OAAO;AAC9B,UAAM,WAAW,KAAK;AACtB,eAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,IAAI,GAAG,KAAK;AACpD,YAAI,UAAU;AACZ,cAAM,UAAU,cAAc;AAC9B,kBAAQ,SAAS,MAAM,SAAS,YAAY,cAAc,IAAI;AAC9D,yBAAe,cAAc;;;WAG5B;AACL,aAAO,MAAM;;;AAlDnB,SAyDY,gBAAV,uBAAwB,aAAgC;AACtD,QAAM,WAAW,KAAK;AACtB,QAAI,UAAU;AACZ,UAAM,cAAc,SAAS;AAC7B,UAAM,cAAc,KAAK,QAAQ,UAAU;AAC3C,kBAAY,UAAU,aAAa,aAAa;WAC3C;AACL,kBAAY,IAAI,SAAS,GAAG,GAAG;AAC/B,kBAAY,IAAI,SAAS,GAAG,GAAG;;;AAjErC,eAAA,mBAAA,CAAA;IAAA,KAAA;IAAA,KAiBE,gBAA+B;AAC7B,aAAO,KAAK;;IAlBhB,KASE,cAAa,OAAuB;AAClC,UAAI,KAAK,WAAW;AAClB,aAAK,UAAU,WAAW,aAAa;;AAEzC,YAAM,WAAW,aAAa;AAC9B,WAAK,YAAY;;KAdrB;IAAA,KAAA;IAAA,KAgCE,gBAAyB;AACvB,aAAO,KAAK;;IAjChB,KAwBE,cAAa,OAAiB;AAC5B,UAAI,KAAK,WAAW;AAClB,aAAK,UAAU,aAAa;;AAE9B,YAAM,aAAa;AACnB,WAAK,YAAY;;;AA7BrB,SAAA;EAAsC;ICEzB,gBAAb,SAAA,iBAAA;AAAA,iBAAA,gBAAA;AAAA,4BAAA;AAAA,WAAA,gBAAA,MAAA,MAAA,cAAA;;AAAA,MAAA,SAAA,eAAA;AAAA,SAIE,cAAA,qBAAY,QAAgB,UAAwB,SAAsB;AACxE,QAAM,eAAe;AACrB,QAAM,iBAAiB,CACrB,IAAI,cAAc,YAAY,GAAG,oBAAoB,SAAS,IAC9D,IAAI,cAAc,UAAU,IAAI,oBAAoB,SAAS,IAC7D,IAAI,cAAc,cAAc,IAAI,oBAAoB,SAAS;AAGnE,SAAK,YAAY,QAAQ,UAAU,SAAS,cAAc;;AAZ9D,SAeE,cAAA,qBACE,QACA,UACA,SACA,cACA,gBACA;AACA,QAAM,kBAAkB,eAAe;AACvC,QAAM,eAAe,IAAI,OAAO,QAAQ,eAAe,cAAc,UAAU,YAAY;AAC3F,QAAM,cAAc,IAAI,OAAO,QAAQ,eAAe,aAAa,SAAS,YAAY;AAExF,SAAK,uBAAuB,cAAc;AAC1C,SAAK,sBAAsB,aAAa,YAAY;AACpD,SAAK,kBAAkB;AACvB,SAAK,eAAe,GAAG,QAAQ;AAE/B,SAAK,eAAe,iBAAiB;;AA/BzC,SAkCU,iBAAR,wBAAuB,iBAAgC,UAA4C;AACjG,QAAM,gBAAgB;AACtB,QAAM,cAAc,cAAc;AAClC,QAAM,sBAAsB,KAAK,WAAW,qBAAqB;AACjE,QAAM,SAAS,oBAAoB;AACnC,QAAM,SAAS,cAAc;AAC7B,QAAM,cAAc,oBAAoB,OAAO,aAAa;AAC5D,QAAI,cAA2B;AAC/B,QAAI,CAAE,wBAAuB,cAAc;AACzC,oBAA6B,YAAa;;AAE5C,QAAM,WAAW,IAAI,SAAS,aAAa;AAE3C,QAAI,MAAM,IAAI,QAAQ,UAAU,UAAU;AAC1C,QAAI,MAAM,IAAI,QAAQ,WAAW,WAAW;AAC5C,aAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AACpC,UAAM,OAAO,SAAS,SAAS;AAC/B,UAAM,WAAW,IAAI,QACnB,SAAS,WAAW,MAAM,OAC1B,SAAS,WAAW,OAAO,GAAG,OAC9B,SAAS,WAAW,OAAO,GAAG;AAEhC,cAAQ,IAAI,KAAK,UAAU;AAC3B,cAAQ,IAAI,KAAK,UAAU;;AAG7B,QAAM,SAAS,KAAK;AACpB,QAAI,QAAQ,OAAO;AACnB,QAAI,QAAQ,OAAO;;AA9DvB,SAAA;EAAmC;ICPtB,iBAAb,SAAA,gBAAA;AAAA,iBAAA,iBAAA;AAQE,2BAAY,QAAgB,OAAmB,QAAoB,OAAmB;AAAA,QAAA;AAAA,QAA1D,UAA0D,QAAA;AAA1D,cAAgB;;AAA0C,QAAvC,WAAuC,QAAA;AAAvC,eAAiB;;AAAsB,QAAnB,UAAmB,QAAA;AAAnB,cAAgB;;AACjF,YAAA,eAAA,KAAA,MAAM,WAAN;AAEA,QAAM,YAAoB,QAAQ;AAClC,QAAM,aAAqB,SAAS;AACpC,QAAM,YAAoB,QAAQ;AAGlC,QAAM,WAAyB,IAAI,aAAa;MAE/C,CAAC;MAAW;MAAY,CAAC;MAAW;MAAG;MAAG;MAAG;MAAG;MAAG;MAAW;MAAY,CAAC;MAAW;MAAG;MAAG;MAAG;MAAG;MAAG;MAAW;MAAY;MAAW;MAAG;MAAG;MAAG;MAAG;MAAG,CAAC;MAAW;MAAY;MAAW;MAAG;MAAG;MAAG;MAAG;MAErM,CAAC;MAAW,CAAC;MAAY,CAAC;MAAW;MAAG;MAAI;MAAG;MAAG;MAAG;MAAW,CAAC;MAAY,CAAC;MAAW;MAAG;MAAI;MAAG;MAAG;MAAG;MAAW,CAAC;MAAY;MAAW;MAAG;MAAI;MAAG;MAAG;MAAG,CAAC;MAAW,CAAC;MAAY;MAAW;MAAG;MAAI;MAAG;MAAG;MAE7M,CAAC;MAAW;MAAY,CAAC;MAAW;MAAI;MAAG;MAAG;MAAG;MAAG,CAAC;MAAW;MAAY;MAAW;MAAI;MAAG;MAAG;MAAG;MAAG,CAAC;MAAW,CAAC;MAAY;MAAW;MAAI;MAAG;MAAG;MAAG;MAAG,CAAC;MAAW,CAAC;MAAY,CAAC;MAAW;MAAI;MAAG;MAAG;MAAG;MAE7M;MAAW;MAAY,CAAC;MAAW;MAAG;MAAG;MAAG;MAAG;MAAG;MAAW;MAAY;MAAW;MAAG;MAAG;MAAG;MAAG;MAAG;MAAW,CAAC;MAAY;MAAW;MAAG;MAAG;MAAG;MAAG;MAAG;MAAW,CAAC;MAAY,CAAC;MAAW;MAAG;MAAG;MAAG;MAAG;MAErM,CAAC;MAAW;MAAY;MAAW;MAAG;MAAG;MAAG;MAAG;MAAG;MAAW;MAAY;MAAW;MAAG;MAAG;MAAG;MAAG;MAAG;MAAW,CAAC;MAAY;MAAW;MAAG;MAAG;MAAG;MAAG;MAAG,CAAC;MAAW,CAAC;MAAY;MAAW;MAAG;MAAG;MAAG;MAAG;MAErM,CAAC;MAAW;MAAY,CAAC;MAAW;MAAG;MAAG;MAAI;MAAG;MAAG;MAAW;MAAY,CAAC;MAAW;MAAG;MAAG;MAAI;MAAG;MAAG;MAAW,CAAC;MAAY,CAAC;MAAW;MAAG;MAAG;MAAI;MAAG;MAAG,CAAC;MAAW,CAAC;MAAY,CAAC;MAAW;MAAG;MAAG;MAAI;MAAG;;AAG9M,QAAM,UAAuB,IAAI,YAAY;MAE5C;MAAG;MAAG;MAAG;MAAG;MAAG;MAEf;MAAG;MAAG;MAAG;MAAG;MAAG;MAEf;MAAG;MAAI;MAAG;MAAI;MAAG;MAEjB;MAAI;MAAI;MAAI;MAAI;MAAI;MAEpB;MAAI;MAAI;MAAI;MAAI;MAAI;MAEpB;MAAI;MAAI;MAAI;MAAI;MAAI;;AACrB,UAAK,YAAY,QAAQ,UAAU;AApCiD,WAAA;;AARxF,SAAA;EAAoC;ICAvB,iBAAb,SAAA,gBAAA;AAAA,iBAAA,iBAAA;AAaE,2BACE,QACA,QACA,oBACA,kBACA,YACA,YACA,YACA,YACA;AAAA,QAAA;AAAA,QAPA,WAOA,QAAA;AAPA,eAAiB;;AAOjB,QANA,uBAMA,QAAA;AANA,2BAA6B;;AAM7B,QALA,qBAKA,QAAA;AALA,yBAA2B;;AAK3B,QAJA,eAIA,QAAA;AAJA,mBAAqB;;AAIrB,QAHA,eAGA,QAAA;AAHA,mBAAqB,KAAK,KAAK;;AAG/B,QAFA,eAEA,QAAA;AAFA,mBAAqB;;AAErB,QADA,eACA,QAAA;AADA,mBAAqB,KAAK;;AAE1B,YAAA,eAAA,KAAA,MAAM,WAAN;AADA,UArBM,cAqBN;AAAA,UApBM,YAoBN;AAEA,UAAK,cAAc;MACjB,QAAQ,UAAU;MAClB,oBAAoB,KAAK,IAAI,GAAG,KAAK,MAAM;MAC3C,kBAAkB,KAAK,IAAI,GAAG,KAAK,MAAM;MACzC;MACA;MACA;MACA;;AAEF,UAAK,YAAY,MAAK,YAAY,aAAa,MAAK,YAAY;AAChE,UAAK,WAAW;AAZhB,WAAA;;AAtBJ,MAAA,SAAA,gBAAA;AAAA,SAyCE,aAAA,oBAAW,QAAgB;AAAA,QAAA,oBACwB,KAAK,aAA9C,mBADiB,kBACjB,kBAAkB,qBADD,kBACC;AAE1B,QAAI,QAAQ;AACZ,QAAM,OAAO;AACb,QAAM,WAAyB,IAAI,aAAc,oBAAmB,KAAM,sBAAqB,KAAK;AACpG,QAAM,UAAU;AAEhB,aAAS,KAAK,GAAG,MAAM,kBAAkB,MAAM;AAC7C,UAAM,cAAc;AACpB,UAAM,IAAI,KAAK;AACf,eAAS,KAAK,GAAG,MAAM,oBAAoB,MAAM;AAC/C,YAAM,IAAI,KAAK;AACf,YAAI,OACF,CAAC,KAAK,YAAY,SAClB,KAAK,IAAI,KAAK,YAAY,aAAa,IAAI,KAAK,YAAY,cAC5D,KAAK,IAAI,KAAK,YAAY,aAAa,IAAI,KAAK,YAAY;AAC9D,YAAI,OAAO,KAAK,YAAY,SAAS,KAAK,IAAI,KAAK,YAAY,aAAa,IAAI,KAAK,YAAY;AACjG,YAAI,OACF,KAAK,YAAY,SACjB,KAAK,IAAI,KAAK,YAAY,aAAa,IAAI,KAAK,YAAY,cAC5D,KAAK,IAAI,KAAK,YAAY,aAAa,IAAI,KAAK,YAAY;AAC9D,eAAO,KAAK,IAAI,QAAQ,OAAO,IAAI;AACnC,eAAO,KAAK,IAAI,QAAQ,OAAO,IAAI;AACnC,eAAO,KAAK,IAAI,QAAQ,OAAO,IAAI;AAEnC,YAAM,SAAS,QAAQ;AAEvB,iBAAS,UAAU;AACnB,iBAAS,SAAS,KAAK;AACvB,iBAAS,SAAS,KAAK;AAEvB,iBAAS,SAAS,KAAK;AACvB,iBAAS,SAAS,KAAK;AACvB,iBAAS,SAAS,KAAK;AAEvB,iBAAS,SAAS,KAAK;AACvB,iBAAS,SAAS,KAAK,IAAI;AAE3B,oBAAY,KAAK;;AAEnB,WAAK,KAAK;;AAIZ,aAAS,MAAK,GAAG,MAAK,kBAAkB,OAAM;AAC5C,eAAS,MAAK,GAAG,MAAK,oBAAoB,OAAM;AAC9C,YAAM,IAAI,KAAK,KAAI,MAAK;AACxB,YAAM,IAAI,KAAK,KAAI;AACnB,YAAM,IAAI,KAAK,MAAK,GAAG;AACvB,YAAM,IAAI,KAAK,MAAK,GAAG,MAAK;AAE5B,YAAI,QAAO,KAAK,KAAK,YAAY,aAAa;AAAG,kBAAQ,KAAK,GAAG,GAAG;AACpE,YAAI,QAAO,mBAAmB,KAAK,KAAK,YAAY,KAAK;AAAI,kBAAQ,KAAK,GAAG,GAAG;;;AAIpF,SAAK,YAAY,QAAQ,UAAU,YAAY,KAAK;;AAlGxD,SAAA;EAAoC;ICAvB,gBAAb,SAAA,gBAAA;AAAA,iBAAA,gBAAA;AAYE,0BACE,QACA,OACA,QACA,oBACA,kBACA;AAAA,QAAA;AAAA,QAJA,UAIA,QAAA;AAJA,cAAgB;;AAIhB,QAHA,WAGA,QAAA;AAHA,eAAiB;;AAGjB,QAFA,uBAEA,QAAA;AAFA,2BAA6B;;AAE7B,QADA,qBACA,QAAA;AADA,yBAA2B;;AAE3B,YAAA,eAAA,KAAA,MAAM,WAAN;AADA,UAjBM,cAiBN;AAAA,UAhBM,YAgBN;AAAA,UAfM,aAeN;AAEA,UAAK,cAAc;MACjB;MACA;MACA,oBAAoB,KAAK,MAAM;MAC/B,kBAAkB,KAAK,MAAM;;AAG/B,UAAK,YAAY,MAAK,YAAY,QAAQ;AAC1C,UAAK,aAAa,MAAK,YAAY,SAAS;AAC5C,UAAK,WAAW;AAXhB,WAAA;;AAlBJ,MAAA,SAAA,eAAA;AAAA,SAgCE,aAAA,oBAAW,QAAgB;AAAA,QAAA,oBACwB,KAAK,aAA9C,mBADiB,kBACjB,kBAAkB,qBADD,kBACC;AAE1B,QAAI,QAAQ;AACZ,QAAI,SAAS;AACb,QAAM,OAAO;AACb,QAAM,WAAyB,IAAI,aAAc,oBAAmB,KAAM,sBAAqB,KAAK;AACpG,QAAM,UAAuB,IAAI,YAAY,mBAAmB,qBAAqB;AAErF,aAAS,KAAK,GAAG,MAAM,kBAAkB,MAAM;AAC7C,UAAM,cAAc;AACpB,UAAM,IAAI,KAAK;AACf,eAAS,KAAK,GAAG,MAAM,oBAAoB,MAAM;AAC/C,YAAM,IAAI,KAAK;AACf,YAAM,OAAO,IAAI,KAAK,YAAY,QAAQ,KAAK;AAC/C,YAAM,OAAO,IAAI,KAAK,YAAY,SAAS,KAAK;AAGhD,iBAAS,YAAY;AACrB,iBAAS,YAAY;AACrB,iBAAS,YAAY;AAErB,iBAAS,YAAY;AACrB,iBAAS,YAAY;AACrB,iBAAS,YAAY;AAErB,iBAAS,YAAY;AACrB,iBAAS,YAAY,IAAI;AAEzB,oBAAY,KAAK;;AAEnB,WAAK,KAAK;;AAIZ,YAAQ;AACR,aAAS,MAAK,GAAG,MAAK,kBAAkB,OAAM;AAC5C,eAAS,MAAK,GAAG,MAAK,oBAAoB,OAAM;AAC9C,YAAM,IAAI,KAAK,KAAI,MAAK;AACxB,YAAM,IAAI,KAAK,KAAI;AACnB,YAAM,IAAI,KAAK,MAAK,GAAG;AACvB,YAAM,IAAI,KAAK,MAAK,GAAG,MAAK;AAE5B,gBAAQ,WAAW;AACnB,gBAAQ,WAAW;AACnB,gBAAQ,WAAW;AACnB,gBAAQ,WAAW;AACnB,gBAAQ,WAAW;AACnB,gBAAQ,WAAW;;;AAIvB,SAAK,YAAY,QAAQ,UAAU;;AApFvC,SAAA;EAAmC;ICEtB,mBAAb,SAAA,gBAAA;AAAA,iBAAA,mBAAA;AAoBE,6BACE,QACA,WACA,cACA,QACA,gBACA,gBACA,WACA,YACA,aACA,WACA;AAAA,QAAA;AAAA,QATA,cASA,QAAA;AATA,kBAAoB;;AASpB,QARA,iBAQA,QAAA;AARA,qBAAuB;;AAQvB,QAPA,WAOA,QAAA;AAPA,eAAiB;;AAOjB,QANA,mBAMA,QAAA;AANA,uBAAyB;;AAMzB,QALA,mBAKA,QAAA;AALA,uBAAyB;;AAKzB,QAJA,cAIA,QAAA;AAJA,kBAAqB;;AAIrB,QAHA,eAGA,QAAA;AAHA,mBAAqB;;AAGrB,QAFA,gBAEA,QAAA;AAFA,oBAAsB,IAAI,KAAK;;AAE/B,QADA,cACA,QAAA;AADA,kBAAuB,UAAU;;AAEjC,YAAA,eAAA,KAAA,MAAM,WAAN;AADA,UA9BK,YA8BL;AAAA,UA7BK,QA6BL;AAAA,UA5BK,aA4BL;AAAA,UA3BK,aA2BL;AAAA,UA1BM,cA0BN;AAAA,UAzBM,YAyBN;AAAA,UAxBM,WAwBN;AAEA,UAAK,YAAY;AACjB,UAAK,cAAc;MACjB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;AAGF,UAAK,YAAY;AACjB,UAAK,WAAW;AAEhB,UAAK,QAAQ;AACb,UAAK,aAAa;AAClB,UAAK,aAAa,MAAK,YAAY,SAAS;AAE5C,UAAK;AAEL,QAAI,MAAK,YAAY,cAAc,OAAO;AACxC,UAAI,MAAK,YAAY,YAAY;AAAG,cAAK,YAAY;AACrD,UAAI,MAAK,YAAY,eAAe;AAAG,cAAK,YAAY;;AAG1D,UAAK,YAAY,QAAQ,aAAa,KAAK,MAAK,YAAY,YAAY,KAAK,MAAK;AA5BlF,WAAA;;AA/BJ,MAAA,SAAA,kBAAA;AAAA,SA8DE,gBAAA,yBAAgB;AAAA,QAAA,oBAC8D,KAAK,aAAzE,iBADM,kBACN,gBAAgB,iBADV,kBACU,gBAAgB,eAD1B,kBAC0B,cAAc,YADxC,kBACwC,WAAW,SADnD,kBACmD;AACjE,QAAI,GAAG;AACP,QAAM,SAAkB,IAAI;AAC5B,QAAM,QAAS,gBAAe,aAAa;AAC3C,SAAK,IAAI,GAAG,KAAK,gBAAgB,KAAK;AACpC,UAAM,WAAW;AACjB,UAAM,IAAI,IAAI;AACd,UAAM,SAAS,IAAK,gBAAe,aAAa;AAChD,WAAK,IAAI,GAAG,KAAK,gBAAgB,KAAK;AACpC,YAAM,IAAI,IAAI;AACd,YAAM,QAAQ,IAAI,KAAK,YAAY,cAAc,KAAK,YAAY;AAClE,YAAM,WAAW,KAAK,IAAI;AAC1B,YAAM,WAAW,KAAK,IAAI;AAG1B,YAAM,QAAQ,SAAS;AACvB,YAAM,QAAQ,CAAC,IAAI,SAAS,KAAK;AACjC,YAAM,QAAQ,SAAS;AACvB,aAAK,UAAU,KAAK,OAAO,OAAO;AAGlC,eAAO,SAAS,UAAU,OAAO;AACjC,eAAO;AACP,aAAK,UAAU,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO;AAG/C,YAAI,KAAK,cAAc,UAAU,KAAK;AACpC,eAAK,UAAU,KAAK,GAAG;eAClB;AACL,eAAK,UAAU,KAAK,IAAI,GAAG;;AAG7B,iBAAS,KAAK,KAAK;;AAGrB,WAAK,WAAW,KAAK;;AAGvB,SAAK,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACnC,WAAK,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACnC,YAAI,IAAI,KAAK,WAAW,GAAG;AAC3B,YAAI,IAAI,KAAK,WAAW,IAAI,GAAG;AAC/B,YAAI,IAAI,KAAK,WAAW,IAAI,GAAG,IAAI;AACnC,YAAI,IAAI,KAAK,WAAW,GAAG,IAAI;AAG/B,aAAK,SAAS,KAAK,GAAG,GAAG;AACzB,aAAK,SAAS,KAAK,GAAG,GAAG;;;;AA9GjC,SAmHE,cAAA,qBAAY,OAAO;AAAA,QACT,iBAAmB,KAAK,YAAxB;AACR,QAAI;AACJ,QAAM,SAAS,UAAU,OAAO,KAAK,YAAY,YAAY,KAAK,YAAY;AAC9E,QAAM,OAAO,UAAU,OAAO,IAAI;AAClC,QAAM,mBAAmB,KAAK;AAE9B,SAAK,IAAI,GAAG,KAAK,gBAAgB,KAAK;AAEpC,WAAK,UAAU,KAAK,GAAG,KAAK,aAAa,MAAM;AAG/C,WAAK,UAAU,KAAK,GAAG,MAAM;AAG7B,WAAK,UAAU,KAAK,KAAK;AAGzB,WAAK;;AAEP,QAAM,iBAAiB,KAAK;AAE5B,SAAK,IAAI,GAAG,KAAK,gBAAgB,KAAK;AACpC,UAAM,IAAI,IAAI;AACd,UAAM,QAAQ,IAAI,KAAK,YAAY,cAAc,KAAK,YAAY;AAClE,UAAM,WAAW,KAAK,IAAI;AAC1B,UAAM,WAAW,KAAK,IAAI;AAG1B,UAAM,UAAU,SAAS;AACzB,UAAM,UAAU,KAAK,aAAa;AAClC,UAAM,UAAU,SAAS;AACzB,WAAK,UAAU,KAAK,SAAS,SAAS;AAGtC,WAAK,UAAU,KAAK,GAAG,MAAM;AAG7B,UAAM,MAAM,WAAW,MAAM;AAC7B,UAAM,MAAM,WAAW,MAAM,OAAO;AACpC,WAAK,UAAU,KAAK,KAAK;AAGzB,WAAK;;AAGP,SAAK,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACnC,UAAI,IAAI,mBAAmB;AAC3B,UAAI,IAAI,iBAAiB;AACzB,UAAI,UAAU,MAAM;AAElB,aAAK,SAAS,KAAK,GAAG,IAAI,GAAG;aACxB;AAEL,aAAK,SAAS,KAAK,IAAI,GAAG,GAAG;;;;AAzKrC,SAAA;EAAsC;ICIzB,iBAAb,SAAA,gBAAA;AAAA,iBAAA,iBAAA;AAUE,2BAAY,QAAgB,SAAqC;AAAA,QAAA;AAAA,QAArC,YAAqC,QAAA;AAArC,gBAAiC;;AAC3D,YAAA,eAAA,KAAA,MAAM,WAAN;AAD+D,UATzD,SAAiB;AASwC,UARzD,WAAmB;AAQsC,UAPzD,aAAqB;AAOoC,UANzD,cAAsB,KAAK,KAAK;AAStC,UAAK,SAAS,QAAQ,UAAU,MAAK;AACrC,UAAK,WAAW,QAAQ,YAAY,MAAK;AACzC,UAAK,aAAa,QAAQ,cAAc,MAAK;AAC7C,UAAK,cAAc,QAAQ,eAAe,MAAK;AANgB,QAAA,wBAAA,uBAAA,QAOvD,WAPuD,sBAOvD,UAAU,SAP6C,sBAO7C;AAGlB,QAAM,WAAyB,IAAI,aAAc,YAAW,KAAK;AAEjE,aAAS,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK;AAErC,QAAI,QAAQ;AACZ,aAAS,IAAI,GAAG,KAAK,UAAU,KAAK;AAClC,UAAI,UAAU,MAAK,aAAc,IAAI,WAAY,MAAK;AACtD,UAAM,IAAI,SAAS,KAAK,IAAI;AAC5B,UAAM,IAAI,SAAS,KAAK,IAAI;AAG5B,eAAS,WAAW;AACpB,eAAS,WAAW;AACpB,eAAS,WAAW;AAEpB,eAAS,WAAW;AACpB,eAAS,WAAW;AACpB,eAAS,WAAW;AAEpB,eAAS,WAAY,KAAI,SAAS,KAAK;AACvC,eAAS,WAAY,KAAI,SAAS,KAAK;;AAGzC,QAAM,UAAuB,IAAI,YAAY,WAAW;AACxD,YAAQ;AACR,aAAS,IAAI,GAAG,KAAK,UAAU,KAAK;AAClC,cAAQ,WAAW;AACnB,cAAQ,WAAW,IAAI;AACvB,cAAQ,WAAW;;AAGrB,UAAK,YAAY,QAAQ,UAAU;AAzC4B,WAAA;;AAVnE,SAAA;EAAoC;ICFvB,qBAAb,SAAA,gBAAA;AAAA,iBAAA,qBAAA;AACE,+BAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,eAAA,KAAA,MAAM,WAAN;AACA,QAAM,WAAyB,IAAI,aAAa,CAAC,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG;AAE9G,QAAM,UAAuB,IAAI,YAAY,CAAC,GAAG,GAAG,GAAG;AAEvD,UAAK,YAAY,QAAQ,UAAU;AACnC,UAAK,YAAY,WAAW,kBAAkB;AAPpB,WAAA;;AAD9B,MAAA,SAAA,oBAAA;AAAA,SAWE,cAAA,qBAAY,QAAgB,UAAwB,SAAsB;AACxE,QAAM,eAAe;AACrB,QAAM,iBAAiB,CACrB,IAAI,cAAc,YAAY,GAAG,oBAAoB,SAAS,IAC9D,IAAI,cAAc,cAAc,IAAI,oBAAoB,SAAS;AAEnE,SAAK,YAAY,QAAQ,UAAU,SAAS,cAAc;;AAjB9D,SAAA;EAAwC;ICF3B,gBAAb,SAAA,gBAAA;AAAA,iBAAA,gBAAA;AACE,0BACU,YAOR,QACA;AAAA,QAAA;AAAA,QARQ,eAQR,QAAA;AARQ,mBAMJ;;AAGJ,YAAA,eAAA,KAAA,MAAM,WAAN;AADA,UARQ,aAAA;AAWR,QAAM,SAAS,MAAK,WAAW,UAAU;AACzC,QAAM,OAAO,MAAK,WAAW,QAAQ;AACrC,QAAM,iBAAiB,KAAK,MAAM,MAAK,WAAW,mBAAmB;AACrE,QAAM,kBAAkB,KAAK,MAAM,MAAK,WAAW,oBAAoB;AACvE,QAAM,MAAM,MAAK,WAAW,OAAO,KAAK,KAAK;AAG7C,QAAM,WAAyB,IAAI,aAAc,kBAAiB,KAAM,mBAAkB,KAAK;AAC/F,QAAM,UAAuB,IAAI,YAAY,iBAAiB,kBAAkB;AAGhF,QAAI,QAAQ;AACZ,aAAS,IAAI,GAAG,KAAK,gBAAgB,KAAK;AACxC,eAAS,IAAI,GAAG,KAAK,iBAAiB,KAAK;AACzC,YAAM,IAAK,IAAI,kBAAmB;AAClC,YAAM,IAAK,IAAI,iBAAkB,KAAK,KAAK;AAG3C,iBAAS,WAAY,UAAS,OAAO,KAAK,IAAI,MAAM,KAAK,IAAI;AAC7D,iBAAS,WAAY,UAAS,OAAO,KAAK,IAAI,MAAM,KAAK,IAAI;AAC7D,iBAAS,WAAW,OAAO,KAAK,IAAI;;;AAKxC,YAAQ;AACR,aAAS,KAAI,GAAG,MAAK,gBAAgB,MAAK;AACxC,eAAS,KAAI,GAAG,MAAK,iBAAiB,MAAK;AAEzC,YAAM,IAAK,mBAAkB,KAAK,KAAI,KAAI;AAC1C,YAAM,IAAK,mBAAkB,KAAM,MAAI,KAAK,KAAI;AAChD,YAAM,IAAK,mBAAkB,KAAM,MAAI,KAAK;AAC5C,YAAM,IAAK,mBAAkB,KAAK,KAAI;AAGtC,gBAAQ,WAAW;AACnB,gBAAQ,WAAW;AACnB,gBAAQ,WAAW;AACnB,gBAAQ,WAAW;AACnB,gBAAQ,WAAW;AACnB,gBAAQ,WAAW;;;AAGvB,UAAK,YAAY,QAAQ,UAAU;AA9CnC,WAAA;;AAVJ,MAAA,SAAA,eAAA;AAAA,SA2DE,cAAA,qBAAY,QAAgB,UAAwB,SAAsB;AACxE,QAAM,eAAe;AACrB,QAAM,iBAAiB,CAAC,IAAI,cAAc,YAAY,GAAG,oBAAoB,SAAS;AAEtF,SAAK,YAAY,QAAQ,UAAU,SAAS,cAAc;;AA/D9D,SAAA;EAAmC;ICCtB,QAAb,SAAA,mBAAA;AAAA,iBAAA,QAAA;AA2EE,kBAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,kBAAA,KAAA,MAAM,WAAN;AAD0B,UA1EpB,SA0EoB;AAAA,UAzEpB,gBAyEoB;AAAA,WAAA;;AA3E9B,MAAA,SAAA,OAAA;AAAA,SA2FE,OAAA,eAAK,OAAY;AACf,SAAK,SAAS;AADC,QAAA,sBAG6B,MAApC,cAAA,eAHO,wBAAA,SAGQ,aAAa,MAHrB;AAIf,SAAK,WAAW,MAAM;AACtB,SAAK,eAAe;;AAhGxB,SAmGE,UAAA,iBAAQ,KAAa,OAAY;AAC/B,SAAK,OAAO,OAAO;AAEnB,QAAI,QAAQ,YAAY;AACtB,WAAK,WAAW;WACX;AACL,WAAK,eAAe,KAAK,OAAO;;;AAzGtC,eAAA,QAAA,CAAA;IAAA,KAAA;IAAA,KAuEE,gBAAmB;AACjB,aAAO,KAAK;;IAxEhB,KAIE,cAAiB,OAAqB;AACpC,cAAQ;aACD;AAAL,cAAA,OASM,KAAK,QAPP,eAFJ,KAEI,cACA,2BAHJ,KAGI,0BACA,yBAJJ,KAII,wBACA,mBALJ,KAKI,kBACA,mBANJ,KAMI,kBACA,mBAPJ,KAOI,kBACA,mBARJ,KAQI;AAEF,eAAK,WAAW,IAAI,eAClB,KAAK,QACL,cACA,0BACA,wBACA,kBACA,kBACA,kBACA;AAEF;aAEG;AAAL,cAAA,QAQM,KAAK,QANP,oBAFJ,MAEI,mBACA,uBAHJ,MAGI,sBACA,iBAJJ,MAII,gBACA,yBALJ,MAKI,wBACA,yBANJ,MAMI,wBACA,oBAPJ,MAOI;AAEF,eAAK,WAAW,IAAI,iBAClB,KAAK,QACL,mBACA,sBACA,gBACA,wBACA,wBACA,mBACA,QACA,QACA;AAEF;aAEG;AAAL,cAAA,QACsF,KAAK,QAAjF,aADV,MACU,YAAY,cADtB,MACsB,aAAa,0BADnC,MACmC,yBAAyB,wBAD5D,MAC4D;AAC1D,eAAK,WAAW,IAAI,cAClB,KAAK,QACL,YACA,aACA,yBACA;AAEF;aAEG;AAAL,cAAA,QAC0C,KAAK,QAAvC,WADR,MACQ,UAAU,YADlB,MACkB,WAAW,WAD7B,MAC6B;AAC3B,eAAK,WAAW,IAAI,eAAe,KAAK,QAAQ,UAAU,WAAW;AACrE;;AAGJ,WAAK,gBAAgB;;KApEzB;IAAA,KAAA;IAAA,KA+EE,gBAAoB;AAClB,aAAO,KAAK;;IAhFhB,KAmFE,cAAa,KAAU;AACrB,UAAI,CAAC,KAAK;AACR,aAAK,YAAY,IAAI,mBAAmB,KAAK;aACxC;AACL,aAAK,YAAY;;;;AAvFvB,SAAA;EAA2B;IA8GtB;UAAA,eAAA;AAAA,gBAAA,SAAA;AAAA,gBAAA,cAAA;AAAA,gBAAA,WAAA;AAAA,gBAAA,YAAA;GAAA,gBAAA,gBAAA;IC9GQ,iBAAb,SAAA,WAAA;AAAA,iBAAA,iBAAA;AACE,2BAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,UAAA,KAAA,MAAM,QAAQ,OAAO,KAAK,cAA1B;AAEA,UAAK,YAAY,YAAY,WAAW,SAAS;AACjD,UAAK,YAAY,WAAW,kBAAkB,gBAAgB;AAJpC,WAAA;;AAD9B,SAAA;EAAoC;ICEvB,SAAb,SAAA,mBAAA;AAAA,iBAAA,SAAA;AASE,mBAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,kBAAA,KAAA,MAAM,WAAN;AAD0B,UARpB,aAQoB;AAAA,UAPpB,UAAkB,IAAI;AAOF,UANpB,cAAuB;AAQ7B,UAAK,WAAW,IAAI,eAAe,MAAK,QAAQ,GAAG,GAAG;AACtD,UAAK,WAAW,IAAI,eAAe,MAAK;AAHd,WAAA;;AAT9B,MAAA,SAAA,QAAA;AAAA,SAmBE,SAAA,gBAAO,QAAgB;AACrB,QAAI,CAAC,KAAK;AAAY;AAEtB,QAAM,cAAc,KAAK,OAAO,UAAU;AAC1C,QAAM,OAAO,OAAO;AACpB,QAAM,OAAO,OAAO;AACpB,QAAM,SAAS,KAAK;AAEpB,WAAO,SAAS,MAAM,aAAa;AACnC,QAAM,IAAI,OAAO;AACjB,MAAE,MAAM,EAAE,MAAM,EAAE,MAAM;AACxB,WAAO,SAAS,MAAM,QAAQ;AAC9B,SAAK,WAAW,UAAU,gBAAgB;AAE1C,sBAAA,UAAM,OAAN,KAAA,MAAa;;AAjCjB,SAmDY,gBAAV,uBAAwB,aAAgC;AACtD,QAAI,CAAC,KAAK,aAAa;AACrB,kBAAY,IAAI,SAAS,OAAO,mBAAmB,OAAO,mBAAmB,OAAO;AACpF,kBAAY,IAAI,SAAS,OAAO,mBAAmB,OAAO,mBAAmB,OAAO;AACpF,WAAK,cAAc;;;AAvDzB,eAAA,SAAA,CAAA;IAAA,KAAA;IAAA,KAuCE,gBAAgC;AAC9B,aAAO,KAAK;;IAxChB,KA2CE,cAAc,GAAmB;AAC/B,WAAK,aAAa;AAClB,WAAK,KAAK,SAAS,WAAW,WAAW,UAAU;;;AA7CvD,SAAA;EAA4B;ICGvB;UAAA,gBAAA;AAAA,iBAAA,eAAA,cAAA,KAAA;AAAA,iBAAA,eAAA,cAAA,KAAA;AAAA,iBAAA,eAAA,kBAAA,KAAA;AAAA,iBAAA,eAAA,WAAA,KAAA;AAAA,iBAAA,eAAA,UAAA,MAAA;AAAA,iBAAA,eAAA,UAAA,MAAA;AAAA,iBAAA,eAAA,gBAAA,MAAA;AAAA,iBAAA,eAAA,eAAA,OAAA;AAAA,iBAAA,eAAA,cAAA,OAAA;AAAA,iBAAA,eAAA,oBAAA,OAAA;AAAA,iBAAA,eAAA,WAAA,QAAA;AAAA,iBAAA,eAAA,gBAAA,cAAA;GAAA,iBAAA,iBAAA;IAkBO;UAAA,4BAAA;AAAA,6BAAA,2BAAA,iBAAA,KAAA;AAAA,6BAAA,2BAAA,cAAA,KAAA;GAAA,6BAAA,6BAAA;IAQC,mBAAb,SAAA,mBAAA;AAAA,iBAAA,mBAAA;AAAA,oBACiB,aAAf,sBAAoC;AAClC,WAAO,KAAK,WAAW;;AA+dzB,6BAAY,OAAO;AAAA,QAAA;AACjB,YAAA,kBAAA,KAAA,MAAM,UAAN;AADiB,UA5dX,gBA4dW;AAAA,UA3dX,YA2dW;AAAA,UA1dX,gBA0dW;AAAA,UAzdX,YAAoB;AAydT,UAxdX,YAAqB,IAAI;AAwdd,UAvdX,sBAA+B,IAAI;AAudxB,UAtdX,iBAsdW;AAAA,UArdX,YAAqB,IAAI;AAqdd,UApdX,sBAA+B,IAAI;AAodxB,UAndX,gBAAyB,IAAI;AAmdlB,UAldX,0BAAmC,IAAI;AAkd5B,UAjdX,SAAgB,IAAI,MAAM,GAAG,GAAG,GAAG;AAidxB,UAhdX,mBAA2B;AAgdhB,UA/cX,QAAgB;AA+cL,UA9cX,kBAA0B;AA8cf,UA7cX,SAAiB;AA6cN,UA5cX,mBAA2B;AA4chB,UA3cX,cAAsB;AA2cX,UA1cX,wBAAgC;AA0crB,UAzcX,kBAA0B;AAycf,UAxcX,4BAAoC;AAwczB,UAvcX,YAAoB;AAucT,UAtcX,uBAA+B;AAscpB,UArcX,SAAiB;AAqcN,UApcX,UAAmB;AAocR,UAncX,QAAgB;AAmcL,UAlcX,UAAmB;AAkcR,UAjcX,WAAoB;AAicT,UAhcX,mBAA2B,cAAc;AAgc9B,UA/bX,sBAA+B;AA+bpB,UA9bX,oBAA6B;AA8blB,UA7bX,qBAA8B;AA6bnB,UA5bX,QAAiB;AA4bN,UA3bX,YAAqB;AA2bV,UA1bX,aAAsB;AA0bX,UAzbX,gBAAyB;AAybd,UAxbX,aAAwC,0BAA0B;AAwbvD,UAnbZ,cAmbY;AAGjB,UAAK,YAAY,MAAK;AAHL,WAAA;;AAjerB,MAAA,SAAA,kBAAA;AAAA,SA2eE,SAAA,gBAAO,WAAyB;AAC9B,QAAI,CAAC,KAAK,WAAW,CAAC,KAAK,UAAU;AACnC;;AAGF,QAAI,KAAK,kBAAkB;AACzB,WAAK;AACL,WAAK,mBAAmB;;AAG1B,SAAK,SAAS,YAAY;AAC1B,SAAK,WAAW,SAAS,UAAU,KAAK;;AAtf5C,SA6fE,YAAA,qBAAkB;AAChB,sBAAA,UAAM,UAAN,KAAA;AAEA,QAAI,KAAK,eAAe;AACtB,WAAK;;;AAjgBX,SAwgBE,QAAA,iBAAc;AACZ,SAAK,WAAW;AAChB,SAAK,QAAQ;AACb,SAAK,WAAW,OAAO,YAAY;;AA3gBvC,SAihBE,OAAA,gBAAa;AACX,SAAK,WAAW,OAAO,YAAY;;AAlhBvC,SAqhBU,kBAAR,2BAAoC;AAClC,QAAM,WAAW,IAAI,SAAS,KAAK,QAAQ,OAAO,KAAK;AADrB,QAE1B,cAAgB,SAAhB;AACR,QAAM,SAAS,YAAY,WAAW;AAEtC,WAAO,yBAAyB,OAAO,yBAAyB,YAAY;AAC5E,WAAO,8BAA8B,OAAO,8BAA8B,YAAY;AAEtF,gBAAY,WAAW,eAAe;AAEtC,aAAS,kBAAkB,gBAAgB;AAE3C,SAAK,mBAAmB;AACxB,SAAK,OAAO;AACZ,SAAK,YAAY;AAEjB,WAAO;;AAriBX,SAwiBU,kBAAR,2BAA0C;AACxC,QAAM,WAAW,IAAI,eAAe,KAAK,QAAQ,QAAQ;AACzD,QAAM,eAAe;AACrB,QAAM,mBAAmB,KAAK,YAAY,IAAI;AAC9C,QAAM,WAAW,IAAI,aAAa;AAClC,QAAM,UAAU,IAAI,YAAY,IAAI,KAAK;AAEzC,aAAS,IAAI,GAAG,MAAM,GAAG,IAAI,KAAK,WAAW,EAAE,GAAG;AAChD,UAAI,aAAa,IAAI;AACrB,cAAQ,SAAS,aAAa;AAC9B,cAAQ,SAAS,aAAa;AAC9B,cAAQ,SAAS,aAAa;AAC9B,cAAQ,SAAS,aAAa;AAC9B,cAAQ,SAAS,aAAa;AAC9B,cAAQ,SAAS,aAAa;;AAGhC,QAAM,iBAAiB,CACrB,IAAI,cAAc,cAAc,GAAG,oBAAoB,SAAS,IAChE,IAAI,cAAc,cAAc,IAAI,oBAAoB,SAAS,IACjE,IAAI,cAAc,kBAAkB,IAAI,oBAAoB,SAAS,IACrE,IAAI,cAAc,WAAW,IAAI,oBAAoB,SAAS,IAC9D,IAAI,cAAc,iBAAiB,IAAI,oBAAoB,SAAS,IACpE,IAAI,cAAc,cAAc,IAAI,oBAAoB,SAAS,IACjE,IAAI,cAAc,QAAQ,IAAI,oBAAoB,SAAS,IAC3D,IAAI,cAAc,kBAAkB,IAAI,oBAAoB,SAAS;AAGvE,QAAM,eAAe,IAAI,OACvB,KAAK,QACL,eAAe,cACf,mBAAmB,GACnB,YAAY;AAGd,QAAM,cAAc,IAAI,OAAO,KAAK,QAAQ,eAAe,aAAa,SAAS,YAAY;AAE7F,aAAS,uBAAuB,cAAc;AAC9C,aAAS,sBAAsB,aAAa,YAAY;AACxD,aAAS,kBAAkB;AAC3B,aAAS,eAAe,GAAG,QAAQ;AAEnC,SAAK,gBAAgB;AACrB,SAAK,gBAAgB,eAAe;AACpC,SAAK,YAAY;AACjB,WAAO;;AArlBX,SAwlBU,gBAAR,yBAA8B;AAC5B,aAAS,IAAI,GAAG,IAAI,KAAK,WAAW,KAAK;AACvC,WAAK,oBAAoB;;AAG3B,SAAK,cAAc,QAAQ,KAAK;;AA7lBpC,SAgmBU,sBAAR,6BAA4B,GAAiB;AAAA,QACnC,mBAAuE,KAAvE,kBAA6B,WAA0C,KAArD,WAAoC,eAAiB,KAAhC;AADJ,QAEvB,YAAc,kBAA1B;AACR,QAAM,SAAS,IAAI;AAEnB,QAAM,KAAK,SAAS;AACpB,QAAM,KAAM,UAAS,KAAK;AAC1B,QAAM,KAAM,UAAS,KAAK;AAC1B,QAAM,KAAM,UAAS,KAAK;AAE1B,QAAI,mBAAmB,cAAc,UAAU;AAAA,UAAA,kBAC3B,KAAK,WAAjB,IADuC,gBACvC,GAAG,IADoC,gBACpC,GAAG,IADiC,gBACjC;AADiC,UAErC,iBAAwC,KAAxC,gBAAgB,sBAAwB,KAAxB;AAExB,UAAI,gBAAgB;AAClB,YAAI,eAAe,WAAW,KAAK,WAAW;AAC5C,gBAAM,MAAM;;AAEd,YAAM,MAAM,eAAe;AAE3B,aAAK,IAAI;AACT,aAAK,IAAI;AACT,aAAK,IAAI;aACJ;AACL,aAAK,cAAc,oBAAoB;AACvC,aAAK,cAAc,oBAAoB;AACvC,aAAK,cAAc,oBAAoB;;AAGzC,eAAS,MAAM,SAAS,MAAM,SAAS,MAAM,SAAS,MAAM;AAC5D,eAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK;AAC5E,eAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK;;AAG9E,QAAI,mBAAmB,cAAc,UAAU;AAAA,UACrC,YAAmC,KAAnC,WAAW,sBAAwB,KAAxB;AAEnB,eAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KACrE,UAAU,IAAI,cAAc,oBAAoB;AAClD,eAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KACrE,UAAU,IAAI,cAAc,oBAAoB;AAClD,eAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KACrE,UAAU,IAAI,cAAc,oBAAoB;;AAGpD,QAAI,mBAAmB,cAAc,cAAc;AAAA,UACzC,gBAA2C,KAA3C,eAAe,0BAA4B,KAA5B;AAEvB,eAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KACrE,cAAc,IAAI,cAAc,wBAAwB;AAC1D,eAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KACrE,cAAc,IAAI,cAAc,wBAAwB;AAC1D,eAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KACrE,cAAc,IAAI,cAAc,wBAAwB;;AAG5D,QAAI,mBAAmB,cAAc,OAAO;AAAA,UAClC,SAA6B,KAA7B,QAAQ,mBAAqB,KAArB;AAEhB,eAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,MACnF,OAAO,IAAI,cAAc,kBACzB,GACA;AAGF,eAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,MACvF,OAAO,IAAI,cAAc,kBACzB,GACA;AAEF,eAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,MACvF,OAAO,IAAI,cAAc,kBACzB,GACA;;AAIJ,QAAI,mBAAmB,cAAc,MAAM;AACzC,eAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,MACvF,KAAK,SAAS,cAAc,KAAK,kBACjC,GACA;;AAIJ,QAAI,mBAAmB,cAAc,WAAW;AAC9C,eAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MACxE,KAAK,WAAW,KAAK;;AAGzB,QAAI,mBAAmB,cAAc,UAAU;AAAA,UACrC,YAAc,KAAd;AAER,eAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MACxE,YAAY,cAAc;;AAG9B,QAAI,mBAAmB,cAAc,MAAM;AAAA,UACjC,QAAU,KAAV;AAER,eAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MAAM,KAAK,IACnF,QAAQ,cAAc,KAAK,kBAAkB,QAAQ,GACrD;;AAIJ,QAAI,mBAAmB,cAAc,OAAO;AAC1C,eAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MAAM,KAAK;;AAGvF,QAAI,mBAAmB,cAAc,YAAY;AAC/C,eAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MACxE,KAAK,cAAc,cAAc,KAAK,KAAK,KAAK,wBAAwB;;AAG5E,QAAI,mBAAmB,cAAc,gBAAgB;AACnD,eAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MAAM,SAAS,KAAK,MACxE,KAAK,kBAAkB,cAAc,KAAK;;AAG9C,SAAK,gBAAgB,GAAG,IAAI,IAAI,IAAI;;AAxtBxC,SA2tBU,kBAAR,yBAAwB,GAAW,IAAY,IAAY,IAAY,IAAkB;AAAA,QAC/E,cAAgB,KAAhB;AACR,QAAM,UAAU,KAAK,UAAU,WAAW,WAAW;AACrD,QAAM,WAAW,KAAK;AAEtB,QAAI,SAAS;AACX,UAAM,QAAQ,QAAQ;AACtB,UAAM,SAAS,QAAQ;AAEvB,UAAI,aAAa;AAAA,YAAA,eACQ,YAAY,IAAI,YAAY,SAA3C,IADO,aACP,GAAG,IADI,aACJ,GAAG,IADC,aACD,GAAG,IADF,aACE;AAEjB,YAAM,IAAI,IAAI;AACd,YAAM,IAAI,IAAI;AACd,YAAM,IAAI,IAAI,IAAI;AAClB,YAAM,IAAI,IAAI,IAAI;AAClB,YAAM,QAAQ,IAAI;AAGlB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;AAGpB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;AAGpB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;AAGpB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;aACf;AACL,YAAM,SAAQ,SAAS;AAGvB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;AAGpB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;AAGpB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;AAGpB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;AACpB,iBAAS,KAAK,MAAM;;WAEjB;AAEL,eAAS,KAAK,MAAM;AACpB,eAAS,KAAK,MAAM;AACpB,eAAS,KAAK,MAAM;AAGpB,eAAS,KAAK,MAAM;AACpB,eAAS,KAAK,MAAM;AACpB,eAAS,KAAK,MAAM;AAGpB,eAAS,KAAK,MAAM;AACpB,eAAS,KAAK,MAAM;AACpB,eAAS,KAAK,MAAM;AAGpB,eAAS,KAAK,MAAM;AACpB,eAAS,KAAK,MAAM;AACpB,eAAS,KAAK,MAAM;;AAGtB,aAAS,KAAK,MAAM;AACpB,aAAS,KAAK,MAAM;AACpB,aAAS,KAAK,MAAM;AACpB,aAAS,KAAK,MAAM;AACpB,aAAS,KAAK,MAAM;AACpB,aAAS,KAAK,MAAM;AACpB,aAAS,KAAK,MAAM;AACpB,aAAS,KAAK,MAAM;;AApzBxB,eAAA,mBAAA,CAAA;IAAA,KAAA;IAAA,KAmDE,gBAAuB;AACrB,aAAO,KAAK,SAAS,WAAW,WAAW;;IApD/C,KAuDE,cAAY,SAAkB;AAC5B,UAAI,SAAS;AACX,aAAK,WAAW,YAAY;AAC5B,aAAK,SAAS,WAAW,WAAW,aAAa;aAC5C;AACL,aAAK,WAAW,aAAa;;;KA5DnC;IAAA,KAAA;IAAA,KAmEE,gBAAwB;AACtB,aAAO,KAAK;;IApEhB,KAuEE,cAAa,OAAgB;AAC3B,WAAK,oBAAoB,cAAc;AACvC,WAAK,YAAY;;KAzErB;IAAA,KAAA;IAAA,KA+EE,gBAAkC;AAChC,aAAO,KAAK;;IAhFhB,KAmFE,cAAuB,OAAgB;AACrC,WAAK,oBAAoB,cAAc;AACvC,WAAK,sBAAsB;;KArF/B;IAAA,KAAA;IAAA,KA2FE,gBAA+B;AAC7B,aAAO,KAAK;;IA5FhB,KA+FE,cAAkB,OAAkB;AAClC,WAAK,oBAAoB,cAAc;AACvC,WAAK,iBAAiB;;KAjG1B;IAAA,KAAA;IAAA,KAuGE,gBAAwB;AACtB,aAAO,KAAK;;IAxGhB,KA2GE,cAAa,OAAgB;AAC3B,WAAK,oBAAoB,cAAc;AACvC,WAAK,YAAY;;KA7GrB;IAAA,KAAA;IAAA,KAmHE,gBAAkC;AAChC,aAAO,KAAK;;IApHhB,KAuHE,cAAuB,OAAgB;AACrC,WAAK,oBAAoB,cAAc;AACvC,WAAK,sBAAsB;;KAzH/B;IAAA,KAAA;IAAA,KA+HE,gBAA4B;AAC1B,aAAO,KAAK;;IAhIhB,KAmIE,cAAiB,OAAgB;AAC/B,WAAK,oBAAoB,cAAc;AACvC,WAAK,gBAAgB;;KArIzB;IAAA,KAAA;IAAA,KA2IE,gBAAsC;AACpC,aAAO,KAAK;;IA5IhB,KA+IE,cAA2B,OAAgB;AACzC,WAAK,oBAAoB,cAAc;AACvC,WAAK,0BAA0B;;KAjJnC;IAAA,KAAA;IAAA,KAuJE,gBAAmB;AACjB,aAAO,KAAK;;IAxJhB,KA2JE,cAAU,OAAc;AACtB,WAAK,oBAAoB,cAAc;AACvC,WAAK,SAAS;;KA7JlB;IAAA,KAAA;IAAA,KAmKE,gBAA8B;AAC5B,aAAO,KAAK;;IApKhB,KAuKE,cAAoB,OAAe;AACjC,WAAK,oBAAoB,cAAc;AACvC,WAAK,mBAAmB;;KAzK5B;IAAA,KAAA;IAAA,KA+KE,gBAAmB;AACjB,aAAO,KAAK;;IAhLhB,KAmLE,cAAS,OAAe;AACtB,WAAK,oBAAoB,cAAc;AACvC,WAAK,QAAQ;;KArLjB;IAAA,KAAA;IAAA,KA2LE,gBAA6B;AAC3B,aAAO,KAAK;;IA5LhB,KA+LE,cAAmB,OAAe;AAChC,WAAK,oBAAoB,cAAc;AACvC,WAAK,kBAAkB;;KAjM3B;IAAA,KAAA;IAAA,KAuME,gBAAoB;AAClB,aAAO,KAAK;;IAxMhB,KA2ME,cAAU,OAAe;AACvB,WAAK,oBAAoB,cAAc;AACvC,WAAK,SAAS;;KA7MlB;IAAA,KAAA;IAAA,KAmNE,gBAA8B;AAC5B,aAAO,KAAK;;IApNhB,KAuNE,cAAoB,OAAe;AACjC,WAAK,oBAAoB,cAAc;AACvC,WAAK,mBAAmB;;KAzN5B;IAAA,KAAA;IAAA,KA+NE,gBAAoB;AAClB,aAAO,KAAK;;IAhOhB,KAmOE,cAAU,OAAe;AACvB,WAAK,oBAAoB,cAAc;AACvC,WAAK,cAAc;;KArOvB;IAAA,KAAA;IAAA,KA2OE,gBAA8B;AAC5B,aAAO,KAAK;;IA5OhB,KA+OE,cAAoB,OAAe;AACjC,WAAK,oBAAoB,cAAc;AACvC,WAAK,wBAAwB;;KAjPjC;IAAA,KAAA;IAAA,KAuPE,gBAA6B;AAC3B,aAAO,KAAK;;IAxPhB,KA2PE,cAAmB,OAAe;AAChC,WAAK,oBAAoB,cAAc;AACvC,WAAK,kBAAkB;;KA7P3B;IAAA,KAAA;IAAA,KAmQE,gBAAuC;AACrC,aAAO,KAAK;;IApQhB,KAuQE,cAA6B,OAAe;AAC1C,WAAK,oBAAoB,cAAc;AACvC,WAAK,4BAA4B;;KAzQrC;IAAA,KAAA;IAAA,KA+QE,gBAAuB;AACrB,aAAO,KAAK;;IAhRhB,KAmRE,cAAa,OAAe;AAC1B,WAAK,oBAAoB,cAAc;AACvC,WAAK,YAAY;;KArRrB;IAAA,KAAA;IAAA,KA2RE,gBAAkC;AAChC,aAAO,KAAK;;IA5RhB,KA+RE,cAAwB,OAAe;AACrC,WAAK,oBAAoB,cAAc;AACvC,WAAK,uBAAuB;;KAjShC;IAAA,KAAA;IAAA,KAuSE,gBAAoB;AAClB,aAAO,KAAK;;IAxShB,KA2SE,cAAU,OAAe;AACvB,WAAK,oBAAoB,cAAc;AACvC,WAAK,SAAS;;KA7SlB;IAAA,KAAA;IAAA,KAmTE,gBAAuB;AACrB,aAAO,KAAK;;IApThB,KAuTE,cAAa,OAAe;AAC1B,WAAK,WAAW;AAChB,WAAK,UAAU;AACf,WAAK,YAAY;AACjB,WAAK,mBAAmB,cAAc;AACtC,WAAK,WAAW,KAAK;AAErB,WAAK;AAEL,WAAK,UAAU;;KAhUnB;IAAA,KAAA;IAAA,KAuUE,gBAAsB;AACpB,aAAO,KAAK;;IAxUhB,KA2UE,cAAW,OAAgB;AACzB,WAAK,QAAQ;AACb,WAAK,WAAW,OAAO,UAAU,QAAQ,IAAI;AAC7C,WAAK,UAAU;;KA9UnB;IAAA,KAAA;IAAA,KAoVE,gBAAkC;AAChC,aAAO,KAAK;;IArVhB,KAwVE,cAAuB,OAAgB;AACrC,UAAI,OAAO;AACT,aAAK,WAAW,YAAY;aACvB;AACL,aAAK,WAAW,aAAa;;AAG/B,WAAK,sBAAsB;;KA/V/B;IAAA,KAAA;IAAA,KAqWE,gBAAgC;AAC9B,aAAO,KAAK;;IAtWhB,KAyWE,cAAqB,OAAgB;AACnC,UAAI,OAAO;AACT,aAAK,WAAW,YAAY;aACvB;AACL,aAAK,WAAW,aAAa;;AAG/B,WAAK,oBAAoB;;KAhX7B;IAAA,KAAA;IAAA,KAsXE,gBAAiC;AAC/B,aAAO,KAAK;;IAvXhB,KA0XE,cAAsB,OAAgB;AACpC,UAAI,OAAO;AACT,aAAK,WAAW,YAAY;aACvB;AACL,aAAK,WAAW,aAAa;;AAG/B,WAAK,qBAAqB;;KAjY9B;IAAA,KAAA;IAAA,KAuYE,gBAAoB;AAClB,aAAO,KAAK;;IAxYhB,KA2YE,cAAS,OAAgB;AACvB,UAAI,OAAO;AACT,aAAK,WAAW,YAAY;aACvB;AACL,aAAK,WAAW,aAAa;AAC7B,aAAK,SAAS,YAAY,YAAY,WAAW,SAAS;;AAG5D,WAAK,QAAQ;;KAnZjB;IAAA,KAAA;IAAA,KAyZE,gBAAwB;AACtB,aAAO,KAAK;;IA1ZhB,KA6ZE,cAAa,OAAgB;AAC3B,UAAI,OAAO;AACT,aAAK,WAAW,YAAY;aACvB;AACL,aAAK,WAAW,aAAa;;AAG/B,WAAK,YAAY;;KAparB;IAAA,KAAA;IAAA,KA0aE,gBAAyB;AACvB,aAAO,KAAK;;IA3ahB,KA8aE,cAAc,OAAgB;AAC5B,UAAI,OAAO;AACT,aAAK,WAAW,YAAY;aACvB;AACL,aAAK,WAAW,aAAa;;AAG/B,WAAK,aAAa;;KArbtB;IAAA,KAAA;IAAA,KA2bE,gBAA4B;AAC1B,aAAO,KAAK;;IA5bhB,KA+bE,cAAiB,OAAgB;AAC/B,WAAK,gBAAgB;AAErB,UAAI,OAAO;AACT,aAAK;aAEF;AACH,aAAK;;;KAtcX;IAAA,KAAA;IAAA,KA6cE,gBAA2C;AACzC,aAAO,KAAK;;IA9chB,KAidE,cAAc,OAAkC;AAC9C,UAAM,aAAa,KAAK,SAAS,YAAY;AAC7C,UAAM,SAAS,WAAW;AAE1B,UAAI,UAAU,0BAA0B,aAAa;AACnD,eAAO,yBAAyB,OAAO,yBAAyB,YAAY;AAC5E,eAAO,8BAA8B,OAAO,8BAA8B,YAAY;iBAE/E,UAAU,0BAA0B,UAAU;AACrD,eAAO,yBAAyB,OAAO,yBAAyB,YAAY;AAC5E,eAAO,8BAA8B,OAAO,8BAA8B,YAAY;;AAGxF,WAAK,aAAa;;;AA9dtB,SAAA;EAAsC;;;AClCtC,OAAO,OAAO,SAAS,aAAa;IAEvB,gBAAb,SAAA,WAAA;AAAA,iBAAA,gBAAA;AACE,0BAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,UAAA,KAAA,MAAM,QAAQ,OAAO,KAAK,aAA1B;AAEA,QAAM,SAAS,MAAK,YAAY,WAAW;AAC3C,WAAO,yBAAyB,OAAO,yBAAyB,YAAY;AAC5E,WAAO,8BAA8B,OAAO,8BAA8B,YAAY;AAEtF,UAAK,YAAY,WAAW,eAAe;AAPjB,WAAA;;AAD9B,SAAA;EAAmC;ACInC,IAAM,eAAe,IAAI;IAKZ,gBAAb,SAAA,mBAAA;AAAA,iBAAA,gBAAA;AAgBE,0BAAY,QAAgB,OAAY;AAAA,QAAA;AACtC,YAAA,kBAAA,KAAA,MAAM,WAAN;AADsC,UAfhC,gBAegC;AAAA,UAdhC,YAcgC;AAAA,UAbhC,gBAagC;AAAA,UAZhC,UAYgC;AAAA,UAXhC,UAWgC;AAAA,UAVhC,YAUgC;AAAA,UAThC,eASgC;AAAA,UARhC,UAQgC;AAAA,UAPhC,eAOgC;AAAA,UANhC,eAMgC;AAAA,UALhC,eAKgC;AAAA,UAJhC,gBAIgC;AAGtC,UAAK,UAAU,MAAM,UAAU;AAC/B,UAAK,UAAU,MAAM,UAAU;AAC/B,UAAK,YAAY,MAAM,YAAY;AACnC,UAAK,eAAgB,MAAK,YAAY,MAAU,OAAO,OAAO;AAE9D,UAAK,UAAU;AACf,UAAK,eAAe;AACpB,UAAK,eAAe;AACpB,aAAS,IAAI,GAAG,IAAI,MAAK,cAAc,KAAK;AAC1C,YAAK,QAAQ,KAAK,IAAI;AACtB,YAAK,aAAa,KAAK,MAAK;AAE5B,YAAK,aAAa,KAAK,IAAI;AAC3B,YAAK,aAAa,KAAK,IAAI;;AAE7B,UAAK,eAAe;AAEpB,QAAM,MAAM,MAAM,YAAY,IAAI,cAAc,MAAK;AACrD,UAAK,WAAW;AAEhB,UAAK,WAAW,MAAM;AACtB,UAAK;AAxBiC,WAAA;;AAhB1C,MAAA,SAAA,eAAA;AAAA,SA8CE,SAAA,gBAAO,WAAmB;AACxB,QAAI,MAAM,GACR,SAAS;AACX,aAAS,IAAI,GAAG,IAAI,KAAK,cAAc,KAAK;AAC1C,WAAK,aAAa,MAAM;AACxB,UAAI,KAAK,aAAa,KAAK,GAAG;AAC5B;iBACS,MAAM,GAAG;AAClB,iBAAS,IAAI;AAGb,aAAK,aAAa,UAAU,KAAK,aAAa;AAG9C,aAAK,QAAQ,GAAG,QAAQ,KAAK,QAAQ;;;AAGzC,SAAK,gBAAgB;AAErB,QAAI,iBAAiB;AACrB,QAAI,KAAK,iBAAiB,KAAK,cAAc;AAC3C,uBAAiB;eACR,KAAK,eAAe,GAAG;AAChC,UAAM,YAAY,KAAK,QAAQ,KAAK,QAAQ,SAAS;AACrD,UAAI,QAAQ,SAAS,KAAK,OAAO,eAAe,aAAa,KAAK,SAAS;AACzE,yBAAiB;;;AAMrB,QAAI,gBAAgB;AAClB,WAAK,aAAa,KAAK,gBAAgB,KAAK;AAC5C,WAAK,OAAO,cAAc,QAAQ,KAAK,QAAQ,KAAK;AAEpD,WAAK;;;AAjFX,SAwFE,SAAA,gBAAO,QAAgB;AACrB,SAAK,qBAAqB,QAAQ,KAAK;AACvC,SAAK;AACL,SAAK,cAAc,QAAQ,KAAK;AAEhC,sBAAA,UAAM,OAAN,KAAA,MAAa;;AA7FjB,SAqGE,aAAA,oBAAW,SAAoB;AAC7B,QAAI,SAAS;AACX,WAAK,SAAS,WAAW,WAAW,aAAa;;;AAvGvD,SA2GU,gBAAR,yBAAwB;AACtB,QAAM,WAAW,IAAI,eAAe,KAAK,QAAQ;AAEjD,QAAM,eAAe;AACrB,QAAM,cAAc,KAAK,eAAe;AACxC,QAAM,mBAAmB,cAAc;AACvC,QAAM,WAAW,IAAI,aAAa;AAClC,QAAM,iBAAiB,CACrB,IAAI,cAAc,YAAY,GAAG,oBAAoB,SAAS,IAC9D,IAAI,cAAc,cAAc,IAAI,oBAAoB,SAAS;AAEnE,QAAM,eAAe,IAAI,OAAO,KAAK,QAAQ,mBAAmB,GAAG,YAAY;AAE/E,aAAS,uBAAuB,cAAc;AAC9C,aAAS,kBAAkB;AAC3B,aAAS,eAAe,GAAG,aAAa,kBAAkB;AAE1D,SAAK,gBAAgB;AACrB,SAAK,gBAAgB;AACrB,SAAK,YAAY;AACjB,SAAK,WAAW;;AA/HpB,SAkIU,uBAAR,8BAA6B,QAAQ,QAAwB;AAC3D,QAAM,IAAY,OAAO;AACzB,QAAM,IAAI,EAAE;AACZ,QAAM,KAAK,IAAI,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE;AACrC,QAAM,KAAK,IAAI,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE;AACrC,QAAM,KAAK,IAAI,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE;AACrC,QAAM,IAAI,KAAK;AAEf,OAAG,MAAM;AAET,QAAM,KAAK,IAAI;AACf,QAAM,OAAO,IAAI;AAEjB,QAAM,WAAW,IAAI;AAErB,YAAQ,gBAAgB,IAAI,UAAU;AACtC,YAAQ,gBAAgB,IAAI,UAAU;AAEtC,QAAM,KAAK,IAAI;AACf,QAAM,QAAQ,IAAI;AAClB,QAAM,aAAa,IAAI;AAEvB,OAAG;AAEH,QAAM,YAAY,KAAK;AAEvB,aAAS,IAAI,GAAG,IAAI,KAAK,cAAc,KAAK;AAE1C,UAAI,IAAI,KAAK,cAAc;AACzB,YAAM,IAAI,OAAO;AAEjB,YAAI,MAAM,KAAK,eAAe,KAAK,MAAM,GAAG;AAC1C,kBAAQ,SAAS,GAAG,OAAO,IAAI,IAAI;eAC9B;AACL,kBAAQ,SAAS,OAAO,IAAI,IAAI,GAAG;;AAGrC,aAAK,gBAAgB,YAAY,IAAI;AACrC,mBAAW;AAGX,YAAI,QAAQ,KAAK,KAAK,QAAQ,IAAI,IAAI;AACtC,gBAAQ,MAAM,IAAI,YAAY;AAC9B,YAAI,QAAQ,IAAI,OAAO,OAAO,GAAG;AAC/B,kBAAQ,KAAK,KAAK,IAAI;;AAExB,mBAAW,kBAAkB,IAAI,OAAO;AACxC,gBAAQ,gBAAgB,IAAI,UAAU;AAEtC,gBAAQ,IAAI,GAAG,IAAI;AACnB,gBAAQ,SAAS,GAAG,IAAI;;AAG1B,UAAM,KAAM,IAAI,IAAI,KAAK,gBAAiB;AAC1C,UAAM,KAAO,KAAI,IAAI,KAAK,KAAK,gBAAiB;AAChD,gBAAU,MAAM,GAAG;AACnB,gBAAU,KAAK,KAAK,GAAG;AACvB,gBAAU,KAAK,KAAK,GAAG;AAEvB,gBAAU,MAAM,KAAK;AACrB,gBAAU,KAAK,KAAK,KAAK;AACzB,gBAAU,KAAK,KAAK,KAAK;;;AA/L/B,SAmMU,qBAAR,8BAA6B;AAC3B,QAAI,KAAK,kBAAkB,KAAK,cAAc;AAC5C;;AAGF,SAAK,gBAAgB,KAAK;AAE1B,QAAM,QAAQ,KAAK;AACnB,QAAM,WAAW,IAAM;AACvB,QAAM,YAAY,KAAK;AACvB,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,UAAM,IAAI,IAAM,IAAI;AACpB,UAAM,KAAM,IAAI,IAAI,KAAK,gBAAiB;AAC1C,UAAM,KAAO,KAAI,IAAI,KAAK,KAAK,gBAAiB;AAEhD,gBAAU,MAAM;AAChB,gBAAU,KAAK,KAAK;AAEpB,gBAAU,MAAM;AAChB,gBAAU,KAAK,KAAK;;;AAtN1B,SA0NU,mBAAR,0BAAyB,GAAY,GAAY,KAAoB;AACnE,QAAM,MAAM,EAAE;AACd,YAAQ,UAAU,KAAK;AACvB,QAAM,SAAS,QAAQ,IAAI,GAAG;AAC9B,QAAI,IAAI,IAAI,IAAI;AAChB,QAAI,IAAI,IAAI,IAAI;AAChB,QAAI,IAAI,IAAI,IAAI;;AAhOpB,SAmOU,kBAAR,yBAAwB,GAAY,GAAY,KAAc;AAC5D,SAAK,iBAAiB,GAAG,GAAG;AAC5B,YAAQ,SAAS,GAAG,cAAc;;AArOtC,SAAA;EAAmC;ICbtB,cAAb,SAAA,eAAA;AAAA,iBAAA,cAAA;AAuBE,wBAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,cAAA,KAAA,MAAM,WAAN;AAD0B,UAtBpB,UAAmB,IAAI;AAsBH,UArBpB,QAAiB,IAAI;AAqBD,UApBpB,iBAA0B;AAsBhC,UAAK,SAAS,MAAK;AACnB,UAAK,OAAO,MAAK;AACjB,UAAK,iBAAiB,MAAK;AAJD,WAAA;;AAvB9B,eAAA,cAAA,CAAA;IAAA,KAAA;IAAA,KAKE,gBAAsB;AACpB,aAAO,KAAK;;IANhB,KASE,cAAW,OAAgB;AACzB,WAAK,UAAU;AACf,WAAK,iBAAiB,KAAK,SAAS,KAAK;;KAX7C;IAAA,KAAA;IAAA,KAcE,gBAAoB;AAClB,aAAO,KAAK;;IAfhB,KAkBE,cAAS,OAAgB;AACvB,WAAK,QAAQ;AACb,WAAK,iBAAiB,KAAK,SAAS,KAAK;;;AApB7C,SAAA;EAAiC;ICApB,iBAAb,SAAA,kBAAA;AAAA,iBAAA,iBAAA;AAuBE,2BAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,iBAAA,KAAA,MAAM,WAAN;AAD0B,UAtBpB,WAAoB,IAAI;AAsBJ,UArBpB,WAAmB;AAqBC,UApBpB,iBAA0B;AAuBhC,UAAK,UAAU,MAAK;AACpB,UAAK,UAAU,MAAK;AACpB,UAAK,iBAAiB,MAAK;AALD,WAAA;;AAvB9B,eAAA,iBAAA,CAAA;IAAA,KAAA;IAAA,KAKE,gBAAuB;AACrB,aAAO,KAAK;;IANhB,KASE,cAAY,OAAgB;AAC1B,WAAK,WAAW;AAChB,WAAK,UAAU,KAAK,UAAU,KAAK;;KAXvC;IAAA,KAAA;IAAA,KAcE,gBAAc;AACZ,aAAO,KAAK;;IAfhB,KAkBE,cAAY,OAAe;AACzB,WAAK,WAAW;AAChB,WAAK,UAAU,KAAK,UAAU,KAAK;;;AApBvC,SAAA;EAAoC;ACFpC,MAAM,gBAAgB;ACkBf,0BAA0B,MAAM,MAAM;AAC3C,SACE,KAAK,IAAI,KAAK,KAAK,IAAI,KACvB,KAAK,IAAI,KAAK,KAAK,IAAI,KACvB,KAAK,IAAI,KAAK,KAAK,IAAI,KACvB,KAAK,IAAI,KAAK,KAAK,IAAI,KACvB,KAAK,IAAI,KAAK,KAAK,IAAI,KACvB,KAAK,IAAI,KAAK,KAAK,IAAI;;AAUpB,gCAAgC,SAAS,SAAS;AACvD,MAAM,WAAW,QAAQ,SAAS,QAAQ,QAAQ,QAAQ;AAC1D,SAAO,WAAW,QAAQ,SAAS,QAAQ;;AAStC,6BAA6B,QAAQ,KAAK;AAC/C,MAAM,SAAkB,OAAO;AAE/B,MAAM,eAAwB,IAAI,QAChC,KAAK,IAAI,IAAI,IAAI,GAAG,KAAK,IAAI,OAAO,GAAG,IAAI,IAAI,KAC/C,KAAK,IAAI,IAAI,IAAI,GAAG,KAAK,IAAI,OAAO,GAAG,IAAI,IAAI,KAC/C,KAAK,IAAI,IAAI,IAAI,GAAG,KAAK,IAAI,OAAO,GAAG,IAAI,IAAI;AAGjD,MAAM,WAAW,QAAQ,SAAS,QAAQ;AAC1C,SAAO,WAAW,OAAO;;IC7Cd,qBAAb,SAAA,SAAA;AAAA,iBAAA,qBAAA;AAeE,+BAAY,QAAQ;AAAA,QAAA;AAClB,YAAA,QAAA,KAAA,MAAM,WAAN;AADkB,UAVZ,mBAUY;AAAA,UATZ,cASY;AAAA,UARZ,mBAQY;AAAA,UAPZ,UAOY;AAAA,UANZ,OAAoB,IAAI;AAMZ,UAiIpB,WAjIoB;AAAA,UAsIpB,aAtIoB;AAAA,UA6IpB,gBA7IoB;AAAA,UAqJpB,WArJoB;AAAA,UA6JpB,KA7JoB;AAAA,UAqKpB,OArKoB;AAAA,UA0KpB,mBA1KoB;AAAA,UA4KpB,MA5KoB;AAAA,UAiLpB,sBAjLoB;AAAA,UAuLpB,0BAvLoB;AAAA,UA4LpB,UA5LoB;AAAA,UA8LpB,cA9LoB;AAAA,WAAA;;AAftB,MAAA,SAAA,oBAAA;AAAA,SA6BE,WAAA,kBAAS,WAAW;AAClB,YAAA,UAAM,SAAN,KAAA,MAAe;AAEf,QAAI,kBAAkB;AAEtB,QAAI,KAAK,oBAAoB,KAAK,aAAa;AAC7C,UAAM,YAAY,KAAK,iBAAiB;AAExC,UAAI,KAAK,uBAAuB,cAAc;AAC5C,aAAK,gBAAgB,KAAK,aAAa,KAAK;AAC5C,iBAAS,IAAI,GAAG,MAAM,UAAU,QAAQ,IAAI,KAAK,KAAK;AACpD,cAAM,WAAW,UAAU;AAC3B,cAAI,YAAY,KAAK,eAAe,KAAK,cAAc,WAAW;AAChE,8BAAkB;AAClB,iBAAK,SAAS,aAAa;cAAE;;;;iBAGxB,KAAK,uBAAuB,iBAAiB;AACtD,aAAK,UAAU,KAAK,gBAAgB,KAAK;AACzC,iBAAS,KAAI,GAAG,OAAM,UAAU,QAAQ,KAAI,MAAK,MAAK;AACpD,cAAM,YAAW,UAAU;AAC3B,cAAI,aAAY,KAAK,eAAe,KAAK,iBAAiB,YAAW;AACnE,8BAAkB;AAClB,iBAAK,SAAS,aAAa;cAAE,UAAA;;;;;;AAOrC,QAAI,mBAAmB,QAAQ,KAAK,oBAAoB,iBAAiB;AACvE,WAAK,SAAS,iBAAiB;QAAE,UAAU;;;AAG7C,QAAI,KAAK,oBAAoB,QAAQ,KAAK,oBAAoB,iBAAiB;AAC7E,UAAM,KAAI,KAAK;AACf,WAAK,SAAS,eAAe;QAAE,UAAU;;;AAG3C,SAAK,mBAAmB;;AApE5B,SA4EE,kBAAA,yBAAgB,aAAa,KAAwB;AACnD,QAAM,MAAM,YAAY,OAAO,UAAU;AACzC,QAAM,SAAS,oBAAmB;AAClC,gBAAY,OAAO,QAAQ,OAAO;AAClC,gBAAY,OAAO,QAAQ,OAAO;AAClC,gBAAY,UAAU,QAAQ,KAAK;;AAjFvC,SAwFE,kBAAA,yBAAgB,gBAAgB;AAC9B,QAAM,SAAkB,IAAI;AAC5B,YAAQ,oBAAoB,eAAe,QAAQ,eAAe,OAAO,UAAU,aAAa;AAChG,WAAO;MACL,QAAQ,eAAe;MACvB;;;AA7FN,SAqGE,gBAAA,uBAAc,OAAO;AACnB,QAAI,iBAAiB,cAAc;AACjC,UAAM,MAAM,oBAAmB;AAC/B,WAAK,gBAAgB,OAAO;AAC5B,aAAO,iBAAiB,KAAK,KAAK;eACzB,iBAAiB,iBAAiB;AAC3C,UAAM,SAAS,KAAK,gBAAgB;AACpC,aAAO,oBAAoB,QAAQ,KAAK;;AAE1C,WAAO;;AA9GX,SAqHE,mBAAA,0BAAiB,OAAO;AACtB,QAAI,iBAAiB,cAAc;AACjC,UAAM,MAAM,oBAAmB;AAC/B,WAAK,gBAAgB,OAAO;AAC5B,aAAO,oBAAoB,KAAK,SAAS;eAChC,iBAAiB,iBAAiB;AAC3C,UAAM,SAAS,KAAK,gBAAgB;AACpC,aAAO,uBAAuB,QAAQ,KAAK;;AAE7C,WAAO;;AA9HX,SAiIE,UAAA,mBAAU;AACR,SAAK,mBAAmB,KAAK,MAAM,YAAY;AAC/C,SAAK,cAAc,KAAK,OAAO,aAAa;;AAnIhD,eAAA,qBAAA,CAAA;IAAA,KAAA;IAAA,KAsBE,gBAAsB;AACpB,aAAO,KAAK;;;AAvBhB,SAAA;EAAwC;AAA3B,mBACI,YAAqB,IAAI;AAD7B,mBAEI,YAAyB,IAAI;AAFjC,mBAGI,YAAyB,IAAI;AA4M9C,YAAY,oBAAoB,CAAC;AACjC,qBAAqB,aAAkB,WAAkB;AACvD,YAAU,QAAQ,SAAC,UAAa;AAC9B,WAAO,oBAAoB,SAAS,WAAW,QAAQ,SAAC,MAAS;AAC/D,kBAAY,UAAU,QAAQ,SAAS,UAAU;;;;ICxN1C,MAAb,SAAA,YAAA;AAAA,iBAAA,MAAA;AAiBE,gBAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,WAAA,KAAA,MAAM,WAAN;AAD0B,UAFpB,SAAgB,IAAI,MAAM,GAAG,GAAG,GAAG;AAIzC,UAAK,QAAQ,MAAK;AAFQ,WAAA;;AAjB9B,MAAA,SAAA,KAAA;AAAA,SA0BE,YAAA,qBAAY;AACV,SAAK,MAAM,WAAW,YAAY;;AA3BtC,SAkCE,aAAA,sBAAa;AACX,SAAK,MAAM,WAAW,aAAa;;AAnCvC,eAAA,MAAA,CAAA;IAAA,KAAA;IAAA,KAME,gBAAmB;AACjB,aAAO,KAAK;;IAPhB,KAUE,cAAU,OAAc;AACtB,WAAK,SAAS;AACd,WAAK,MAAM,WAAW,SAAS,KAAI,gBAAgB;;;AAZvD,SAAA;EAAyB;AAAZ,IACM,iBAAiB,OAAO,kBAAkB;ICFhD,UAAb,SAAA,MAAA;AAAA,iBAAA,UAAA;AAiBE,oBAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,KAAA,KAAA,MAAM,WAAN;AAD0B,UAFpB,WAAmB;AAIzB,UAAK,UAAU,MAAK;AAFM,WAAA;;AAjB9B,MAAA,SAAA,SAAA;AAAA,SAyBE,YAAA,qBAAY;AACV,SAAK,MAAM,WAAW,YAAY;;AA1BtC,SAiCE,aAAA,sBAAa;AACX,SAAK,MAAM,WAAW,aAAa;;AAlCvC,eAAA,UAAA,CAAA;IAAA,KAAA;IAAA,KAME,gBAAsB;AACpB,aAAO,KAAK;;IAPhB,KAUE,cAAY,OAAe;AACzB,WAAK,WAAW;AAChB,WAAK,MAAM,WAAW,SAAS,SAAQ,kBAAkB;;;AAZ7D,SAAA;EAA6B;AAAhB,QACI,mBAAmB,OAAO,kBAAkB;ICDhD,YAAb,SAAA,MAAA;AAAA,iBAAA,YAAA;AA+BE,sBAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,KAAA,KAAA,MAAM,WAAN;AAD0B,UAHpB,QAAgB;AAGI,UAFpB,OAAe;AAIrB,UAAK,OAAO,MAAK;AACjB,UAAK,MAAM,MAAK;AAHU,WAAA;;AA/B9B,eAAA,YAAA,CAAA;IAAA,KAAA;IAAA,KAOE,gBAAmB;AACjB,aAAO,KAAK;;IARhB,KAWE,cAAS,OAAe;AACtB,WAAK,QAAQ;AACb,WAAK,MAAM,WAAW,SAAS,WAAU,eAAe;;KAb5D;IAAA,KAAA;IAAA,KAmBE,gBAAkB;AAChB,aAAO,KAAK;;IApBhB,KAuBE,cAAQ,OAAe;AACrB,WAAK,OAAO;AACZ,WAAK,MAAM,WAAW,SAAS,WAAU,cAAc;;;AAzB3D,SAAA;EAA+B;AAAlB,UACI,gBAAgB,OAAO,kBAAkB;AAD7C,UAEI,eAAe,OAAO,kBAAkB;ICSnC,QAAtB,SAAA,SAAA;AAAA,iBAAA,QAAA;AAAA,oBAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,QAAA,KAAA,MAAA,SAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UAIE,aAAoB,MAAM;AAJ5B,UASE,QAAgB;AATlB,UAcE,SAAiB;AAdnB,UAmBE,eAAuB;AAnBzB,UAwBqB,UAAmB;AAxBxC,UA0BU,yBA1BV;AAAA,UA2BU,gBA3BV;AAAA,UA4BU,oBA5BV;AAAA,UA6BU,sBA7BV;AAAA,UA8BU,UA9BV;AAAA,UA+BU,wBA/BV;AAAA,WAAA;;AAAA,MAAA,SAAA,OAAA;AAAA,SAyCE,kBAAA,yBAAgB,oBAAwC;;AAzC1D,SA8CE,gBAAA,uBAAc,QAAsB;AAClC,QAAI,CAAC,KAAK;AAAS;AACnB,SAAK,UAAU;AACf,SAAK,wBAAwB,OAAO;AACpC,WAAO,cAAc,KAAK;AAC1B,QACE,CAAC,KAAK,uBACN,KAAK,oBAAoB,UAAU,KAAK,SACxC,KAAK,oBAAoB,WAAW,KAAK,UACzC,KAAK,oBAAoB,iBAAiB,KAAK,cAC/C;AACA,WAAK,gBAAgB,IAAI,aACvB,KAAK,QACL,KAAK,OACL,KAAK,QACL,IAAI,mBAAmB,KAAK,QAAQ,KAAK,OAAO,KAAK,QAAQ,QAAW,QAAW,KAAK,UACxF,wBAAwB,OACxB,KAAK;AAGP,WAAK,oBAAoB,IAAI,aAC3B,KAAK,QACL,KAAK,OACL,KAAK,QACL,IAAI,mBAAmB,KAAK,QAAQ,KAAK,OAAO,KAAK,QAAQ,QAAW,QAAW,KAAK,UACxF,wBAAwB,OACxB,KAAK;AAGP,WAAK,sBAAsB,KAAK;;AAGlC,SAAK,yBAAyB,OAAO;AACrC,WAAO,eAAe,KAAK;;AA/E/B,SAqFE,cAAA,qBAAY,QAAsB;AAChC,QAAI,CAAC,KAAK;AAAS;AAEnB,SAAK,mBAAmB,KAAK,gBAAgB,KAAK;AAElD,SAAK,sBACH,KAAK,wBAAwB,KAAK,gBAAgB,KAAK,oBAAoB,KAAK;;AA3FtF,SA8FY,SAAV,kBAAyB;AACvB,QAAI,CAAC,KAAK;AAAS;AACnB,SAAK,QAAQ,eAAe,KAAK;AACjC,SAAK,QAAQ,cAAc,KAAK;;AAjGpC,eAAA,QAAA,CAAA;IAAA,KAAA;IAAA,KAiCE,gBAA2C;AAAA,UAAA;AACzC,aAAA,yBAAO,KAAK,yBAAZ,QAAA,0BAAA,SAAA,SAAO,sBAA0B;;;AAlCrC,SAAA;EAAoC;ACbpC,IAAM,cAAuB,IAAI;AACjC,IAAM,UAAmB,IAAI;AAC7B,IAAM,WAAoB,IAAI;IAKjB,YAAb,SAAA,QAAA;AAAA,iBAAA,YAAA;AAAA,wBAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,OAAA,KAAA,MAAA,QAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UAIE,WAAoB,IAAI,QAAQ,GAAG,GAAG;AAJxC,UASqB,UAAmB;AATxC,UAWU,gBAAgB,IAAI;AAX9B,UAYU,kBAZV;AAAA,WAAA;;AAAA,MAAA,SAAA,WAAA;AAAA,SAiBE,gBAAA,uBAAc,QAAsB;AAClC,QAAI,CAAC,KAAK;AAAS;AACnB,WAAA,UAAM,cAAN,KAAA,MAAoB;AACpB,SAAK,aAAa;AAGlB,aAAS,YAAY,GAAG,YAAY,GAAG,aAAa;AAElD,WAAK,WAAW,WAAW;AAC3B,aAAO,OAAO,gBAAgB,YAAY;;AAG5C,SAAK,eAAe;AACpB,WAAA,UAAM,OAAN,KAAA;;AA9BJ,SAoCU,eAAR,sBAAqB,QAAgB;AACnC,WAAO,WAAW,QAAQ,KAAK;AAC/B,SAAK,kBAAkB,OAAO;;AAtClC,SA4CU,iBAAR,wBAAuB,QAAgB;AACrC,SAAK,cAAc,QAAQ,OAAO;AAClC,WAAO,cAAc,KAAK;;AA9C9B,SAoDU,aAAR,oBAAmB,WAAmB,QAAgB;AACpD,YAAQ;WAED;AACH,gBAAQ,SAAS,GAAG,IAAI;AACxB,iBAAS,SAAS,GAAG,GAAG;AACxB;WAEG;AACH,gBAAQ,SAAS,GAAG,IAAI;AACxB,iBAAS,SAAS,IAAI,GAAG;AACzB;WAEG;AACH,gBAAQ,SAAS,GAAG,GAAG;AACvB,iBAAS,SAAS,GAAG,GAAG;AACxB;WAEG;AACH,gBAAQ,SAAS,GAAG,GAAG;AACvB,iBAAS,SAAS,GAAG,IAAI;AACzB;WAEG;AACH,gBAAQ,SAAS,GAAG,IAAI;AACxB,iBAAS,SAAS,GAAG,GAAG;AACxB;WAEG;AACH,gBAAQ,SAAS,GAAG,IAAI;AACxB,iBAAS,SAAS,GAAG,GAAG;AACxB;;AAGJ,YAAQ,IAAI,KAAK,UAAU,UAAU;AACrC,WAAO,OAAO,KAAK,UAAU,aAAa,SAAS,OAAO;AAC1D,WAAO,cAAc;;AAxFzB,SAAA;EAA+B;ICClB,cAAb,WAAA;AAAA,eAYS,oBAAP,2BAAyB,YAAwB;AAC/C,QAAM,OAAO,aAAY;AAEzB,eAAW,cAAc,aAAY,2BAA2B,KAAK;AACrE,eAAW,cAAc,aAAY,2BAA2B,KAAK;AACrE,eAAW,cAAc,aAAY,qBAAqB,KAAK;AAC/D,eAAW,cAAc,aAAY,0BAA0B,KAAK;AACpE,eAAW,cAAc,aAAY,uBAAuB,KAAK;AACjE,eAAW,cAAc,aAAY,wBAAwB,KAAK;AAClE,eAAW,gBAAgB,aAAY,qBAAqB,KAAK;;AArBrE,eA2BS,WAAP,oBAAkB;AAChB,iBAAY,cAAc,IAAI,SAAS;;AA2CzC,wBAAY,OAAc,OAAmD;AAAA,QAAnD,UAAmD,QAAA;AAAnD,cAAQ;QAAE,QAAQ;QAAM,OAAO;QAAK,QAAQ;;;AAAO,SA5BrE,WA4BqE;AAAA,SA3BrE,gBA2BqE;AAAA,SAtBpE,QAsBoE;AAAA,SAjB7E,OAAe;AAiB8D,SAZ7E,YAAoB;AAYyD,SAP7E,SAAiB;AAO4D,SAF7E,mBAA2B,IAAI;AAG7B,SAAK,QAAQ;AAD8D,QAAA,SAEzC,OAA1B,SAFmE,OAEnE,QAAQ,QAF2D,OAE3D,OAAO,SAFoD,OAEpD;AAEvB,SAAK,WAAW,IAAI,QAAQ,OAAO;AACnC,SAAK,gBAAgB,IAAI,aAAa,QAAQ,OAAO,QAAQ,IAAI,mBAAmB,QAAQ,OAAO;;AA5EvG,MAAA,SAAA,aAAA;AAAA,SA2GE,6BAAA,oCAA2B,OAAc;AAIvC,QAAI,iBAAiB,aAAa;AAChC,aAAO,MAAM,IAAI,GAAG,IAAI,GAAG,KAAK,IAAI,KAAK;;AAM3C,QAAI,iBAAiB,YAAY;AAC/B,aAAO,YAAY,SAAS,eAAe,KAAK,GAAG,KAAK,IAAI,KAAK;;AAMnE,QAAI,iBAAiB,WAAW;AAC9B,UAAM,MAAM,KAAK,IAAI,KAAK,KAAK,GAAG,MAAM,QAAQ,IAAI,KAAK,KAAK;AAC9D,aAAO,YAAY,KAAK,GAAG,KAAK,MAAM,WAAW,GAAG,KAAK;;;AA/H/D,SAmIE,aAAA,oBAAW,YAA0B;AACnC,QAAM,YAAY,aAAa;AAC/B,QAAM,kBAAkB,aAAa;AACrC,QAAM,YAAY;AAClB,QAAM,iBAAiB;AACvB,QAAM,cAAc;AACpB,QAAM,eAAe,aAAa;AAClC,QAAM,WAAW;AAEjB,QAAM,OAAO,aAAY;AAEzB,SAAK,WAAW,IAAI,KAAK,MAAM,WAAW,UAAU;AACpD,SAAK,iBAAiB,IAAI,KAAK,iBAAiB,UAAU;AAC1D,SAAK,KAAK,aAAa,KAAK;AAC5B,SAAK,UAAU,kBAAkB,KAAK;AACtC,SAAK,OAAO,eAAe,KAAK;AAChC,SAAK,QAAQ,gBAAgB,KAAK,QAAQ;AAC1C,SAAK,QAAQ,eAAe,KAAK,KAAK,QAAQ;AAC9C,SAAK,IAAI,YAAY,KAAK;;AArJ9B,eAAA,cAAA,CAAA;IAAA,KAAA;IAAA,KAmFE,gBAAiC;AAC/B,aAAO,KAAK;;KApFhB;IAAA,KAAA;IAAA,KA2FE,gBAA8B;AAC5B,aAAO,KAAK,cAAc;;KA5F9B;IAAA,KAAA;IAAA,KAmGE,gBAAuB;AACrB,aAAO,KAAK;;;AApGhB,SAAA;;AAAa,YACI,4BAA4B,OAAO,kBAAkB;AADzD,YAEI,4BAA4B,OAAO,kBAAkB;AAFzD,YAGI,sBAAsB,OAAO,kBAAkB;AAHnD,YAII,2BAA2B,OAAO,kBAAkB;AAJxD,YAKI,wBAAwB,OAAO,kBAAkB;AALrD,YAMI,yBAAyB,OAAO,kBAAkB;AANtD,YAOI,sBAAsB,OAAO,kBAAkB;AAPnD,YA+BI,YAAY;AA/BhB,YAiCI,gBAAgB;EAC7B,YAAY,IAAI,aAAa,KAAK,YAAY;EAC9C,kBAAkB,IAAI,aAAa,KAAK,YAAY;EACpD,MAAM,IAAI,aAAa,YAAY;EACnC,WAAW,IAAI,aAAa,YAAY;EACxC,QAAQ,IAAI,aAAa,YAAY;EACrC,SAAS,IAAI,aAAa,IAAI,YAAY;EAC1C,KAAK;;AC5CT,OAAO,eAAe,MAAM,WAAW,gBAAgB;EACrD,KAAK,eAAY;AACf,WAAO,KAAK;;EAEd,KAAK,aAAU,SAAS;AACtB,SAAK,gBAAgB;AAErB,QAAI,KAAK,eAAe;AACtB,UAAI,gBAAgB,cAAc;AAChC,aAAK,gBAAgB;AACrB,eAAO,KAAK;AACZ;;AAGF,WAAK,SAAS,KAAK,UAAU,IAAI,YAAY,MAAM;QAAE,QAAQ,KAAK;QAAQ,OAAO;QAAK,QAAQ;;AAC9F,WAAK,OAAO,2BAA2B;;;;AAQ7C,OAAO,eAAe,UAAU,WAAW,iBAAiB;EAC1D,KAAK,gBAAY;AACf,WAAO,KAAK;;EAEd,KAAK,cAAU,SAAS;AACtB,SAAK,iBAAiB;;;AAO1B,OAAO,eAAe,UAAU,WAAW,cAAc;EACvD,KAAK,gBAAY;AACf,WAAO,KAAK;;EAEd,KAAK,cAAU,SAAS;AACtB,SAAK,cAAc;;;IC1CV,oBAAb,SAAA,WAAA;AAAA,iBAAA,oBAAA;AACE,8BAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,UAAA,KAAA,MAAM,QAAQ,OAAO,KAAK,kBAA1B;AACA,UAAK,WAAW,YAAY;AAFF,WAAA;;AAD9B,SAAA;EAAuC;ICM1B,gBAAb,SAAA,aAAA;AAAA,iBAAA,gBAAA;AAUE,0BACE,MACA,UACA,cACA,iBACA,MACA,OACA;AAAA,QAAA;AACA,YAAA,YAAA,KAAA,MAAM,MAAM,UAAU,cAAc,iBAAiB,MAAM,IAAI,QAAQ,GAAG,GAAG,GAAG,OAAhF;AADA,UAbO,QAaP;AAEA,UAAK,QAAQ;AAFb,WAAA;;AAjBJ,MAAA,SAAA,eAAA;AAAA,SAyBE,YAAA,mBAAU,QAAgB,OAAoB;AAE5C,QAAM,aAAa,KAAK,gBAAgB;AACxC,eAAW,UAAU,eAAc,2BAA2B,KAAK,MAAM;AACzE,eAAW,UAAU,eAAc,2BAA4B,KAAK,MAAc,OAAO;;AA7B7F,SAAA;EAAmC;AAAtB,cACI,4BAA4B,OAAO,kBAAkB;AADzD,cAEI,4BAA4B,OAAO,kBAAkB;ICLzD,iBAAb,SAAA,WAAA;AAAA,iBAAA,iBAAA;AACE,2BAAY,QAAgB;AAAA,QAAA;AAC1B,YAAA,UAAA,KAAA,MAAM,QAAQ,OAAO,KAAK,cAA1B;AAEA,QAAM,mBAAmB,MAAK,YAAY,WAAW;AAErD,qBAAiB,yBAAyB,iBAAiB,yBAAyB,YAAY;AAChG,qBAAiB,8BAA8B,iBAAiB,8BAA8B,YAAY;AAC1G,UAAK,YAAY,WAAW,kBAAkB,gBAAgB;AAE9D,UAAK,kBAAkB,gBAAgB;AATb,WAAA;;AAD9B,SAAA;EAAoC;ICAvB,aAAb,SAAA,aAAA;AAAA,iBAAA,aAAA;AACE,yBAAqB;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAN,OAAM,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAN,WAAM,QAAA,UAAA;;AACnB,YAAA,YAAA,KAAA,MAAA,aAAA,CAAA,MAAA,OAAS,UAAT;AACA,UAAK,YAAY,UAAU;AAFR,WAAA;;AADvB,MAAA,SAAA,YAAA;AAAA,SASE,YAAA,mBAAU,QAAgB,OAAoB;AAC5C,SAAK,UAAU;AACf,QAAM,WAAW,OAAO,MAAM,YAAY;AAC1C,QAAM,SAAS,SAAS;AACxB,QAAM,aAAa,KAAK,gBAAgB;AAGxC,QAAM,OAAO,OAAO,gBAAgB;AACpC,SAAK,eAAe,KAAK;AAEzB,QAAI,iBAAiB;AAErB,gBAAY;AACZ,aAAS,IAAI,GAAG,MAAM,OAAO,QAAQ,IAAI,KAAK,KAAK;AACjD,UAAM,MAAW,OAAO;AACxB,UAAI,IAAI,cAAc;AACpB,YAAI,OAAO,WAAW;;;AAI1B,QAAI,gBAAgB;AAClB,WAAK,UAAU;AACf,kBAAY,kBAAkB;AAC9B,iBAAW,YAAY,uBAAuB,eAAe;WACxD;AACL,iBAAW,aAAa;;;AAlC9B,SAAA;EAAgC;ICKnB,gBAAb,SAAA,eAAA;AAAA,iBAAA,gBAAA;AAAA,4BAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,cAAA,KAAA,MAAA,eAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UACU,cADV;AAAA,UAEU,qBAFV;AAAA,WAAA;;AAAA,MAAA,SAAA,eAAA;AAAA,SAOE,YAAA,mBAAU,OAAc,QAAgB;AACtC,QAAM,SAAS,MAAM,YAAY,cAAc;AAE/C,QAAI,OAAO,SAAS,GAAG;AAErB,UAAI,CAAC,KAAK,aAAa;AACrB,aAAK,cAAc;;AAIrB,UAAM,iBAAiB,OAAO;AAE9B,eAAS,IAAI,GAAG,MAAM,OAAO,QAAQ,IAAI,KAAK,KAAK;AACjD,YAAM,MAAW,OAAO;AACxB,YAAI,IAAI,gBAAgB,CAAC,IAAI,eAAe;AAC1C,cAAI,gBAAgB,KAAK,iBAAiB,QAAQ;mBACzC,CAAC,IAAI,gBAAgB,IAAI,eAAe;AACjD,yBAAe,iBAAiB,IAAI;AACpC,cAAI,gBAAgB;;;AAIxB,WAAK,qBAAqB,eAAe;;;AA7B/C,SAqCE,gBAAA,uBAAc,QAAgB;AAC5B,QAAM,iBAAiB,IAAI,eAAe,OAAO;AACjD,SAAK,cAAc,IAAI,WAAW,cAAc,GAAG,MAAM,gBAAgB,MAAM;AAC/E,QAAM,WAAW,OAAO;AACxB,aAAS,cAAc,KAAK;;AAzChC,SAiDE,mBAAA,0BAAiB,QAAgB,OAAO;AAEtC,SAAK,qBAAqB,KAAK,sBAAsB,IAAI,kBAAkB,OAAO;AAElF,QAAM,gBAAgB,IAAI,cACxB,iBACA,IACA,MAAM,OAAO,cACb,KAAK,oBACL,MAAM,SACN;AAEF,QAAM,WAAW,OAAO;AACxB,aAAS,cAAc;AAEvB,WAAO;;AAhEX,SAuEE,uBAAA,8BAAqB,aAA0B;AAC7C,QAAM,QAAQ,YAAY;AAC1B,aAAS,IAAI,GAAG,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK;AAChD,UAAM,OAAO,MAAM;AACnB,UAAM,UAAqB,KAAK;AAEhC,UAAM,gBAAiB,QAAgB;AACvC,UAAM,aAAc,QAAgB;AACpC,UAAI,kBAAkB,MAAM;AAC1B,gBAAQ,OAAO,SAAS,MAAM;iBACrB,kBAAkB,OAAO;AAClC,gBAAQ,OAAO,SAAS,CAAC,MAAM;;AAGjC,UAAI,eAAe,MAAM;AACvB,gBAAQ,OAAO,SAAS,MAAM;iBACrB,eAAe,OAAO;AAC/B,gBAAQ,OAAO,SAAS,CAAC,MAAM;;;;AAxFvC,SAAA;EAAmC;ACXnC,MAAM,gBAAgB;AC+BtB,MAAM,gBAAgB;AACrB,MAAM,UAAkB,WAAW;;;;;;;;;;;;;;;;;;;;IClCvB,cAAb,WAAA;AAYE,wBAAY,iBAAyB,mBAAiC;AAAA,QAAA,QAAA;AAAA,SAV9D,UAU8D;AAAA,SAR9D,SAAuC;AAQuB,SAN9D,eAAuB;AAMuC,SAL9D,aAAmD;AAMzD,SAAK,UAAU,IAAI,OAAO;AAC1B,SAAK,QAAQ,YAAY,SAAC,GAAM;AAC9B,UAAM,UAAU,EAAE;AAClB,cAAQ,QAAQ;aACT;AACH,gBAAK,WAAW,QAAQ,IAAI,QAAQ,QAAQ;AAC5C;aAEG;AACH,gBAAK,WAAW,QAAQ,IAAI,OAAO;AACnC;;AAEA,iBAAO,MAAM,uCAAuC,QAAQ,OAAO;;;AAGzE,QAAI,mBAAmB;AACrB,WAAK,QAAQ,YAAY;QAAE,MAAM;QAAQ,eAAe;UAAE,YAAY;;;WACjE;AACL,WAAK,QAAQ,YAAY;QAAE,MAAM;QAAQ,eAAe;;;;AA/B9D,MAAA,SAAA,aAAA;AAAA,SAmCE,WAAA,kBAAS,QAAgB,MAAc;AACrC,SAAK,OAAO,UAAU;;AApC1B,SAuCE,iBAAA,wBAAe,MAAc;AAC3B,SAAK,gBAAgB;;AAxCzB,SA2CE,cAAA,qBAAY,QAAgB,SAAwB,QAAuB;AACzE,SAAK,WAAW,UAAU;MAAE;MAAS;;;AA5CzC,SA+CE,SAAA,gBAAO,QAAgB,YAAyB,QAAqB;AACnE,SAAK,QAAQ,YAAY;MAAE,MAAM;MAAU,IAAI;MAAQ;MAAY;OAAU,CAAC;;AAhDlF,SAmDE,cAAA,qBAAY,QAAgB;AAC1B,SAAK,gBAAgB,KAAK,OAAO;AACjC,WAAO,KAAK,WAAW;AACvB,WAAO,KAAK,OAAO;;AAtDvB,gBAAA,cAAA,CAAA;IAAA,KAAA;IAAA,KAQE,gBAA0B;AACxB,aAAO,KAAK;;;AAThB,SAAA;;;ACIA,IAAM,WAAW;AACjB,IAAM,UAAU;AAEhB,IAAM,YAAY;AAClB,IAAM,oBAAoB;IAEb,eAAb,WAAA;AAQE,yBAAY,QAA2D;AAAA,QAA3D,WAA2D,QAAA;AAA3D,eAAyB;QAAE,MAAM;QAAQ,aAAa;;;AAAK,SAP/D,OAAsB;AAOyC,SAN/D,cAAc,KAAK,IAAI,UAAU,uBAAuB,GAAG;AAMI,SAL/D,QAK+D;AAAA,SAJ/D,gBAAwB;AAIuC,SAH/D,YAAY,IAAI;AAG+C,SAF/D,iBAE+D;AACrE,QAAI,OAAO,cAAc,KAAK,aAAa;AACzC,aAAO,KAAK,gEAAgE,OAAO;WAC9E;AAAA,UAAA;AACL,WAAK,cAAL,uBAAmB,OAAO,gBAA1B,OAAA,sBAAyC;;AAE3C,SAAK,QAAQ,OAAO,gBAAgB,YAAY,OAAO,SAAS;AAChE,SAAK,iBAAiB,KAAK;;AAf/B,MAAA,SAAA,cAAA;AAAA,SAkBU,aAAR,sBAAmC;AAAA,QAAA,QAAA;AACjC,QAAI,KAAK,gBAAgB;AACvB,aAAO,KAAK;;AAGd,WAAO,IAAI,QAAQ,SAAC,SAAS,QAAW;AACtC,UAAI,MAAK,OAAO;AACd,gBAAO,KAAI,WAAW,SAAW;UAAE,MAAM;WACtC,KAAK,SAAC,UAAa;AAClB,cAAM,OAAO,CAAC,UAAU,cAAc,KAAK;AAC3C,cAAM,kBAAkB,IAAI,gBAAgB,IAAI,KAAK,CAAC;AACtD,kBAAQ;YAAE;YAAiB,mBAAmB;;WAE/C,MAAM,SAAC,QAAW;AACjB,iBAAO;;aAEN;AACL,gBAAQ,IAAI,CACV,QAAO,KAAI,WAAW,mBAAqB;UAAE,MAAM;YACnD,QAAO,KAAI,WAAW,WAAa;UAAE,MAAM;aAE1C,KAAK,SAAC,WAAc;AAAA,cACZ,gBAAoC,UADxB,IACG,oBAAqB,UADxB;AAEnB,cAAM,OAAO,CAAC,eAAe,cAAc,KAAK;AAChD,cAAM,kBAAkB,IAAI,gBAAgB,IAAI,KAAK,CAAC;AACtD,kBAAQ;YAAE;YAAiB;;WAE5B,MAAM,SAAC,QAAW;AACjB,iBAAO;;;;;AA9CnB,SAoDU,YAAR,qBAA0C;AAAA,QAAA,SAAA;AACxC,WAAO,KAAK,aAAa,KAAK,SAAC,iBAAoB;AACjD,UAAI,OAAK,KAAK,SAAS,OAAK,aAAa;AACvC,YAAM,cAAc,IAAI,YAAY,gBAAgB,iBAAiB,gBAAgB;AACrF,eAAK,KAAK,KAAK;aACV;AACL,eAAK,KAAK,KAAK,SAAU,GAAG,GAAG;AAC7B,iBAAO,EAAE,cAAc,EAAE,cAAc,KAAK;;;AAGhD,aAAO,OAAK,KAAK,OAAK,KAAK,SAAS;;;AA9D1C,SAkEE,SAAA,gBAAO,QAAqB,YAAuC;AAAA,QAAA,SAAA;AACjE,QAAM,UAAU,KAAK,UAAU;AAI/B,QAAI,KAAK,UAAU,IAAI,SAAS;AAC9B,UAAM,aAAa,KAAK,UAAU,IAAI;AACtC,UAAI,WAAW,QAAQ,SAAS;AAC9B,eAAO,WAAW;iBACT,OAAO,eAAe,GAAG;AAMlC,cAAM,IAAI,MACR;;;AAMN,QAAM,SAAS,KAAK;AACpB,QAAM,OAAO,OAAO;AACpB,QAAI;AACJ,QAAM,OAAO,IAAI,QAAQ,SAAC,SAAS,QAAW;AAC5C,aAAK,YACF,KAAK,SAAC,QAAW;AAChB,qBAAa;AACb,eAAO,SAAS,QAAQ;AACxB,eAAO,eAAe;AAEtB,eAAO,YAAY,QAAQ,SAAS;AACpC,eAAO,OAAO,QAAQ,YAAY;SAEnC,MAAM,SAAC,GAAM;AACZ,eAAO;;;AAGb,SAAK,QAAQ,WAAM;AACjB,UAAI,cAAc,QAAQ;AACxB,mBAAW,YAAY;;;AAI3B,SAAK,UAAU,IAAI,QAAQ;MACzB,KAAK;MACL,SAAS;;AAEX,WAAO;;AAnHX,SAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA,kBAAkB,KAAK;AACrB,SAAO,sBAAsB,KAAK;;QAEnC,eAAe,UAAU,QAAQ,CAAC,OAAO,UAAU,QAArC,MAAA,UAAA,SAAA,SAAA;;;;;;SAEb,OAAA,cAAK,MAA2C;AAC9C,QAAM,MAAM,KAAK;AACjB,QAAI,SAAS,MAAM;AACjB,aAAO,IAAI,aAAa,SAAC,SAAY;AACnC,YAAM,YAAY,IAAI,MAAM,KAAK,OAAO,GAAG;AAC3C,YAAM,SAAS,WAAW,KAAK,KAAK,YAAY,SAAC,GAAD;AAAA,iBAAO,EAAE,WAAW;;AACpE,gBAAQ,OAAO;;;AAGnB,WAAO,KAAK,QAAQ,KAAb,gBAAA,gBAAA,IACF,OADE,IAAA;MAEL,MAAM;;;;EAZe,YAAA;ACJ3B,IAAM,wBAAwB;EAC5B,MAAM;EACN,MAAM;EACN,MAAM;EACN,MAAM;EACN,MAAM;EACN,MAAM;;AASD,oBAAoB,OAAO;AAChC,MAAI,OAAO,gBAAgB,aAAa;AACtC,WAAO,IAAI,cAAc,OAAO;;AAIlC,MAAI,IAAI;AAER,WAAS,IAAI,GAAG,KAAK,MAAM,QAAQ,IAAI,IAAI,KAAK;AAC9C,SAAK,OAAO,aAAa,MAAM;;AAGjC,SAAO,mBAAmB,mBAAmB;;AAyBxC,6BAA6B,cAAc;AAChD,MAAM,qBAAqB;IACzB,QAAQ;IACR,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;;AAER,SAAO,mBAAmB;;AAOrB,0BAA0B,eAAe;AAC9C,SAAO,sBAAsB;;AAUxB,yBAAyB,MAAM,UAAU,SAAS;AAAA,MAAA;AACvD,MAAM,aAAa,KAAK,YAAY,SAAS;AAC7C,MAAM,cAAc,QAAQ,WAAW;AACvC,MAAM,qBAAqB,SAAS,eAAe,gBAAgB,SAAS,aAAa;AACzF,MAAM,uBAAuB,WAAW,eAAe,gBAAgB,WAAW,aAAa;AAC/F,MAAM,aAAa,qBAAqB;AACxC,MAAM,mBAAmB,oBAAoB,SAAS;AACtD,MAAM,SAAS,mBAAmB,SAAS;AAC3C,MAAM,aAAU,yBAAG,WAAW,eAAd,OAAA,wBAA4B;AAE5C,MAAM,YAAY,iBAAiB,SAAS;AAC5C,MAAI;AACJ,MAAI,YAAY;AACd,iBAAa,IAAI,WAAW,SAAS,UAAU;AAC/C,QAAM,qBAAqB,IAAI,WAAW,aAAa,sBAAsB,WAAW;AACxF,QAAI,eAAe;AACnB,QAAM,mBAAmB,mBAAmB,UAAU;AACtD,aAAS,IAAI,GAAG,IAAI,SAAS,OAAO,KAAK;AACvC,qBAAe,IAAI,aAAa;AAChC,eAAS,IAAI,GAAG,IAAI,kBAAkB,KAAK;AACzC,mBAAW,IAAI,mBAAmB,KAAK,mBAAmB,eAAe;;;SAGxE;AACL,iBAAa,IAAI,WAAW,aAAa,YAAY,SAAS,UAAU;AACxE,iBAAa,IAAI,WAAW;;AAG9B,SAAO,IAAI,UAAU,WAAW;;AAU3B,uBAAuB,YAAY,SAAS;AAEjD,MAAM,cAAc,QAAQ,WAAW;AACvC,MAAM,aAAa,WAAW,cAAc;AAC5C,SAAO,YAAY,MAAM,YAAY,aAAa,WAAW;;AAGxD,yBAAyB,UAAkB;AAChD,MAAM,OAAO,oBAAoB,SAAS;AAC1C,MAAM,gBAAgB,iBAAiB,SAAS;AAChD,SAAO,OAAO,cAAc;;AAGvB,6BAA6B,MAAM,UAAU,UAAU,OAA8B;AAC1F,MAAM,OAAO,oBAAoB,SAAS;AAC1C,SAAO,IAAI,cAAc,UAAU,GAAG,iBAAiB,SAAS,eAAe,OAAO;;AAGjF,wBAAwB,MAA2B;AACxD,UAAQ;SACD,SAAS;AACZ,aAAO,YAAY;SAChB,SAAS;AACZ,aAAO,YAAY;SAChB,SAAS;AACZ,aAAO,YAAY;;;AAIlB,0BAA0B,MAAc,MAAmC;AAChF,MAAI,QAAQ,SAAS,OAAO;AAC1B,YAAQ;WACD;AACH,eAAO,oBAAoB;WACxB;AACH,eAAO,oBAAoB;WACxB;AACH,eAAO,oBAAoB;WACxB;AACH,eAAO,oBAAoB;;;AAGjC,MAAI,QAAQ,SAAS,gBAAgB;AACnC,YAAQ;WACD;AACH,eAAO,oBAAoB;WACxB;AACH,eAAO,oBAAoB;;;;AAW5B,yBAAyB,aAA0B,MAAyC;AACjG,SAAO,IAAI,QAAQ,SAAC,SAAS,QAAW;AACtC,QAAM,OAAO,IAAI,OAAO,KAAK,CAAC,cAAc;MAAE;;AAC9C,QAAM,MAAM,IAAI;AAChB,QAAI,MAAM,IAAI,gBAAgB;AAE9B,QAAI,cAAc;AAClB,QAAI,UAAU,WAAY;AACxB,aAAO,IAAI,MAAM;;AAEnB,QAAI,SAAS,WAAY;AAEvB,4BAAsB,WAAM;AAC1B,gBAAQ;;;;;AAWhB,uBAAuB,KAAsB;AAC3C,SAAO,0BAA0B,KAAK;;AAGjC,0BAA0B,SAAiB,aAA6B;AAC7E,MAAI,cAAc,cAAc;AAC9B,WAAO;;AAGT,SAAO,QAAQ,UAAU,GAAG,QAAQ,YAAY,OAAO,KAAK;;AChN9D,IAAI;AAEG,IAAM,2BAA2B;EACtC,MADsC,gBAC/B;AACL,QAAI,CAAC,SAAS;AACZ,gBAAU,IAAI;;;EAGlB,OANsC,eAMhC,WAAW,eAAe,MAAM,SAAS;AAAA,QACrC,cAA2B,KAA3B,aAAa,YAAc,KAAd;AACrB,QAAM,kBAAkB,UAAU;AAClC,QAAM,mBAAmB,UAAU;AACnC,QAAM,eAAe;AACrB,QAAM,mBAAmB;AAEzB,aAAS,iBAAiB,kBAAkB;AAC1C,mBAAa,iBAAiB,iBAAiB;;AAGjD,aAAS,kBAAiB,cAAc,YAAY;AAClD,UAAI,iBAAiB,oBAAmB,QAAW;AACjD,YAAM,cAAc,UAAU,cAAc,WAAW;AACvD,yBAAiB,kBAAiB,iBAAiB,YAAY,eAAe;;;AAGlF,QAAM,gBAAgB,UAAU,cAAc;AAC9C,QAAM,YAAY,iBAAiB,cAAc,eAAe;AAChE,QAAM,aAAa;MACjB,cAAc;MACd,gBAAgB;MAChB,cAAc;MACd;;AAEF,QAAM,SAAS,cAAc,YAAY,kBAAkB;AAE3D,WAAO,QAAQ,OAAO,QAAQ,YAAY,KAAK,SAAC,gBAAD;AAAA,aAAoB;;;;ACMvE,IAAM,kBAAkB;EACtB,aAAa;EACb,UAAU;EACV,OAAO;EACP,SAAS;;AAGX,IAAI,YAAY;AAEhB,IAAM,eAAe;AACrB,IAAM,0BAA0B;AAEhC,IAAM,qBAAsB,WAAY;AAEtC,SAAO,SAAC,QAAmB;AAEzB,QAAI,iBAAqC,IAAI,mBAAmB;AAChE,mBAAe,gBAAgB,IAAI,MAAM,OAAO,OAAO,OAAO;AAE9D,WAAO;;;AAOJ,IAAM,oBAAoB;EAC/B,aAAa;EACb,YAAY;EACZ,qBAAqB;EACrB,qCAAqC;EACrC,sBAAsB;EACtB,4BAA4B;;AAG9B,IAAI,aAAa;AAEjB,IAAM,mBAAmB;EACvB;EACA,qBAAqB;EACrB,qCAAqC;EACrC,sBAAsB;EACtB,4BAA4B;;AAOvB,yBAAyB,QAAQ;AACtC,SAAO,KAAK,QAAQ,QAAQ,SAAC,MAAS;AACpC,QAAI,aAAa,UAAU,QAAW;AACpC,mBAAa,QAAQ,OAAO;AAE5B,cAAQ;aACD,kBAAkB;AACrB,uBAAa,OAAO;AACpB,2BAAiB,aAAa;AAC9B;;AAEA,cAAI,SAAS,cAAc,OAAO,UAAU,OAAO,MAAM;AACvD,oCAAwB,OAAO,MAAM,aAAa,OAAO;AAC3D;;;;;IAWG,eAAb,SAAA,eAAA;AAAA,kBAAA,eAAA;AAAA,2BAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,cAAA,KAAA,MAAA,eAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UACE,mBADF;AAAA,UAEE,eAFF;AAAA,UAGE,SAHF;AAAA,UAIE,WAJF;AAAA,UAKE,aALF;AAAA,UAME,YANF;AAAA,UAOE,SAPF;AAAA,UAQE,QARF;AAAA,UASE,UATF;AAAA,UAUE,OAVF;AAAA,WAAA;;AAAA,SAAA;EAAkC;AAmB3B,mBAAmB,MAA0B,QAAuC;AAEzF,MAAM,YAAwB;IAC5B;IACA,MAAM,KAAK;IACX,SAAS,KAAK;IACd,OAAO,IAAI,aAAa;;AAE1B,YAAU,MAAM,WAAW,KAAK;AAChC,YAAU,MAAM,OAAO,KAAK;AAE5B,MAAI,UAAU,KAAK,SAAS,UAAU,KAAK,MAAM,SAAS;AACxD,cAAU,KAAK,UAAU,OAAO,UAAU,KAAK,MAAM;AACrD,cAAU,KAAK,UAAU,UAAU,KAAK,WAAW,KAAK,UAAU,KAAK,WAAW;;AAGpF,kBAAgB;AAEhB,SACE,eAAe,WAAW,aAAa,eACpC,KAAK,WAAA;AAAA,WAAM,eAAe,WAAW,UAAU;KAE/C,KAAK,WAAA;AAAA,WAAM,eAAe,WAAW,SAAS;KAC9C,KAAK,WAAA;AAAA,WAAM,eAAe,WAAW,UAAU;KAC/C,KAAK,WAAA;AAAA,WAAM,eAAe,WAAW,SAAS;KAC9C,KAAK,WAAA;AAAA,WAAM,eAAe,WAAW,cAAc;KACnD,KAAK,WAAA;AAAA,WAAM,gBAAgB;;;AAIlC,yBAAyB,WAAW;AAAA,MAC1B,OAAgB,UAAhB,MAAM,QAAU,UAAV;AADoB,MAE1B,aAAmD,KAAnD,YAAY,iBAAuC,KAAvC,gBAAgB,qBAAuB,KAAvB;AACpC,MAAI,gBAAgB;AAClB,WAAO,KAAK,oBAAoB;AAChC,aAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC9C,UAAI,OAAO,KAAK,kBAAkB,QAAQ,eAAe,MAAM,IAAI;AACjE,YAAI,CAAC,iBAAiB,eAAe,KAAK;AACxC,iBAAO,KAAK,eAAe,eAAe,KAAK;;aAE5C;AACL,eAAO,KAAK,8CAA8C,eAAe;;;;AAK/E,MAAI,oBAAoB;AACtB,WAAO,KAAP,yBAAmC;AACnC,aAAS,KAAI,GAAG,KAAI,mBAAmB,QAAQ,MAAK;AAClD,UACE,OAAO,KAAK,kBAAkB,QAAQ,mBAAmB,OAAM,KAC/D,CAAC,iBAAiB,mBAAmB,MACrC;AACA,eAAO,MAAP,gDAA2D,mBAAmB;;AAEhF,UAAI,mBAAmB,QAAO,kBAAkB,4BAA4B;AAC1E,yBAAiB,2BAA2B;;;;AAKlD,MAAI,YAAY;AACd,QAAI,cAAc,WAAW,YAAY;AACvC,YAAM,SAAS,WAAW,YAAY,WAAW,WAAW;;;;AAYlE,wBAAwB,WAAuB,MAAc,SAAS;AAAA,MAC5D,OAAgB,UAAhB,MAAM,QAAU,UAAV;AACd,MAAI,CAAC,MAAM,OAAO;AAChB,UAAM,QAAQ;;AAEhB,MAAI,KAAK,eAAe,OAAO;AAC7B,QAAM,WAAW,KAAK,SAAS;AAC/B,WAAO,MAAM,OAAO,KAAK;AACzB,QAAM,WAAW;AACjB,aAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAAK;AAC7C,eAAS,KAAK,QAAQ,SAAS,IAAI;;AAErC,WAAO,QAAQ,IAAI,UAAU,KAAK,SAAC,SAAY;AAC7C,eAAS,MAAI,GAAG,MAAI,QAAQ,QAAQ,OAAK;AACvC,cAAM,MAAM,KAAK,QAAQ;;;;AAI/B,SAAO,QAAQ;;AASV,uBAAuB,cAAc,WAAW;AAAA,MAC7C,OAAiB,UAAjB,MAAM,SAAW,UAAX;AACd,MAAI,KAAK,WAAW,OAAO,aAAa,cAAc,aAAa;AAAA,QAAA,wBAW7D,aATF,YAAA,aAF+D,0BAAA,SAElD,KAFkD,uBAG/D,uBAQE,aARF,sBACA,gBAOE,aAPF,eACA,kBAME,aANF,iBACA,iBAKE,aALF,gBACA,mBAIE,aAJF,kBACA,YAGE,aAHF,WACA,cAEE,aAFF,aACA,cACE,aADF;AAGF,QAAM,UAAU,WAAW;AAC3B,QAAM,aAAa,WAAW;AAE9B,QAAI,WAA8D;AAClE,QAAI,SAAS;AACX,iBAAW,IAAI,cAAc;eACpB,YAAY;AACrB,iBAAW,IAAI,oBAAoB;WAC9B;AACL,iBAAW,IAAI,YAAY;;AAI7B,aAAS,cAAc;AACvB,YAAQ;WACD;AACH,iBAAS,YAAY,UAAU;AAC/B;WACG;AACH,iBAAS,YAAY,UAAU;AAC/B;WACG;AACH,iBAAS,YAAY,UAAU;AAC9B,iBAA+C,cAAc,gBAAgB,SAAY,MAAM;AAChG;;AAIJ,QAAI,sBAAsB;AAAA,UAEtB,kBAKE,qBALF,iBACA,mBAIE,qBAJF,kBACA,iBAGE,qBAHF,gBACA,kBAEE,qBAFF,iBACA,2BACE,qBADF;AAEF,UAAI,kBAAkB;AACpB,iBAAS,mBAAmB,aAAa,YAAY,iBAAiB,SAAS,GAAG,WAAW;;AAE/F,UAAI,iBAAiB;AACnB,iBAAS,YAAT,YAAyB,OAAS;;AAEpC,UAAI,CAAC,SAAS;AACZ,mBAAW;AACX,iBAAS,iBAAiB,mBAAmB,SAAY,iBAAiB;AAC1E,iBAAS,kBAAkB,oBAAoB,SAAY,kBAAkB;AAC7E,YAAI,0BAA0B;AAC5B,mBAAS,2BAA2B,aAClC,YACA,yBAAyB,SAAS,GAClC,WACA;;;;AAOR,QAAI,SAAS;AACX,aAAO,QAAQ,QAAQ;;AAEzB,eAAW;AAEX,QAAI,iBAAiB;AACnB,eAAS,kBAAkB,aAAa,YAAY,gBAAgB,SAAS,GAAG,WAAW;;AAG7F,QAAI,gBAAgB;AAClB,eAAS,gBAAT,YAA6B,OAAS;;AAGxC,QAAI,eAAe;AAAA,UACT,QAA2B,cAA3B;AAA2B,oBAApB;AADE,UACQ,QAAU,cAAV;AACzB,iBAAW;AACX,eAAS,gBAAgB,aAAa,YAAY,SAAS,GAAG,WAAW;AAEzE,UAAI,OAAO,UAAU,QAAW;AAC9B,iBAAS,cAAc;;;AAI3B,QAAI,kBAAkB;AACpB,iBAAW;AACX,eAAS,mBAAmB,aAAa,YAAY,iBAAiB,SAAS,GAAG,WAAW;AAE7F,UAAI,iBAAiB,aAAa,QAAW;AAC3C,iBAAS,oBAAoB,iBAAiB;;;AAIlD,QAAI,YAAY;AAAA,UAAA,wBAOV,WAAW,qCALb,gBAFY,sBAEZ,eACA,iBAHY,sBAGZ,gBACA,iBAJY,sBAIZ,gBACA,mBALY,sBAKZ,kBACA,4BANY,sBAMZ;AAEF,iBAAW;AACX,UAAI,eAAe;AACjB,iBAAS,YAAT,YAAyB,OAAS;;AAEpC,UAAI,gBAAgB;AAClB,iBAAS,mBAAmB,aAAa,YAAY,eAAe,SAAS,GAAG,WAAW;;AAE7F,UAAI,gBAAgB;AAClB,iBAAS,gBAAT,YAA6B,OAAS;;AAExC,UAAI,qBAAqB,QAAW;AAClC,iBAAS,mBAAmB;;AAE9B,UAAI,2BAA2B;AAC7B,iBAAS,4BAA4B,aACnC,YACA,0BAA0B,SAAS,GACnC,WACA;;;AAIN,WAAO,QAAQ,QAAQ;SAClB;AACL,QAAM,gBAAgB,aAAa;AACnC,WAAO,KAAK;AAEZ,QAAI,kBAAkB,WAAW;AAC/B,UAAM,YAAW,IAAI,cAAc;AACnC,UAAM,SAAQ,aAAa,OAAO,SAAS;AAC3C,gBAAS,mBAAmB,aAAa,YAAY,UAAS,GAAG,WAAW;AAC5E,aAAO,QAAQ,QAAQ;;;AAG3B,SAAO,QAAQ;;AASV,mBAAmB,UAAU,WAAW;AAAA,MACrC,OAAkB,UAAlB,MAAM,UAAY,UAAZ;AAEd,MAAM,aAAa,SAAS,OAAO;AAGnC,MAAM,OAAO,IAAI,KAAK,SAAS;AAE/B,MAAM,WAAW,KAAK,UAAU,SAAS;AACzC,MAAM,SAAS,gBAAgB,MAAM,UAAU;AAC/C,MAAM,cAAc;AAEpB,WAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACnC,QAAM,WAAW,cAAc;AAC/B,QAAM,SAAS,WAAW;AAC1B,SAAK,oBAAoB,KAAzB,YAAkC,QAAU,OAAO,SAAS,UAAU;;AAIxE,WAAS,MAAI,GAAG,MAAI,YAAY,OAAK;AACnC,QAAM,QAAO,aAAa,SAAS,SAAS,OAAO,MAAI;AACvD,SAAK,OAAO,OAAK,MAAK;;AAIxB,MAAM,OAAO,aAAa,SAAS,SAAS,YAAY,OAAO,SAAS,OAAO,KAAK,SAAS,UAAU;AACvG,OAAK,WAAW,KAAK;AAErB,SAAO,QAAQ,QAAQ;;AAGzB,8BACE,MACA,WACA,gBACA,eACA,MACA,qBACA,oBACA,QACA;AAEA,MAAI,IAAI;AACR,MAAM,iBAAkC;AACxC,WAAW,qBAAqB,cAAc,YAAY;AACxD,QAAM,cAAc,cAAc,WAAW;AAC7C,QAAM,WAAW,KAAK,UAAU;AAChC,QAAM,SAAS,gBAAgB;AAC/B,QAAM,gBAAgB,oBAAoB,MAAM,mBAAmB,UAAU;AAE7E,mBAAe,KAAK;AACpB,QAAM,aAAa,oBAAoB;AACvC,QAAM,eAAe,IAAI,OAAO,QAAQ,eAAe,cAAc,WAAW,YAAY,YAAY;AACxG,iBAAa,QAAQ;AACrB,cAAU,uBAAuB,cAAc,QAAQ;AAGvD,QAAI,cAAc,YAAY,YAAY;AACxC,UAAM,WAAW,IAAI;AACrB,UAAM,cAAc,WAAW,SAAS;AAFA,UAAA,eAGnB,KAAK,QAAlB,MAHgC,aAGhC,KAAK,MAH2B,aAG3B;AACb,eAAS,MAAI,GAAG,MAAI,aAAa,OAAK;AACpC,YAAM,SAAS,MAAI;AACnB,iBAAS,SAAS,WAAW,SAAS,WAAW,SAAS,IAAI,WAAW,SAAS;AAClF,gBAAQ,IAAI,KAAK,UAAU;AAC3B,gBAAQ,IAAI,KAAK,UAAU;;;;AAIjC,YAAU,kBAAkB;AAG5B,MAAM,gBAAgB,KAAK,UAAU,cAAc;AACnD,MAAM,YAAY;AAElB,MAAM,aAAa,cAAc;AACjC,MAAM,cAAc,eAAe,cAAc;AACjD,MAAM,gBAAgB,eAAe,YAAY,SAAS,IAAI,eAAe,YAAY,SAAS,IAAI;AACtG,MAAM,cAAc,IAAI,OAAO,QAAQ,eAAe,aAAa,aAAa,eAAe,YAAY;AAE3G,cAAY,QAAQ;AACpB,YAAU,sBAAsB,IAAI,mBAAmB,aAAa;AACpE,iBAAe,QAAQ;AACvB,iBAAe,QAAQ;AACvB,SAAO,QAAQ,QAAQ;;AAWlB,mBAAmB,UAAU,WAAW;AAAA,MACrC,OAA0B,UAA1B,MAAM,UAAoB,UAApB,SAAS,SAAW,UAAX;AAEvB,MAAM,OAAO,IAAI,KAAK,SAAS;AAI/B,MAAM,oBAAoB;AAC1B,MAAM,SAAS;AAR8B,MAAA,QAAA,gBASpC,IAToC;AAU3C,sBAAkB,KAChB,IAAI,QAAQ,SAAC,SAAS,QAAW;AAC/B,UAAM,gBAAgB,SAAS,WAAW;AAE1C,UAAM,YAAY,IAAI,UAAU,QAAQ,cAAc,QAAQ,SAAS,QAAQ;AAC/E,UAAM,eAAe,IAAI;AACzB,aAAO,KAAK;AAEZ,mBAAa,WAAW,cAAc,QAAQ,OAAO,kBAAkB,YAAY,cAAc;AACjG,UAAI,cAAc,eAAe,YAAY;AAC3C,kBAAU,UAAU;AACnB,aAAa,UAAU,SAAS,WAAW,IAAI,MAAM,cAAc,QAAQ,QAAQ,KAAK;;AAE3F,UAAI;AACJ,UAAI,cAAc,cAAc,cAAc,WAAW,kBAAkB,6BAA6B;AACtG,YAAM,kBAAkB,iBAAiB;AACzC,YAAM,YAAY,cAAc,WAAW,kBAAkB;AAC7D,wBAAgB,gBAAgB,MAAM,WAAW,eAAe,MAAM,SAAS,KAAK,SAAC,iBAAoB;AACvG,iBAAO,qBACL,MACA,WACA,cACA,eACA,MACA,SAAC,mBAAsB;AACrB,qBAAS,MAAI,GAAG,MAAI,gBAAgB,WAAW,QAAQ,OAAK;AAC1D,kBAAI,gBAAgB,WAAW,KAAG,SAAS,mBAAmB;AAC5D,uBAAO,gBAAgB,WAAW,KAAG;;;AAGzC,mBAAO;aAET,WAAM;AACJ,mBAAO,gBAAgB,MAAM;aAE/B,UAAU;;aAGT;AACL,wBAAgB,qBACd,MACA,WACA,cACA,eACA,MACA,SAAC,mBAAsB;AACrB,cAAM,cAAc,cAAc,WAAW;AAC7C,cAAM,WAAW,KAAK,UAAU;AAChC,iBAAO,gBAAgB,MAAM,UAAU;WAEzC,WAAM;AACJ,cAAM,gBAAgB,KAAK,UAAU,cAAc;AACnD,iBAAO,gBAAgB,MAAM,eAAe;WAE9C,UAAU;;AAGd,oBACG,KAAK,SAAC,oBAAuB;AAE5B,gBAAQ;SAET,MAAM,SAAC,GAAM;AACZ,eAAO;;;;AAhEjB,WAAS,IAAI,GAAG,IAAI,SAAS,WAAW,QAAQ,KAAK;AAAA,UAA5C;;AAqET,SAAO,QAAQ,IAAI,mBAAmB,KAAK,SAAC,YAA4B;AACtE,aAAS,MAAI,GAAG,MAAI,WAAW,QAAQ,OAAK;AAC1C,WAAK,WAAW,KAAK,WAAW;AAChC,WAAK,OAAO,KAAK,OAAO;;AAE1B,WAAO;;;AAWJ,wBAAwB,eAAe,WAAW;AAAA,MAC/C,OAAkB,UAAlB,MAAM,UAAY,UAAZ;AACd,MAAM,eAAe,cAAc,YAAY;AAC/C,MAAM,eAAe,cAAc,YAAY;AAE/C,MAAM,eAAe,KAAK,WAAW,QAAQ;AAC7C,MAAM,gBAAgB,IAAI,cAAc,cAAc,QAAd,cAAkC;AAE1E,MAAI,WAAW;AACf,MAAI,gBAAgB;AAEpB,WAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,QAAM,cAAc,aAAa;AAEjC,QAAM,gBAAgB,KAAK,UAAU,YAAY;AACjD,QAAM,iBAAiB,KAAK,UAAU,YAAY;AAClD,QAAM,QAAQ,gBAAgB,MAAM,eAAe;AACnD,QAAM,SAAS,gBAAgB,MAAM,gBAAgB;AACrD,QAAI,qBAAqB,oBAAoB,eAAe;AAC5D,QAAI,qBAAqB,MAAM,WAAW,OAAO;AAAQ,2BAAqB,OAAO,SAAS,MAAM;AAIpG,QAAI,uBAAuB,kBAAkB;AAC7C,YAAQ,YAAY;WACb;AACH,+BAAuB,kBAAkB;AACzC;WACG;AACH,+BAAuB,kBAAkB;AACzC;;AAEJ,QAAM,UAAU,MAAM,MAAM,SAAS;AACrC,QAAI,UAAU,UAAU;AACtB,iBAAW;AACX,sBAAgB;;AAElB,kBAAc,WAAW,OAAO,QAAQ,oBAAoB;;AAG9D,gBAAc,gBAAgB;AAC9B,gBAAc,WAAW;AAEzB,WAAS,MAAI,GAAG,MAAI,aAAa,QAAQ,OAAK;AAC5C,QAAM,cAAc,aAAa;AACjC,QAAM,SAAS,YAAY;AAC3B,QAAM,eAAe,YAAY;AACjC,QAAM,aAAa,aAAa,SAAS,OAAO,MAAM;AACtD,QAAM,aAAa,gBAAgB,OAAO;AAE1C,kBAAc,WAAW,cAAc,WAAW,MAAM;;AAG1D,SAAO,QAAQ,QAAQ;;AASlB,mBAAmB,UAAU,WAAuB;AAEzD,MAAM,SAAS,IAAI,OAAO,UAAU,QAAQ,SAAS,QAAT,eAA8B;AAE1E,MAAI,SAAS,eAAe,WAAW;AACrC,QAAM,IAAI,SAAS;AACnB,QAAM,MAAM,IAAI;AAChB,QAAI,gBAAgB;AACpB,QAAM,MAAM,IAAI;AAChB,QAAM,QAAQ,IAAI,QAAQ,GAAG,GAAG;AAChC,QAAM,MAAM,IAAI;AAChB,QAAI,UAAU,KAAK,KAAK;AAExB,WAAO,UAAU,WAAW;AAC5B,WAAO,UAAU,qBAAqB;AACtC,WAAO,UAAU,QAAQ;SACpB;AACL,aAAW,OAAO,iBAAiB;AACjC,UAAI,SAAS,eAAe,MAAM;AAChC,YAAM,SAAS,gBAAgB;AAC/B,YAAI,WAAW,WAAW;AACxB,iBAAO,UAAU,SAAS;eACrB;AACL,cAAM,MAAM,SAAS;AACrB,cAAM,MAAM,IAAI;AAChB,cAAM,MAAM,OAAO;AACnB,cAAI,QAAQ,GAAG;AACb,gBAAI,SAAS,IAAI,IAAI,IAAI;qBAChB,QAAQ,GAAG;AACpB,gBAAI,SAAS,IAAI,IAAI,IAAI,IAAI,IAAI;qBACxB,QAAQ,GAAG;AACpB,gBAAI,SAAS,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;;AAE3C,iBAAO,UAAU;;;;;AAMzB,MAAI,SAAS,WAAW,QAAW;AACjC,QAAM,gBAAgB,UAAU,KAAK,QAAQ,SAAS;AACtD,QAAM,SAAS,OAAO,aAAa;AACnC,QAAI,cAAc,SAAS,gBAAgB;AACzC,aAAO,iBAAiB;AADiB,UAAA,wBAEP,cAAc,cAA1C,OAFmC,sBAEnC,MAAM,OAF6B,sBAE7B,MAAM,OAFuB,sBAEvB,MAAM,QAFiB,sBAEjB;AACxB,UAAI,UAAU,QAAW;AACvB,eAAO,gBAAgB;;AAEzB,UAAI,SAAS,QAAW;AACtB,eAAO,eAAe;;AAExB,UAAI,QAAQ,MAAM;AAChB,eAAO,mBAAmB,KAAK,IAAI,MAAM,QAAQ;;AAEnD,UAAI,SAAS,UAAa,MAAM;AAC9B,eAAO,mBAAmB,OAAO;;AAEnC,UAAI,SAAS,UAAa,MAAM;AAC9B,eAAO,mBAAmB,OAAO;;WAE9B;AAAA,UAAA,wBACsC,cAAc,aAAjD,cADH,sBACG,aAAa,OADhB,sBACgB,MAAM,QADtB,sBACsB,MAAM,SAD5B,sBAC4B;AACjC,UAAI,gBAAgB,QAAW;AAC7B,eAAO,cAAc;;AAEvB,UAAI,SAAS,QAAW;AACtB,eAAO,cAAc;;AAEvB,UAAI,UAAS,QAAW;AACtB,eAAO,eAAe;;AAExB,UAAI,WAAU,QAAW;AACvB,eAAO,gBAAgB;;;;AAK7B,MAAI,SAAS,YAAY;AACvB,QAAI,cAAc,SAAS,WAAW,YAAY;AAChD,UAAM,WAAW,SAAS,WAAW,WAAW;AAChD,UAAI,aAAa,QAAW;AAC1B,YAAM,QAAQ,aAAa,UAAU,UAAU;AAC/C,YAAI,OAAO;AACT,cAAM,WAAW,OAAO,aAAa,MAAM;AAC3C,oBAAc,UAAU,MAAM;;;;;AAMtC,SAAO,QAAQ,QAAQ;;AAUlB,oBAAoB,WAAW,WAAW;AAC/C,MAAM,aAAa;AACnB,WAAS,IAAI,GAAG,IAAI,UAAU,MAAM,QAAQ,KAAK;AAC/C,QAAM,OAAO,aAAa,SAAS,UAAU,MAAM,IAAI;AACvD,eAAW,KAAK;;AAGlB,MAAI,UAAU,YAAY;AACxB,QAAI,cAAc,UAAU,WAAW,YAAY;AACjD,UAAM,WAAW,UAAU,WAAW,WAAW;AACjD,UAAI,aAAa,QAAW;AAC1B,YAAM,QAAQ,aAAa,UAAU,UAAU;AAC/C,YAAI;AAAO,qBAAW,GAAG,aAAa,MAAM,SAAS,MAAM;;;;AAKjE,SAAO,QAAQ,QAAQ;IACrB,OAAO;;;AAYJ,sBAAsB,MAAM,KAAK,WAAW,SAAyB;AAAA,MAAzB,YAAyB,QAAA;AAAzB,cAAmB;;AAAM,MAClE,QAAU,UAAV;AAER,MAAM,UAAU,UAAU,MAAM,MAAM,SAAS,MAAM,IAAI;AACzD,SAAO,MAAM,MAAM;;AAQd,yBAAyB,WAAqC;AAAA,MAAA;AAAA,MAC3D,QAAgB,UAAhB,OAAO,OAAS,UAAT;AAEf,MAAM,YAAY,KAAK,SAAS;AAChC,MAAM,aAAa,KAAK;AAExB,QAAM,eAAe,aAAa,UAAD,eAAW,KAAK,UAAhB,OAAA,cAAyB,GAAG;AAE7D,WAAS,IAAI,UAAU,SAAS,GAAG,KAAK,GAAG,KAAK;AAC9C,QAAM,WAAW,UAAU;AAC3B,QAAM,OAAO,aAAa,SAAS,GAAG;AAEtC,QAAI,SAAS,eAAe,aAAa;AACvC,UAAM,WAAW,SAAS,YAAY;AACtC,eAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAAK;AAC7C,YAAM,YAAY,aAAa,SAAS,SAAS,IAAI;AAErD,aAAK,SAAS;;;AAKlB,QAAI,SAAS,eAAe,SAAS;AACnC,UAAM,YAAY,SAAS;AAC3B,WAAK,YAAY;AACjB,UAAM,qBAAqB,WAAW,WAAW;AACjD,UAAM,OAAO,aAAa,UAAU,WAAW;AAE/C,UAAI,WAAsB;AAC1B,UAAI,SAAS,eAAe,WAAW,KAAK,eAAe,YAAY;AACrE,YAAM,OAAO,aAAa,SAAS,SAAS,MAAM;AAClD,YAAM,UAAU,KAAK;AACrB,YAAM,eAAoC,KAAK,aAAa;AAC5D,qBAAa,OAAO;AACpB,qBAAa,OAAO;AACpB,qBAAa,WAAW;AACxB,mBAAW;aACN;AACL,mBAAW,KAAK,aAAa;AAC7B,iBAAS,OAAO;;AAElB,eAAS,KAAI,GAAG,IAAI,mBAAmB,QAAQ,KAAI,GAAG,MAAK;AACzD,YAAM,gBAAgB,mBAAmB,IAAG;AAC5C,aAAK,WAAW,IAAG,gBAAgB;AACnC,YAAM,WACJ,kBAAkB,SACd,aAAa,aAAa,eAAe,aACzC,mBAAmB,KAAK;AAC9B,iBAAS,kBAAkB,IAAG;;;;AAMpC,MAAM,QAAQ,MAAM,aAAa;AACjC,MAAI,MAAM,WAAW,GAAG;AACtB,UAAM,mBAAmB,MAAM;SAC1B;AACL,QAAM,WAAW,IAAI,OAAO,UAAU;AACtC,aAAS,MAAI,GAAG,MAAI,MAAM,QAAQ,OAAK;AACrC,eAAS,SAAS,MAAM;;AAE1B,UAAM,mBAAmB;;AAG3B,MAAM,WAAW,MAAM,iBAAiB,aAAa;AACrD,MAAM,aAAa,MAAM;AACzB,MAAI,YAAY;AACd,eAAW,QAAQ,SAAC,MAAwB;AAC1C,eAAS,iBAAiB,MAAM,KAAK;;;AAGzC,SAAO,UAAU;;ACn1BZ,kBAAkB,KAAK;AAC5B,MAAM,gBAAgB;AACtB,MAAM,mBAAmB;AACzB,MAAM,oBAAoB;AAC1B,MAAM,kBAAkB;IAAE,MAAM;IAAY,KAAK;;AAEjD,MAAM,WAAW,IAAI,SAAS;AAG9B,MAAM,SAAS;IACb,OAAO,SAAS,UAAU,GAAG;IAC7B,SAAS,SAAS,UAAU,eAAe;IAC3C,QAAQ,SAAS,UAAU,IAAI,eAAe;;AAGhD,MAAI,OAAO,UAAU,kBAAkB;AACrC,YAAQ,MAAM,4DAA4D,OAAO,MAAM,SAAS;AAChG,WAAO;;AAIT,MAAI,cAAc,SAAS,UAAU,mBAAmB;AACxD,MAAI,YAAY,SAAS,UAAU,oBAAoB,eAAe;AAGtE,MAAI,cAAc,gBAAgB,MAAM;AACtC,YAAQ,MAAM,0DAA0D,UAAU,SAAS;AAC3F,WAAO;;AAGT,MAAM,WAAW,IAAI,WAAW,KAAK,oBAAoB,IAAI,eAAe;AAC5E,MAAM,OAAO,KAAK,MAAM,WAAW;AAGnC,MAAM,UAAU;AAChB,MAAI,aAAa,oBAAoB,IAAI,gBAAgB;AAEzD,SAAO,aAAa,OAAO,QAAQ;AACjC,kBAAc,SAAS,UAAU,YAAY;AAC7C,gBAAY,SAAS,UAAU,aAAa,eAAe;AAE3D,QAAI,cAAc,gBAAgB,KAAK;AACrC,cAAQ,MAAM,0DAA0D,UAAU,SAAS;AAC3F,aAAO;;AAGT,QAAM,gBAAgB,aAAa,IAAI;AACvC,QAAM,SAAS,IAAI,MAAM,eAAe,gBAAgB;AACxD,YAAQ,KAAK;AAEb,kBAAc,cAAc,IAAI;;AAIlC,SAAO;IACL;IACA;;;;;;SClDH,eAAe,UAAU,QAAQ,CAAC,QAAQ,SAC3C,OAAA,YAAA,UAAA,SAAA,SAAA;AAAA,kBAAA,YAAA;AAAA,wBAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,QAAA,KAAA,MAAA,SAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UACU,UADV;AAAA,UAkBU,cAAc,SAAC,MAAgB,iBAAkE;AACvG,aAAO,MAAK,QAAc,KAAK,KAAxB,gBAAA,gBAAA,IACF,OADE,IAAA;QAEL,MAAM;UACL,KAAK,SAAC,KAAD;AAAA,eAAS,MAAK,mBAAmB,MAAM,KAAK;;;AAtBxD,UAyBU,aAAa,SAAC,MAAgB,iBAAkE;AACtG,aAAO,MAAK,QAAc,KAAK,KAAxB,gBAAA,gBAAA,IACF,OADE,IAAA;QAEL,MAAM;UAEL,KAAK,UACL,KAAK,SAAC,KAAQ;AACb,eAAA,gBAAA,gBAAA,IAAY,MAAZ,IAAA;UAAiB,SAAS,KAAK;UAAK;;SAErC,KAAK,MAAK;;AAlCjB,UA0EU,cAAc,SAAA,MAK0E;AAAA,UAJ9F,OAI8F,KAJ9F,MACA,UAG8F,KAH9F,SACA,UAE8F,KAF9F,SACA,kBAC8F,KAD9F;AAEA,UAAI,KAAK,QAAQ;AACf,eAAO,QAAQ,IACb,KAAK,OAAO,IAAI,SAAA,OAAoD;AAAA,cAAjD,MAAiD,MAAjD,KAAiB,kBAAgC,MAA5C,YAA6B,YAAe,MAAf;AACnD,cAAI,KAAK;AAEP,mBAAO,gBAAgB,KAAK;cAAE,KAAK,iBAAiB,SAAS;cAAM,MAAM,UAAU;;iBAC9E;AAEL,gBAAM,aAAa,KAAK,YAAY;AACpC,gBAAM,aAAa,cAAc,YAAY;AAC7C,mBAAO,gBAAgB,YAAY,WAAU,KAAK,SAAC,OAAU;AAC3D,kBAAM,MAAM,IAAI,UAAU,gBAAgB,QAAQ,MAAM,OAAO,MAAM;AACrE,kBAAI,eAAe;AACnB,kBAAI;AACJ,qBAAO;;;YAIb,KAAK,SAAC,UAAa;AACnB,iBAAO;YAAE;YAAM;YAAS;;;;AAG5B,aAAO,QAAQ,QAAQ;QAAE;QAAM;;;AAtGnC,WAAA;;AAAA,MAAA,SAAA,WAAA;AAAA,SAEE,OAAA,cAAK,MAAgB,iBAA8D;AAAA,QAAA,SAAA;AACjF,WAAO,IAAI,aAAa,SAAC,SAAS,QAAW;AAC3C,UAAM,sBAAsB,OAAK,MAAM,KAAK,OAAO,OAAK,aAAa,OAAK;AAC1E,0BAAoB,MAAM,iBACvB,KAAK,SAAC,KAAQ;AACb,kBAAU,KAAK,gBAAgB,QAAQ,KAAK,SAAC,MAAS;AACpD,kBAAQ;;SAGX,MAAM,SAAC,GAAM;AACZ,gBAAQ,MAAM;AACd,eAAO,kCAAkC,KAAK;;;;AAbxD,SAqCU,QAAR,eAAc,KAAsB;AAClC,WAAO,IAAI,UAAU,IAAI,YAAY,OAAO,OAAO;;AAtCvD,SA8CU,qBAAR,4BACE,MACA,MACA,iBAC6B;AAE7B,WAAO,KAAK,aAAa,KAAK,KAAK,MAAM,iBAAiB,KAAK,KAAK;;AApDxE,SAuDU,eAAR,sBAAqB,SAAiB,MAAY,iBAA+D;AAC/G,QAAI,KAAK,SAAS;AAChB,aAAO,QAAQ,IACb,KAAK,QAAQ,IAAI,SAAC,MAAS;AACzB,YAAI,gBAAgB,aAAa;AAC/B,iBAAO,QAAQ,QAAQ;;AAEzB,eAAO,gBAAgB,KAAkB;UACvC,KAAK,iBAAiB,SAAS,KAAK;UACpC,MAAM,UAAU;;UAGpB,KAAK,SAAC,SAAY;AAClB,eAAO;UAAE;UAAS;UAAM;UAAS;;;;AAGrC,WAAO,QAAQ,QAAQ;MAAE;MAAS;MAAM;;;AAvE5C,SAAA;EAAgC,SAAhC,YAAA;;;SCbC,eAAe,UAAU,MAAM,CAAC,SAAS,QAA3B,OAAA,YAAA,SAAA,SAAA;;;;;;SAEb,OAAA,cAAK,MAAsC;AACzC,WAAO,KAAK,QAAQ,KAAK,KAAlB,gBAAA,gBAAA,IACF,OADE,IAAA;MAEL,MAAM;;;;EAJa,YAAA;ACKzB,IAAM,aAAa,KAAK,KAAK;AAG7B,IAAM,gBAAgB;AAKtB,oBAAoB,cAA4B,aAAgC;AAC9E,MAAM,UAAU;AAGhB,MAAI,aAAa,aAAa,aAAa;AAC3C,MAAI,QAAQ,aAAa;AACzB,MAAI,SAAS,aAAa;AAC1B,MAAI,cAAc,cAAc,aAAa,uBAAuB;AAEpE,WAAS,QAAQ,GAAG,QAAQ,aAAa,SAAS;AAChD,QAAI,YAAY,IAAI,WAAW,aAAa,QAAQ,YAAY,GAAG;AACnE,kBAAc;AAEd,aAAS,OAAO,GAAG,OAAO,aAAa,eAAe,QAAQ;AAC5D,UAAI,YAAY,IAAI,WAAW,aAAa,QAAQ,YAAY;AAEhE,cAAQ,KAAK;QAAE,MAAM;QAAW;QAAc;;AAE9C,oBAAc;AACd,oBAAc,IAAM,aAAY,KAAK;;AAEvC,YAAQ,KAAK,IAAI,GAAK,QAAQ;AAC9B,aAAS,KAAK,IAAI,GAAK,SAAS;;AAGlC,SAAO;;AAQT,iBAAiB,MAA4B;AAC3C,MAAI,KAAK,cAAc,IAAI;AAEzB,QAAM,aAAa,IAAI,WAAW,MAAM,GAAG;AAC3C,QACE,WAAW,OAAO,OAClB,WAAW,OAAO,MAClB,WAAW,OAAO,MAClB,WAAW,OAAO,MAClB,WAAW,OAAO,MAClB,WAAW,OAAO,MAClB,WAAW,OAAO,MAClB,WAAW,OAAO,OAClB,WAAW,OAAO,MAClB,WAAW,OAAO,MAClB,WAAW,QAAQ,MACnB,WAAW,QAAQ,IACnB;AACA,aAAO;;;AAIX,SAAO;;AAGT,yBAAyB,gBAAsC;AAC7D,UAAQ;SAID,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;SAClB,kCAAkC;AACrC,aAAO,cAAc;;AAErB,UAAM,aAAkB,kCAAkC;AAC1D,YAAM,IAAI,MAAJ,mDAA2D;;;AAOhE,IAAM,gCAAgC;EAS3C,OAT2C,gBAUzC,QACA,eACA,aACA,iBACc;AAAA,QADd,oBACc,QAAA;AADd,wBAA2B;;AAE3B,QAAI,CAAC,QAAQ,SAAS;AACpB,YAAM,IAAI,MAAM;;AAIlB,QAAM,WAAW,YAAY;AAC7B,QAAM,iBAAiB,IAAI,SAAS,QAAQ,IAAI,KAAK;AACrD,QAAM,aAAa,eAAe,UAAU,GAAG;AAC/C,QAAM,eAAe,eAAe;AAEpC,QAAM,eAA6B;MACjC;MACA,QAAQ,eAAe,UAAU,IAAI,UAAU;MAC/C,YAAY,eAAe,UAAU,IAAI,UAAU;MACnD,UAAU,eAAe,UAAU,IAAI,UAAU;MACjD,kBAAkB,eAAe,UAAU,IAAI,UAAU;MACzD,sBAAsB,eAAe,UAAU,IAAI,UAAU;MAC7D,YAAY,eAAe,UAAU,IAAI,UAAU;MACnD,aAAa,eAAe,UAAU,IAAI,UAAU;MACpD,YAAY,eAAe,UAAU,IAAI,UAAU;MACnD,uBAAuB,eAAe,UAAU,IAAI,UAAU;MAC9D,eAAe,eAAe,UAAU,KAAK,UAAU;MACvD,sBAAsB,eAAe,UAAU,KAAK,UAAU;MAC9D,qBAAqB,eAAe,UAAU,KAAK,UAAU;MAE7D,UAAU;;AAIZ,QAAI,aAAa,WAAW,GAAG;AAC7B,YAAM,IAAI,MAAM;WACX;AAEL,mBAAa,uBAAuB,KAAK,IAAI,GAAG,aAAa;;AAG/D,QAAI,aAAa,gBAAgB,KAAK,aAAa,eAAe,GAAG;AACnE,YAAM,IAAI,MAAM;;AAGlB,QAAI,aAAa,0BAA0B,GAAG;AAC5C,YAAM,IAAI,MAAM;;AAGlB,QAAI,aAAa,kBAAkB,eAAe;AAChD,YAAM,IAAI,MAAM,6BAA6B,gBAAgB,iBAAiB,aAAa;;AAG7F,QAAI,aAAa;AACf,mBAAa,UAAU,WAAW,cAAc;;AAGlD,QAAI,iBAAiB;AACnB,mBAAa,eAAe,gBAAgB,aAAa;;AAE3D,WAAO;;;AC1LJ,wBAAwB,MAA0C;AACvE,MAAM,MAAM,8BAA8B,MAAM,MAAM,GAAG,MAAM;AAC/D,SAAO;IACL,SAAS,IAAI;IACb,cAAc,IAAI;IAClB,gBAAgB,IAAI;IACpB,OAAO,IAAI;IACX,QAAQ,IAAI;;;AAIT,sBAAsB,WAA8C;AACzE,MAAM,eAAe;AACrB,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,QAAM,MAAM,8BAA8B,MAAM,UAAU,IAAI,GAAG,MAAM;AACvE,iBAAa,KAAK,IAAI;AACtB,QAAI,MAAM,GAAG;AACX,cAAQ,IAAI;AACZ,eAAS,IAAI;AACb,uBAAiB,IAAI;AACrB,qBAAe,IAAI;;;AAGvB,SAAO;IACL;IACA;IACA;IACA;IACA;;;;;SCxBH,eAAe,UAAU,SAAS,KAApB,OAAA,YAAA,SAAA,SAAA;;;;;;SAEb,OAAA,cAAK,MAAgB,iBAAgE;AAAA,QAAA,QAAA;AACnF,WAAO,IAAI,aAAa,SAAC,SAAS,QAAW;AAC3C,cAAQ,IACN,KAAK,KAAK,IAAI,SAAC,KAAD;AAAA,eACZ,MAAK,QAAqB,KAA1B,gBAAA,gBAAA,IACK,OADL,IAAA;UAEE,MAAM;;UAIT,KAAK,SAAC,MAAS;AACd,YAAM,aAAa,aAAa;AADlB,YAEN,QAAsC,WAAtC,OAAO,eAA+B,WAA/B,cAAc,eAAiB,WAAjB;AAC7B,YAAM,SAAS,aAAa,GAAG,SAAS;AACxC,YAAM,UAAU,IAAI,eAAe,gBAAgB,QAAQ,OAAO,cAAc;AAEhF,iBAAS,OAAO,GAAG,OAAO,GAAG,QAAQ;AACnC,cAAM,SAAS,aAAa,MAAM;AAElC,mBAAS,WAAW,GAAG,WAAW,QAAQ,YAAY;AAAA,gBAAA,wBACpB,aAAa,MAAM,WAA3C,QAD4C,sBAC5C,MAAM,SADsC,sBACtC,OAAO,SAD+B,sBAC/B;AAErB,oBAAQ,eAAe,gBAAgB,YAAY,MAAM,OAAM,UAAU,GAAG,GAAG,QAAO;;;AAI1F,gBAAQ;SAET,MAAM,SAAC,GAAM;AACZ,eAAO;;;;;EA9BW,YAAA;;;SCF3B,eAAe,UAAU,KAAK,CAAC,SAChC,OAAA,YAAA,SAAA,SAAA;AAAA,kBAAA,WAAA;AAAA,uBAAA;AAAA,WAAA,QAAA,MAAA,MAAA,cAAA;;AAAA,MAAA,SAAA,UAAA;AAAA,SACE,OAAA,cAAK,MAAgB,iBAA2D;AAAA,QAAA,QAAA;AAC9E,WAAO,IAAI,aAAa,SAAC,SAAS,QAAW;AAC3C,YAAK,QAAqB,KAAK,KAA/B,gBAAA,gBAAA,IACK,OADL,IAAA;QAEE,MAAM;UAEL,KAAK,SAAC,KAAQ;AACb,YAAM,aAAa,eAAe;AADrB,YAEL,QAAyC,WAAzC,OAAO,SAAkC,WAAlC,QAAQ,UAA0B,WAA1B,SAAS,eAAiB,WAAjB;AAChC,YAAM,SAAS,QAAQ,SAAS;AAChC,YAAM,UAAU,IAAI,UAAU,gBAAgB,QAAQ,OAAO,QAAQ,cAAc;AAEnF,iBAAS,WAAW,GAAG,WAAW,QAAQ,QAAQ,YAAY;AAAA,cAAA,oBAC5B,QAAQ,WAAhC,SADoD,kBACpD,OAAO,UAD6C,kBAC7C,QAAQ,OADqC,kBACrC;AACvB,kBAAQ,eAAe,MAAM,UAAU,GAAG,GAAG,QAAO;;AAGtD,gBAAQ;SAET,MAAM,SAAC,GAAM;AACZ,eAAO;;;;AArBjB,SAAA;EAA+B,YAA/B;;;SCFC,eAAe,UAAU,WAAW,CAAC,OAAO,OAAO,QAAQ,UAA7C,OAAA,YAAA,SAAA,SAAA;;;;;;SAEb,OAAA,cAAK,MAAgB,iBAA2D;AAAA,QAAA,QAAA;AAC9E,WAAO,IAAI,aAAa,SAAC,SAAS,QAAW;AAC3C,YAAK,QAA0B,KAAK,KAApC,gBAAA,gBAAA,IACK,OADL,IAAA;QAEE,MAAM;UAEL,KAAK,SAAC,OAAU;AACf,YAAM,UAAU,IAAI,UAAU,gBAAgB,QAAQ,MAAM,OAAO,MAAM;AACzE,YAAI,CAAC,QAAQ;AAAY;AACzB,gBAAQ,eAAe;AACvB,gBAAQ;AAER,YAAI,KAAK,IAAI,QAAQ,aAAa,GAAG;AACnC,cAAM,YAAY,KAAK,IAAI,MAAM;AACjC,kBAAQ,OAAO,UAAU,UAAU,SAAS;;AAE9C,gBAAQ;SAET,MAAM,SAAC,GAAM;AACZ,eAAO;;;;;EApBa,YAAA;;;SCA7B,eAAe,UAAU,aAAa,CAAC,MAAzB,OAAA,YAAA,SAAA,SAAA;;;;;;SAEb,OAAA,cAAK,MAAgB,iBAAgE;AAAA,QAAA,QAAA;AACnF,WAAO,IAAI,aAAa,SAAC,SAAS,QAAW;AAC3C,cAAQ,IACN,KAAK,KAAK,IAAI,SAAC,KAAD;AAAA,eACZ,MAAK,QAA0B,KAA/B,gBAAA,gBAAA,IACK,OADL,IAAA;UAEE,MAAM;;UAIT,KAAK,SAAC,QAAW;AAAA,YAAA,WACU,OAAO,IAAzB,QADQ,SACR,OAAO,SADC,SACD;AAEf,YAAI,UAAU,QAAQ;AACpB,kBAAQ,MAAM;AACd;;AAGF,YAAM,MAAM,IAAI,eAAe,gBAAgB,QAAQ;AAEvD,YAAI,CAAC,IAAI;AAAY;AAErB,iBAAS,YAAY,GAAG,YAAY,GAAG,aAAa;AAClD,cAAI,eAAe,gBAAgB,YAAY,WAAW,OAAO,YAAY;;AAG/E,YAAI;AACJ,gBAAQ;SAET,MAAM,SAAC,GAAM;AACZ,eAAO;;;;;EA/Be,YAAA;ICJnB,YAAb,SAAA,YAAA;AAAA,kBAAA,YAAA;AAoEE,sBAAY,QAAQ;AAAA,QAAA;AAClB,YAAA,WAAA,KAAA,MAAM,WAAN;AADkB,UATb,YASa;AAAA,UARb,kBAQa;AAAA,UANZ,SAMY;AAAA,UALZ,WAKY;AAAA,UAJZ,QAIY;AAAA,UAHZ,YAGY;AAAA,UAFZ,gBAAyB;AAEb,WAAA;;AApEtB,MAAA,SAAA,WAAA;AAAA,SA4EE,OAAA,eAAK,OAAa;AAAA,QAAA,eACkC,MAA1C,OAAA,QADQ,iBAAA,SACA,OADA,cACM,WAA4B,MAA5B,UAAU,OAAkB,MAAlB,MAAM,UAAY,MAAZ;AACtC,QAAI,SAAS;AACX,UAAM,WAAY,MAAc;AAChC,UAAI,UAAU;AACZ,aAAK,WAAW,KAAK,OAAO,WAAW;;;AAG3C,QAAI,CAAC,KAAK,UAAU;AAClB,UAAM,YAAQ,UAAW,KAAK;AAC7B,YAAc,eAAe;AAC9B,WAAK,WAAW,KAAK,OAAO,YAAY;AACxC,WAAK,gBAAgB;WAChB;AACL,WAAK,gBAAgB;;AAGvB,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,WAAW;;AA/FpB,SAqGE,YAAA,qBAAkB;AAChB,SAAK,YAAa,MAAK,SAAS,WAAW;;AAtG/C,SA4GE,aAAA,sBAAmB;AACjB,SAAK,YAAa,MAAK,SAAS,WAAW;;AA7G/C,gBAAA,YAAA,CAAA;IAAA,KAAA;IAAA,KACE,gBAAY;AACV,aAAO,KAAK;;IAFhB,KAKE,cAAU,OAAqB;AAC7B,UAAI,SAAS,MAAM,qBAAqB,KAAK,UAAU;AACrD;;AAEF,UAAI,CAAC,KAAK,eAAe;AACtB,aAAK,SAAiB;AACvB,YAAI,UAAU,MAAM;AAClB,cAAI,KAAK,UAAU;AACjB,iBAAK,SAAS;;AAEhB,eAAK,WAAW,MAAM,iBAAiB;AACvC,eAAK,YAAY,KAAK,SAAS,aAAa;AAC5C,eAAK,OAAO,SAAS,KAAK;;;AAG9B,WAAK,SAAS;;KApBlB;IAAA,KAAA;IAAA,KAuBE,gBAAe;AACb,aAAO,KAAK;;KAxBhB;IAAA,KAAA;IAAA,KA2BE,gBAAe;AACb,aAAO,KAAK;;IA5BhB,KA+BE,cAAa,OAAe;AAC1B,UAAI,KAAK,WAAW;AAElB,YAAI,OAAO;AACT,eAAK,UAAU,kBAAkB,OAAO;YACtC,UAAU,KAAK;;eAEZ;AACL,eAAK,UAAU,KAAK;;;AAGxB,WAAK,YAAY;;KA1CrB;IAAA,KAAA;IAAA,KA6CE,gBAAW;AACT,aAAO,KAAK;;IA9ChB,KAiDE,cAAS,OAAiB;AACxB,UAAI,KAAK,aAAa,KAAK,UAAU;AAEnC,aAAK,UAAU,kBAAkB,KAAK,WAAW;UAC/C,UAAU;;;AAGd,WAAK,QAAQ;;;AAxDjB,SAAA;EAA+B;ICJlB,gBAAb,WAAA;AAAA,4BAAA;AAAA,SACU,oBAAiC,IAAI;AAD/C,SAEU,UAAwB;;AAFlC,MAAA,SAAA,eAAA;AAAA,SAIE,WAAA,kBAAS,QAAgB;AACvB,SAAK,kBAAkB,IAAI;;AAL/B,SAQE,OAAA,cAAK,OAAc;AACjB,aAAA,YAAA,iCAAmB,KAAK,kBAAkB,WAA1C,OAAA,CAAA,SAAA,aAAA,QAAoD;AAAA,UAA3C,SAA2C,MAAA;AAClD,UAAI,OAAO,WAAW,YAAY;AAChC,iBAAS,OAAO;;AAElB,WAAK,QAAQ,KAAK;;;AAbxB,SAiBE,QAAA,iBAAQ;AACN,SAAK,kBAAkB;AACvB,SAAK,UAAU;;AAnBnB,SAsBE,YAAA,mBAAU,QAAgB;AACxB,SAAK,eAAe,aAAa;;AAvBrC,SA0BU,iBAAR,wBAAuB,MAAiC;AAAA,aAAA,OAAA,UAAA,QAAN,OAAM,IAAA,MAAA,OAAA,IAAA,OAAA,IAAA,IAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAN,WAAM,OAAA,KAAA,UAAA;;AACtD,SAAK,QAAQ,QAAQ,SAAC,QAAD;AAAA,aAAY,OAAO,SAAU,OAAO,MAAR,MAAC,QAAwB;;;AA3B9E,SAAA;;AAoDO,oBAAoB,SAA0F;AACnH,SAAO,SAAU,QAAa,cAAsB,YAA0C;AAC5F,QAAM,SAAS,WAAW;AAE1B,eAAW,QAAQ,WAA0B;AAAA,UAAA,uBAAA,QAAA;AAAA,eAAA,QAAA,UAAA,QAAb,OAAa,IAAA,MAAA,QAAA,QAAA,GAAA,QAAA,OAAA,SAAA;AAAb,aAAa,SAAA,UAAA;;AAC3C,cAAQ,UAAU,yBAAA,KAAK,MAAM,eAAc,eAAzB,MAAA,uBAAA,CAAwC,QAAQ,QAAhD,OAA2D;AAC7E,aAAO,QAAQ,QAAQ,OAAO,MAAM,MAAM,YAAY,KAAK,SAAC,WAAc;AACxE,gBAAQ,SAAS,MAAK,MAAM,cAAc,eAAe,QAAQ,OAAO;AACxE,eAAO;;;;;AChER,6BAA6B,UAAiB,cAAsB,aAAqB;AAC9F,MAAI,iBAAiB,eAAe,gBAAgB,QAAQ,gBAAgB,QAAW;AACrF;;AAF4F,MAAA,OAI5C,CAAC,SAAS,cAAc,SAAS;AAAlF,WAAS,gBAJoF,KAAA;AAIrE,WAAS,eAJ4D,KAAA;;AAOzF,iBAAiB,QAAsB;AAC5C,SAAO,UAAU,OAAO,SAAS;;AAG5B,uBAAuB,KAAyB;AACrD,MAAM,SAAS;AACf,MAAM,YAAY,OAAO,eAAe;AACxC,MAAM,iCAAiC,OAAO,0BAA0B;AACxE,WAAA,KAAA,GAAA,kBAAqC,OAAO,QAAQ,iCAApD,KAAA,gBAAA,QAAA,MAAqF;AAAA,QAAA,qBAAA,gBAAA,KAAzE,WAAyE,mBAAA,IAA/D,aAA+D,mBAAA;AACnF,QAAI,OAAO,WAAW,QAAQ,YAAY;AACxC,aAAO,KAAK;;;AAGhB,SAAO;;ICPa,iBAAtB,WAAA;AAAA,MAAA,SAAA,gBAAA;AAAA,SAmBY,UAAV,mBAAoB;;AAEpB,2BAAsB,iBAAkD,WAAiB;AAAA,SAAnE,kBAAA;AAAmE,SAAjB,YAAA;AAAiB,SApB/E,QAAuB;AAoBwD,SAnB/E,qBAA4C;AAoBpD,SAAK;;AAtBT,SA0BE,4BAAA,mCACE,iBACA,aACA,OACqC;AAAA,QAAA,QAAA;AACrC,WAAO,IAAI,QAAQ,SAAC,SAAS,QAAW;AACtC,YAAK,KAAK,iBAAgB,aAAa,OACpC,KAAK,WAAM;AACV,gBAAQ;UACN,WAAW,CAAC;UACZ,WAAW;YACT,OAAO;YACP,OAAO;;;SAIZ,MAAM,SAAC,GAAM;AACZ,eAAO;;;;AA3CjB,SAgDE,WAAA,oBAAgB;AACd,WAAO;;AAjDX,SAoDE,OAAA,gBAAa;;AApDf,SAqDE,SAAA,kBAAe;;AArDjB,SAuDE,SAAA,gBAAO,KAAa,OAAY;AAC9B,QAAI,QAAQ,QAAQ;AAClB,UAAM,WAAW,KAAK,gBAAgB,IAAI,MAAM;AAChD,UAAI,UAAU;AACZ,aAAK,UAAU,OAAO,SAAS;aAC1B;AACL,eAAO,KAAP,qBAA+B,KAAK,KAAK,OAAzC,qCAAgF,MAAM;;WAEnF;AACL,WAAK,UAAU,OAAO;;;AAhE5B,SAoEE,aAAA,oBAAW,KAAa,OAAY;AAClC,SAAK,MAAM,OAAO;;AArEtB,SAwEE,YAAA,qBAAY;;AAxEd,gBAAA,iBAAA,CAAA;IAAA,KAAA;IAAA,KAOE,gBAAe;AACb,aAAO,KAAK;;KARhB;IAAA,KAAA;IAAA,KAWE,gBAA0B;AACxB,aAAO,KAAK;;KAZhB;IAAA,KAAA;IAAA,KAeE,gBAAwB;AACtB,aAAO,KAAK;;;AAhBhB,SAAA;;ICRa,kBAAb,SAAA,iBAAA;AAAA,kBAAA,kBAAA;AAAA,8BAAA;AAAA,WAAA,gBAAA,MAAA,MAAA,cAAA;;AAAA,MAAA,SAAA,iBAAA;AAAA,SACE,OAAA,cAAK,iBAAkC,aAA0B,OAAwC;AAAA,QAAA,QAAA;AACvG,WAAO,IAAI,QAAQ,SAAC,SAAS,QAAW;AAAA,UAAA,oBAAA,uBAAA;AACtC,UAAI;AACJ,UAAI,YAAY,UAAU;AAC1B,UAAI,MAAK,gBAAgB,wBAAwB,gBAA7C,QAA6C,gBAA7C,UAAA,sBAA6C,YAAa,WAA1D,QAAA,uBAAA,UAAA,yBAA6C,mBAAoB,iBAAjE,QAAA,0BAAA,UAA6C,sBAAiC,aAAa,QAAQ;AACrG,YAAM,MAAM,MAAM,OAAO;AACzB,YAAM,eAAe,YAAY,MAAM,YAAY;AACnD,iBAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,cAAM,cAAc,aAAa;AACjC,cAAI,YAAY,cAAc,SAAS,IAAI,QAAQ,iBAAiB,YAAY,QAAQ;AACtF,kBAAM,YAAY;AAClB,wBAAY,UAAU;AACtB;;;;AAKN,YAAG,QAAG,QAAH,OAAA,OAAU,YAAY;AAEzB,sBACG,KAAK;QAAE;QAAK,MAAM;SAClB,KAAK,SAAC,KAAQ;AACb,cAAK,YAAY;AACjB,gBAAQ;SAET,MAAM,SAAC,GAAM;AACZ,eAAO;;;;AA3BjB,SAgCE,UAAA,mBAAU;AACR,QAAI,KAAK,UAAU;AACjB,WAAK,MAAM,OAAO,KAAK,SAAS;AAChC,UAAI,KAAK,SAAS,OAAO;AACvB,aAAK,MAAM,MAAM,KAAK,SAAS,MAAM;;;;AApC7C,SAAA;EAAqC;ICCxB,6BAAb,SAAA,iBAAA;AAAA,kBAAA,6BAAA;AAAA,yCAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,gBAAA,KAAA,MAAA,iBAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UACU,cADV;AAAA,WAAA;;AAAA,MAAA,SAAA,4BAAA;AAAA,SAGE,OAAA,cAAK,iBAAkC,aAA+D;AAAA,QAAA,SAAA;AACpG,WAAO,IAAI,QAAQ,SAAC,SAAY;AAC9B,UAAM,WAAW,IAAI,mBAAmB,gBAAgB;AACxD,aAAK,cAAc,YAAY;AAC/B,aAAK,YAAY;AAEjB,eAAS,KAAK,OAAK,aAAa;AAC9B,YAAI,CAAC,QAAQ,OAAK,YAAY,KAAK;AACjC,mBAAS,KAAK,OAAK,YAAY;;;AAGnC,aAAK;AACL,cAAQ;;;AAfd,SAmBE,4BAAA,mCACE,iBACA,aACqC;AAAA,QAAA,SAAA;AACrC,WAAO,IAAI,QAAQ,SAAC,SAAS,QAAW;AACtC,UAAI;AACJ,UAAI,YAAY,oBAAoB,oBAAoB;AACtD,sBAAc,IAAI,QAAQ,SAAC,UAAY;AACrC,iBAAK,YAAY,YAAY;AAC7B,iBAAK;AACL,mBAAQ;;iBAED,YAAY,OAAO;AAC5B,sBAAc,OAAK,KAAK,iBAAiB;aACpC;AACL,eAAO;;AAET,UAAI,aAAa;AACf,oBAAY,KAAK,WAAM;AACrB,cAAM,SAAc;YAClB,WAAW,CAAC;YACZ,WAAW;cACT,OAAO;cACP,OAAO;;;AAIX,cAAM,WAAW,OAAK;AACtB,wBAAc,OAAK,WAAW,QAAQ,SAAC,MAAS;AAC9C,gBAAI,CAAE,UAAS,iBAAiB;AAAU;AAC1C,gBAAM,kBAAkB,IAAI,gBAAgB,OAAK,iBAAiB,SAAS;AAC3E,mBAAK,kBAAkB,KAAK;AAC5B,mBAAO,UAAU,KAAK;AACtB,mBAAO,UAAU,MAAM,QAAQ;cAC7B,OAAO,OAAO,UAAU,SAAS;;;AAGrC,kBAAQ;;;;;AAxDlB,SA8DE,UAAA,mBAAU;AACR,QAAI,KAAK,UAAU;AACjB,WAAK,KAAK,OAAO,KAAK,SAAS;;;AAhErC,SAoEE,OAAA,gBAAO;AAAA,QAAA,SAAA;AACL,QAAM,WAAW,KAAK;AACtB,WAAO,KAAK,KAAK,aAAa,QAAQ,SAAC,MAAS;AAC9C,UAAM,QAAQ,OAAK,YAAY;AAC/B,UAAI,QAAQ,QAAQ;AAClB,YAAM,kBAAkB,OAAK,gBAAgB,IAAI,MAAM;AACvD,YAAI,mBAAmB,2BAA2B,iBAAiB;AACjE,mBAAS,QAAQ,gBAAgB;AACjC,iBAAK,mBAAmB,KAAK;eACxB;AACL,mBAAS,QAAQ;AACjB,iBAAO,KAAP,iCACiC,OAAK,KAAK,OAD3C,wBACqE,OADrE,qBAC4F,MAAM;;aAG/F;AACL,iBAAS,QAAQ;;;;AApFzB,SAAA;EAAgD;ICAnC,sBAAb,SAAA,iBAAA;AAAA,kBAAA,sBAAA;AAAA,kCAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,gBAAA,KAAA,MAAA,iBAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UACU,cADV;AAAA,WAAA;;AAAA,MAAA,SAAA,qBAAA;AAAA,SAGE,OAAA,cAAK,iBAAkC,aAAwD;AAAA,QAAA,SAAA;AAC7F,WAAO,IAAI,QAAQ,SAAC,SAAY;AAC9B,UAAM,WAAW,IAAI,YAAY,gBAAgB;AACjD,aAAK,cAAc,YAAY;AAE/B,eAAS,KAAK,OAAK,aAAa;AAC9B,YAAI,CAAC,QAAQ,OAAK,YAAY,KAAK;AACjC,mBAAS,KAAK,OAAK,YAAY;;;AAGnC,aAAK,YAAY;AACjB,aAAK;AACL,cAAQ;;;AAfd,SAmBE,4BAAA,mCACE,iBACA,aACqC;AAAA,QAAA,SAAA;AACrC,WAAO,IAAI,QAAQ,SAAC,SAAS,QAAW;AACtC,UAAI;AACJ,UAAI,YAAY,oBAAoB,aAAa;AAC/C,sBAAc,IAAI,QAAQ,SAAC,UAAY;AACrC,iBAAK,YAAY,YAAY;AAC7B,iBAAK;AACL,mBAAQ;;iBAED,YAAY,OAAO;AAC5B,sBAAc,OAAK,KAAK,iBAAiB;aACpC;AACL,eAAO;;AAET,UAAI,aAAa;AACf,oBAAY,KAAK,WAAM;AACrB,cAAM,SAAc;YAClB,WAAW,CAAC;YACZ,WAAW;cACT,OAAO;cACP,OAAO;;;AAIX,cAAM,WAAW,OAAK;AACtB,wBAAc,OAAK,WAAW,QAAQ,SAAC,MAAS;AAC9C,gBAAI,CAAE,UAAS,iBAAiB;AAAU;AAC1C,gBAAM,kBAAkB,IAAI,gBAAgB,OAAK,iBAAiB,SAAS;AAC3E,mBAAK,kBAAkB,KAAK;AAC5B,mBAAO,UAAU,KAAK;AACtB,mBAAO,UAAU,MAAM,QAAQ;cAC7B,OAAO,OAAO,UAAU,SAAS;;;AAGrC,kBAAQ;;;;;AAxDlB,SA8DE,UAAA,mBAAU;AACR,QAAI,KAAK,UAAU;AACjB,WAAK,KAAK,OAAO,KAAK,SAAS;;;AAhErC,SAoEE,WAAA,oBAAW;AAAA,QAAA,SAAA;AACT,QAAM,SAAS;AACf,QAAM,QAAQ,cAAc,KAAK;AACjC,UAAM,QAAQ,SAAC,MAAD;AAAA,aAAW,OAAO,QAAQ,OAAK,SAAS;;AACtD,WAAO;;AAxEX,SA2EE,OAAA,gBAAO;AAAA,QAAA,SAAA;AACL,QAAM,WAAW,KAAK;AACtB,WAAO,KAAK,KAAK,aAAa,QAAQ,SAAC,MAAS;AAC9C,UAAM,QAAQ,OAAK,YAAY;AAC/B,UAAI,QAAQ,QAAQ;AAClB,YAAM,kBAAkB,OAAK,gBAAgB,IAAI,MAAM;AACvD,YAAI,mBAAmB,2BAA2B,iBAAiB;AACjE,mBAAS,QAAQ,gBAAgB;AACjC,iBAAK,mBAAmB,KAAK;eACxB;AACL,mBAAS,QAAQ;AACjB,iBAAO,KAAP,0BAAoC,OAAK,KAAK,OAA9C,wBAAwE,OAAxE,qBAA+F,MAAM;;aAElG;AACL,iBAAS,QAAQ;;;;AAzFzB,SAAA;EAAyC;ICA5B,8BAAb,SAAA,iBAAA;AAAA,kBAAA,8BAAA;AAAA,0CAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,gBAAA,KAAA,MAAA,iBAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UACU,cADV;AAAA,WAAA;;AAAA,MAAA,SAAA,6BAAA;AAAA,SAGE,OAAA,cAAK,iBAAkC,aAAgE;AAAA,QAAA,SAAA;AACrG,WAAO,IAAI,QAAQ,SAAC,SAAY;AAC9B,UAAM,WAAW,IAAI,oBAAoB,gBAAgB;AACzD,aAAK,cAAc,YAAY;AAC/B,aAAK,YAAY;AAEjB,eAAS,KAAK,OAAK,aAAa;AAC9B,YAAI,CAAC,QAAQ,OAAK,YAAY,KAAK;AACjC,mBAAS,KAAK,OAAK,YAAY;;;AAGnC,aAAK;AACL,cAAQ;;;AAfd,SAmBE,4BAAA,mCACE,iBACA,aACqC;AAAA,QAAA,SAAA;AACrC,WAAO,IAAI,QAAQ,SAAC,SAAS,QAAW;AACtC,UAAI;AACJ,UAAI,YAAY,oBAAoB,qBAAqB;AACvD,sBAAc,IAAI,QAAQ,SAAC,UAAY;AACrC,iBAAK,YAAY,YAAY;AAC7B,iBAAK;AACL,mBAAQ;;iBAED,YAAY,OAAO;AAC5B,sBAAc,OAAK,KAAK,iBAAiB;aACpC;AACL,eAAO;;AAET,UAAI,aAAa;AACf,oBAAY,KAAK,WAAM;AACrB,cAAM,SAAc;YAClB,WAAW,CAAC;YACZ,WAAW;cACT,OAAO;cACP,OAAO;;;AAIX,cAAM,WAAW,OAAK;AACtB,wBAAc,OAAK,WAAW,QAAQ,SAAC,MAAS;AAC9C,gBAAI,CAAE,UAAS,iBAAiB;AAAU;AAC1C,gBAAM,kBAAkB,IAAI,gBAAgB,OAAK,iBAAiB,SAAS;AAC3E,mBAAK,kBAAkB,KAAK;AAC5B,mBAAO,UAAU,KAAK;AACtB,mBAAO,UAAU,MAAM,QAAQ;cAC7B,OAAO,OAAO,UAAU,SAAS;;;AAGrC,kBAAQ;;;;;AAxDlB,SA8DE,UAAA,mBAAU;AACR,QAAI,KAAK,UAAU;AACjB,WAAK,KAAK,OAAO,KAAK,SAAS;;;AAhErC,SAoEE,WAAA,oBAAW;AAAA,QAAA,SAAA;AACT,QAAM,SAAS;AACf,QAAM,QAAQ,cAAc,KAAK;AACjC,UAAM,QAAQ,SAAC,MAAD;AAAA,aAAW,OAAO,QAAQ,OAAK,SAAS;;AACtD,WAAO;;AAxEX,SA2EE,OAAA,gBAAO;AAAA,QAAA,SAAA;AACL,QAAM,WAAW,KAAK;AACtB,WAAO,KAAK,KAAK,aAAa,QAAQ,SAAC,MAAS;AAC9C,UAAM,QAAQ,OAAK,YAAY;AAC/B,UAAI,QAAQ,QAAQ;AAClB,YAAM,kBAAkB,OAAK,gBAAgB,IAAI,MAAM;AACvD,YAAI,mBAAmB,2BAA2B,iBAAiB;AACjE,mBAAS,QAAQ,gBAAgB;AACjC,iBAAK,mBAAmB,KAAK;eACxB;AACL,mBAAS,QAAQ;AACjB,iBAAO,KAAP,kCACkC,OAAK,KAAK,OAD5C,wBACsE,OADtE,qBAC6F,MAAM;;aAGhG;AACL,iBAAS,QAAQ;;;;AA3FzB,SAAA;EAAiD;ICApC,wBAAb,SAAA,iBAAA;AAAA,kBAAA,wBAAA;AAAA,oCAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,gBAAA,KAAA,MAAA,iBAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UACU,cADV;AAAA,WAAA;;AAAA,MAAA,SAAA,uBAAA;AAAA,SAGE,OAAA,cAAK,iBAAkC,aAA0D;AAAA,QAAA,SAAA;AAC/F,WAAO,IAAI,QAAQ,SAAC,SAAY;AAC9B,UAAM,WAAW,IAAI,cAAc,gBAAgB;AACnD,aAAK,cAAc,YAAY;AAE/B,eAAS,KAAK,OAAK,aAAa;AAC9B,YAAI,CAAC,QAAQ,OAAK,YAAY,KAAK;AACjC,mBAAS,KAAK,OAAK,YAAY;;;AAGnC,aAAK,YAAY;AACjB,aAAK;AACL,cAAQ;;;AAfd,SAmBE,4BAAA,mCACE,iBACA,aACqC;AAAA,QAAA,SAAA;AACrC,WAAO,IAAI,QAAQ,SAAC,SAAS,QAAW;AACtC,UAAI;AACJ,UAAI,YAAY,oBAAoB,eAAe;AACjD,sBAAc,IAAI,QAAQ,SAAC,UAAY;AACrC,iBAAK,YAAY,YAAY;AAC7B,iBAAK;AACL,mBAAQ;;iBAED,YAAY,OAAO;AAC5B,sBAAc,OAAK,KAAK,iBAAiB;aACpC;AACL,eAAO;;AAET,UAAI,aAAa;AACf,oBAAY,KAAK,WAAM;AACrB,cAAM,SAAc;YAClB,WAAW,CAAC;YACZ,WAAW;cACT,OAAO;cACP,OAAO;;;AAIX,cAAM,WAAW,OAAK;AACtB,wBAAc,OAAK,WAAW,QAAQ,SAAC,MAAS;AAC9C,gBAAI,CAAE,UAAS,iBAAiB;AAAU;AAC1C,gBAAM,kBAAkB,IAAI,gBAAgB,OAAK,iBAAiB,SAAS;AAC3E,mBAAK,kBAAkB,KAAK;AAC5B,mBAAO,UAAU,KAAK;AACtB,mBAAO,UAAU,MAAM,QAAQ;cAC7B,OAAO,OAAO,UAAU,SAAS;;;AAGrC,kBAAQ;;;;;AAxDlB,SA8DE,UAAA,mBAAU;AACR,QAAI,KAAK,UAAU;AACjB,WAAK,KAAK,OAAO,KAAK,SAAS;;;AAhErC,SAoEE,WAAA,oBAAW;AAAA,QAAA,SAAA;AACT,QAAM,SAAS;AACf,QAAM,QAAQ,cAAc,KAAK;AACjC,UAAM,QAAQ,SAAC,MAAD;AAAA,aAAW,OAAO,QAAQ,OAAK,SAAS;;AACtD,WAAO;;AAxEX,SA2EE,OAAA,gBAAO;AAAA,QAAA,SAAA;AACL,QAAM,WAAW,KAAK;AACtB,WAAO,KAAK,KAAK,aAAa,QAAQ,SAAC,MAAS;AAC9C,UAAM,QAAQ,OAAK,YAAY;AAC/B,UAAI,QAAQ,QAAQ;AAClB,YAAM,kBAAkB,OAAK,gBAAgB,IAAI,MAAM;AACvD,YAAI,mBAAmB,2BAA2B,iBAAiB;AACjE,mBAAS,QAAQ,gBAAgB;AACjC,iBAAK,mBAAmB,KAAK;eACxB;AACL,mBAAS,QAAQ;AACjB,iBAAO,KAAP,0BAAoC,OAAK,KAAK,OAA9C,wBAAwE,OAAxE,qBAA+F,MAAM;;aAElG;AACL,iBAAS,QAAQ;;;;AAzFzB,SAAA;EAA2C;ICa9B,iBAAb,SAAA,iBAAA;AAAA,kBAAA,eAAA;AAAA,2BAAA;AAAA,WAAA,gBAAA,MAAA,MAAA,cAAA;;AAAA,MAAA,SAAA,cAAA;AAAA,SACE,OAAA,cAAK,iBAAkC,aAA0B,OAA4B;AAAA,QAAA,oBAAA,QAAA;AAC3F,QAAI,CAAC,CAAA,uBAAC,YAAY,WAAb,QAAA,uBAAA,UAAC,mBAAmB,cAAa;AACpC,+BAAyB;;AAE3B,WAAO,gBACJ,KAAU;MAAE,KAAK,YAAY;MAAK,MAAM,UAAU;OAClD,KAAK,SAAC,KAAQ;AACb,UAAM,OAAO;AACb,UAAI,YAAY,OAAO;AACrB,aAAK,cAAe,YAAY,MAAc;;AAEhD,YAAK,YAAY;;;AAZzB,SAgBE,4BAAA,mCACE,iBACA,aACA,OACqC;AAAA,QAAA,SAAA;AACrC,WAAO,IAAI,QAAQ,SAAC,SAAY;AAC9B,aAAK,KAAK,iBAAiB,aAAa,OAAO,KAAK,WAAM;AACxD,YAAM,OAAO,OAAK;AADsC,YAEhD,YAAc,KAAd;AACR,YAAM,eAAe;AACrB,YAAM,SAAS;UACb,WAAW,CAAC;UACZ,WAAW;YACT,OAAO;YACP,OAAO;cACL,aAAa;;;;AAInB,iBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,cAAM,WAAW,UAAU;AAC3B,cAAI,mBAAmB;AACvB,cAAI,OAAO;AAEX,cAAI,oBAAoB,aAAa;AACnC,+BAAmB,IAAI,oBAAoB,OAAK;AAChD,mBAAO;qBACE,oBAAoB,eAAe;AAC5C,+BAAmB,IAAI,sBAAsB,OAAK;AAClD,mBAAO;qBACE,oBAAoB,qBAAqB;AAClD,+BAAmB,IAAI,4BAA4B,OAAK;AACxD,mBAAO;iBACF;AACL,+BAAmB,IAAI,2BAA2B,OAAK;AACvD,mBAAO;;AAGT,iBAAK,mBAAmB,KAAK;AAC7B,uBAAa,KACX,iBAAiB,0BAA0B,iBAAiB;YAC1D;YACA,MAAM,SAAS;YACf,UAAU;;;AAIhB,gBAAQ,IAAI,cAAc,KAAK,SAAC,KAAQ;AACtC,cAAM,cAAc,OAAO,UAAU,MAAM;AAC3C,cAAI,QAAQ,SAAC,KAAQ;AACnB,gBAAM,eAAe,IAAI;AACzB,gBAAM,cAAc,IAAI,UAAU,aAAa;AAC/C,mBAAO,UAAU,KAAK;AACtB,yBAAa,QAAQ,OAAO,UAAU,SAAS;AAC/C,qBAAW,OAAO,aAAa,OAAO;AACpC,kBAAI,aAAa,MAAM,eAAe,MAAM;AAC1C,oBAAM,mBAAmB,aAAa,MAAM;AAC5C,oBAAM,kBAAkB,IAAI,UAAU,iBAAiB;AACvD,uBAAO,UAAU,KAAK;AACtB,iCAAiB,QAAQ,OAAO,UAAU,SAAS;;;AAGvD,wBAAY,KAAK;;AAEnB,kBAAQ;;;;;AAhFlB,SAsFE,UAAA,iBAAQ,aAA2B;AACjC,QAAI,aAAa;AACf,WAAK,KAAK,OAAO,YAAY;;;AAxFnC,SA4FE,OAAA,gBAAO;AACL,QAAM,WAAW,KAAK;AACtB,SAAK,cAAc,SAAS;;AA9FhC,SAiGE,SAAA,gBAAO,KAAa,OAAY;AAC9B,QAAI,QAAQ,eAAe;AACzB,WAAK,cAAc;WACd;AACL,WAAK,UAAU,OAAO;;;AArG5B,SAyGU,gBAAR,uBAAsB,WAAW;AAC/B,QAAI,CAAC,aAAa,CAAC,UAAU,QAAQ;AACnC;;AAEF,QAAM,OAAO,KAAK;AAClB,QAAM,SAAS,KAAK;AAEpB,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,UAAM,cAAc,KAAK,gBAAgB,IAAI,UAAU,GAAG;AAC1D,UAAI,aAAa;AACf,aAAK,mBAAmB,KAAK;AAC7B,aAAK,UAAU,KAAK,YAAY;aAC3B;AACL,eAAO,KAAP,mBAA6B,KAAK,KAAK,OAAvC,gDAAyF,UAAU,GAAG;;;AAG1G,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAM,OAAO,KAAK,mBAAmB,KAAK,OAAO,OAAO,SAAS,IAAI;AACrE,UAAI,MAAM;AACR,iBAAS,IAAI,GAAG,IAAI,OAAO,GAAG,WAAW,QAAQ,KAAK;AACpD,cAAM,YAAY,OAAO,GAAG,WAAW;AACvC,cAAM,eAAe,KAAK,aAAa;AACvC,cAAM,WAAW,KAAK,UAAU,KAAK,UAAU,SAAS,IAAI,UAAU;AACtE,cAAI,gBAAgB,YAAY,oBAAoB,UAAU;AAC5D,yBAAa,kBAAkB,GAAG;;;;;;AAjI9C,SAwIU,qBAAR,4BAA2B,OAAO,OAAO;AACvC,aAAS,IAAI,GAAG,KAAK,MAAM,QAAQ,KAAK;AACtC,UAAM,OAAO,MAAM;AACnB,UAAI,KAAK,cAAc,OAAO;AAC5B,eAAO;;;AAGX,WAAO;;AA/IX,SAAA;EAAkC;ACd3B,IAAM,gBAAgB;AACtB,gBAAgB,MAAc;AACnC,SAAO,SAAC,QAAgB;AACtB,kBAAc,QAAQ;;;IAGb,iBAAb,SAAA,iBAAA;AAAA,kBAAA,iBAAA;AAAA,6BAAA;AAAA,QAAA;AAAA,aAAA,OAAA,UAAA,QAAA,OAAA,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,QAAA,UAAA;;AAAA,YAAA,gBAAA,KAAA,MAAA,iBAAA,CAAA,MAAA,OAAA,UAAA;AAAA,UACU,SAAS;AADnB,WAAA;;AAAA,MAAA,SAAA,gBAAA;AAAA,SAGU,oBAAR,6BAA4B;AAC1B,QAAI,KAAK,QAAQ;AACf;;AAEF,SAAK,SAAS;AACb,WAAe,wBAAwB;MACtC,IAAI,OAAO,YAAY;MACvB,QAAQ,iBAAC,MAAiB;AACxB,eAAO,SAAC,QAAgB;AACtB,wBAAc,QAAQ;;;;;AAZhC,SAkBE,OAAA,cAAK,iBAAgB,aAA0B,OAAuC;AAAA,QAAA,SAAA;AACpF,SAAK;AACL,WAAO,IAAI,QAAQ,SAAC,SAAY;AAC9B,UAAM,SAAS;AACf,UAAM,UAAU,OAAO,MAAM;AAE7B,UAAI,CAAC,OAAK,gBAAgB,SAAS;AACjC,YAAM,YAAY,SAAS,cAAc;AACzC,kBAAU,cAAc;AACxB,eAAK,QAAQ;AACb,kBAAU,SAAS,WAAM;AACvB,cAAM,YAAa,OAAe;AAClC,mBAAS,KAAI,GAAG,KAAI,QAAQ,QAAQ,MAAK;AACvC,gBAAM,QAAO,QAAQ,IAAG;AACxB,mBAAK,YAAY,aAAa,UAAU;AACxC,0BAAc,SAAQ,OAAK;;AAE7B,kBAAQ;;AAEV,kBAAU,MAAM,YAAY;AAC5B,iBAAS,KAAK,YAAY;aACrB;AACL,iBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AAAA,cAAA;AACvC,cAAM,OAAO,QAAQ,GAAG;AACxB,wBAAc,QAAd,kBAAsB,MAAM,aAA5B,QAAA,mBAAA,SAAA,SAAsB,eAAe,QAAQ;;AAE/C,gBAAQ;;;;AA5ChB,SAiDE,UAAA,iBAAQ,aAA2B;AACjC,QAAI,aAAa;AACf,WAAK,MAAM,OAAO,YAAY;AAC9B,WAAK,MAAM,MAAM,YAAY;AAC7B,WAAK,MAAM,SAAS,YAAY;;;AArDtC,SAAA;EAAoC;ACNpC,IAAM,gBAAgB;EACpB,IAAI;EACJ,IAAI;EACJ,IAAI;EACJ,IAAI;EACJ,IAAI;EACJ,IAAI;;IAGO,yBAAb,SAAA,iBAAA;AAAA,kBAAA,yBAAA;AAAA,qCAAA;AAAA,WAAA,gBAAA,MAAA,MAAA,cAAA;;AAAA,MAAA,SAAA,wBAAA;AAAA,SACE,OAAA,cAAK,iBAAkC,aAA0B,OAA+C;AAAA,QAAA,QAAA;AAC9G,WAAO,IAAI,QAAQ,SAAC,SAAS,QAAW;AAAA,UAAA,oBAAA;AACtC,UAAM,YAAY;AAClB,UAAI,OAAO,UAAU;AACrB,UAAI,MAAK,gBAAgB,wBAAwB,gBAA7C,QAA6C,gBAA7C,UAAA,sBAA6C,YAAa,WAA1D,QAAA,uBAAA,UAAA,yBAA6C,mBAAoB,iBAAjE,QAAA,0BAAA,UAA6C,sBAAiC,aAAa,QAAQ;AACrG,YAAM,MAAM,MAAM,OAAO;AACzB,YAAM,eAAe,YAAY,MAAM,YAAY;AACnD,iBAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,cAAM,cAAc,aAAa;AACjC,cAAI,YAAY,cAAc,SAAS,IAAI,QAAQ,iBAAiB,YAAY,QAAQ;AACtF,qBAAW,OAAO,YAAY,OAAO;AACnC,kBAAI,YAAY,MAAM,eAAe,MAAM;AACzC,oBAAM,QAAQ,YAAY,MAAM;AAChC,0BAAU,cAAc,QAAQ,MAAM;;;AAG1C,oBAAQ,KAAK,YAAY;AACzB,mBAAO,UAAU;AACjB;;;;AAKN,UAAI,SAAS,UAAU,aAAa;AAClC,iBAAW,QAAO,YAAY,MAAM,QAAQ;AAC1C,cAAI,YAAY,MAAM,OAAO,eAAe,OAAM;AAChD,gBAAM,SAAQ,YAAY,MAAM,OAAO;AACvC,sBAAU,cAAc,SAAQ,OAAM;;;;AAK5C,sBACG,KAAK;QACJ,MAAM;QACN;SAED,KAAK,SAAC,KAAQ;AACb,cAAK,YAAY;AACjB,gBAAQ;SAET,MAAM,SAAC,GAAM;AACZ,eAAO;;;;AA3CjB,SAgDE,UAAA,mBAAU;AACR,QAAI,KAAK,UAAU;AACjB,WAAK,KAAK,OAAO,KAAK,SAAS;;;AAlDrC,SAAA;EAA4C;ICX/B,eAAb,SAAA,iBAAA;AAAA,kBAAA,eAAA;AAAA,2BAAA;AAAA,WAAA,gBAAA,MAAA,MAAA,cAAA;;AAAA,MAAA,SAAA,cAAA;AAAA,SACE,OAAA,cAAK,iBAAgB,aAAiD;AAAA,QAAA,QAAA;AACpE,WAAO,IAAI,QAAQ,SAAC,SAAY;AAC9B,YAAK,YAAY;AACjB,YAAK,YAAY,QAAQ,MAAK,SAAS;AACvC,YAAK,YAAY,OAAO,MAAK,SAAS;AACtC,cAAQ;;;AANd,SAUE,cAAA,qBAAY,KAAK,OAAO;AACtB,SAAK,MAAM,OAAO;;AAXtB,SAAA;EAAkC;;;;;;ICKrB,iBAAb,UAKG,WAAW;EAAE,OAAO;EAAgB,QAAQ;IAL/C,SA2CG,WAAW;EAAE,QAAQ;EAAwB,OAAO;IA3CvD,QAmEG,WAAW;EAAE,OAAO;EAAkB,QAAQ;IAnEjD,YAAA,YAAA,WAAA;AAGE,2BAAoB,OAAc;AAAA,SAAd,QAAA;AAAc,SAF1B,aAA0C;;AADpD,MAAA,SAAA,gBAAA;AAAA,SAMS,MADP,aACW,eAAgC;AAAA,QACjC,OAAyC,cAAzC,MAAY,SAA6B,cAAnC,MAAc,QAAqB,cAArB,OAAO,KAAc,cAAd,IAAI,QAAU,cAAV;AAEvC,QAAM,OAAO,KAAK,MAAM,YAAY,IAAI;AACxC,QAAM,qBAAqB,KAAK,mBAAmB;AACnD,QAAI,CAAC,oBAAoB;AACvB,aAAO,MAAS,OAAhB;AACA;;AAGF,QAAM,eAAe,KAAK,wBAAwB;AAClD,QAAM,UAAU,KAAK,aAAa;AAXO,QAYjC,UAAY,aAAZ;AACR,QAAI,YAAY,QAAW;AACzB,cAAQ,UAAU;;AAGpB,QAAI,SAAS,WAAW,SAAS,aAAa;AAE3C,cAAgB,KAAK;WACjB;AACL,eAAS,KAAK,cAAc;AAC1B,YAAI,aAAa,OAAO,MAAM;AAC5B,kBAAQ,KAAK,aAAa;;;;AAMhC,QAAM,eAAe,KAAK;AAC1B,QAAM,eAAe,aAAa,SAAS;AAC3C,wBAAoB,cAAc,cAAc;AAC/C,YAAgB,KAAK;AACtB,SAAK,WAAW,MAAM;AACtB,WAAO;;AAxCX,SA4CS,SADP,gBACc,IAAY,KAAa,OAAY;AACjD,QAAI,KAAK,IAAI,IAAI,YAAY,SAAS,SAAS;AAE7C,UAAI,SAAS,KAAK,aAAa,QAAQ;AACpC,aAAK,IAAI,IAAY,QAAQ,KAAK,KAAK,MAAM,gBAAgB,IAAI,MAAM,IAAI;aACvE;AACJ,aAAK,IAAI,IAAY,QAAQ,KAAK;;WAEhC;AACL,UAAI,SAAS,KAAK,aAAa,QAAQ;AACrC,aAAK,IAAI,IAAI,OAAO,KAAK,MAAM,gBAAgB,IAAI,MAAM,IAAI;aACxD;AACL,aAAK,IAAI,IAAI,OAAO;;;AAIxB,WAAO;MAAE;MAAI;MAAK;;;AA5DtB,SA+DS,MAAP,cAAW,IAAuB;AAChC,WAAO,KAAK,WAAW;;AAhE3B,SAoES,SADP,iBACc,IAAY;AACxB,QAAM,UAAU,KAAK,WAAW;AAChC,YAAQ;AACR,WAAO,KAAK,WAAW;AACvB,WAAO;;AAxEX,SA2EU,qBAAR,4BAA2B,MAAc;AACvC,QAAM,SAAS,KAAK,MAAM;AAE1B,QAAI,OAAO,OAAO,UAAU;AAC1B,aAAO,cAAc,OAAO;;AAG9B,QAAM,cAAc,OAAO,YAAY,MAAM;AAC7C,QAAI,CAAC,aAAa;AAChB,YAAM,IAAI,MAAS,OAAb;;AAER,WAAO;;AAtFX,SAyFU,0BAAR,iCAAgC,OAAc;AAC5C,QAAM,gBAAa,gBAAA,IAAQ;AAC3B,aAAS,KAAK,OAAO;AACnB,UAAM,OAAO,MAAM;AACnB,UAAI,QAAQ,KAAK,aAAa,OAAO;AACnC,YAAM,MAAM,KAAK,MAAM,gBAAgB,IAAI,KAAK;AAChD,YAAI,KAAK;AACP,wBAAc,KAAK,IAAI;eAClB;AACL,wBAAc,KAAK;AACnB,iBAAO,KAAP,sCAAgD,IAAhD,oBAAmE,KAAK;;;;AAI9E,WAAO;;AAvGX,SA0GU,eAAR,sBAAqB,MAAoB;AACvC,WAAO,KAAK,SAAS;;AA3GzB,SAAA;KAAA,WAAA,2BAAA,UAAA,WAAA,OAAA,CAAA,SAAA,OAAA,yBAAA,UAAA,WAAA,QAAA,UAAA,YAAA,2BAAA,UAAA,WAAA,UAAA,CAAA,SAAA,OAAA,yBAAA,UAAA,WAAA,WAAA,UAAA,YAAA,2BAAA,UAAA,WAAA,UAAA,CAAA,QAAA,OAAA,yBAAA,UAAA,WAAA,WAAA,UAAA,YAAA;;;;;;ICDa,cAAb,UAYG,WAAW;EAAE,OAAO;IAZvB,UAmBG,WAAW;EAAE,QAAQ;EAAqB,OAAO;IAnBpD,UAiCG,WAAW;EAAE,QAAQ;IAjCxB,YAAA,YAAA,WAAA;AAIE,wBAAoB,OAAc;AAAA,SAAd,QAAA;AAAc,SAH1B,UAAoC;AAGV,SAFjB,OAEiB;AAChC,SAAK,OAAO,IAAI,OAAO,KAAK,MAAM,QAAQ;;AAL9C,MAAA,SAAA,aAAA;AAAA,SAQS,gBAAP,yBAAuB;AACrB,SAAK,MAAM,OAAO,aAAa,YAAY,cAAc,KAAK;;AATlE,SAaS,MADP,aACW,YAAwB;AACjC,SAAK,OAAO;AACZ,SAAK,OAAO,WAAW,IAAI,WAAW,QAAQ,WAAW;AACzD,WAAO,KAAK,IAAI,WAAW;;AAhB/B,SAoBS,SADP,gBACc,IAAY,KAAa,OAAY;AACjD,SAAK,IAAI,IAAI,OAAO;AACpB,WAAO;MAAE;MAAI;MAAK;;;AAtBtB,SAyBS,MAAP,cAAW,IAAoB;AAC7B,WAAO,KAAK,QAAQ;;AA1BxB,SA6BS,QAAP,iBAAe;AACb,SAAK,UAAU;;AA9BnB,SAkCS,SADP,iBACc,IAAY;AACxB,SAAK,QAAQ,IAAI;AACjB,WAAO,KAAK,QAAQ;;AApCxB,SAuCU,SAAR,gBAAe,YAAgC;AAAA,QACrC,WAAkD,WAAlD,UAAU,WAAwC,WAAxC,UAAU,WAA8B,WAA9B,UAAU,QAAoB,WAApB,OAAO,KAAa,WAAb,IAAI,OAAS,WAAT;AACjD,QAAM,SAAS,IAAI,OAAO,KAAK,MAAM,QAAQ;AAC7C,WAAO,WAAW;AAClB,WAAO,UAAU,WAAW,IAAI,QAAQ,SAAS,IAAI,SAAS,IAAI,SAAS;AAC3E,WAAO,UAAU,WAAW,IAAI,QAAQ,SAAS,IAAI,SAAS,IAAI,SAAS;AAC3E,WAAO,UAAU,QAAQ,IAAI,QAAQ,MAAM,IAAI,MAAM,IAAI,MAAM;AAC9D,WAAe,KAAK;AACrB,SAAK,QAAQ,MAAM;AACnB,WAAO;;AAhDX,SAmDU,SAAR,gBAAe,SAAiB,UAAkB,OAAe;AAC/D,QAAM,QAAQ,KAAK,QAAQ;AAC3B,QAAM,SAAS,KAAK,QAAQ,aAAa,KAAK;AAC9C,WAAO,SAAS;AAEhB,QAAM,WAAW,OAAO;AACxB,QAAM,eAAe,SAAS,SAAS;AACvC,wBAAoB,UAAU,cAAc;;AA1DhD,SAAA;KAAA,WAAA,2BAAA,UAAA,WAAA,OAAA,CAAA,SAAA,OAAA,yBAAA,UAAA,WAAA,QAAA,UAAA,YAAA,2BAAA,UAAA,WAAA,UAAA,CAAA,UAAA,OAAA,yBAAA,UAAA,WAAA,WAAA,UAAA,YAAA,2BAAA,UAAA,WAAA,UAAA,CAAA,UAAA,OAAA,yBAAA,UAAA,WAAA,WAAA,UAAA,YAAA;;;;;ACUO,IAAM,iBAAiB;EAC5B,QAAQ;EACR,MAAM;EACN,SAAS;EAET,aAAa;EACb,aAAa;EACb,qBAAqB;EACrB,eAAe;EACf,oBAAoB;EAEpB,MAAM;;AAGR,IAAM,gBAA6C,IAAI;AACvD,SAAW,OAAO,gBAAgB;AAChC,MAAI,eAAe,eAAe,MAAM;AAChC,cAAU,eAAe;AAC/B,kBAAc,IAAI,SAAS;;;AADrB;AAKV,IAAM,kBAAkB;EACtB,gBADsB,wBACP,iBAAwC,MAA8B;AACnF,WAAO,IAAI,eAAe,MAAM;;;AAI7B,0BAA0B,MAAc,UAAe;AAC5D,MAAI,CAAC,eAAe,eAAe,OAAO;AACxC,mBAAe,QAAQ;AACvB,kBAAc,IAAI,UAAU;;;IAInB,wBAAb,UA8BG,WAAW;EAAE,QAAQ;IA9BxB,UAyDG,WAAW;EAAE,OAAO;EAAmB,QAAQ;IAzDlD,YAAA,YAAA,WAAA;AAME,kCAAoB,OAAc;AAAA,SAAd,QAAA;AAAc,SAL1B,cAAgD;AAKtB,SAJ1B,gBAAiD,IAAI;AAI3B,SAH1B,QAAQ;AAGkB,SAFjB,wBAEiB;AAChC,SAAK,wBAAwB,KAAK,MAAM,OAAO;;AAPnD,MAAA,SAAA,uBAAA;AAAA,SAUE,OAAA,cAAK,OAA6C;AAAA,QAAA,QAAA;AAChD,QAAM,WAAW,gBAAgB,eAAe,MAAM,MAAM;AAC5D,QAAM,cAAc,SAAS,KAAK,KAAK,MAAM,OAAO,iBAAiB,OAAO,KAAK;AACjF,SAAK,QAAQ,KAAK,IAAI,CAAC,MAAM,IAAI,KAAK;AACtC,gBAAY,KAAK,WAAM;AACrB,YAAK,YAAY,MAAM,MAAM;AAC7B,YAAK,cAAc,IAAI,UAAU,MAAM;;AAEzC,WAAO;;AAlBX,SAqBE,MAAA,aAAI,OAAkC;AAAA,QAAA,SAAA;AACpC,QAAM,WAAW,gBAAgB,eAAe,MAAM,MAAM;AAC5D,WAAO,IAAI,QAAQ,SAAC,SAAY;AAC9B,eAAS,0BAA0B,OAAK,MAAM,OAAO,iBAAiB,OAAO,OAAK,OAAO,KAAK,SAAC,QAAW;AACxG,gBAAQ,OAAK,qBAAqB,OAAO,WAAW,OAAO;;;;AAzBnE,SA+BE,SADA,gBACO,IAAoC;AAAA,QAAA,SAAA;AACzC,WAAO,IAAI,QAAQ,SAAC,SAAY;AAC9B,UAAM,WAAW,OAAK,YAAY;AAClC,UAAM,SAAS,CAAC;AAChB,UAAI,sBAAsB;AAC1B,aAAO,OAAK,YAAY;AACxB,UAAI,UAAU;AACZ,YAAM,WAAW,SAAS;AAC1B,iBAAS,QAAQ,GAAG,QAAQ,SAAS,QAAQ,SAAS;AACpD,cAAM,mBAAmB,SAAS;AAClC,cAAM,qBAAqB,OAAK,cAAc,IAAI;AAClD,cAAI,oBAAoB;AACtB,kCAAsB;AACtB,mBAAK,OAAO,oBAAoB,KAAK,SAAC,8BAAiC;AACrE,qBAAO,KAAP,MAAA,QAAe;AACf,sBAAQ;;;;;AAKhB,UAAI,CAAC,qBAAqB;AACxB,gBAAQ;;;;AApDhB,SA0DE,SADA,gBACO,IAAY,KAAa,OAAY;AAC1C,QAAM,WAAW,KAAK,IAAI;AAC1B,QAAI,UAAU;AACZ,eAAS,OAAO,KAAK;;AAEvB,WAAO;MACL;MACA;MACA;MACA;;;AAnEN,SAuEE,aAAA,oBAAW,IAAY,KAAa,OAAY;AAC9C,QAAM,WAAW,KAAK,IAAI;AAC1B,QAAI,UAAU;AACZ,eAAS,WAAW,KAAK;;;AA1E/B,SA8EE,MAAA,cAAI,IAA4B;AAC9B,WAAO,KAAK,YAAY;;AA/E5B,SAkFE,SAAA,kBAAgC;AAC9B,WAAO,aAAa,KAAK;;AAnF7B,SAsFU,uBAAR,8BAA6B,WAAW,WAAW;AAAA,QAAA,SAAA;AACjD,QAAM,oBAAyB;AAC/B,QAAM,WAAW,UAAU,UAAU;AACrC,QAAM,KAAE,KAAM,EAAE,KAAK;AACrB,SAAK,YAAY,MAAM;AACvB,SAAK,cAAc,IAAI,UAAU;AAEjC,sBAAkB,KAAK,KAAK;AAC5B,sBAAkB,OAAO,cAAc,IAAI,SAAS;AACpD,sBAAkB,OAAO,SAAS;AAClC,sBAAkB,QAAQ;AAC1B,aAAW,QAAO,UAAU,OAAO;AACjC,UAAI,UAAU,MAAM,eAAe,OAAM;AACvC,YAAM,WAAU,UAAU,MAAM;AAChC,YAAI,UAAS;AACX,cAAI,MAAM,QAAQ,WAAU;AAC1B,8BAAkB,MAAM,QAAO,SAAQ,IAAI,SAAC,OAAD;AAAA,qBAAW,OAAK,qBAAqB,WAAW;;iBACtF;AACL,8BAAkB,MAAM,QAAO,KAAK,qBAAqB,WAAW;;;;;AAK5E,WAAO;;AA7GX,gBAAA,wBAAA,CAAA;IAAA,KAAA;IAAA,KAgHE,gBAAuB;AACrB,aAAO,KAAK,MAAM,QAAQ;;KAjH9B;IAAA,KAAA;IAAA,KAoHE,gBAAoC;AAAA,UAAA;AAClC,aAAA,yBAAO,KAAK,MAAM,QAAQ,yBAA1B,OAAA,wBAAkD;;;AArHtD,SAAA;KAAA,WAAA,2BAAA,UAAA,WAAA,UAAA,CAAA,SAAA,OAAA,yBAAA,UAAA,WAAA,WAAA,UAAA,YAAA,2BAAA,UAAA,WAAA,UAAA,CAAA,UAAA,OAAA,yBAAA,UAAA,WAAA,WAAA,UAAA,YAAA;;;;IC7Ca,QAAb,UAyCG,WAAW;EAAE,OAAO;IAzCvB,WAAA,YAAA,SAAA,kBAAA;AAAA,kBAAA,QAAA;AAUE,kBAA4B,UAAmC,eAA8B;AAAA,QAAA;AAAA,QAAA;AAC3F,YAAA,iBAAA,KAAA,MAAM,SAAS,WAAf;AAD2F,UAAjE,WAAA;AAAiE,UAA9B,gBAAA;AAA8B,UAT7E,SAAiB;AAS4D,UAR7E,cAQ6E;AAAA,UAP7E,iBAO6E;AAAA,UANtF,kBAMsF;AAAA,UALtF,UAKsF;AAAA,UAJrF,SAIqF;AAAA,UAHtF,UAGsF;AAAA,UAFrF,QAEqF,wBAAA;AAE3F,UAAK,SAAS,SAAS;AACvB,UAAK,SAAS,SAAS;AACvB,UAAK,UAAU,SAAS;AACxB,aAAS,UAAT,oBAAmB,SAAS,YAA5B,OAAA,mBAAuC;AACvC,UAAK,cAAc,IAAI,YAAJ,wBAAA;AACnB,UAAK,iBAAiB,IAAI,eAAJ,wBAAA;AACtB,UAAK,YAAY,MAAM,MAAK,YAAY,IAAI,KAAK,MAAK;AACtD,UAAK,eAAe,MAAM,MAAK,eAAe,IAAI,KAAK,MAAK;AAC5D,UAAK,kBAAkB,IAAI,sBAAJ,wBAAA;AACvB,QAAI,SAAS,KAAK;AAChB,YAAK,OAAO,kBAAkB,SAAS;AACvC,YAAK,OAAO,aAAa;;AAbgE,WAAA;;AAV/F,MAAA,SAAA,OAAA;AAAA,SAmCS,eAAP,sBAAoB,QAAsB;AACxC,SAAK,SAAS;AAEd,SAAK;;AAtCT,SA0CU,OADR,iBAC6B;AAAA,QAAA,SAAA;AAC3B,WAAO,KAAK,gBAAgB,KAAK,WAAM;AACrC,aAAK;AACL,aAAK;AACL,aAAK;AACL,aAAK,YAAY;AACjB,aAAK;AACL,aAAK,cAAc,KAAK;;;AAjD9B,SAqDU,gBAAR,yBAAsC;AAAA,QAAA,SAAA;AAAA,QAAA,sBACZ,KAAK,OAArB,QAAA,SAD4B,wBAAA,SACnB,KADmB;AAGpC,QAAM,kBAAkB,aAAa,QAClC,OAAO,SAAC,OAAU;AACjB,UAAI,eAAe,MAAM,OAAO;AAC9B,eAAO;;AAET,cAAQ,KAAQ,MAAM,OAAtB,iCAAyD,MAAM,OAA/D;AACA,aAAO;OAER,IAAI,SAAC,OAAD;AAAA,aAAW,OAAK,gBAAgB,KAAK;;AAE5C,WAAO,QAAQ,IAAI;;AAlEvB,SAqEU,gBAAR,yBAAwB;AACtB,SAAK,gBAAgB,SAAS,QAAQ,SAAC,UAAa;AAClD,eAAS;;;AAvEf,SA2EU,gBAAR,yBAA8B;AAAA,QACpB,QAAU,KAAK,OAAf;AACR,QAAM,UAAU,KAAK;AACrB,YAAQ,IAAI,SAAC,OAAD;AAAA,aAAW,MAAM;OAAQ,QAAQ,KAAK,YAAY;;AA9ElE,SAiFU,qBAAR,8BAAmC;AAAA,QACzB,YAAc,KAAK,OAAnB;AACR,WAAO,KAAK,WACT,IAAI,SAAC,IAAD;AAAA,aAAA,gBAAA;QAAW;SAAO,UAAU;OAChC,QAAQ,KAAK,eAAe;;AArFnC,SAwFU,WAAR,oBAA6B;AAAA,QACnB,QAAU,KAAK,OAAf;AACR,QAAM,QAAQ,aAAa,OACxB,OAAO,SAAC,MAAD;AAAA,aAAU,CAAC,MAAM,KAAK;OAC7B,IAAI,SAAC,MAAD;AAAA,aAAU,KAAK;;AAEtB,QAAI,SAAS;AACb,QAAM,mBAAmB,2BAAC,QAAoB;AAC5C,eAAS,OAAO,OAAO;AACvB,aAAM,QAAQ,SAAC,IAAO;AACpB,YAAM,WAAW,MAAM,IAAI;AAC3B,oBAAY,kBAAiB;;;AAGjC,qBAAiB;AACjB,WAAO;;AAvGX,SA0GU,SAAR,kBAAiB;AACf,SAAK,gBAAgB,SAAS,QAAQ,SAAC,UAAa;AAClD,eAAS;;;AA5Gf,SAgHS,SAAP,gBAAc,SAAkB,eAA8C;AAC5E,QAAM,QAAQ,IAAI,OAAM,SAAS;AACjC,WAAO,MAAM,OAAO,KAAK,WAAM;AAC7B,cAAQ,YAAY,MAAM,OAAO;AACjC,aAAO;;;AApHb,gBAAA,QAAA,CAAA;IAAA,KAAA;IAAA,KA2BE,gBAAuC;AACrC,aAAO,KAAK,SAAS;;KA5BzB;IAAA,KAAA;IAAA,KA+BE,gBAAwC;AACtC,aAAO,KAAK;;;AAhChB,SAAA;EAA2B,kBAA3B,WAAA,2BAAA,SAAA,WAAA,QAAA,CAAA,SAAA,OAAA,yBAAA,SAAA,WAAA,SAAA,SAAA,YAAA;ACDO,wBAAwB,QAAQ;AAAA,MAAA,oBACG,OAAhC,WAAA,YAD6B,sBAAA,SACjB,KADiB,mBAAA,iBACG,OAAhB,QAAA,SADa,mBAAA,SACJ,KADI;AAErC,MAAM,MAAM,OAAO,KAAK;AACxB,MAAM,YAAY,OAAO,KAAK;AAE9B,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,IAAI,GAAG,EAAE,GAAG;AAC1C,qBAAiB,UAAU,IAAI,IAAI;;AAGrC,WAAS,KAAI,GAAG,KAAI,UAAU,QAAQ,KAAI,IAAG,EAAE,IAAG;AAChD,iBAAa,OAAO,UAAU,KAAI;;AAGpC,SAAO;;AAIT,0BAA0B,OAAO;AAC/B,MAAM,OAAO,OAAO,KAAK;AACzB,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,EAAE,GAAG;AAC3C,QAAM,IAAI,KAAK;AACf,QAAM,IAAI,MAAM;AAEhB,QAAI,MAAM,QAAQ,IAAI;AACpB,UAAI,CAAC,SAAS,gBAAgB,iBAAiB,QAAQ,OAAO,IAAI;AAChE,cAAM,KAAK,IAAI,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;iBAChC,EAAE,WAAW,GAAG;AACzB,cAAM,KAAK,IAAI,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;iBAClC,EAAE,WAAW,GAAG;AACzB,cAAM,KAAK,IAAI,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE;iBAC5B,EAAE,WAAW,GAAG;AACzB,cAAM,KAAK,IAAI,QAAQ,EAAE,IAAI,EAAE;;;;;AAMvC,sBAAsB,OAAiB;AAAA,MAAjB,UAAiB,QAAA;AAAjB,YAAa;;AACjC,MAAI,CAAC,OAAO;AACV;;AAEF,MAAM,OAAO,OAAO,KAAK;AACzB,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,KAAK;AAC3C,QAAM,MAAM,KAAK;AACjB,QAAM,QAAQ,MAAM;AAEpB,QAAI,QAAQ,iBAAiB,QAAQ,WAAW;AAC9C;;AAGF,QAAI,MAAM,QAAQ,QAAQ;AACxB,UAAI,CAAC,iBAAiB,gBAAgB,iBAAiB,aAAa,QAAQ,SAAS,IAAI;AACvF,cAAM,OAAO,IAAI,MAAM,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM;iBAClD,MAAM,WAAW,GAAG;AAC7B,cAAM,OAAO,IAAI,QAAQ,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM;iBACpD,MAAM,WAAW,GAAG;AAC7B,cAAM,OAAO,IAAI,QAAQ,MAAM,IAAI,MAAM,IAAI,MAAM;iBAC1C,MAAM,WAAW,GAAG;AAC7B,cAAM,OAAO,IAAI,QAAQ,MAAM,IAAI,MAAM;;;;;ACzDjD,IAAM,yBAAyB;IAElB,SAAb,WAAA;AAAA,MAAA,SAAA,QAAA;AAAA,SAMS,QAAP,gBAAa,SAAkC;AAAA,QAAA;AAC7C,QAAI,aAAO,QAAP,YAAO,SAAP,SAAA,mBAAA,QAAS,YAAT,QAAA,oBAAA,SAAA,SAAA,gBAAiB,aAAY,wBAAwB;AAAA,UAAA;AACvD,cAAQ,KAAR,oCACoC,aADpC,QACoC,YADpC,SAAA,SAAA,oBACoC,QAAS,YAD7C,QAAA,qBAAA,SAAA,SACoC,iBAAiB,WADrD,kEAC4H,yBAD5H;;AAIF,mBAAe,QAAQ;AACvB,WAAO,MAAM,OAAO,SAAS,KAAK;;AAbtC,SAgBE,WAAA,kBAAS,QAAgB;AACvB,SAAK,cAAc,SAAS;;AAjBhC,SAoBE,eAAA,wBAAe;AACb,SAAK,cAAc;;AAGrB,qBAAsB;AAAA,SAvBd,gBAA+B,IAAI;;AAD7C,UA0BS,SAAP,kBAAwB;AACtB,QAAM,UAAS,IAAI;AACnB,WAAO;;AA5BX,UAsCS,qBAAP,4BAA0B,WAAmB,YAAoC;AAC/E,QAAI,CAAC,KAAK,YAAY,YAAY;AAChC,WAAK,YAAY,aAAa;;AAEhC,cAAc,KAAK,YAAY,YAAY;;AA1C/C,SAAA;;AAAa,OAgCG,cAA0E;IAc7E,SAAS,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICjDhB,YAAb,WAAA;AAAA,MAAA,SAAA,WAAA;AAAA,SA8DE,qBAAA,4BAAmB,YAAoD;AAAA,QAApD,eAAoD,QAAA;AAApD,mBAAqB,OAAO;;AAC7C,QAAM,YAAY,KAAK;AACvB,QAAI,qBAAqB,mBAAmB;AAC1C,UAAM,QAAQ,UAAU;AACxB,UAAM,SAAS,UAAU;AACzB,WAAK,QAAQ,QAAQ;AACrB,WAAK,SAAS,SAAS;;;AAQ3B,sBAAY,WAAgD;AAAA,SA3E5D,aA2E4D;AAAA,SAzEpD,SAyEoD;AAAA,SAxEpD,UAwEoD;AAAA,SAvEpD,SAAkB,IAAI;AAwE5B,QAAM,QAAQ,UAAU;AACxB,QAAM,SAAS,UAAU;AACzB,SAAK,aAAa;AAClB,SAAK,SAAS;AACd,SAAK,UAAU;;AAjFnB,SAyFE,WAAA,kBAAS,GAAW,GAAiB;AACnC,SAAK,OAAO,SAAS,GAAG;AACxB,SAAK,QAAQ,KAAK;;AA3FtB,gBAAA,YAAA,CAAA;IAAA,KAAA;IAAA,KAUE,gBAAoB;AAClB,aAAO,KAAK;;IAXhB,KAcE,cAAU,OAAe;AACvB,UAAI,KAAK,WAAW,OAAO;AACzB,aAAK,WAAW,QAAQ;AACxB,aAAK,SAAS;;;KAjBpB;IAAA,KAAA;IAAA,KAwBE,gBAAqB;AACnB,aAAO,KAAK;;IAzBhB,KA4BE,cAAW,OAAe;AACxB,UAAI,KAAK,YAAY,OAAO;AAC1B,aAAK,WAAW,SAAS;AACzB,aAAK,UAAU;;;KA/BrB;IAAA,KAAA;IAAA,KAuCE,gBAAqB;AACnB,UAAM,YAAY,KAAK;AACvB,UAAI,qBAAqB,mBAAmB;AAC1C,aAAK,OAAO,SACT,UAAU,cAAc,mBAAoB,UAAU,OACtD,UAAU,eAAe,mBAAoB,UAAU;;AAG5D,aAAO,KAAK;;IA/ChB,KAkDE,cAAU,OAAgB;AACxB,UAAM,YAAY,KAAK;AACvB,UAAI,qBAAqB,mBAAmB;AAC1C,kBAAU,MAAM,kBAAhB;AACA,kBAAU,MAAM,YAAhB,WAAqC,MAAM,IAA3C,OAAiD,MAAM,IAAvD;;;;AAtDN,SAAA;;ICEa,eAAb,WAAA;AA+CE,yBAAY,KAAoB;AAAA,SA9CxB,kBA8CwB;AAAA,SA7CxB,iBA6CwB;AAAA,SA5CxB,mBA4CwB;AAAA,SA1ChC,OA0CgC;AAAA,SAzChC,iBAyCgC;AAC9B,SAAK,OAAO;AACZ,SAAK,iBAAiB,IAAI;AAE1B,SAAK;AACL,SAAK;;AApDT,MAAA,SAAA,cAAA;AAAA,SA0DS,UAAP,iBAAe,gBAA2C;AACxD,WAAO,KAAK,eAAe,IAAI;;AA3DnC,SAiES,yCAAP,gDAA8C,cAA0D;AAAA,QAGpG,oBAeE,kCAfF,mBACA,sBAcE,kCAdF,qBACA,4BAaE,kCAbF,2BACA,8BAYE,kCAZF,6BAEA,iBAUE,kCAVF,gBAEA,UAQE,kCARF,SACA,wBAOE,kCAPF,uBAEA,uBAKE,kCALF,sBACA,wBAIE,kCAJF,uBAEA,oBAEE,kCAFF,mBACA,qBACE,kCADF;AAEF,QACG,gBAAgB,qBAAqB,uBAAuB,uBAC5D,gBAAgB,6BAA6B,gBAAgB,6BAC9D;AACA,aAAO,KAAK,QAAQ,iBAAiB;eAC5B,iBAAiB,gBAAgB;AAC1C,aAAO,KAAK,QAAQ,iBAAiB;eAC5B,gBAAgB,WAAW,gBAAgB,uBAAuB;AAC3E,aAAO,KAAK,QAAQ,iBAAiB;eAC5B,gBAAgB,wBAAwB,gBAAgB,uBAAuB;AACxF,aAAO,KAAK,QAAQ,iBAAiB;eAC5B,gBAAgB,qBAAqB,gBAAgB,oBAAoB;AAClF,aAAO,KAAK,QAAQ,iBAAiB;;AAEvC,WAAO;;AAlGX,SAkHU,OAAR,iBAAe;AACb,QAAM,MAAM,KAAK;AADJ,QAEL,WAAa,KAAK,IAAlB;AACR,QAAM,mBAAmB,KAAK,IAAI,iBAAiB,KAAK,KAAK;AAHhD,QAMX,sBA4BE,iBA5BF,qBACA,mBA2BE,iBA3BF,kBACA,mBA0BE,iBA1BF,kBACA,eAyBE,iBAzBF,cACA,oBAwBE,iBAxBF,mBACA,kBAuBE,iBAvBF,iBACA,iBAsBE,iBAtBF,gBACA,cAqBE,iBArBF,aAEA,OAmBE,iBAnBF,MACA,cAkBE,iBAlBF,aACA,MAiBE,iBAjBF,KACA,aAgBE,iBAhBF,YACA,OAeE,iBAfF,MACA,cAcE,iBAdF,aACA,QAaE,iBAbF,OACA,eAYE,iBAZF,cACA,OAWE,iBAXF,MACA,cAUE,iBAVF,aAEA,eAQE,iBARF,cACA,mBAOE,iBAPF,kBACA,qBAME,iBANF,oBACA,yBAKE,iBALF,wBACA,yBAIE,iBAJF,wBACA,mBAGE,iBAHF,kBACA,uBAEE,iBAFF,sBACA,2BACE,iBADF;AAEF,QAAI,IAAI,qBAAqB,YAAY,CAAC,CAAC,iBAAiB;AAC5D,QAAI,IAAI,kBAAkB,YAAY,CAAC,CAAC,iBAAiB;AACzD,QAAI,IAAI,kBAAkB,YAAY,CAAC,CAAC,iBAAiB;AACzD,QAAI,IAAI,cAAc,YAAY,CAAC,CAAC,iBAAiB;AACrD,QAAI,IAAI,mBAAmB,YAAY,CAAC,CAAC,iBAAiB;AAC1D,QAAI,IAAI,iBAAiB,YAAY,CAAC,CAAC,iBAAiB;AACxD,QAAI,IAAI,gBAAgB;AACxB,QAAI,IAAI,aAAa,YAAY,CAAC,CAAC,iBAAiB;AACpD,QAAI,IAAI,cAAc,YAAY,CAAC,CAAC,iBAAiB;AACrD,QAAI,IAAI,kBAAkB,YAAY,CAAC,CAAC,iBAAiB;AACzD,QAAI,IAAI,oBAAoB,CAAC,CAAC,iBAAiB;AAC/C,QAAI,IAAI,wBAAwB,YAAY,CAAC,CAAC,iBAAiB;AAC/D,QAAI,IACF,kBACC,YAAY,CAAC,CAAC,iBAAiB,qBAAsB,CAAC,CAAC,iBAAiB;AAE3E,QAAI,IACF,sBACC,YAAY,CAAC,CAAC,iBAAiB,qBAAsB,CAAC,CAAC,iBAAiB;AAE3E,QAAI,IAAI,0BAA0B,CAAC,CAAC,iBAAiB;AAErD,QAAI,IAAI,MAAM,CAAC,CAAE,kBAAiB,SAAS,iBAAiB;AAC5D,QAAI,IAAI,KAAK,CAAC,CAAE,kBAAiB,QAAQ,iBAAiB;AAC1D,QAAI,IAAI,MAAM,CAAC,CAAE,kBAAiB,SAAS,iBAAiB;AAC5D,QAAI,IAAI,OAAO,CAAC,CAAE,kBAAiB,UAAU,iBAAiB;AAC9D,QAAI,IAAI,MAAM,CAAC,CAAE,kBAAiB,SAAS,iBAAiB;;AA/KhE,SA0LU,sBAAR,6BAA4B,gBAAkC,UAA6C;AACzG,QAAM,MAAM,KAAK;AACjB,QAAM,KAAK,IAAI;AACf,QAAI,MAAM;AAEV,QAAK,MAAM,IAAI,iBAAiB,iBAAkB;AAChD,eAAS,UAAS,UAAU;AAC1B,YAAM,gBAAe,SAAS;AAC9B,YAAM,eAAe,IAAI;AAGzB,YAAI,iBAAJ,QAAI,iBAAJ,UAAI,aAAc,MAAM;AACtB,aAAG,UAAS,aAAa,KAAK;eACzB;AACL,aAAG,UAAS;;;;;AAxMtB,SA8MU,yBAAR,kCAAiC;AAAA,QAE7B,eAQE,iBARF,cACA,oBAOE,iBAPF,mBACA,kBAME,iBANF,iBACA,cAKE,iBALF,aACA,2BAIE,iBAJF,0BACA,mBAGE,iBAHF,kBACA,uBAEE,iBAFF,sBACA,yBACE,iBADF;AAT6B,QAWvB,WAAa,KAAK,IAAlB;AAER,QAAI,CAAC,UAAU;AACb,WAAK,oBAAoB,cAAc;QACrC,mBAAmB;;AAErB,WAAK,oBAAoB,mBAAmB;QAC1C,mBAAmB;QACnB,mBAAmB;QACnB,eAAe;QACf,iBAAiB;;AAEnB,WAAK,oBAAoB,iBAAiB;QACxC,qBAAqB;QACrB,uBAAuB;QACvB,qBAAqB;;AAEvB,WAAK,oBAAoB,aAAa;QACpC,kBAAkB;;AAEpB,UAAM,QAAQ;AACd,UAAI,KAAK,QAAQ,iBAAiB,cAAc;AAC9C,YAAM,iBAAiB,KAAK;AAC5B,iBAAS,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACvC,eAAK,KAAM,OAAK,qBAAoB,KAAzB,qBAAmD,IAAnD;AACX,gBAAK,gBAAe,KAApB,gBAAyC,IAAzC;;AAEF,aAAK,oBAAoB,aAAzB,gBAAA;UACE,aAAa;WACV;;AAGP,WAAK,oBAAoB,kBAAkB;QACzC,YAAY;;AAEd,WAAK,oBAAoB,sBAAsB;QAC7C,SAAS;;AAEX,WAAK,oBAAoB,wBAAwB;QAC/C,SAAS;;;AAIb,SAAK,oBAAoB,0BAA0B;MACjD,4BAA4B;;;AArQlC,gBAAA,eAAA,CAAA;IAAA,KAAA;IAAA,KAQE,gBAAqB;AACnB,UAAI,CAAC,KAAK,iBAAiB;AACzB,YAAI,KAAK,QAAQ,iBAAiB,cAAc;AAC9C,eAAK,kBAAkB,KAAK,KAAK,GAAG,aAAa,KAAK,KAAK,GAAG;eACzD;AACL,eAAK,kBAAkB;;;AAG3B,aAAO,KAAK;;KAhBhB;IAAA,KAAA;IAAA,KAsBE,gBAA4B;AAC1B,UAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,MAAM,KAAK,KAAK,iBAAiB,iBAAiB;AACxD,aAAK,iBAAiB,MAAM,KAAK,KAAK,GAAG,aAAa,IAAI,kCAAkC;;AAE9F,aAAO,KAAK;;KA3BhB;IAAA,KAAA;IAAA,KAiCE,gBAA8B;AAC5B,UAAI,CAAC,KAAK,kBAAkB;AAC1B,YAAM,KAAK,KAAK,KAAK;AACrB,YAAM,UAAU,KAAK,QAAQ,iBAAiB;AAE9C,aAAK,mBAAmB,UAAU,GAAG,aAAa,GAAG,eAAe;;AAEtE,aAAO,KAAK;;KAxChB;IAAA,KAAA;IAAA,KA2CE,gBAAU;AACR,aAAO,KAAK;;KA5ChB;IAAA,KAAA;IAAA,KAwGE,gBAA+B;AAC7B,aACE,KAAK,QAAQ,iBAAiB,iBAC9B,KAAK,IAAI,aAAa,aAAa,KAAK,IAAI,GAAG,kCAAkC;;;AA3GvF,SAAA;;ICFa,eAAb,WAAA;AAIE,yBAAY,KAAoB;AAAA,SAHxB,MAGwB;AAAA,SAFxB,iBAEwB;AAC9B,SAAK,MAAM;AACX,SAAK,iBAAiB;;AAN1B,MAAA,SAAA,cAAA;AAAA,SAYE,mBAAA,0BAAiB,KAAuB;AACtC,QAAI,KAAK,eAAe,SAAS,QAAW;AAC1C,aAAO,KAAK,eAAe;;AAG7B,SAAK,eAAe,OAAO,KAAK,IAAI,GAAG,aAAa;AACpD,WAAO,KAAK,eAAe;;AAlB/B,SAAA;;ICSa,cAAb,WAAA;AASE,wBAAY,KAAoB,WAAsB;AAAA,SARnC,aAQmC;AAAA,SAP5C,iBAO4C;AAAA,SANnC,wBAMmC;AAAA,SAJ9C,KAI8C;AAAA,SAH9C,MAA2C,IAAI;AAGD,SAFrC,UAEqC;AACpD,SAAK,aAAa;AAClB,SAAK,wBAAwB,IAAI,QAAQ,iBAAiB;AAC1D,SAAK,UAAU,IAAI,QAAQ,iBAAiB;AAC5C,SAAK,KAAK,IAAI;;AAblB,MAAA,SAAA,aAAA;AAAA,SAmBE,OAAA,cAAK,eAAoB,cAA4B;AACnD,QAAM,KAAK,KAAK;AAChB,QAAM,YAAY,KAAK;AAEvB,QAAI,KAAK,SAAS;AAChB,UAAI,CAAC,KAAK,IAAI,IAAI,cAAc,KAAK;AACnC,aAAK,YAAY;;AAEnB,UAAM,MAAM,KAAK,IAAI,IAAI,cAAc;AACvC,SAAG,gBAAgB;WACd;AACL,WAAK,oBAAoB;;AAXwB,QAc3C,qBAAoD,UAApD,oBAAoB,gBAAgC,UAAhC,eAAe,eAAiB,UAAjB;AAdQ,QAe3C,WAA2B,aAA3B,UAAU,QAAiB,aAAjB,OAAO,QAAU,aAAV;AAEzB,QAAI,CAAC,eAAe;AAClB,UAAI,oBAAoB;AACtB,YAAI,KAAK,SAAS;AAChB,aAAG,aAAa,UAAU,OAAO,cAAc;eAC1C;AAAA,cACG,gBAAkB,mBAAmB,OAArC;AACR,aAAG,WAAW,GAAG,sBAAsB;AACvC,aAAG,aAAa,UAAU,OAAO,cAAc;AAC/C,aAAG,WAAW,GAAG,sBAAsB;;aAEpC;AACL,WAAG,WAAW,UAAU,OAAO;;WAE5B;AACL,UAAI,KAAK,uBAAuB;AAC9B,YAAI,oBAAoB;AACtB,cAAI,KAAK,SAAS;AAChB,eAAG,sBAAsB,UAAU,OAAO,cAAc,OAAO;iBAC1D;AAAA,gBACG,iBAAkB,mBAAmB,OAArC;AACR,eAAG,WAAW,GAAG,sBAAsB;AACvC,eAAG,sBAAsB,UAAU,OAAO,cAAc,OAAO;AAC/D,eAAG,WAAW,GAAG,sBAAsB;;eAEpC;AACL,aAAG,oBAAoB,UAAU,OAAO,OAAO;;aAE5C;AACL,eAAO,MAAM;;;AAKjB,QAAI,KAAK,SAAS;AAChB,SAAG,gBAAgB;WACd;AACL,WAAK;;;AAxEX,SA4EE,UAAA,mBAAU;AACR,QAAI,KAAK,SAAS;AAChB,UAAM,KAAK,KAAK;AAChB,WAAK,IAAI,QAAQ,SAAC,KAAQ;AACxB,WAAG,kBAAkB;;;;AAhF7B,SAwFY,sBAAV,6BAA8B,eAAoB;AAChD,QAAM,KAAK,KAAK;AAChB,QAAM,YAAY,KAAK;AACvB,QAAM,uBAAuB,UAAU;AAEvC,SAAK,iBAAiB;AACtB,QAAM,oBAAoB,cAAc;AACxC,QAAM,aAAa,UAAU;AAE7B,QAAI;AACJ,QAAI;AAEJ,aAAW,QAAQ,mBAAmB;AACpC,UAAM,MAAM,kBAAkB;AAC9B,UAAI,QAAQ;AAAI;AAEhB,UAAM,UAAU,WAAW;AAC3B,UAAI,SAAS;AAAA,YAAA,wBACgB,qBAAqB,QAAQ,eAAhD,SADG,sBACH,QAAQ,SADL,sBACK;AAChB,cAAM,OAAO;AAEb,YAAI,iBAAiB,KAAK;AACxB,yBAAe;AACf,aAAG,WAAW,GAAG,cAAc;;AAGjC,WAAG,wBAAwB;AAThB,YAAA,wBAUY,QAAQ,gBAAvB,OAVG,sBAUH,MAAM,OAVH,sBAUG;AACd,WAAG,oBAAoB,KAAK,MAAM,MAAM,QAAQ,YAAY,QAAQ,QAAQ;AAC5E,YAAI,KAAK,uBAAuB;AAC9B,aAAG,oBAAoB,KAAK,QAAQ;;AAEtC,aAAK,eAAe,KAAK;aACpB;AACL,eAAO,KAAK,iCAAiC;;;AAIjD,OAAG,WAAW,GAAG,cAAc;;AA9HnC,SAiIY,gBAAV,yBAA0B;AACxB,QAAM,KAAK,KAAK;AAChB,aAAS,IAAI,GAAG,IAAI,KAAK,eAAe,QAAQ,IAAI,GAAG,KAAK;AAC1D,SAAG,yBAAyB,KAAK,eAAe;;;AApItD,SAwIU,cAAR,qBAAoB,eAA0B;AAC5C,QAAM,KAAK,KAAK;AAChB,QAAM,MAAM,GAAG;AAGf,OAAG,gBAAgB;AALyB,QAOpC,qBAAuB,KAAK,WAA5B;AACR,QAAI,oBAAoB;AACtB,SAAG,WAAW,GAAG,sBAAsB,mBAAmB,OAAO;;AAEnE,SAAK,oBAAoB;AAGzB,OAAG,gBAAgB;AACnB,OAAG,WAAW,GAAG,sBAAsB;AACvC,SAAK;AAEL,SAAK,IAAI,IAAI,cAAc,IAAI;;AA1JnC,SAAA;;ICZa,iBAAb,WAAA;AAME,2BAAY,IAA2B;AAAA,SAL/B,MAK+B;AAAA,SAJ/B,cAAc;AAKpB,SAAK,MAAM;AACX,SAAK,cAAc;AAGnB,SAAK,YAAY,GAAG,oCAAoC,GAAG,aAAa,GAAG;AAC3E,SAAK,YAAY,GAAG,8BAA8B,GAAG,aAAa,GAAG;AACrE,SAAK,YAAY,GAAG,sBAAsB,GAAG,aAAa,GAAG;AAC7D,SAAK,YAAY,GAAG,kCAAkC,GAAG,aAAa,GAAG;AAGzE,OAAG,kBAAkB,GAAG,KAAK,GAAG,MAAM,GAAG,KAAK,GAAG;AACjD,OAAG,sBAAsB,GAAG,UAAU,GAAG;AACzC,OAAG,UAAU,MAAM,MAAM,MAAM;AAC/B,OAAG,WAAW,GAAG,GAAG,GAAG;AACvB,OAAG,QAAQ,GAAG;AAGd,OAAG,OAAO,GAAG;AACb,OAAG,UAAU,GAAG;AAChB,OAAG,UAAU;AAGb,OAAG,QAAQ,GAAG;AACd,OAAG,oBAAoB,GAAG,OAAO,GAAG,QAAQ,GAAG;AAC/C,OAAG,oBAAoB,GAAG,MAAM,GAAG,QAAQ,GAAG;AAC9C,OAAG,kBAAkB,GAAG,OAAO,GAAG,MAAM,GAAG,MAAM,GAAG;AACpD,OAAG,kBAAkB,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG;AACnD,OAAG,YAAY;AAGf,OAAG,OAAO,GAAG;AACb,OAAG,SAAS,GAAG;AACf,OAAG,QAAQ,GAAG;AACd,OAAG,cAAc,GAAG;;AAxCxB,MAAA,SAAA,gBAAA;AAAA,SA8CE,eAAA,sBAAa,OAAO;AAClB,WAAO,KAAK,YAAY;;AA/C5B,SAAA;;ICGa,WAAb,WAAA;AAQE,qBAAY,IAAI;AAAA,SAPR,KAOQ;AAAA,SANR,OAMQ;AAAA,SALR,iBAKQ;AAAA,SAJR,cAIQ;AAAA,SAHR,cAGQ;AAAA,SAFR,mBAEQ;AAAA,SADR,kBACQ;AACd,SAAK,KAAK;AAGV,SAAK,sBAAsB;AAE3B,SAAK,OAAO,GAAG;AACf,SAAK,iBAAiB;AACtB,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,SAAK,mBAAmB;;AAlB5B,MAAA,SAAA,UAAA;AAAA,SAqBE,mBAAA,0BAAiB,OAAO;AACtB,QAAM,cAAc,QAAQ,IAAI;AAChC,QAAI,KAAK,eAAe,KAAK,YAAY,UAAU,aAAa;AAC9D;;AAGF,SAAK,iBAAiB;AACtB,SAAK,cAAc,IAAI,aAAa;;AA5BxC,SA+BE,YAAA,mBAAU,OAAO;AACf,SAAK,cAAc;AACnB,SAAK,mBAAmB;AAGxB,QAAI,QAAQ,KAAK,gBAAgB;AAC/B,WAAK,iBAAiB;;;AArC5B,SAyCE,aAAA,oBAAW,cAAc,QAAQ,WAAW;AAC1C,SAAK;AACL,QAAI,KAAK,mBAAmB,KAAK,gBAAgB;AAC/C,aAAO,KAAK;AACZ;;AAGF,QAAM,QAAQ;AAEd,QAAM,IAAI,OAAO;AACjB,QAAM,IAAI,OAAO;AACjB,QAAM,IAAI,OAAO,IAAI,OAAO;AAC5B,QAAM,IAAI,OAAO,IAAI,OAAO;AAE5B,SAAK,YAAY,aAAa,SAAS,IAAI,QAAQ,GAAG,IAAI;AAC1D,SAAK,YAAY,aAAa,YAAY,IAAI,QAAQ,GAAG,IAAI;AAC7D,SAAK,YAAY,aAAa,aAAa,IAAI,QAAQ,GAAG,IAAI;AAE9D,SAAK,YAAY,aAAa,aAAa,IAAI,QAAQ,GAAG,IAAI;AAC9D,SAAK,YAAY,aAAa,UAAU,IAAI,QAAQ,GAAG,IAAI;AAC3D,SAAK,YAAY,aAAa,SAAS,IAAI,QAAQ,GAAG,IAAI;;AA7D9D,SAgEE,UAAA,iBAAQ,eAAe;AACrB,QAAM,YAAY,KAAK,cAAc;AACrC,QAAI,aAAa;AAAG;AAEpB,QAAI,KAAK,KAAK;AACd,OAAG,WAAW,GAAG,sBAAsB;AACvC,OAAG,WAAW,GAAG,cAAc,KAAK;AACpC,OAAG,WAAW,GAAG,cAAc,KAAK,aAAa,GAAG;AAEpD,QAAM,oBAAoB,cAAc;AACxC,aAAW,KAAK,mBAAmB;AACjC,UAAM,WAAW,kBAAkB;AACnC,UAAM,SAAS,KAAK,gBAAgB;AACpC,SAAG,oBAAoB,UAAU,OAAO,MAAM,OAAO,MAAM,OAAO,YAAY,OAAO,QAAQ,OAAO;AACpG,SAAG,wBAAwB;;AAG7B,OAAG,WAAW,GAAG,WAAW,GAAG;AAE/B,OAAG,WAAW,GAAG,sBAAsB;AACvC,OAAG,WAAW,GAAG,cAAc;AAE/B,aAAW,MAAK,mBAAmB;AACjC,SAAG,yBAAyB,kBAAkB;;;AAvFpD,SA2FE,wBAAA,+BAAsB,IAAI;AACxB,QAAM,eAAgB,KAAI,IAAI,KAAK;AACnC,QAAM,SAAc;AACpB,WAAO,OAAO;AACd,WAAO,OAAO;AACd,WAAO,SAAS;AAEhB,QAAM,QAAa;AACnB,UAAM,OAAO;AACb,UAAM,OAAO;AACb,UAAM,SAAS,IAAI;AAEnB,QAAM,WAAgB;AACtB,aAAS,OAAO;AAChB,aAAS,OAAO;AAChB,aAAS,SAAS,IAAI;AAEtB,SAAK,kBAAkB;MAAE,OAAO;MAAQ,MAAM;MAAO,SAAS;;AAC9D,aAAW,KAAK,KAAK,iBAAiB;AACpC,UAAM,MAAM,KAAK,gBAAgB;AACjC,UAAI,OAAO,GAAG;AACd,UAAI,aAAa;AACjB,UAAI,SAAS;;;AAjHnB,SAqHE,cAAA,qBAAY,KAAc,IAAa,OAAgB;AACrD,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAGhB,OAAG,MAAM,IAAI;AACb,OAAG,KAAK,KAAK,IAAI;AACjB,OAAG,KAAK,KAAK,IAAI;AAGjB,OAAG,KAAK,KAAK,GAAG;AAChB,OAAG,KAAK,KAAK,GAAG;AAGhB,OAAG,KAAK,KAAK,MAAM;AACnB,OAAG,KAAK,KAAK,MAAM;AACnB,OAAG,KAAK,KAAK,MAAM;AACnB,OAAG,KAAK,KAAK,MAAM;AAGnB,SAAK,eAAe;;AAzIxB,SA4IE,WAAA,oBAAW;AACT,QAAI,KAAK,MAAM;AACb,WAAK,GAAG,aAAa,KAAK;AAC1B,WAAK,OAAO;;;AA/IlB,SAAA;;ACFA,IAAM,mBAAgB;AAqBtB,IAAM,uBAAoB;AAgB1B,OAAO,OAAO,UAAU,kBAAkB;IClC7B,kBAAb,WAAA;AAOE,4BAAY,KAAK;AAAA,SANT,MAMS;AAAA,SALT,gBAKS;AAAA,SAJT,iBAIS;AAAA,SAHT,YAGS;AAAA,SAFT,UAES;AACf,SAAK,MAAM,IAAI;AAEf,SAAK,gBAAgB;AACrB,SAAK,iBAAiB;AAEtB,SAAK,YAAY,IAAI,SAAS,IAAI;AAElC,SAAK,UAAU;;AAfnB,MAAA,SAAA,iBAAA;AAAA,SAkBE,QAAA,eAAM,QAAgB,UAAoB;AACxC,QAAI,KAAK,cAAc,WAAW,GAAG;AACnC;;AAGF,QAAI,CAAC,KAAK,gBAAgB;AACxB,aAAO,MAAM;AACb;;AAGF,QAAM,eAAe,SAAS;AAC9B,iBAAa,WAAW,aAAa,KAAK;AAC1C,iBAAa,UAAU,WAAW,KAAK,QAAQ;AAC/C,iBAAa,UAAU,iBAAiB,KAAK,QAAQ;AAGrD,QAAM,gBAAgB,YAAY;AAClC,kBAAc;AAGd,QAAM,UAAU,SAAS,OAAO,kBAAkB,QAAQ;AAC1D,QAAI,CAAC,QAAQ,SAAS;AACpB;;AAGF,YAAQ;AACR,YAAQ;AACR,YAAQ,UAAU,QAAQ,sBAAsB;AAGhD,aAAS,YAAY,OAAO;AAE5B,SAAK,UAAU,UAAU,KAAK,cAAc;AAC5C,aAAS,IAAI,GAAG,MAAM,KAAK,cAAc,QAAQ,IAAI,KAAK,KAAK;AAC7D,UAAM,eAAe,KAAK,cAAc,GAAG;AAC3C,UAAM,SAAS,KAAK,cAAc,GAAG;AACrC,UAAM,YAAY,KAAK,cAAc,GAAG;AACxC,WAAK,UAAU,WAAW,cAAc,QAAQ;;AAElD,SAAK,UAAU,QAAQ;AAEvB,SAAK,gBAAgB;AACrB,SAAK,iBAAiB;AACtB,SAAK,UAAU;;AA7DnB,SAgEE,WAAA,kBAAS,SAAS,YAAY,QAAgB;AAC5C,QAAI,KAAK,mBAAmB,MAAM;AAChC,aAAO;;AAET,WAAO,YAAY,KAAK,kBAAkB,WAAW,KAAK;;AApE9D,SAuEE,aAAA,oBAAW,UAAoB,cAAc,QAAQ,WAAW,SAAS,YAAY,QAAgB;AACnG,QAAI,CAAC,KAAK,SAAS,SAAS,YAAY,SAAS;AAC/C,WAAK,MAAM,OAAO,QAAQ;;AAG5B,SAAK,iBAAiB;AACtB,SAAK,UAAU;AACf,SAAK,cAAc,KAAK;MAAE;MAAc;MAAQ;;;AA9EpD,SAiFE,WAAA,oBAAW;AACT,SAAK,UAAU;;AAlFnB,SAAA;;ICqBY;UAAA,YAAA;AAAA,aAAA,WAAA,UAAA,KAAA;AAAA,aAAA,WAAA,YAAA,KAAA;AAAA,aAAA,WAAA,YAAA,KAAA;GAAA,aAAA,aAAA;IAoBC,gBAAb,WAAA;AAkBE,0BAAY,SAAoC;AAAA,QAApC,YAAoC,QAAA;AAApC,gBAAgC;;AAAI,SAjBhD,eAiBgD;AAAA,SAfxC,WAewC;AAAA,SAdxC,MAcwC;AAAA,SAbxC,gBAawC;AAAA,SAZxC,cAYwC;AAAA,SAXxC,iBAWwC;AAAA,SAVxC,cAUwC;AAAA,SATxC,YASwC;AAAA,SAPxC,oBAOwC;AAAA,SANxC,kBAAkC,IAAI,MAAM;AAOlD,SAAK,WAAW;;AAnBpB,MAAA,SAAA,eAAA;AAAA,SAsBE,OAAA,eAAK,QAAgB;AACnB,QAAM,SAAS,KAAK;AACpB,QAAM,YAAa,OAAqB;AACxC,QAAM,YAAY,OAAO,aAAa,UAAU;AAChD,QAAI;AAEJ,QAAI,aAAa,UAAU,QAAQ,aAAa,UAAU,QAAQ;AAChE,WAAK,UAAU,WAAW,UAAU;AACpC,UAAI,CAAC,MAAM,qBAAqB,mBAAmB;AACjD,aAA6B,UAAU,WAAW,uBAAuB;;AAE3E,WAAK,YAAY;;AAGnB,QAAI,CAAC,IAAI;AACP,UAAI,aAAa,UAAU,QAAQ,aAAa,UAAU,QAAQ;AAChE,aAA6C,UAAU,WAAW,SAAS;AAC3E,YAAI,CAAC,MAAM,qBAAqB,mBAAmB;AACjD,eAA6C,UAAU,WAAW,sBAAsB;;AAE1F,aAAK,YAAY;;;AAIrB,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM;;AAGlB,SAAK,MAAM;AACX,SAAK,gBAAgB,IAAI,eAAe;AACxC,SAAK,cAAc,IAAI,aAAa;AACpC,SAAK,cAAc,IAAI,aAAa;AAEpC,SAAK,WAAW;;AAvDpB,SA0DE,0BAAA,iCAAwB,WAA0C;AAChE,WAAO,IAAI,YAAY,MAAM;;AA3DjC,SA0EE,mBAAA,0BAAiB,KAAK;AACpB,WAAO,KAAK,YAAY,iBAAiB;;AA3E7C,SA8EE,UAAA,iBAAQ,gBAAkC;AACxC,WAAO,KAAK,WAAW,QAAQ;;AA/EnC,SAkFE,yCAAA,gDAAuC,MAAc;AACnD,WAAO,KAAK,WAAW,uCAAuC;;AAnFlE,SA0FE,WAAA,kBAAS,GAAG,GAAG,OAAO,QAAQ;AAG5B,QAAM,KAAK,KAAK;AAChB,OAAG,SAAS,GAAG,GAAG,sBAAsB,IAAI,QAAQ,OAAO;;AA9F/D,SAiGE,YAAA,mBAAU,GAAG,GAAG,GAAG,GAAG;AACpB,SAAK,IAAI,UAAU,GAAG,GAAG,GAAG;;AAlGhC,SAqGE,oBAAA,2BAAkB,QAAgB,WAAsB,YAAqB;AAC3E,QAAM,KAAK,KAAK;AAChB,QAAM,kBAAkB,OAAO;AAF4C,QAKnD,iBAIpB,gBALF,WACE,iBAAoB,gBAEM,oBAE1B,gBAFF,WAAc,cACa,mBACzB,gBADF,aAAgB;AAGlB,QAAI,aAAa;AACjB,QAAI,aAAa;AACjB,QAAI,eAAe;AAEnB,YAAQ;WACD,UAAU;AACb,WAAG,WAAW,WAAW,GAAG,WAAW,GAAG,WAAW,GAAG,WAAW;AACnE,qBAAa,aAAa;AAC1B;WACG,UAAU;AACb,qBAAa;AACb;WACG,UAAU;AACb,WAAG,WAAW,WAAW,GAAG,WAAW,GAAG,WAAW,GAAG,WAAW;AACnE,qBAAa;AACb;WACG,UAAU;AACb,WAAG,MAAM,GAAG;AACZ,uBAAe;AACf;WACG,UAAU;AACb,WAAG,WAAW,WAAW,GAAG,WAAW,GAAG,WAAW,GAAG,WAAW;AACnE,qBAAa,aAAa,eAAe;AACzC;;AAGJ,QAAI,cAAc,mBAAmB,eAAe,KAAK;AACvD,SAAG,UAAU,MAAM,MAAM,MAAM;AAC/B,sBAAgB,WAAW,iBAAiB,iBAAiB,eAAe;;AAG9E,QAAI,cAAc,sBAAsB,MAAM;AAC5C,SAAG,UAAU;AACb,sBAAgB,WAAW,eAAe;;AAG5C,QAAI,gBAAgB,qBAAqB,KAAM;AAC7C,SAAG,YAAY;AACf,sBAAgB,aAAa,YAAY;;AAG3C,OAAG,MACA,cAAa,GAAG,mBAAmB,KACjC,cAAa,GAAG,mBAAmB,KACnC,gBAAe,GAAG,qBAAqB;;AA5JhD,SAgKE,gBAAA,uBAAc,WAAsB,cAA4B,eAAoB;AAElF,QAAI,WAAW;AAEb,gBAAU,MAAM,eAAe;WAC1B;AACL,aAAO,MAAM;;;AAtKnB,SA0KE,aAAA,oBAAW,UAAU,cAAc,QAAQ,WAAW,SAAS,YAAY,QAAgB;AACzF,QAAI,CAAC,KAAK,gBAAgB;AACxB,WAAK,iBAAiB,IAAI,gBAAgB;;AAG5C,SAAK,eAAe,WAAW,UAAU,cAAc,QAAQ,WAAW,SAAS,YAAY;;AA/KnG,SAkLE,cAAA,qBAAY,QAAgB,UAAoB;AAC9C,QAAI,KAAK,gBAAgB;AACvB,WAAK,eAAe,MAAM,QAAQ;;;AApLxC,SAwLE,qBAAA,4BAAmB,cAA4B,QAAgB;AAC7D,QAAM,KAAK,KAAK;AAChB,QAAI,cAAc;AAChB,mBAAa;AADG,UAER,QAAkB,aAAlB,OAAO,SAAW,aAAX;AACf,SAAG,SAAS,GAAK,GAAK,OAAO;WACxB;AACL,SAAG,gBAAgB,GAAG,aAAa;AACnC,UAAM,WAAW,OAAO;AACxB,UAAM,SAAQ,GAAG;AACjB,UAAM,UAAS,GAAG;AAClB,WAAK,SAAS,SAAS,IAAI,QAAO,SAAS,IAAI,SAAQ,SAAS,IAAI,QAAO,SAAS,IAAI;;;AAnM9F,SAuME,mBAAA,0BAAiB,cAA4B;AAC3C,QAAI,cAAc;AAChB,UAAI,aAAa,kBAAkB;AACjC,qBAAa;AACb;;;;AA3MR,SAgNE,sBAAA,6BAAoB,cAA4B,UAA2B;AACzE,QAAI,cAAc;AAChB,mBAAa,qBAAqB;;;AAlNxC,SAsNE,UAAA,mBAAU;;AAtNZ,SAwNE,gBAAA,uBAAc,WAAyB;AACrC,QAAI,KAAK,sBAAsB,WAAW;AACxC,WAAK,IAAI,cAAc;AACvB,WAAK,oBAAoB;;;AA3N/B,SA+NE,cAAA,qBAAY,QAAgB,SAA6B;AACvD,QAAM,KAAK,KAAK;AAChB,QAAI,KAAK,gBAAgB,KAAK,oBAAoB,GAAG,cAAc,SAAS;AAC1E,SAAG,YAAY,QAAQ;AACvB,WAAK,gBAAgB,KAAK,oBAAoB,GAAG,YAAY;;;AAnOnE,gBAAA,gBAAA,CAAA;IAAA,KAAA;IAAA,KAcE,gBAAe;AACb,aAAO,KAAK;;KAfhB;IAAA,KAAA;IAAA,KA8DE,gBAAS;AACP,aAAO,KAAK;;KA/DhB;IAAA,KAAA;IAAA,KAkEE,gBAAmC;AACjC,aAAO,KAAK;;KAnEhB;IAAA,KAAA;IAAA,KAsEE,gBAA+B;AAC7B,aAAO,KAAK;;KAvEhB;IAAA,KAAA;IAAA,KAsFE,gBAA+B;AAC7B,aAAO,KAAK,WAAW;;;AAvF3B,SAAA;;ICzCa,cAAb,SAAA,SAAA;AAAA,kBAAA,cAAA;AAME,wBAAY,QAAsD,sBAA6C;AAC7G,QAAM,YAAY,IAAI,UACkB,OAAO,WAAW,WAAW,SAAS,eAAe,UAAU;AAEvG,QAAM,mBAAmB,IAAI,cAAc;AAJkE,WAM7G,QAAA,KAAA,MAAM,WAAW,qBAN4F;;AANjH,gBAAA,cAAA,CAAA;IAAA,KAAA;IAAA,KAkBE,gBAAwB;AACtB,aAAO,KAAK;;;AAnBhB,SAAA;EAAiC;;;ACcjC,OAAO,mBAAmB,MAAM;EAC9B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;IAIW,UAAO;AAEpB,QAAQ,IAAR,2BAAqC;",
  "names": []
}
